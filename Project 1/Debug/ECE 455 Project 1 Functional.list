
ECE 455 Project 1 Functional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e4  080072e4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080072e4  080072e4  000172e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072ec  080072ec  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080072f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041ec  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004258  20004258  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000df38  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028f0  00000000  00000000  0002e017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  00030908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a45  00000000  00000000  000316a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002402e  00000000  00000000  000320ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fa62  00000000  00000000  0005611b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9a3b  00000000  00000000  00065b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000041b8  00000000  00000000  0013f5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00143770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070e8 	.word	0x080070e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080070e8 	.word	0x080070e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000088 	.word	0x20000088
 8000dd8:	200000dc 	.word	0x200000dc

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b0bc      	sub	sp, #240	; 0xf0
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f000 ff49 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f903 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 f9f3 	bl	80011d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dee:	f000 f9bb 	bl	8001168 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000df2:	f000 f967 	bl	80010c4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of cars_array_mutex */
  osMutexDef(cars_array_mutex);
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  cars_array_mutexHandle = osMutexCreate(osMutex(cars_array_mutex));
 8000e02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fb8e 	bl	8003528 <osMutexCreate>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a64      	ldr	r2, [pc, #400]	; (8000fa0 <main+0x1c4>)
 8000e10:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_2_mutex */
  osMutexDef(traffic_rate_2_mutex);
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  traffic_rate_2_mutexHandle = osMutexCreate(osMutex(traffic_rate_2_mutex));
 8000e1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fb80 	bl	8003528 <osMutexCreate>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a5e      	ldr	r2, [pc, #376]	; (8000fa4 <main+0x1c8>)
 8000e2c:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_mutex */
  osMutexDef(light_status_mutex);
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  light_status_mutexHandle = osMutexCreate(osMutex(light_status_mutex));
 8000e3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fb72 	bl	8003528 <osMutexCreate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <main+0x1cc>)
 8000e48:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_1_mutex */
  osMutexDef(traffic_rate_1_mutex);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  traffic_rate_1_mutexHandle = osMutexCreate(osMutex(traffic_rate_1_mutex));
 8000e56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fb64 	bl	8003528 <osMutexCreate>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a52      	ldr	r2, [pc, #328]	; (8000fac <main+0x1d0>)
 8000e64:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of traffic_queue_1 */
  osMessageQDef(traffic_queue_1, 16, uint16_t);
 8000e66:	4b52      	ldr	r3, [pc, #328]	; (8000fb0 <main+0x1d4>)
 8000e68:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_1Handle = osMessageCreate(osMessageQ(traffic_queue_1), NULL);
 8000e72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fbf1 	bl	8003660 <osMessageCreate>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <main+0x1d8>)
 8000e82:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_queue_2 */
  osMessageQDef(traffic_queue_2, 16, uint16_t);
 8000e84:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <main+0x1d4>)
 8000e86:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_2Handle = osMessageCreate(osMessageQ(traffic_queue_2), NULL);
 8000e90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fbe2 	bl	8003660 <osMessageCreate>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <main+0x1dc>)
 8000ea0:	6013      	str	r3, [r2, #0]

  /* definition and creation of cars_array_queue */
  osMessageQDef(cars_array_queue, 16, uint32_t);
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <main+0x1e0>)
 8000ea4:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cars_array_queueHandle = osMessageCreate(osMessageQ(cars_array_queue), NULL);
 8000eae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fbd3 	bl	8003660 <osMessageCreate>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a40      	ldr	r2, [pc, #256]	; (8000fc0 <main+0x1e4>)
 8000ebe:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_queue */
  osMessageQDef(light_status_queue, 16, uint16_t);
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <main+0x1d4>)
 8000ec2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_status_queueHandle = osMessageCreate(osMessageQ(light_status_queue), NULL);
 8000ecc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fbc4 	bl	8003660 <osMessageCreate>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <main+0x1e8>)
 8000edc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ede:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <main+0x1ec>)
 8000ee0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ef2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fab5 	bl	8003468 <osThreadCreate>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <main+0x1f0>)
 8000f02:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_generat */
  osThreadDef(traffic_generat, TrafficGeneration, osPriorityIdle, 0, 128);
 8000f04:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <main+0x1f4>)
 8000f06:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  traffic_generatHandle = osThreadCreate(osThread(traffic_generat), NULL);
 8000f18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 faa2 	bl	8003468 <osThreadCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a2b      	ldr	r2, [pc, #172]	; (8000fd4 <main+0x1f8>)
 8000f28:	6013      	str	r3, [r2, #0]

  /* definition and creation of adjust_flow */
  osThreadDef(adjust_flow, AdjustFlow, osPriorityIdle, 0, 128);
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <main+0x1fc>)
 8000f2c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f30:	461d      	mov	r5, r3
 8000f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adjust_flowHandle = osThreadCreate(osThread(adjust_flow), NULL);
 8000f3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fa8f 	bl	8003468 <osThreadCreate>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <main+0x200>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_state */
  osThreadDef(light_state, LightState, osPriorityIdle, 0, 128);
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <main+0x204>)
 8000f52:	f107 0420 	add.w	r4, r7, #32
 8000f56:	461d      	mov	r5, r3
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  light_stateHandle = osThreadCreate(osThread(light_state), NULL);
 8000f64:	f107 0320 	add.w	r3, r7, #32
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fa7c 	bl	8003468 <osThreadCreate>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <main+0x208>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* definition and creation of sys_manage */
  osThreadDef(sys_manage, SysManage, osPriorityIdle, 0, 128);
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <main+0x20c>)
 8000f78:	1d3c      	adds	r4, r7, #4
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sys_manageHandle = osThreadCreate(osThread(sys_manage), NULL);
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fa6b 	bl	8003468 <osThreadCreate>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <main+0x210>)
 8000f96:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f98:	f002 fa5f 	bl	800345a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000f9c:	e7fe      	b.n	8000f9c <main+0x1c0>
 8000f9e:	bf00      	nop
 8000fa0:	200003a0 	.word	0x200003a0
 8000fa4:	200003a4 	.word	0x200003a4
 8000fa8:	200003a8 	.word	0x200003a8
 8000fac:	200003ac 	.word	0x200003ac
 8000fb0:	08007100 	.word	0x08007100
 8000fb4:	20000390 	.word	0x20000390
 8000fb8:	20000394 	.word	0x20000394
 8000fbc:	08007110 	.word	0x08007110
 8000fc0:	20000398 	.word	0x20000398
 8000fc4:	2000039c 	.word	0x2000039c
 8000fc8:	0800712c 	.word	0x0800712c
 8000fcc:	2000037c 	.word	0x2000037c
 8000fd0:	08007158 	.word	0x08007158
 8000fd4:	20000380 	.word	0x20000380
 8000fd8:	08007180 	.word	0x08007180
 8000fdc:	20000384 	.word	0x20000384
 8000fe0:	080071a8 	.word	0x080071a8
 8000fe4:	20000388 	.word	0x20000388
 8000fe8:	080071d0 	.word	0x080071d0
 8000fec:	2000038c 	.word	0x2000038c

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 f98d 	bl	800631e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <SystemClock_Config+0xcc>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <SystemClock_Config+0xd0>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001064:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106a:	2302      	movs	r3, #2
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800106e:	2307      	movs	r3, #7
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fcd8 	bl	8002a2c <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001082:	f000 fc17 	bl	80018b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	2302      	movs	r3, #2
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001092:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2105      	movs	r1, #5
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 ff39 	bl	8002f1c <HAL_RCC_ClockConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b0:	f000 fc00 	bl	80018b4 <Error_Handler>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3750      	adds	r7, #80	; 0x50
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_ADC1_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <MX_ADC1_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_ADC1_Init+0x98>)
 80010de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_ADC1_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <MX_ADC1_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_ADC1_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_ADC1_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_ADC1_Init+0x98>)
 8001126:	f000 fe19 	bl	8001d5c <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001130:	f000 fbc0 	bl	80018b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001134:	230d      	movs	r3, #13
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_ADC1_Init+0x98>)
 8001146:	f000 ffb7 	bl	80020b8 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001150:	f000 fbb0 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002dc 	.word	0x200002dc
 8001160:	40012000 	.word	0x40012000
 8001164:	0f000001 	.word	0x0f000001

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_SPI1_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI1_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI1_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI1_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ba:	f002 f89b 	bl	80032f4 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c4:	f000 fb76 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000324 	.word	0x20000324
 80011d0:	40013000 	.word	0x40013000

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <MX_GPIO_Init+0x134>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a45      	ldr	r2, [pc, #276]	; (8001308 <MX_GPIO_Init+0x134>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <MX_GPIO_Init+0x134>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <MX_GPIO_Init+0x134>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a3e      	ldr	r2, [pc, #248]	; (8001308 <MX_GPIO_Init+0x134>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <MX_GPIO_Init+0x134>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <MX_GPIO_Init+0x134>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a37      	ldr	r2, [pc, #220]	; (8001308 <MX_GPIO_Init+0x134>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <MX_GPIO_Init+0x134>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <MX_GPIO_Init+0x134>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <MX_GPIO_Init+0x134>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <MX_GPIO_Init+0x134>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <MX_GPIO_Init+0x134>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <MX_GPIO_Init+0x134>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <MX_GPIO_Init+0x134>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 8001276:	2200      	movs	r2, #0
 8001278:	f240 11c7 	movw	r1, #455	; 0x1c7
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_GPIO_Init+0x138>)
 800127e:	f001 fbbb 	bl	80029f8 <HAL_GPIO_WritePin>
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <MX_GPIO_Init+0x13c>)
 800128a:	f001 fbb5 	bl	80029f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Red_Light_Pin Amber_Light_Pin Green_Light_Pin Shift_Reg_Data_Pin
                           Shift_Reg_Clock_Pin Shift_Reg_Reset_Pin */
  GPIO_InitStruct.Pin = Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 800128e:	f240 13c7 	movw	r3, #455	; 0x1c7
 8001292:	617b      	str	r3, [r7, #20]
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4819      	ldr	r0, [pc, #100]	; (800130c <MX_GPIO_Init+0x138>)
 80012a8:	f001 fa0a 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012ac:	2304      	movs	r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4815      	ldr	r0, [pc, #84]	; (8001314 <MX_GPIO_Init+0x140>)
 80012c0:	f001 f9fe 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80012c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_GPIO_Init+0x13c>)
 80012de:	f001 f9ef 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_GPIO_Init+0x138>)
 80012fa:	f001 f9e1 	bl	80026c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40020400 	.word	0x40020400

08001318 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f002 f8ed 	bl	8003500 <osDelay>
 8001326:	e7fb      	b.n	8001320 <StartDefaultTask+0x8>

08001328 <TrafficGeneration>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TrafficGeneration */
void TrafficGeneration(void const * argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TrafficGeneration */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f002 f8e5 	bl	8003500 <osDelay>
 8001336:	e7fb      	b.n	8001330 <TrafficGeneration+0x8>

08001338 <AdjustFlow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AdjustFlow */
void AdjustFlow(void const * argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN AdjustFlow */
	uint16_t raw = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	83fb      	strh	r3, [r7, #30]
	/* Infinite loop */
	for(;;)
	{
		HAL_ADC_Start(&hadc1);
 8001344:	4826      	ldr	r0, [pc, #152]	; (80013e0 <AdjustFlow+0xa8>)
 8001346:	f000 fd4d 	bl	8001de4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800134a:	f04f 31ff 	mov.w	r1, #4294967295
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <AdjustFlow+0xa8>)
 8001350:	f000 fe1a 	bl	8001f88 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 8001354:	4822      	ldr	r0, [pc, #136]	; (80013e0 <AdjustFlow+0xa8>)
 8001356:	f000 fea2 	bl	800209e <HAL_ADC_GetValue>
 800135a:	4603      	mov	r3, r0
 800135c:	83fb      	strh	r3, [r7, #30]
		if(raw > 2400){
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001364:	d902      	bls.n	800136c <AdjustFlow+0x34>
			raw = 2400;
 8001366:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800136a:	83fb      	strh	r3, [r7, #30]
		}
		osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <AdjustFlow+0xac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	4618      	mov	r0, r3
 8001376:	f002 f8ef 	bl	8003558 <osMutexWait>
		osMessageGet(traffic_queue_1Handle, 0);
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <AdjustFlow+0xb0>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f002 f9d4 	bl	8003730 <osMessageGet>
		osMessagePut(traffic_queue_1Handle, raw, osWaitForever);
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <AdjustFlow+0xb0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	8bf9      	ldrh	r1, [r7, #30]
 800138e:	f04f 32ff 	mov.w	r2, #4294967295
 8001392:	4618      	mov	r0, r3
 8001394:	f002 f98c 	bl	80036b0 <osMessagePut>
		osMutexRelease(traffic_rate_1_mutexHandle);
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <AdjustFlow+0xac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 f929 	bl	80035f4 <osMutexRelease>

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <AdjustFlow+0xb4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f04f 31ff 	mov.w	r1, #4294967295
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 f8d4 	bl	8003558 <osMutexWait>
		osMessageGet(traffic_queue_2Handle, 0);
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <AdjustFlow+0xb8>)
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f9b9 	bl	8003730 <osMessageGet>
		osMessagePut(traffic_queue_2Handle, raw, osWaitForever);
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <AdjustFlow+0xb8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	8bf9      	ldrh	r1, [r7, #30]
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 f971 	bl	80036b0 <osMessagePut>
		osMutexRelease(traffic_rate_2_mutexHandle);
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <AdjustFlow+0xb4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 f90e 	bl	80035f4 <osMutexRelease>
		osDelay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f002 f891 	bl	8003500 <osDelay>
		HAL_ADC_Start(&hadc1);
 80013de:	e7b1      	b.n	8001344 <AdjustFlow+0xc>
 80013e0:	200002dc 	.word	0x200002dc
 80013e4:	200003ac 	.word	0x200003ac
 80013e8:	20000390 	.word	0x20000390
 80013ec:	200003a4 	.word	0x200003a4
 80013f0:	20000394 	.word	0x20000394

080013f4 <trafficGenerated>:
 * @brief Function implementing the light_state thread.
 * @param argument: Not used
 * @retval None
 */

int trafficGenerated(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
	uint16_t traffic = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	82fb      	strh	r3, [r7, #22]
	float scaled = 0;
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
	osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <trafficGenerated+0xc0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	4618      	mov	r0, r3
 800140e:	f002 f8a3 	bl	8003558 <osMutexWait>
	//int traffic = traffic_rate; //TODO: traffic_queue_0
	osEvent event = osMessageGet(traffic_queue_1Handle, 0);
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <trafficGenerated+0xc4>)
 8001414:	6819      	ldr	r1, [r3, #0]
 8001416:	463b      	mov	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f002 f988 	bl	8003730 <osMessageGet>
	if(event.status == osEventMessage){
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d101      	bne.n	800142a <trafficGenerated+0x36>
		traffic = event.value.v;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	82fb      	strh	r3, [r7, #22]
	}
	osMutexRelease(traffic_rate_1_mutexHandle);
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <trafficGenerated+0xc0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f002 f8e0 	bl	80035f4 <osMutexRelease>
	scaled = traffic / 2400.0;
 8001434:	8afb      	ldrh	r3, [r7, #22]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f86c 	bl	8000514 <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <trafficGenerated+0xc8>)
 8001442:	f7ff f9fb 	bl	800083c <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fadd 	bl	8000a0c <__aeabi_d2f>
 8001452:	4603      	mov	r3, r0
 8001454:	613b      	str	r3, [r7, #16]
	// modulate traffic rate from 1 to 10

	srand(time(NULL));
 8001456:	2000      	movs	r0, #0
 8001458:	f004 ff6a 	bl	8006330 <time>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4613      	mov	r3, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f004 fdea 	bl	800603c <srand>
	int random = rand() % 10;
 8001468:	f004 fe16 	bl	8006098 <rand>
 800146c:	4602      	mov	r2, r0
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <trafficGenerated+0xcc>)
 8001470:	fb83 1302 	smull	r1, r3, r3, r2
 8001474:	1099      	asrs	r1, r3, #2
 8001476:	17d3      	asrs	r3, r2, #31
 8001478:	1ac9      	subs	r1, r1, r3
 800147a:	460b      	mov	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	60fb      	str	r3, [r7, #12]
	if (random < scaled*10) {
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001490:	edd7 7a04 	vldr	s15, [r7, #16]
 8001494:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001498:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800149c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	d501      	bpl.n	80014aa <trafficGenerated+0xb6>
		return 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <trafficGenerated+0xb8>
	}
	return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200003ac 	.word	0x200003ac
 80014b8:	20000390 	.word	0x20000390
 80014bc:	40a2c000 	.word	0x40a2c000
 80014c0:	66666667 	.word	0x66666667

080014c4 <LightState>:
/* USER CODE END Header_LightState */
void LightState(void const * argument)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN LightState */
	uint16_t rate = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
	float scaled = 0;
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80014d6:	4b71      	ldr	r3, [pc, #452]	; (800169c <LightState+0x1d8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f04f 31ff 	mov.w	r1, #4294967295
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 f83a 	bl	8003558 <osMutexWait>
		// int rate = traffic_rate; // TODO: traffic_queue_1
		osEvent event = osMessageGet(traffic_queue_2Handle, 0);
 80014e4:	4b6e      	ldr	r3, [pc, #440]	; (80016a0 <LightState+0x1dc>)
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	2200      	movs	r2, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f91e 	bl	8003730 <osMessageGet>
		if(event.status == osEventMessage){
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d101      	bne.n	80014fe <LightState+0x3a>
			rate = event.value.v;
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
 80014fe:	4b67      	ldr	r3, [pc, #412]	; (800169c <LightState+0x1d8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 f876 	bl	80035f4 <osMutexRelease>
		scaled = rate / 2400.0;
 8001508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f802 	bl	8000514 <__aeabi_i2d>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <LightState+0x1e0>)
 8001516:	f7ff f991 	bl	800083c <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fa73 	bl	8000a0c <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
		// turn green LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2101      	movs	r1, #1
 800152e:	485e      	ldr	r0, [pc, #376]	; (80016a8 <LightState+0x1e4>)
 8001530:	f001 fa62 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2102      	movs	r1, #2
 8001538:	485b      	ldr	r0, [pc, #364]	; (80016a8 <LightState+0x1e4>)
 800153a:	f001 fa5d 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2104      	movs	r1, #4
 8001542:	4859      	ldr	r0, [pc, #356]	; (80016a8 <LightState+0x1e4>)
 8001544:	f001 fa58 	bl	80029f8 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <LightState+0x1e8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f801 	bl	8003558 <osMutexWait>
		osMessagePut(light_status_queueHandle, 2, osWaitForever);
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <LightState+0x1ec>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f04f 32ff 	mov.w	r2, #4294967295
 800155e:	2102      	movs	r1, #2
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f8a5 	bl	80036b0 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <LightState+0x1e8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f842 	bl	80035f4 <osMutexRelease>
		// light_status = 2; //TODO: light_queue_0
		// modulate traffic rate to 1
		osDelay((uint32_t)(3000 * scaled));
 8001570:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001574:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80016b4 <LightState+0x1f0>
 8001578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800157c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001580:	ee17 0a90 	vmov	r0, s15
 8001584:	f001 ffbc 	bl	8003500 <osDelay>

		// turn yellow LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2101      	movs	r1, #1
 800158c:	4846      	ldr	r0, [pc, #280]	; (80016a8 <LightState+0x1e4>)
 800158e:	f001 fa33 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2102      	movs	r1, #2
 8001596:	4844      	ldr	r0, [pc, #272]	; (80016a8 <LightState+0x1e4>)
 8001598:	f001 fa2e 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2104      	movs	r1, #4
 80015a0:	4841      	ldr	r0, [pc, #260]	; (80016a8 <LightState+0x1e4>)
 80015a2:	f001 fa29 	bl	80029f8 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <LightState+0x1e8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f04f 31ff 	mov.w	r1, #4294967295
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 ffd2 	bl	8003558 <osMutexWait>
		osMessagePut(light_status_queueHandle, 1, osWaitForever);
 80015b4:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <LightState+0x1ec>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	2101      	movs	r1, #1
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 f876 	bl	80036b0 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <LightState+0x1e8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 f813 	bl	80035f4 <osMutexRelease>
		// light_status = 1;
		osDelay(1000);
 80015ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d2:	f001 ff95 	bl	8003500 <osDelay>

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <LightState+0x1d8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f04f 31ff 	mov.w	r1, #4294967295
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 ffba 	bl	8003558 <osMutexWait>
		event = osMessageGet(traffic_queue_2Handle, 0); //TODO: traffic_queue_1
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <LightState+0x1dc>)
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 f89f 	bl	8003730 <osMessageGet>
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	463a      	mov	r2, r7
 80015f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	2b10      	cmp	r3, #16
 8001602:	d101      	bne.n	8001608 <LightState+0x144>
			rate = event.value.v;
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <LightState+0x1d8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fff1 	bl	80035f4 <osMutexRelease>
		scaled = rate / 2400.0;
 8001612:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff7d 	bl	8000514 <__aeabi_i2d>
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <LightState+0x1e0>)
 8001620:	f7ff f90c 	bl	800083c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff f9ee 	bl	8000a0c <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
		// turn red LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2101      	movs	r1, #1
 8001638:	481b      	ldr	r0, [pc, #108]	; (80016a8 <LightState+0x1e4>)
 800163a:	f001 f9dd 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2102      	movs	r1, #2
 8001642:	4819      	ldr	r0, [pc, #100]	; (80016a8 <LightState+0x1e4>)
 8001644:	f001 f9d8 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2104      	movs	r1, #4
 800164c:	4816      	ldr	r0, [pc, #88]	; (80016a8 <LightState+0x1e4>)
 800164e:	f001 f9d3 	bl	80029f8 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <LightState+0x1e8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f04f 31ff 	mov.w	r1, #4294967295
 800165a:	4618      	mov	r0, r3
 800165c:	f001 ff7c 	bl	8003558 <osMutexWait>
		osMessagePut(light_status_queueHandle, 0, osWaitForever);
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <LightState+0x1ec>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f002 f820 	bl	80036b0 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <LightState+0x1e8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f001 ffbd 	bl	80035f4 <osMutexRelease>
		// light_status = 0;
		// modulate traffic rate to 1
		osDelay((uint32_t)(3000 * (1-scaled)));
 800167a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800167e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001686:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016b4 <LightState+0x1f0>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f001 ff33 	bl	8003500 <osDelay>
	{
 800169a:	e71c      	b.n	80014d6 <LightState+0x12>
 800169c:	200003a4 	.word	0x200003a4
 80016a0:	20000394 	.word	0x20000394
 80016a4:	40a2c000 	.word	0x40a2c000
 80016a8:	40020800 	.word	0x40020800
 80016ac:	200003a8 	.word	0x200003a8
 80016b0:	2000039c 	.word	0x2000039c
 80016b4:	453b8000 	.word	0x453b8000

080016b8 <convert_to_integer>:
 * @brief Function implementing the sys_manage thread.
 * @param argument: Not used
 * @retval None
 */

int32_t convert_to_integer(int* traffic_array){
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	int i;
	int32_t converted_number;
	for (i=0; i<19; i++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e00f      	b.n	80016e6 <convert_to_integer+0x2e>
		converted_number |= traffic_array[i] << (18-i);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f1c3 0312 	rsb	r3, r3, #18
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
	for (i=0; i<19; i++){
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	ddec      	ble.n	80016c6 <convert_to_integer+0xe>
	}
	return converted_number;
 80016ec:	68bb      	ldr	r3, [r7, #8]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysManage>:

/* USER CODE END Header_SysManage */
void SysManage(void const * argument)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09c      	sub	sp, #112	; 0x70
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SysManage */
	/* Infinite loop */
	int i;
	int cars[19];
	int light_colour = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	66bb      	str	r3, [r7, #104]	; 0x68
	for(;;)
	{
		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001708:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <SysManage+0x1ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	4618      	mov	r0, r3
 8001712:	f001 ff21 	bl	8003558 <osMutexWait>
		osEvent event = osMessageGet(light_status_queueHandle, 0); //TODO: light_queue_0
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <SysManage+0x1b0>)
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	2200      	movs	r2, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f805 	bl	8003730 <osMessageGet>
		if(event.status == osEventMessage){
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b10      	cmp	r3, #16
 800172a:	d101      	bne.n	8001730 <SysManage+0x34>
			light_colour = event.value.v;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	66bb      	str	r3, [r7, #104]	; 0x68
		}
		osMutexRelease(light_status_mutexHandle);
 8001730:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <SysManage+0x1ac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f001 ff5d 	bl	80035f4 <osMutexRelease>

		// osMutexWait(cars_array_mutexHandle); //TODO: cars_queue_0
		for (i = 18; i>0; i--){
 800173a:	2312      	movs	r3, #18
 800173c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800173e:	e08e      	b.n	800185e <SysManage+0x162>
			if (light_colour == 2) { //green
 8001740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001742:	2b02      	cmp	r3, #2
 8001744:	d115      	bne.n	8001772 <SysManage+0x76>
				cars[i] = cars[i-1];
 8001746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001748:	3b01      	subs	r3, #1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	3370      	adds	r3, #112	; 0x70
 800174e:	443b      	add	r3, r7
 8001750:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8001754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	3370      	adds	r3, #112	; 0x70
 800175a:	443b      	add	r3, r7
 800175c:	f843 2c58 	str.w	r2, [r3, #-88]
				cars[i - 1] = 0;
 8001760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001762:	3b01      	subs	r3, #1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	3370      	adds	r3, #112	; 0x70
 8001768:	443b      	add	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	f843 2c58 	str.w	r2, [r3, #-88]
 8001770:	e072      	b.n	8001858 <SysManage+0x15c>
			}
			else if (light_colour == 1) { //yellow
 8001772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001774:	2b01      	cmp	r3, #1
 8001776:	d136      	bne.n	80017e6 <SysManage+0xea>
				if (i > 8) {
 8001778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800177a:	2b08      	cmp	r3, #8
 800177c:	dd15      	ble.n	80017aa <SysManage+0xae>
					cars[i] = cars[i-1];
 800177e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001780:	3b01      	subs	r3, #1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3370      	adds	r3, #112	; 0x70
 8001786:	443b      	add	r3, r7
 8001788:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800178c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	3370      	adds	r3, #112	; 0x70
 8001792:	443b      	add	r3, r7
 8001794:	f843 2c58 	str.w	r2, [r3, #-88]
					cars[i-1] = 0;
 8001798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800179a:	3b01      	subs	r3, #1
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	3370      	adds	r3, #112	; 0x70
 80017a0:	443b      	add	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	f843 2c58 	str.w	r2, [r3, #-88]
 80017a8:	e056      	b.n	8001858 <SysManage+0x15c>
				}
				else {
					if (!cars[i]){
 80017aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	3370      	adds	r3, #112	; 0x70
 80017b0:	443b      	add	r3, r7
 80017b2:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d14e      	bne.n	8001858 <SysManage+0x15c>
						cars[i] = cars[i-1];
 80017ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017bc:	3b01      	subs	r3, #1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	3370      	adds	r3, #112	; 0x70
 80017c2:	443b      	add	r3, r7
 80017c4:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80017c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	3370      	adds	r3, #112	; 0x70
 80017ce:	443b      	add	r3, r7
 80017d0:	f843 2c58 	str.w	r2, [r3, #-88]
						cars[i-1] = 0;
 80017d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017d6:	3b01      	subs	r3, #1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	3370      	adds	r3, #112	; 0x70
 80017dc:	443b      	add	r3, r7
 80017de:	2200      	movs	r2, #0
 80017e0:	f843 2c58 	str.w	r2, [r3, #-88]
 80017e4:	e038      	b.n	8001858 <SysManage+0x15c>
					}
				}
			}
			else { //red
				if (i > 11){
 80017e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017e8:	2b0b      	cmp	r3, #11
 80017ea:	dd15      	ble.n	8001818 <SysManage+0x11c>
					cars[i] = cars[i-1];
 80017ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ee:	3b01      	subs	r3, #1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	3370      	adds	r3, #112	; 0x70
 80017f4:	443b      	add	r3, r7
 80017f6:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80017fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	3370      	adds	r3, #112	; 0x70
 8001800:	443b      	add	r3, r7
 8001802:	f843 2c58 	str.w	r2, [r3, #-88]
					cars[i-1] = 0;
 8001806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001808:	3b01      	subs	r3, #1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3370      	adds	r3, #112	; 0x70
 800180e:	443b      	add	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	f843 2c58 	str.w	r2, [r3, #-88]
 8001816:	e01f      	b.n	8001858 <SysManage+0x15c>
				}
				else if (i < 8){
 8001818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800181a:	2b07      	cmp	r3, #7
 800181c:	dc1c      	bgt.n	8001858 <SysManage+0x15c>
					if (!cars[i]) {
 800181e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	3370      	adds	r3, #112	; 0x70
 8001824:	443b      	add	r3, r7
 8001826:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d114      	bne.n	8001858 <SysManage+0x15c>
						cars[i] = cars[i-1];
 800182e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001830:	3b01      	subs	r3, #1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	3370      	adds	r3, #112	; 0x70
 8001836:	443b      	add	r3, r7
 8001838:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800183c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	3370      	adds	r3, #112	; 0x70
 8001842:	443b      	add	r3, r7
 8001844:	f843 2c58 	str.w	r2, [r3, #-88]
						cars[i-1] = 0;
 8001848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800184a:	3b01      	subs	r3, #1
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	3370      	adds	r3, #112	; 0x70
 8001850:	443b      	add	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	f843 2c58 	str.w	r2, [r3, #-88]
		for (i = 18; i>0; i--){
 8001858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800185a:	3b01      	subs	r3, #1
 800185c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800185e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001860:	2b00      	cmp	r3, #0
 8001862:	f73f af6d 	bgt.w	8001740 <SysManage+0x44>
					}
				}
			}
		}
		if (trafficGenerated()){
 8001866:	f7ff fdc5 	bl	80013f4 <trafficGenerated>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <SysManage+0x17a>
			cars[0] = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	e001      	b.n	800187a <SysManage+0x17e>
		}
		else {
			cars[0] = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
		}
		int32_t cars_int = convert_to_integer(cars);
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff1a 	bl	80016b8 <convert_to_integer>
 8001884:	6678      	str	r0, [r7, #100]	; 0x64
		// osMutexRelease(cars_array_mutexHandle);
		osMutexWait(cars_array_mutexHandle, osWaitForever);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <SysManage+0x1b4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f04f 31ff 	mov.w	r1, #4294967295
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fe62 	bl	8003558 <osMutexWait>
		// int* mail = (int *)osMailAlloc(cars_array_queueHandle, osWaitForever);
		//osMailPut(cars_array_queueHandle, cars);
		//osMessagePut(cars_array_queueHandle, cars_int, osWaitForever);
		osMutexRelease(cars_array_mutexHandle);
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <SysManage+0x1b4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f001 feab 	bl	80035f4 <osMutexRelease>
		osDelay(500);
 800189e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a2:	f001 fe2d 	bl	8003500 <osDelay>
	{
 80018a6:	e72f      	b.n	8001708 <SysManage+0xc>
 80018a8:	200003a8 	.word	0x200003a8
 80018ac:	2000039c 	.word	0x2000039c
 80018b0:	200003a0 	.word	0x200003a0

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_MspInit+0x54>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_MspInit+0x54>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_MspInit+0x54>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_MspInit+0x54>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_MspInit+0x54>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_MspInit+0x54>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	210f      	movs	r1, #15
 8001902:	f06f 0001 	mvn.w	r0, #1
 8001906:	f000 feb2 	bl	800266e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_ADC_MspInit+0x7c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d127      	bne.n	800198a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_ADC_MspInit+0x80>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_ADC_MspInit+0x80>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Pot_In_Pin;
 8001972:	2308      	movs	r3, #8
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001976:	2303      	movs	r3, #3
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_In_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_ADC_MspInit+0x84>)
 8001986:	f000 fe9b 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40012000 	.word	0x40012000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020800 	.word	0x40020800

080019a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_SPI_MspInit+0x84>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12b      	bne.n	8001a1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_SPI_MspInit+0x88>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_SPI_MspInit+0x88>)
 80019cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_SPI_MspInit+0x88>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_SPI_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_SPI_MspInit+0x88>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_SPI_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019fa:	23e0      	movs	r3, #224	; 0xe0
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_SPI_MspInit+0x8c>)
 8001a16:	f000 fe53 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40013000 	.word	0x40013000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a60:	f000 f95c 	bl	8001d1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a64:	f003 fc92 	bl	800538c <xTaskGetSchedulerState>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a6e:	f004 f86b 	bl	8005b48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_kill>:

int _kill(int pid, int sig)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a90:	f004 fcc0 	bl	8006414 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2216      	movs	r2, #22
 8001a98:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_exit>:

void _exit (int status)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aae:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffe7 	bl	8001a86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ab8:	e7fe      	b.n	8001ab8 <_exit+0x12>

08001aba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e00a      	b.n	8001ae2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001acc:	f3af 8000 	nop.w
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60ba      	str	r2, [r7, #8]
 8001ad8:	b2ca      	uxtb	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf0      	blt.n	8001acc <_read+0x12>
  }

  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e009      	b.n	8001b1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	60ba      	str	r2, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf1      	blt.n	8001b06 <_write+0x12>
  }
  return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_close>:

int _close(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b54:	605a      	str	r2, [r3, #4]
  return 0;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_isatty>:

int _isatty(int file)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f004 fc26 	bl	8006414 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20020000 	.word	0x20020000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	200003b0 	.word	0x200003b0
 8001bfc:	20004258 	.word	0x20004258

08001c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c28:	f7ff ffea 	bl	8001c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c52:	f004 fbe5 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c56:	f7ff f8c1 	bl	8000ddc <main>
  bx  lr    
 8001c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c68:	080072f4 	.word	0x080072f4
  ldr r2, =_sbss
 8001c6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c70:	20004258 	.word	0x20004258

08001c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_Init+0x40>)
 8001c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_Init+0x40>)
 8001c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_Init+0x40>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 fcd9 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f808 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fe08 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023c00 	.word	0x40023c00

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fce3 	bl	80026a6 <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 fcb9 	bl	800266e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	200003b4 	.word	0x200003b4

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200003b4 	.word	0x200003b4

08001d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e033      	b.n	8001dda <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fdcc 	bl	8001918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da2:	f023 0302 	bic.w	r3, r3, #2
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 faa4 	bl	80022fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dca:	e001      	b.n	8001dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_Start+0x1a>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e0b2      	b.n	8001f64 <HAL_ADC_Start+0x180>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d018      	beq.n	8001e46 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e24:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <HAL_ADC_Start+0x18c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_ADC_Start+0x190>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0c9a      	lsrs	r2, r3, #18
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d17a      	bne.n	8001f4a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e92:	d106      	bne.n	8001ea2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f023 0206 	bic.w	r2, r3, #6
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_ADC_Start+0x194>)
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ebc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d12a      	bne.n	8001f20 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_ADC_Start+0x198>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d015      	beq.n	8001f00 <HAL_ADC_Start+0x11c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <HAL_ADC_Start+0x19c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d105      	bne.n	8001eea <HAL_ADC_Start+0x106>
 8001ede:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_ADC_Start+0x194>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <HAL_ADC_Start+0x1a0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d136      	bne.n	8001f62 <HAL_ADC_Start+0x17e>
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_ADC_Start+0x194>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d130      	bne.n	8001f62 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d129      	bne.n	8001f62 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	e020      	b.n	8001f62 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <HAL_ADC_Start+0x198>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d11b      	bne.n	8001f62 <HAL_ADC_Start+0x17e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d114      	bne.n	8001f62 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e00b      	b.n	8001f62 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	20000000 	.word	0x20000000
 8001f74:	431bde83 	.word	0x431bde83
 8001f78:	40012300 	.word	0x40012300
 8001f7c:	40012000 	.word	0x40012000
 8001f80:	40012100 	.word	0x40012100
 8001f84:	40012200 	.word	0x40012200

08001f88 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa4:	d113      	bne.n	8001fce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb4:	d10b      	bne.n	8001fce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f043 0220 	orr.w	r2, r3, #32
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e063      	b.n	8002096 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fce:	f7ff feb9 	bl	8001d44 <HAL_GetTick>
 8001fd2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fd4:	e021      	b.n	800201a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d01d      	beq.n	800201a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x6c>
 8001fe4:	f7ff feae 	bl	8001d44 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d212      	bcs.n	800201a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d00b      	beq.n	800201a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e03d      	b.n	8002096 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d1d6      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0212 	mvn.w	r2, #18
 8002030:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d123      	bne.n	8002094 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002050:	2b00      	cmp	r3, #0
 8002052:	d11f      	bne.n	8002094 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800206c:	2b00      	cmp	r3, #0
 800206e:	d111      	bne.n	8002094 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x1c>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e105      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x228>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b09      	cmp	r3, #9
 80020e2:	d925      	bls.n	8002130 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68d9      	ldr	r1, [r3, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	3b1e      	subs	r3, #30
 80020fa:	2207      	movs	r2, #7
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43da      	mvns	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	400a      	ands	r2, r1
 8002108:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68d9      	ldr	r1, [r3, #12]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	4603      	mov	r3, r0
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4403      	add	r3, r0
 8002122:	3b1e      	subs	r3, #30
 8002124:	409a      	lsls	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	e022      	b.n	8002176 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6919      	ldr	r1, [r3, #16]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	2207      	movs	r2, #7
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	400a      	ands	r2, r1
 8002152:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6919      	ldr	r1, [r3, #16]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	4618      	mov	r0, r3
 8002166:	4603      	mov	r3, r0
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4403      	add	r3, r0
 800216c:	409a      	lsls	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b06      	cmp	r3, #6
 800217c:	d824      	bhi.n	80021c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b05      	subs	r3, #5
 8002190:	221f      	movs	r2, #31
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3b05      	subs	r3, #5
 80021ba:	fa00 f203 	lsl.w	r2, r0, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
 80021c6:	e04c      	b.n	8002262 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	d824      	bhi.n	800221a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3b23      	subs	r3, #35	; 0x23
 80021e2:	221f      	movs	r2, #31
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43da      	mvns	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	400a      	ands	r2, r1
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b23      	subs	r3, #35	; 0x23
 800220c:	fa00 f203 	lsl.w	r2, r0, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
 8002218:	e023      	b.n	8002262 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b41      	subs	r3, #65	; 0x41
 800222c:	221f      	movs	r2, #31
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	400a      	ands	r2, r1
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b41      	subs	r3, #65	; 0x41
 8002256:	fa00 f203 	lsl.w	r2, r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_ADC_ConfigChannel+0x234>)
 8002264:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_ADC_ConfigChannel+0x238>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d109      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1cc>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b12      	cmp	r3, #18
 8002276:	d105      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_ADC_ConfigChannel+0x238>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d123      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x21e>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b10      	cmp	r3, #16
 8002294:	d003      	beq.n	800229e <HAL_ADC_ConfigChannel+0x1e6>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b11      	cmp	r3, #17
 800229c:	d11b      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d111      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_ADC_ConfigChannel+0x23c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_ADC_ConfigChannel+0x240>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9a      	lsrs	r2, r3, #18
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022c8:	e002      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f9      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40012300 	.word	0x40012300
 80022f0:	40012000 	.word	0x40012000
 80022f4:	20000000 	.word	0x20000000
 80022f8:	431bde83 	.word	0x431bde83

080022fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002304:	4b79      	ldr	r3, [pc, #484]	; (80024ec <ADC_Init+0x1f0>)
 8002306:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	021a      	lsls	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <ADC_Init+0x1f4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e00f      	b.n	80023fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	005a      	lsls	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002436:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002446:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	035a      	lsls	r2, r3, #13
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	e007      	b.n	8002470 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	3b01      	subs	r3, #1
 800248c:	051a      	lsls	r2, r3, #20
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b2:	025a      	lsls	r2, r3, #9
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	029a      	lsls	r2, r3, #10
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	0f000001 	.word	0x0f000001

080024f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800251c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <__NVIC_GetPriorityGrouping+0x18>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 0307 	and.w	r3, r3, #7
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db0a      	blt.n	8002582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	490c      	ldr	r1, [pc, #48]	; (80025a4 <__NVIC_SetPriority+0x4c>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002580:	e00a      	b.n	8002598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <__NVIC_SetPriority+0x50>)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	3b04      	subs	r3, #4
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	440b      	add	r3, r1
 8002596:	761a      	strb	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf28      	it	cs
 80025ca:	2304      	movcs	r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d902      	bls.n	80025dc <NVIC_EncodePriority+0x30>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3b03      	subs	r3, #3
 80025da:	e000      	b.n	80025de <NVIC_EncodePriority+0x32>
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43d9      	mvns	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	4313      	orrs	r3, r2
         );
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	; 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f7ff ff8e 	bl	8002558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff47 	bl	80024f4 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002680:	f7ff ff5c 	bl	800253c <__NVIC_GetPriorityGrouping>
 8002684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff ff8e 	bl	80025ac <NVIC_EncodePriority>
 8002690:	4602      	mov	r2, r0
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff5d 	bl	8002558 <__NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffb0 	bl	8002614 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e16b      	b.n	80029b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 815a 	bne.w	80029ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d005      	beq.n	8002712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	2b02      	cmp	r3, #2
 8002710:	d130      	bne.n	8002774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0201 	and.w	r2, r3, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d017      	beq.n	80027b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80b4 	beq.w	80029ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b60      	ldr	r3, [pc, #384]	; (80029cc <HAL_GPIO_Init+0x30c>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a5f      	ldr	r2, [pc, #380]	; (80029cc <HAL_GPIO_Init+0x30c>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_GPIO_Init+0x30c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002862:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <HAL_GPIO_Init+0x310>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_GPIO_Init+0x314>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x226>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a51      	ldr	r2, [pc, #324]	; (80029d8 <HAL_GPIO_Init+0x318>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x222>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a50      	ldr	r2, [pc, #320]	; (80029dc <HAL_GPIO_Init+0x31c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x21e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4f      	ldr	r2, [pc, #316]	; (80029e0 <HAL_GPIO_Init+0x320>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x21a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <HAL_GPIO_Init+0x324>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x216>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4d      	ldr	r2, [pc, #308]	; (80029e8 <HAL_GPIO_Init+0x328>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x212>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <HAL_GPIO_Init+0x32c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x20e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_GPIO_Init+0x330>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x20a>
 80028c6:	2307      	movs	r3, #7
 80028c8:	e00e      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028ca:	2308      	movs	r3, #8
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_GPIO_Init+0x310>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292a:	4a32      	ldr	r2, [pc, #200]	; (80029f4 <HAL_GPIO_Init+0x334>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002930:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_GPIO_Init+0x334>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a8:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_GPIO_Init+0x334>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae90 	bls.w	80026dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40021c00 	.word	0x40021c00
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
 8002a04:	4613      	mov	r3, r2
 8002a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a08:	787b      	ldrb	r3, [r7, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a14:	e003      	b.n	8002a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	619a      	str	r2, [r3, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e267      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d075      	beq.n	8002b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4a:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b85      	ldr	r3, [pc, #532]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d112      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4b7e      	ldr	r3, [pc, #504]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05b      	beq.n	8002b34 <HAL_RCC_OscConfig+0x108>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d157      	bne.n	8002b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e242      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x74>
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6c      	ldr	r2, [pc, #432]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002ac4:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a68      	ldr	r2, [pc, #416]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a65      	ldr	r2, [pc, #404]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f92e 	bl	8001d44 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff f92a 	bl	8001d44 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e207      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xc0>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f91a 	bl	8001d44 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff f916 	bl	8001d44 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1f3      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0xe8>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b44      	ldr	r3, [pc, #272]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1c7      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4937      	ldr	r1, [pc, #220]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x244>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff f8cf 	bl	8001d44 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff f8cb 	bl	8001d44 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1a8      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4925      	ldr	r1, [pc, #148]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_RCC_OscConfig+0x244>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7ff f8ae 	bl	8001d44 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bec:	f7ff f8aa 	bl	8001d44 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e187      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d036      	beq.n	8002c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_RCC_OscConfig+0x248>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7ff f88e 	bl	8001d44 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff f88a 	bl	8001d44 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e167      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x200>
 8002c4a:	e01b      	b.n	8002c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x248>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7ff f877 	bl	8001d44 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	e00e      	b.n	8002c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5a:	f7ff f873 	bl	8001d44 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d907      	bls.n	8002c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e150      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	42470000 	.word	0x42470000
 8002c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ea      	bne.n	8002c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8097 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b7d      	ldr	r3, [pc, #500]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a7c      	ldr	r2, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b7a      	ldr	r3, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b77      	ldr	r3, [pc, #476]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b74      	ldr	r3, [pc, #464]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a73      	ldr	r2, [pc, #460]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7ff f833 	bl	8001d44 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7ff f82f 	bl	8001d44 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e10c      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2ea>
 8002d08:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x324>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x30c>
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a5e      	ldr	r2, [pc, #376]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a5b      	ldr	r2, [pc, #364]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0x324>
 8002d38:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fff4 	bl	8001d44 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fff0 	bl	8001d44 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0cb      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ee      	beq.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d84:	f7fe ffde 	bl	8001d44 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe ffda 	bl	8001d44 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0b5      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da2:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ee      	bne.n	8002d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a1 	beq.w	8002f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dca:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d05c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d141      	bne.n	8002e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe ffae 	bl	8001d44 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe ffaa 	bl	8001d44 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e087      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	491b      	ldr	r1, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe ff83 	bl	8001d44 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe ff7f 	bl	8001d44 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e05c      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x416>
 8002e60:	e054      	b.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe ff6c 	bl	8001d44 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe ff68 	bl	8001d44 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e045      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e038      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x4ec>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d028      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d121      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d11a      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0cc      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b68      	ldr	r3, [pc, #416]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d90c      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d044      	beq.n	800303c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e067      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4934      	ldr	r1, [pc, #208]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7fe fe9a 	bl	8001d44 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe fe96 	bl	8001d44 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e04f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d20c      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fdfa 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	080071f4 	.word	0x080071f4
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b094      	sub	sp, #80	; 0x50
 80030ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	647b      	str	r3, [r7, #68]	; 0x44
 80030f4:	2300      	movs	r3, #0
 80030f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f8:	2300      	movs	r3, #0
 80030fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003100:	4b79      	ldr	r3, [pc, #484]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d00d      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x40>
 800310c:	2b08      	cmp	r3, #8
 800310e:	f200 80e1 	bhi.w	80032d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x34>
 8003116:	2b04      	cmp	r3, #4
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x3a>
 800311a:	e0db      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003120:	e0db      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003122:	4b73      	ldr	r3, [pc, #460]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003126:	e0d8      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003128:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003130:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003132:	4b6d      	ldr	r3, [pc, #436]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	2200      	movs	r2, #0
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
 8003148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
 8003152:	2300      	movs	r3, #0
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
 8003156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4621      	mov	r1, r4
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	6139      	str	r1, [r7, #16]
 8003178:	4629      	mov	r1, r5
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800318c:	4659      	mov	r1, fp
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4651      	mov	r1, sl
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4651      	mov	r1, sl
 800319c:	ebb2 0801 	subs.w	r8, r2, r1
 80031a0:	4659      	mov	r1, fp
 80031a2:	eb63 0901 	sbc.w	r9, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ba:	4690      	mov	r8, r2
 80031bc:	4699      	mov	r9, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	eb18 0303 	adds.w	r3, r8, r3
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	462b      	mov	r3, r5
 80031c8:	eb49 0303 	adc.w	r3, r9, r3
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031da:	4629      	mov	r1, r5
 80031dc:	024b      	lsls	r3, r1, #9
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e4:	4621      	mov	r1, r4
 80031e6:	024a      	lsls	r2, r1, #9
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	2200      	movs	r2, #0
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f8:	f7fd fc58 	bl	8000aac <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003204:	e058      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	2200      	movs	r2, #0
 800320e:	4618      	mov	r0, r3
 8003210:	4611      	mov	r1, r2
 8003212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003220:	4642      	mov	r2, r8
 8003222:	464b      	mov	r3, r9
 8003224:	f04f 0000 	mov.w	r0, #0
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	0159      	lsls	r1, r3, #5
 800322e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003232:	0150      	lsls	r0, r2, #5
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4641      	mov	r1, r8
 800323a:	ebb2 0a01 	subs.w	sl, r2, r1
 800323e:	4649      	mov	r1, r9
 8003240:	eb63 0b01 	sbc.w	fp, r3, r1
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003258:	ebb2 040a 	subs.w	r4, r2, sl
 800325c:	eb63 050b 	sbc.w	r5, r3, fp
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	00eb      	lsls	r3, r5, #3
 800326a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326e:	00e2      	lsls	r2, r4, #3
 8003270:	4614      	mov	r4, r2
 8003272:	461d      	mov	r5, r3
 8003274:	4643      	mov	r3, r8
 8003276:	18e3      	adds	r3, r4, r3
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	464b      	mov	r3, r9
 800327c:	eb45 0303 	adc.w	r3, r5, r3
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328e:	4629      	mov	r1, r5
 8003290:	028b      	lsls	r3, r1, #10
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003298:	4621      	mov	r1, r4
 800329a:	028a      	lsls	r2, r1, #10
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	61fa      	str	r2, [r7, #28]
 80032a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ac:	f7fd fbfe 	bl	8000aac <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3750      	adds	r7, #80	; 0x50
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	007a1200 	.word	0x007a1200

080032f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07b      	b.n	80033fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003316:	d009      	beq.n	800332c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
 800331e:	e005      	b.n	800332c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe fb2a 	bl	80019a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	ea42 0103 	orr.w	r1, r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0104 	and.w	r1, r3, #4
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f003 0210 	and.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003418:	2b84      	cmp	r3, #132	; 0x84
 800341a:	d005      	beq.n	8003428 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800341c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	3303      	adds	r3, #3
 8003426:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003428:	68fb      	ldr	r3, [r7, #12]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800343c:	f3ef 8305 	mrs	r3, IPSR
 8003440:	607b      	str	r3, [r7, #4]
  return(result);
 8003442:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800345e:	f001 fb97 	bl	8004b90 <vTaskStartScheduler>
  
  return osOK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}

08003468 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af04      	add	r7, sp, #16
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d020      	beq.n	80034bc <osThreadCreate+0x54>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01c      	beq.n	80034bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685c      	ldr	r4, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691e      	ldr	r6, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ffb6 	bl	8003406 <makeFreeRtosPriority>
 800349a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034a4:	9202      	str	r2, [sp, #8]
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	9100      	str	r1, [sp, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	4632      	mov	r2, r6
 80034ae:	4629      	mov	r1, r5
 80034b0:	4620      	mov	r0, r4
 80034b2:	f001 f9a5 	bl	8004800 <xTaskCreateStatic>
 80034b6:	4603      	mov	r3, r0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e01c      	b.n	80034f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685c      	ldr	r4, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034c8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff98 	bl	8003406 <makeFreeRtosPriority>
 80034d6:	4602      	mov	r2, r0
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	9200      	str	r2, [sp, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4632      	mov	r2, r6
 80034e4:	4629      	mov	r1, r5
 80034e6:	4620      	mov	r0, r4
 80034e8:	f001 f9e7 	bl	80048ba <xTaskCreate>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d001      	beq.n	80034f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003500 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <osDelay+0x16>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	e000      	b.n	8003518 <osDelay+0x18>
 8003516:	2301      	movs	r3, #1
 8003518:	4618      	mov	r0, r3
 800351a:	f001 fb05 	bl	8004b28 <vTaskDelay>
  
  return osOK;
 800351e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4619      	mov	r1, r3
 800353e:	2001      	movs	r0, #1
 8003540:	f000 fb89 	bl	8003c56 <xQueueCreateMutexStatic>
 8003544:	4603      	mov	r3, r0
 8003546:	e003      	b.n	8003550 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003548:	2001      	movs	r0, #1
 800354a:	f000 fb6c 	bl	8003c26 <xQueueCreateMutex>
 800354e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <osMutexWait+0x18>
    return osErrorParameter;
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	e03a      	b.n	80035e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d103      	bne.n	8003584 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	e009      	b.n	8003598 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <osMutexWait+0x40>
      ticks = 1;
 8003594:	2301      	movs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003598:	f7ff ff4d 	bl	8003436 <inHandlerMode>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	461a      	mov	r2, r3
 80035a8:	2100      	movs	r1, #0
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 ff80 	bl	80044b0 <xQueueReceiveFromISR>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <osMutexWait+0x62>
      return osErrorOS;
 80035b6:	23ff      	movs	r3, #255	; 0xff
 80035b8:	e015      	b.n	80035e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <osMutexWait+0x8c>
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <osMutexWait+0x98>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	e008      	b.n	80035e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fe5f 	bl	8004298 <xQueueSemaphoreTake>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <osMutexWait+0x8c>
    return osErrorOS;
 80035e0:	23ff      	movs	r3, #255	; 0xff
 80035e2:	e000      	b.n	80035e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003604:	f7ff ff17 	bl	8003436 <inHandlerMode>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fcd2 	bl	8003fbe <xQueueGiveFromISR>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <osMutexRelease+0x30>
      return osErrorOS;
 8003620:	23ff      	movs	r3, #255	; 0xff
 8003622:	e017      	b.n	8003654 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <osMutexRelease+0x5e>
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <osMutexRelease+0x68>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	e00a      	b.n	8003652 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800363c:	2300      	movs	r3, #0
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fb22 	bl	8003c8c <xQueueGenericSend>
 8003648:	4603      	mov	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800364e:	23ff      	movs	r3, #255	; 0xff
 8003650:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b085      	sub	sp, #20
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d011      	beq.n	8003696 <osMessageCreate+0x36>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2400      	movs	r4, #0
 800368c:	9400      	str	r4, [sp, #0]
 800368e:	f000 f9df 	bl	8003a50 <xQueueGenericCreateStatic>
 8003692:	4603      	mov	r3, r0
 8003694:	e008      	b.n	80036a8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	4619      	mov	r1, r3
 80036a2:	f000 fa4d 	bl	8003b40 <xQueueGenericCreate>
 80036a6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}

080036b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <osMessagePut+0x1e>
    ticks = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80036ce:	f7ff feb2 	bl	8003436 <inHandlerMode>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d018      	beq.n	800370a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80036d8:	f107 0210 	add.w	r2, r7, #16
 80036dc:	f107 0108 	add.w	r1, r7, #8
 80036e0:	2300      	movs	r3, #0
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fbd0 	bl	8003e88 <xQueueGenericSendFromISR>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <osMessagePut+0x42>
      return osErrorOS;
 80036ee:	23ff      	movs	r3, #255	; 0xff
 80036f0:	e018      	b.n	8003724 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d014      	beq.n	8003722 <osMessagePut+0x72>
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <osMessagePut+0x7c>)
 80036fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	e00b      	b.n	8003722 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800370a:	f107 0108 	add.w	r1, r7, #8
 800370e:	2300      	movs	r3, #0
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 faba 	bl	8003c8c <xQueueGenericSend>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <osMessagePut+0x72>
      return osErrorOS;
 800371e:	23ff      	movs	r3, #255	; 0xff
 8003720:	e000      	b.n	8003724 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	e000ed04 	.word	0xe000ed04

08003730 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b08b      	sub	sp, #44	; 0x2c
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	617b      	str	r3, [r7, #20]
    return event;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	461c      	mov	r4, r3
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800375a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800375e:	e054      	b.n	800380a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d103      	bne.n	8003778 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e009      	b.n	800378c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <osMessageGet+0x5c>
      ticks = 1;
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800378c:	f7ff fe53 	bl	8003436 <inHandlerMode>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01c      	beq.n	80037d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003796:	f107 0220 	add.w	r2, r7, #32
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	68b8      	ldr	r0, [r7, #8]
 80037a4:	f000 fe84 	bl	80044b0 <xQueueReceiveFromISR>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80037ae:	2310      	movs	r3, #16
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e001      	b.n	80037b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01d      	beq.n	80037fa <osMessageGet+0xca>
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <osMessageGet+0xe4>)
 80037c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	e014      	b.n	80037fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	3304      	adds	r3, #4
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	4619      	mov	r1, r3
 80037da:	68b8      	ldr	r0, [r7, #8]
 80037dc:	f000 fc7c 	bl	80040d8 <xQueueReceive>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d102      	bne.n	80037ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80037e6:	2310      	movs	r3, #16
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e006      	b.n	80037fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <osMessageGet+0xc6>
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <osMessageGet+0xc8>
 80037f6:	2340      	movs	r3, #64	; 0x40
 80037f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	461c      	mov	r4, r3
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	372c      	adds	r7, #44	; 0x2c
 800380e:	46bd      	mov	sp, r7
 8003810:	bd90      	pop	{r4, r7, pc}
 8003812:	bf00      	nop
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f103 0208 	add.w	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f04f 32ff 	mov.w	r2, #4294967295
 8003830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f103 0208 	add.w	r2, r3, #8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f103 0208 	add.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d103      	bne.n	80038da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e00c      	b.n	80038f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3308      	adds	r3, #8
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e002      	b.n	80038e8 <vListInsert+0x2e>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d2f6      	bcs.n	80038e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6852      	ldr	r2, [r2, #4]
 800394c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d103      	bne.n	8003960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039aa:	f002 f83b 	bl	8005a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	68f9      	ldr	r1, [r7, #12]
 80039b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	441a      	add	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	3b01      	subs	r3, #1
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	441a      	add	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d114      	bne.n	8003a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01a      	beq.n	8003a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 fb01 	bl	8005014 <xTaskRemoveFromEventList>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <xQueueGenericReset+0xcc>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	e009      	b.n	8003a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3310      	adds	r3, #16
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fef2 	bl	8003818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff feed 	bl	8003818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a3e:	f002 f821 	bl	8005a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	; 0x38
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <xQueueGenericCreateStatic+0x52>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <xQueueGenericCreateStatic+0x56>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericCreateStatic+0x58>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <xQueueGenericCreateStatic+0x7e>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericCreateStatic+0x82>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericCreateStatic+0x84>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61fb      	str	r3, [r7, #28]
}
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003aee:	2348      	movs	r3, #72	; 0x48
 8003af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b48      	cmp	r3, #72	; 0x48
 8003af6:	d00a      	beq.n	8003b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	61bb      	str	r3, [r7, #24]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f83f 	bl	8003bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3730      	adds	r7, #48	; 0x30
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	613b      	str	r3, [r7, #16]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3348      	adds	r3, #72	; 0x48
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 f875 	bl	8005c68 <pvPortMalloc>
 8003b7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d011      	beq.n	8003baa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3348      	adds	r3, #72	; 0x48
 8003b8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b98:	79fa      	ldrb	r2, [r7, #7]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f805 	bl	8003bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003baa:	69bb      	ldr	r3, [r7, #24]
	}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e002      	b.n	8003bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003be2:	2101      	movs	r1, #1
 8003be4:	69b8      	ldr	r0, [r7, #24]
 8003be6:	f7ff fecb 	bl	8003980 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003c12:	2300      	movs	r3, #0
 8003c14:	2200      	movs	r2, #0
 8003c16:	2100      	movs	r1, #0
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f837 	bl	8003c8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6939      	ldr	r1, [r7, #16]
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f7ff ff7e 	bl	8003b40 <xQueueGenericCreate>
 8003c44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff ffd3 	bl	8003bf2 <prvInitialiseMutex>

		return xNewQueue;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
	}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b088      	sub	sp, #32
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	6039      	str	r1, [r7, #0]
 8003c60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c62:	2301      	movs	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	6939      	ldr	r1, [r7, #16]
 8003c74:	6978      	ldr	r0, [r7, #20]
 8003c76:	f7ff feeb 	bl	8003a50 <xQueueGenericCreateStatic>
 8003c7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff ffb8 	bl	8003bf2 <prvInitialiseMutex>

		return xNewQueue;
 8003c82:	68fb      	ldr	r3, [r7, #12]
	}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08e      	sub	sp, #56	; 0x38
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xQueueGenericSend+0x32>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <xQueueGenericSend+0x40>
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <xQueueGenericSend+0x44>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <xQueueGenericSend+0x46>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <xQueueGenericSend+0x60>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <xQueueGenericSend+0x6e>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <xQueueGenericSend+0x72>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <xQueueGenericSend+0x74>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <xQueueGenericSend+0x8e>
	__asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	623b      	str	r3, [r7, #32]
}
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d1a:	f001 fb37 	bl	800538c <xTaskGetSchedulerState>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <xQueueGenericSend+0x9e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <xQueueGenericSend+0xa2>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <xQueueGenericSend+0xa4>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xQueueGenericSend+0xbe>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	61fb      	str	r3, [r7, #28]
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d4a:	f001 fe6b 	bl	8005a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <xQueueGenericSend+0xd4>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d129      	bne.n	8003db4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d66:	f000 fc3b 	bl	80045e0 <prvCopyDataToQueue>
 8003d6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d010      	beq.n	8003d96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	3324      	adds	r3, #36	; 0x24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 f94b 	bl	8005014 <xTaskRemoveFromEventList>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d84:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <xQueueGenericSend+0x1f8>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	e00a      	b.n	8003dac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d9c:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <xQueueGenericSend+0x1f8>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003dac:	f001 fe6a 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e063      	b.n	8003e7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dba:	f001 fe63 	bl	8005a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e05c      	b.n	8003e7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 f983 	bl	80050d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dd6:	f001 fe55 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dda:	f000 ff39 	bl	8004c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dde:	f001 fe21 	bl	8005a24 <vPortEnterCritical>
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d103      	bne.n	8003df8 <xQueueGenericSend+0x16c>
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d103      	bne.n	8003e0e <xQueueGenericSend+0x182>
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e0e:	f001 fe39 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e12:	1d3a      	adds	r2, r7, #4
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f972 	bl	8005104 <xTaskCheckForTimeOut>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d124      	bne.n	8003e70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e28:	f000 fcd2 	bl	80047d0 <prvIsQueueFull>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	3310      	adds	r3, #16
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f8c6 	bl	8004fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e42:	f000 fc5d 	bl	8004700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e46:	f000 ff11 	bl	8004c6c <xTaskResumeAll>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f47f af7c 	bne.w	8003d4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <xQueueGenericSend+0x1f8>)
 8003e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	e772      	b.n	8003d4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e66:	f000 fc4b 	bl	8004700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e6a:	f000 feff 	bl	8004c6c <xTaskResumeAll>
 8003e6e:	e76c      	b.n	8003d4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e72:	f000 fc45 	bl	8004700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e76:	f000 fef9 	bl	8004c6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3738      	adds	r7, #56	; 0x38
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b090      	sub	sp, #64	; 0x40
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <xQueueGenericSendFromISR+0x3c>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <xQueueGenericSendFromISR+0x40>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xQueueGenericSendFromISR+0x42>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d103      	bne.n	8003ef2 <xQueueGenericSendFromISR+0x6a>
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <xQueueGenericSendFromISR+0x6e>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <xQueueGenericSendFromISR+0x70>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	623b      	str	r3, [r7, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f12:	f001 fe69 	bl	8005be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f16:	f3ef 8211 	mrs	r2, BASEPRI
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	61fa      	str	r2, [r7, #28]
 8003f2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d302      	bcc.n	8003f44 <xQueueGenericSendFromISR+0xbc>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d12f      	bne.n	8003fa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f5a:	f000 fb41 	bl	80045e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d112      	bne.n	8003f8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d016      	beq.n	8003f9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	3324      	adds	r3, #36	; 0x24
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 f84d 	bl	8005014 <xTaskRemoveFromEventList>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00e      	beq.n	8003f9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e007      	b.n	8003f9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	b25a      	sxtb	r2, r3
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003fa2:	e001      	b.n	8003fa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3740      	adds	r7, #64	; 0x40
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08e      	sub	sp, #56	; 0x38
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	623b      	str	r3, [r7, #32]
}
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	61fb      	str	r3, [r7, #28]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <xQueueGiveFromISR+0x58>
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <xQueueGiveFromISR+0x5c>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueGiveFromISR+0x5e>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61bb      	str	r3, [r7, #24]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004036:	f001 fdd7 	bl	8005be8 <vPortValidateInterruptPriority>
	__asm volatile
 800403a:	f3ef 8211 	mrs	r2, BASEPRI
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	617a      	str	r2, [r7, #20]
 8004050:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004052:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004062:	429a      	cmp	r2, r3
 8004064:	d22b      	bcs.n	80040be <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800406c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004078:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d112      	bne.n	80040a8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	3324      	adds	r3, #36	; 0x24
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ffc0 	bl	8005014 <xTaskRemoveFromEventList>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e007      	b.n	80040b8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ac:	3301      	adds	r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	b25a      	sxtb	r2, r3
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040b8:	2301      	movs	r3, #1
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
 80040bc:	e001      	b.n	80040c2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f383 8811 	msr	BASEPRI, r3
}
 80040cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3738      	adds	r7, #56	; 0x38
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	; 0x30
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <xQueueReceive+0x30>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	623b      	str	r3, [r7, #32]
}
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <xQueueReceive+0x3e>
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <xQueueReceive+0x42>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueReceive+0x44>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueReceive+0x5e>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	61fb      	str	r3, [r7, #28]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004136:	f001 f929 	bl	800538c <xTaskGetSchedulerState>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d102      	bne.n	8004146 <xQueueReceive+0x6e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <xQueueReceive+0x72>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <xQueueReceive+0x74>
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xQueueReceive+0x8e>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	61bb      	str	r3, [r7, #24]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004166:	f001 fc5d 	bl	8005a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01f      	beq.n	80041b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800417a:	f000 fa9b 	bl	80046b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1e5a      	subs	r2, r3, #1
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00f      	beq.n	80041ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	3310      	adds	r3, #16
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff3e 	bl	8005014 <xTaskRemoveFromEventList>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800419e:	4b3d      	ldr	r3, [pc, #244]	; (8004294 <xQueueReceive+0x1bc>)
 80041a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041ae:	f001 fc69 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e069      	b.n	800428a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d103      	bne.n	80041c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041bc:	f001 fc62 	bl	8005a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e062      	b.n	800428a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ca:	f107 0310 	add.w	r3, r7, #16
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 ff82 	bl	80050d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041d8:	f001 fc54 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041dc:	f000 fd38 	bl	8004c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041e0:	f001 fc20 	bl	8005a24 <vPortEnterCritical>
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d103      	bne.n	80041fa <xQueueReceive+0x122>
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004200:	b25b      	sxtb	r3, r3
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d103      	bne.n	8004210 <xQueueReceive+0x138>
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004210:	f001 fc38 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004214:	1d3a      	adds	r2, r7, #4
 8004216:	f107 0310 	add.w	r3, r7, #16
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f000 ff71 	bl	8005104 <xTaskCheckForTimeOut>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d123      	bne.n	8004270 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800422a:	f000 fabb 	bl	80047a4 <prvIsQueueEmpty>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d017      	beq.n	8004264 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	3324      	adds	r3, #36	; 0x24
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fec5 	bl	8004fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004244:	f000 fa5c 	bl	8004700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004248:	f000 fd10 	bl	8004c6c <xTaskResumeAll>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d189      	bne.n	8004166 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <xQueueReceive+0x1bc>)
 8004254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	e780      	b.n	8004166 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004266:	f000 fa4b 	bl	8004700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800426a:	f000 fcff 	bl	8004c6c <xTaskResumeAll>
 800426e:	e77a      	b.n	8004166 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004272:	f000 fa45 	bl	8004700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004276:	f000 fcf9 	bl	8004c6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800427a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427c:	f000 fa92 	bl	80047a4 <prvIsQueueEmpty>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	f43f af6f 	beq.w	8004166 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800428a:	4618      	mov	r0, r3
 800428c:	3730      	adds	r7, #48	; 0x30
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08e      	sub	sp, #56	; 0x38
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	623b      	str	r3, [r7, #32]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	61fb      	str	r3, [r7, #28]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042e8:	f001 f850 	bl	800538c <xTaskGetSchedulerState>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <xQueueSemaphoreTake+0x60>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <xQueueSemaphoreTake+0x64>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <xQueueSemaphoreTake+0x66>
 80042fc:	2300      	movs	r3, #0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	61bb      	str	r3, [r7, #24]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004318:	f001 fb84 	bl	8005a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d024      	beq.n	8004372 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	1e5a      	subs	r2, r3, #1
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004338:	f001 f9d0 	bl	80056dc <pvTaskIncrementMutexHeldCount>
 800433c:	4602      	mov	r2, r0
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00f      	beq.n	800436a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	3310      	adds	r3, #16
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fe60 	bl	8005014 <xTaskRemoveFromEventList>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800435a:	4b54      	ldr	r3, [pc, #336]	; (80044ac <xQueueSemaphoreTake+0x214>)
 800435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800436a:	f001 fb8b 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 800436e:	2301      	movs	r3, #1
 8004370:	e097      	b.n	80044a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d111      	bne.n	800439c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	617b      	str	r3, [r7, #20]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004394:	f001 fb76 	bl	8005a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004398:	2300      	movs	r3, #0
 800439a:	e082      	b.n	80044a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043a2:	f107 030c 	add.w	r3, r7, #12
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fe96 	bl	80050d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043b0:	f001 fb68 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043b4:	f000 fc4c 	bl	8004c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043b8:	f001 fb34 	bl	8005a24 <vPortEnterCritical>
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043c2:	b25b      	sxtb	r3, r3
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d103      	bne.n	80043d2 <xQueueSemaphoreTake+0x13a>
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d103      	bne.n	80043e8 <xQueueSemaphoreTake+0x150>
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e8:	f001 fb4c 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ec:	463a      	mov	r2, r7
 80043ee:	f107 030c 	add.w	r3, r7, #12
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fe85 	bl	8005104 <xTaskCheckForTimeOut>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d132      	bne.n	8004466 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004402:	f000 f9cf 	bl	80047a4 <prvIsQueueEmpty>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d026      	beq.n	800445a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004414:	f001 fb06 	bl	8005a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 ffd3 	bl	80053c8 <xTaskPriorityInherit>
 8004422:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004424:	f001 fb2e 	bl	8005a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	3324      	adds	r3, #36	; 0x24
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fdcb 	bl	8004fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004438:	f000 f962 	bl	8004700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800443c:	f000 fc16 	bl	8004c6c <xTaskResumeAll>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	f47f af68 	bne.w	8004318 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <xQueueSemaphoreTake+0x214>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	e75e      	b.n	8004318 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800445a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800445c:	f000 f950 	bl	8004700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004460:	f000 fc04 	bl	8004c6c <xTaskResumeAll>
 8004464:	e758      	b.n	8004318 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004468:	f000 f94a 	bl	8004700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800446c:	f000 fbfe 	bl	8004c6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004472:	f000 f997 	bl	80047a4 <prvIsQueueEmpty>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	f43f af4d 	beq.w	8004318 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004484:	f001 face 	bl	8005a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800448a:	f000 f891 	bl	80045b0 <prvGetDisinheritPriorityAfterTimeout>
 800448e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004496:	4618      	mov	r0, r3
 8004498:	f001 f892 	bl	80055c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800449c:	f001 faf2 	bl	8005a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3738      	adds	r7, #56	; 0x38
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08e      	sub	sp, #56	; 0x38
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	623b      	str	r3, [r7, #32]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <xQueueReceiveFromISR+0x3a>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <xQueueReceiveFromISR+0x3e>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueReceiveFromISR+0x40>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	61fb      	str	r3, [r7, #28]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800450a:	f001 fb6d 	bl	8005be8 <vPortValidateInterruptPriority>
	__asm volatile
 800450e:	f3ef 8211 	mrs	r2, BASEPRI
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61ba      	str	r2, [r7, #24]
 8004524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004526:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02f      	beq.n	8004596 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800453c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004544:	f000 f8b6 	bl	80046b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	1e5a      	subs	r2, r3, #1
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d112      	bne.n	8004580 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	3310      	adds	r3, #16
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fd54 	bl	8005014 <xTaskRemoveFromEventList>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e007      	b.n	8004590 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004584:	3301      	adds	r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	b25a      	sxtb	r2, r3
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004590:	2301      	movs	r3, #1
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
 8004594:	e001      	b.n	800459a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f383 8811 	msr	BASEPRI, r3
}
 80045a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3738      	adds	r7, #56	; 0x38
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1c3 0307 	rsb	r3, r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e001      	b.n	80045d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80045d2:	68fb      	ldr	r3, [r7, #12]
	}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10d      	bne.n	800461a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d14d      	bne.n	80046a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ff52 	bl	80054b4 <xTaskPriorityDisinherit>
 8004610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	e043      	b.n	80046a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d119      	bne.n	8004654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6858      	ldr	r0, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	461a      	mov	r2, r3
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	f001 ff1f 	bl	800646e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	d32b      	bcc.n	80046a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e026      	b.n	80046a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68d8      	ldr	r0, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	461a      	mov	r2, r3
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	f001 ff05 	bl	800646e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	425b      	negs	r3, r3
 800466e:	441a      	add	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d207      	bcs.n	8004690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	425b      	negs	r3, r3
 800468a:	441a      	add	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d105      	bne.n	80046a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3b01      	subs	r3, #1
 80046a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046aa:	697b      	ldr	r3, [r7, #20]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	441a      	add	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d303      	bcc.n	80046e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	461a      	mov	r2, r3
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f001 febb 	bl	800646e <memcpy>
	}
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004708:	f001 f98c 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004714:	e011      	b.n	800473a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3324      	adds	r3, #36	; 0x24
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fc76 	bl	8005014 <xTaskRemoveFromEventList>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800472e:	f000 fd4b 	bl	80051c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	3b01      	subs	r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800473a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	dce9      	bgt.n	8004716 <prvUnlockQueue+0x16>
 8004742:	e000      	b.n	8004746 <prvUnlockQueue+0x46>
					break;
 8004744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800474e:	f001 f999 	bl	8005a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004752:	f001 f967 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800475c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800475e:	e011      	b.n	8004784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d012      	beq.n	800478e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3310      	adds	r3, #16
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fc51 	bl	8005014 <xTaskRemoveFromEventList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004778:	f000 fd26 	bl	80051c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800477c:	7bbb      	ldrb	r3, [r7, #14]
 800477e:	3b01      	subs	r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004788:	2b00      	cmp	r3, #0
 800478a:	dce9      	bgt.n	8004760 <prvUnlockQueue+0x60>
 800478c:	e000      	b.n	8004790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800478e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	22ff      	movs	r2, #255	; 0xff
 8004794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004798:	f001 f974 	bl	8005a84 <vPortExitCritical>
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047ac:	f001 f93a 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e001      	b.n	80047c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047c2:	f001 f95f 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047d8:	f001 f924 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d102      	bne.n	80047ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047e8:	2301      	movs	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e001      	b.n	80047f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047f2:	f001 f947 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	; 0x38
 8004804:	af04      	add	r7, sp, #16
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	623b      	str	r3, [r7, #32]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xTaskCreateStatic+0x46>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	61fb      	str	r3, [r7, #28]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004846:	2354      	movs	r3, #84	; 0x54
 8004848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b54      	cmp	r3, #84	; 0x54
 800484e:	d00a      	beq.n	8004866 <xTaskCreateStatic+0x66>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	61bb      	str	r3, [r7, #24]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004866:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01e      	beq.n	80048ac <xTaskCreateStatic+0xac>
 800486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01b      	beq.n	80048ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800487c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004886:	2300      	movs	r3, #0
 8004888:	9303      	str	r3, [sp, #12]
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	9302      	str	r3, [sp, #8]
 800488e:	f107 0314 	add.w	r3, r7, #20
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f850 	bl	8004944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048a6:	f000 f8d5 	bl	8004a54 <prvAddNewTaskToReadyList>
 80048aa:	e001      	b.n	80048b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048b0:	697b      	ldr	r3, [r7, #20]
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3728      	adds	r7, #40	; 0x28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b08c      	sub	sp, #48	; 0x30
 80048be:	af04      	add	r7, sp, #16
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f9ca 	bl	8005c68 <pvPortMalloc>
 80048d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00e      	beq.n	80048fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048dc:	2054      	movs	r0, #84	; 0x54
 80048de:	f001 f9c3 	bl	8005c68 <pvPortMalloc>
 80048e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
 80048f0:	e005      	b.n	80048fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f001 fa84 	bl	8005e00 <vPortFree>
 80048f8:	e001      	b.n	80048fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d017      	beq.n	8004934 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800490c:	88fa      	ldrh	r2, [r7, #6]
 800490e:	2300      	movs	r3, #0
 8004910:	9303      	str	r3, [sp, #12]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	9302      	str	r3, [sp, #8]
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f80e 	bl	8004944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004928:	69f8      	ldr	r0, [r7, #28]
 800492a:	f000 f893 	bl	8004a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800492e:	2301      	movs	r3, #1
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e002      	b.n	800493a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
 8004938:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800493a:	69bb      	ldr	r3, [r7, #24]
	}
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800495c:	3b01      	subs	r3, #1
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	617b      	str	r3, [r7, #20]
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01f      	beq.n	80049d2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	e012      	b.n	80049be <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	7819      	ldrb	r1, [r3, #0]
 80049a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	3334      	adds	r3, #52	; 0x34
 80049a8:	460a      	mov	r2, r1
 80049aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d006      	beq.n	80049c6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d9e9      	bls.n	8004998 <prvInitialiseNewTask+0x54>
 80049c4:	e000      	b.n	80049c8 <prvInitialiseNewTask+0x84>
			{
				break;
 80049c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d0:	e003      	b.n	80049da <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d901      	bls.n	80049e4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049e0:	2306      	movs	r3, #6
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	2200      	movs	r2, #0
 80049f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe ff2c 	bl	8003858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	3318      	adds	r3, #24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe ff27 	bl	8003858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	f1c3 0207 	rsb	r2, r3, #7
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	2200      	movs	r2, #0
 8004a24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	69b8      	ldr	r0, [r7, #24]
 8004a34:	f000 fecc 	bl	80057d0 <pxPortInitialiseStack>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a4a:	bf00      	nop
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a5c:	f000 ffe2 	bl	8005a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a60:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <prvAddNewTaskToReadyList+0xb8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	4a29      	ldr	r2, [pc, #164]	; (8004b0c <prvAddNewTaskToReadyList+0xb8>)
 8004a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a6a:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <prvAddNewTaskToReadyList+0xbc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a72:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <prvAddNewTaskToReadyList+0xbc>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a78:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <prvAddNewTaskToReadyList+0xb8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d110      	bne.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a80:	f000 fbc6 	bl	8005210 <prvInitialiseTaskLists>
 8004a84:	e00d      	b.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <prvAddNewTaskToReadyList+0xc0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <prvAddNewTaskToReadyList+0xbc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d802      	bhi.n	8004aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <prvAddNewTaskToReadyList+0xbc>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <prvAddNewTaskToReadyList+0xc4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <prvAddNewTaskToReadyList+0xc4>)
 8004aaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <prvAddNewTaskToReadyList+0xc8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <prvAddNewTaskToReadyList+0xc8>)
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <prvAddNewTaskToReadyList+0xcc>)
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7fe fecc 	bl	8003872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ada:	f000 ffd3 	bl	8005a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <prvAddNewTaskToReadyList+0xc0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00e      	beq.n	8004b04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <prvAddNewTaskToReadyList+0xbc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d207      	bcs.n	8004b04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <prvAddNewTaskToReadyList+0xd0>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	200004b8 	.word	0x200004b8
 8004b10:	200003b8 	.word	0x200003b8
 8004b14:	200004c4 	.word	0x200004c4
 8004b18:	200004d4 	.word	0x200004d4
 8004b1c:	200004c0 	.word	0x200004c0
 8004b20:	200003bc 	.word	0x200003bc
 8004b24:	e000ed04 	.word	0xe000ed04

08004b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d017      	beq.n	8004b6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <vTaskDelay+0x60>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <vTaskDelay+0x30>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60bb      	str	r3, [r7, #8]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b58:	f000 f87a 	bl	8004c50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fdd0 	bl	8005704 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b64:	f000 f882 	bl	8004c6c <xTaskResumeAll>
 8004b68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d107      	bne.n	8004b80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <vTaskDelay+0x64>)
 8004b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200004e0 	.word	0x200004e0
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b9e:	463a      	mov	r2, r7
 8004ba0:	1d39      	adds	r1, r7, #4
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fc f8fe 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	9202      	str	r2, [sp, #8]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	491e      	ldr	r1, [pc, #120]	; (8004c38 <vTaskStartScheduler+0xa8>)
 8004bc0:	481e      	ldr	r0, [pc, #120]	; (8004c3c <vTaskStartScheduler+0xac>)
 8004bc2:	f7ff fe1d 	bl	8004800 <xTaskCreateStatic>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <vTaskStartScheduler+0xb0>)
 8004bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <vTaskStartScheduler+0xb0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e001      	b.n	8004bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d116      	bne.n	8004c12 <vTaskStartScheduler+0x82>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	613b      	str	r3, [r7, #16]
}
 8004bf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <vTaskStartScheduler+0xb4>)
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <vTaskStartScheduler+0xb8>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <vTaskStartScheduler+0xbc>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c0c:	f000 fe68 	bl	80058e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c10:	e00e      	b.n	8004c30 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d10a      	bne.n	8004c30 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60fb      	str	r3, [r7, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vTaskStartScheduler+0x9e>
}
 8004c30:	bf00      	nop
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	080071ec 	.word	0x080071ec
 8004c3c:	080051e1 	.word	0x080051e1
 8004c40:	200004dc 	.word	0x200004dc
 8004c44:	200004d8 	.word	0x200004d8
 8004c48:	200004c4 	.word	0x200004c4
 8004c4c:	200004bc 	.word	0x200004bc

08004c50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <vTaskSuspendAll+0x18>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	4a03      	ldr	r2, [pc, #12]	; (8004c68 <vTaskSuspendAll+0x18>)
 8004c5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c5e:	bf00      	nop
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	200004e0 	.word	0x200004e0

08004c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c7a:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <xTaskResumeAll+0x114>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	603b      	str	r3, [r7, #0]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c98:	f000 fec4 	bl	8005a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c9c:	4b38      	ldr	r3, [pc, #224]	; (8004d80 <xTaskResumeAll+0x114>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	4a37      	ldr	r2, [pc, #220]	; (8004d80 <xTaskResumeAll+0x114>)
 8004ca4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca6:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <xTaskResumeAll+0x114>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d161      	bne.n	8004d72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cae:	4b35      	ldr	r3, [pc, #212]	; (8004d84 <xTaskResumeAll+0x118>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d05d      	beq.n	8004d72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cb6:	e02e      	b.n	8004d16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb8:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <xTaskResumeAll+0x11c>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe fe31 	bl	800392c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fe2c 	bl	800392c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	2201      	movs	r2, #1
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <xTaskResumeAll+0x120>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <xTaskResumeAll+0x120>)
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <xTaskResumeAll+0x124>)
 8004cf4:	441a      	add	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7fe fdb8 	bl	8003872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <xTaskResumeAll+0x128>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <xTaskResumeAll+0x12c>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d16:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <xTaskResumeAll+0x11c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1cc      	bne.n	8004cb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d24:	f000 fb12 	bl	800534c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d28:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <xTaskResumeAll+0x130>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d010      	beq.n	8004d56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d34:	f000 f836 	bl	8004da4 <xTaskIncrementTick>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <xTaskResumeAll+0x12c>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f1      	bne.n	8004d34 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004d50:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <xTaskResumeAll+0x130>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <xTaskResumeAll+0x12c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <xTaskResumeAll+0x134>)
 8004d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d72:	f000 fe87 	bl	8005a84 <vPortExitCritical>

	return xAlreadyYielded;
 8004d76:	68bb      	ldr	r3, [r7, #8]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	200004e0 	.word	0x200004e0
 8004d84:	200004b8 	.word	0x200004b8
 8004d88:	20000478 	.word	0x20000478
 8004d8c:	200004c0 	.word	0x200004c0
 8004d90:	200003bc 	.word	0x200003bc
 8004d94:	200003b8 	.word	0x200003b8
 8004d98:	200004cc 	.word	0x200004cc
 8004d9c:	200004c8 	.word	0x200004c8
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dae:	4b4e      	ldr	r3, [pc, #312]	; (8004ee8 <xTaskIncrementTick+0x144>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f040 808e 	bne.w	8004ed4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004db8:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <xTaskIncrementTick+0x148>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004dc0:	4a4a      	ldr	r2, [pc, #296]	; (8004eec <xTaskIncrementTick+0x148>)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d120      	bne.n	8004e0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004dcc:	4b48      	ldr	r3, [pc, #288]	; (8004ef0 <xTaskIncrementTick+0x14c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <xTaskIncrementTick+0x48>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	603b      	str	r3, [r7, #0]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <xTaskIncrementTick+0x46>
 8004dec:	4b40      	ldr	r3, [pc, #256]	; (8004ef0 <xTaskIncrementTick+0x14c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	4b40      	ldr	r3, [pc, #256]	; (8004ef4 <xTaskIncrementTick+0x150>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a3e      	ldr	r2, [pc, #248]	; (8004ef0 <xTaskIncrementTick+0x14c>)
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4a3e      	ldr	r2, [pc, #248]	; (8004ef4 <xTaskIncrementTick+0x150>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b3d      	ldr	r3, [pc, #244]	; (8004ef8 <xTaskIncrementTick+0x154>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3301      	adds	r3, #1
 8004e06:	4a3c      	ldr	r2, [pc, #240]	; (8004ef8 <xTaskIncrementTick+0x154>)
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	f000 fa9f 	bl	800534c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e0e:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <xTaskIncrementTick+0x158>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d348      	bcc.n	8004eaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e18:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <xTaskIncrementTick+0x14c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e22:	4b36      	ldr	r3, [pc, #216]	; (8004efc <xTaskIncrementTick+0x158>)
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	601a      	str	r2, [r3, #0]
					break;
 8004e2a:	e03e      	b.n	8004eaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2c:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <xTaskIncrementTick+0x14c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d203      	bcs.n	8004e4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e44:	4a2d      	ldr	r2, [pc, #180]	; (8004efc <xTaskIncrementTick+0x158>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e4a:	e02e      	b.n	8004eaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fd6b 	bl	800392c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3318      	adds	r3, #24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe fd62 	bl	800392c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <xTaskIncrementTick+0x15c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <xTaskIncrementTick+0x15c>)
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <xTaskIncrementTick+0x160>)
 8004e88:	441a      	add	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fe fcee 	bl	8003872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <xTaskIncrementTick+0x164>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d3b9      	bcc.n	8004e18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea8:	e7b6      	b.n	8004e18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004eaa:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <xTaskIncrementTick+0x164>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	4914      	ldr	r1, [pc, #80]	; (8004f04 <xTaskIncrementTick+0x160>)
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d901      	bls.n	8004ec6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <xTaskIncrementTick+0x168>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e004      	b.n	8004ede <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <xTaskIncrementTick+0x16c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	4a0d      	ldr	r2, [pc, #52]	; (8004f10 <xTaskIncrementTick+0x16c>)
 8004edc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ede:	697b      	ldr	r3, [r7, #20]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	200004e0 	.word	0x200004e0
 8004eec:	200004bc 	.word	0x200004bc
 8004ef0:	20000470 	.word	0x20000470
 8004ef4:	20000474 	.word	0x20000474
 8004ef8:	200004d0 	.word	0x200004d0
 8004efc:	200004d8 	.word	0x200004d8
 8004f00:	200004c0 	.word	0x200004c0
 8004f04:	200003bc 	.word	0x200003bc
 8004f08:	200003b8 	.word	0x200003b8
 8004f0c:	200004cc 	.word	0x200004cc
 8004f10:	200004c8 	.word	0x200004c8

08004f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f1a:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <vTaskSwitchContext+0xa4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f22:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <vTaskSwitchContext+0xa8>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f28:	e03f      	b.n	8004faa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <vTaskSwitchContext+0xa8>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f30:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <vTaskSwitchContext+0xac>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	fab3 f383 	clz	r3, r3
 8004f3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
 8004f40:	f1c3 031f 	rsb	r3, r3, #31
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	491f      	ldr	r1, [pc, #124]	; (8004fc4 <vTaskSwitchContext+0xb0>)
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	607b      	str	r3, [r7, #4]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <vTaskSwitchContext+0x5a>
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <vTaskSwitchContext+0xb0>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3308      	adds	r3, #8
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d104      	bne.n	8004fa0 <vTaskSwitchContext+0x8c>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <vTaskSwitchContext+0xb4>)
 8004fa8:	6013      	str	r3, [r2, #0]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	200004e0 	.word	0x200004e0
 8004fbc:	200004cc 	.word	0x200004cc
 8004fc0:	200004c0 	.word	0x200004c0
 8004fc4:	200003bc 	.word	0x200003bc
 8004fc8:	200003b8 	.word	0x200003b8

08004fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	60fb      	str	r3, [r7, #12]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <vTaskPlaceOnEventList+0x44>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3318      	adds	r3, #24
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fe fc5d 	bl	80038ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005000:	2101      	movs	r1, #1
 8005002:	6838      	ldr	r0, [r7, #0]
 8005004:	f000 fb7e 	bl	8005704 <prvAddCurrentTaskToDelayedList>
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	200003b8 	.word	0x200003b8

08005014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	60fb      	str	r3, [r7, #12]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	3318      	adds	r3, #24
 8005044:	4618      	mov	r0, r3
 8005046:	f7fe fc71 	bl	800392c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <xTaskRemoveFromEventList+0xac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d11c      	bne.n	800508c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3304      	adds	r3, #4
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fc68 	bl	800392c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	2201      	movs	r2, #1
 8005062:	409a      	lsls	r2, r3
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <xTaskRemoveFromEventList+0xb0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <xTaskRemoveFromEventList+0xb0>)
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <xTaskRemoveFromEventList+0xb4>)
 800507c:	441a      	add	r2, r3
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f7fe fbf4 	bl	8003872 <vListInsertEnd>
 800508a:	e005      	b.n	8005098 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	3318      	adds	r3, #24
 8005090:	4619      	mov	r1, r3
 8005092:	480e      	ldr	r0, [pc, #56]	; (80050cc <xTaskRemoveFromEventList+0xb8>)
 8005094:	f7fe fbed 	bl	8003872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <xTaskRemoveFromEventList+0xbc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d905      	bls.n	80050b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <xTaskRemoveFromEventList+0xc0>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e001      	b.n	80050b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050b6:	697b      	ldr	r3, [r7, #20]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	200004e0 	.word	0x200004e0
 80050c4:	200004c0 	.word	0x200004c0
 80050c8:	200003bc 	.word	0x200003bc
 80050cc:	20000478 	.word	0x20000478
 80050d0:	200003b8 	.word	0x200003b8
 80050d4:	200004cc 	.word	0x200004cc

080050d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <vTaskInternalSetTimeOutState+0x24>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <vTaskInternalSetTimeOutState+0x28>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	605a      	str	r2, [r3, #4]
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	200004d0 	.word	0x200004d0
 8005100:	200004bc 	.word	0x200004bc

08005104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	613b      	str	r3, [r7, #16]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005146:	f000 fc6d 	bl	8005a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <xTaskCheckForTimeOut+0xbc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d102      	bne.n	800516a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	e023      	b.n	80051b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <xTaskCheckForTimeOut+0xc0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d007      	beq.n	8005186 <xTaskCheckForTimeOut+0x82>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	d302      	bcc.n	8005186 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	e015      	b.n	80051b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	429a      	cmp	r2, r3
 800518e:	d20b      	bcs.n	80051a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad2      	subs	r2, r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff ff9b 	bl	80050d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e004      	b.n	80051b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051b2:	f000 fc67 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 80051b6:	69fb      	ldr	r3, [r7, #28]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	200004bc 	.word	0x200004bc
 80051c4:	200004d0 	.word	0x200004d0

080051c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <vTaskMissedYield+0x14>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
}
 80051d2:	bf00      	nop
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	200004cc 	.word	0x200004cc

080051e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051e8:	f000 f852 	bl	8005290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <prvIdleTask+0x28>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d9f9      	bls.n	80051e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <prvIdleTask+0x2c>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005204:	e7f0      	b.n	80051e8 <prvIdleTask+0x8>
 8005206:	bf00      	nop
 8005208:	200003bc 	.word	0x200003bc
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005216:	2300      	movs	r3, #0
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	e00c      	b.n	8005236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <prvInitialiseTaskLists+0x60>)
 8005228:	4413      	add	r3, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe faf4 	bl	8003818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3301      	adds	r3, #1
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b06      	cmp	r3, #6
 800523a:	d9ef      	bls.n	800521c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800523c:	480d      	ldr	r0, [pc, #52]	; (8005274 <prvInitialiseTaskLists+0x64>)
 800523e:	f7fe faeb 	bl	8003818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005242:	480d      	ldr	r0, [pc, #52]	; (8005278 <prvInitialiseTaskLists+0x68>)
 8005244:	f7fe fae8 	bl	8003818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005248:	480c      	ldr	r0, [pc, #48]	; (800527c <prvInitialiseTaskLists+0x6c>)
 800524a:	f7fe fae5 	bl	8003818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800524e:	480c      	ldr	r0, [pc, #48]	; (8005280 <prvInitialiseTaskLists+0x70>)
 8005250:	f7fe fae2 	bl	8003818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005254:	480b      	ldr	r0, [pc, #44]	; (8005284 <prvInitialiseTaskLists+0x74>)
 8005256:	f7fe fadf 	bl	8003818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <prvInitialiseTaskLists+0x78>)
 800525c:	4a05      	ldr	r2, [pc, #20]	; (8005274 <prvInitialiseTaskLists+0x64>)
 800525e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <prvInitialiseTaskLists+0x7c>)
 8005262:	4a05      	ldr	r2, [pc, #20]	; (8005278 <prvInitialiseTaskLists+0x68>)
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200003bc 	.word	0x200003bc
 8005274:	20000448 	.word	0x20000448
 8005278:	2000045c 	.word	0x2000045c
 800527c:	20000478 	.word	0x20000478
 8005280:	2000048c 	.word	0x2000048c
 8005284:	200004a4 	.word	0x200004a4
 8005288:	20000470 	.word	0x20000470
 800528c:	20000474 	.word	0x20000474

08005290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005296:	e019      	b.n	80052cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005298:	f000 fbc4 	bl	8005a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <prvCheckTasksWaitingTermination+0x50>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe fb3f 	bl	800392c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <prvCheckTasksWaitingTermination+0x54>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <prvCheckTasksWaitingTermination+0x54>)
 80052b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <prvCheckTasksWaitingTermination+0x58>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3b01      	subs	r3, #1
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <prvCheckTasksWaitingTermination+0x58>)
 80052c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052c2:	f000 fbdf 	bl	8005a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f810 	bl	80052ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <prvCheckTasksWaitingTermination+0x58>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e1      	bne.n	8005298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	2000048c 	.word	0x2000048c
 80052e4:	200004b8 	.word	0x200004b8
 80052e8:	200004a0 	.word	0x200004a0

080052ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d108      	bne.n	8005310 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fd7c 	bl	8005e00 <vPortFree>
				vPortFree( pxTCB );
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fd79 	bl	8005e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800530e:	e018      	b.n	8005342 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005316:	2b01      	cmp	r3, #1
 8005318:	d103      	bne.n	8005322 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fd70 	bl	8005e00 <vPortFree>
	}
 8005320:	e00f      	b.n	8005342 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005328:	2b02      	cmp	r3, #2
 800532a:	d00a      	beq.n	8005342 <prvDeleteTCB+0x56>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60fb      	str	r3, [r7, #12]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <prvDeleteTCB+0x54>
	}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <prvResetNextTaskUnblockTime+0x38>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvResetNextTaskUnblockTime+0x3c>)
 800535e:	f04f 32ff 	mov.w	r2, #4294967295
 8005362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005364:	e008      	b.n	8005378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <prvResetNextTaskUnblockTime+0x38>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4a04      	ldr	r2, [pc, #16]	; (8005388 <prvResetNextTaskUnblockTime+0x3c>)
 8005376:	6013      	str	r3, [r2, #0]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000470 	.word	0x20000470
 8005388:	200004d8 	.word	0x200004d8

0800538c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <xTaskGetSchedulerState+0x34>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800539a:	2301      	movs	r3, #1
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	e008      	b.n	80053b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a0:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <xTaskGetSchedulerState+0x38>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053a8:	2302      	movs	r3, #2
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	e001      	b.n	80053b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053b2:	687b      	ldr	r3, [r7, #4]
	}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	200004c4 	.word	0x200004c4
 80053c4:	200004e0 	.word	0x200004e0

080053c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d05e      	beq.n	800549c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e2:	4b31      	ldr	r3, [pc, #196]	; (80054a8 <xTaskPriorityInherit+0xe0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d24e      	bcs.n	800548a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db06      	blt.n	8005402 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <xTaskPriorityInherit+0xe0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	f1c3 0207 	rsb	r2, r3, #7
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6959      	ldr	r1, [r3, #20]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a26      	ldr	r2, [pc, #152]	; (80054ac <xTaskPriorityInherit+0xe4>)
 8005414:	4413      	add	r3, r2
 8005416:	4299      	cmp	r1, r3
 8005418:	d12f      	bne.n	800547a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	3304      	adds	r3, #4
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fa84 	bl	800392c <uxListRemove>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	2201      	movs	r2, #1
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43da      	mvns	r2, r3
 8005436:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <xTaskPriorityInherit+0xe8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4013      	ands	r3, r2
 800543c:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <xTaskPriorityInherit+0xe8>)
 800543e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005440:	4b19      	ldr	r3, [pc, #100]	; (80054a8 <xTaskPriorityInherit+0xe0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	2201      	movs	r2, #1
 8005450:	409a      	lsls	r2, r3
 8005452:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <xTaskPriorityInherit+0xe8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4313      	orrs	r3, r2
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <xTaskPriorityInherit+0xe8>)
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4a10      	ldr	r2, [pc, #64]	; (80054ac <xTaskPriorityInherit+0xe4>)
 800546a:	441a      	add	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f7fe f9fd 	bl	8003872 <vListInsertEnd>
 8005478:	e004      	b.n	8005484 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <xTaskPriorityInherit+0xe0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	e008      	b.n	800549c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <xTaskPriorityInherit+0xe0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	429a      	cmp	r2, r3
 8005496:	d201      	bcs.n	800549c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800549c:	68fb      	ldr	r3, [r7, #12]
	}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200003b8 	.word	0x200003b8
 80054ac:	200003bc 	.word	0x200003bc
 80054b0:	200004c0 	.word	0x200004c0

080054b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d06e      	beq.n	80055a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054ca:	4b3a      	ldr	r3, [pc, #232]	; (80055b4 <xTaskPriorityDisinherit+0x100>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d00a      	beq.n	80054ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60fb      	str	r3, [r7, #12]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60bb      	str	r3, [r7, #8]
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	429a      	cmp	r2, r3
 800551c:	d044      	beq.n	80055a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005522:	2b00      	cmp	r3, #0
 8005524:	d140      	bne.n	80055a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3304      	adds	r3, #4
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe f9fe 	bl	800392c <uxListRemove>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d115      	bne.n	8005562 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	491f      	ldr	r1, [pc, #124]	; (80055b8 <xTaskPriorityDisinherit+0x104>)
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <xTaskPriorityDisinherit+0xae>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	2201      	movs	r2, #1
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43da      	mvns	r2, r3
 8005558:	4b18      	ldr	r3, [pc, #96]	; (80055bc <xTaskPriorityDisinherit+0x108>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4013      	ands	r3, r2
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <xTaskPriorityDisinherit+0x108>)
 8005560:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	f1c3 0207 	rsb	r2, r3, #7
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	2201      	movs	r2, #1
 800557c:	409a      	lsls	r2, r3
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <xTaskPriorityDisinherit+0x108>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	4a0d      	ldr	r2, [pc, #52]	; (80055bc <xTaskPriorityDisinherit+0x108>)
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <xTaskPriorityDisinherit+0x104>)
 8005596:	441a      	add	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe f967 	bl	8003872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055a8:	697b      	ldr	r3, [r7, #20]
	}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	200003b8 	.word	0x200003b8
 80055b8:	200003bc 	.word	0x200003bc
 80055bc:	200004c0 	.word	0x200004c0

080055c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d077      	beq.n	80056c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d902      	bls.n	8005606 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e002      	b.n	800560c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	429a      	cmp	r2, r3
 8005614:	d058      	beq.n	80056c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	429a      	cmp	r2, r3
 800561e:	d153      	bne.n	80056c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005620:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	429a      	cmp	r2, r3
 8005628:	d10a      	bne.n	8005640 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	60bb      	str	r3, [r7, #8]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	db04      	blt.n	800565e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f1c3 0207 	rsb	r2, r3, #7
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	6959      	ldr	r1, [r3, #20]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800566e:	4413      	add	r3, r2
 8005670:	4299      	cmp	r1, r3
 8005672:	d129      	bne.n	80056c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe f957 	bl	800392c <uxListRemove>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	2201      	movs	r2, #1
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43da      	mvns	r2, r3
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4013      	ands	r3, r2
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005698:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	2201      	movs	r2, #1
 80056a0:	409a      	lsls	r2, r3
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4a06      	ldr	r2, [pc, #24]	; (80056d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056ba:	441a      	add	r2, r3
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	3304      	adds	r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f7fe f8d5 	bl	8003872 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056c8:	bf00      	nop
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200003b8 	.word	0x200003b8
 80056d4:	200003bc 	.word	0x200003bc
 80056d8:	200004c0 	.word	0x200004c0

080056dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <pvTaskIncrementMutexHeldCount+0x24>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <pvTaskIncrementMutexHeldCount+0x24>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ee:	3201      	adds	r2, #1
 80056f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80056f2:	4b03      	ldr	r3, [pc, #12]	; (8005700 <pvTaskIncrementMutexHeldCount+0x24>)
 80056f4:	681b      	ldr	r3, [r3, #0]
	}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	200003b8 	.word	0x200003b8

08005704 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800570e:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005714:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe f906 	bl	800392c <uxListRemove>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005726:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	2201      	movs	r2, #1
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43da      	mvns	r2, r3
 8005734:	4b21      	ldr	r3, [pc, #132]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4013      	ands	r3, r2
 800573a:	4a20      	ldr	r2, [pc, #128]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800573c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d10a      	bne.n	800575c <prvAddCurrentTaskToDelayedList+0x58>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800574c:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	481a      	ldr	r0, [pc, #104]	; (80057c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005756:	f7fe f88c 	bl	8003872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800575a:	e026      	b.n	80057aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005764:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	429a      	cmp	r2, r3
 8005772:	d209      	bcs.n	8005788 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fe f89a 	bl	80038ba <vListInsert>
}
 8005786:	e010      	b.n	80057aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fe f890 	bl	80038ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800579a:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d202      	bcs.n	80057aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6013      	str	r3, [r2, #0]
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	200004bc 	.word	0x200004bc
 80057b8:	200003b8 	.word	0x200003b8
 80057bc:	200004c0 	.word	0x200004c0
 80057c0:	200004a4 	.word	0x200004a4
 80057c4:	20000474 	.word	0x20000474
 80057c8:	20000470 	.word	0x20000470
 80057cc:	200004d8 	.word	0x200004d8

080057d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3b04      	subs	r3, #4
 80057e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b04      	subs	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3b04      	subs	r3, #4
 80057fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <pxPortInitialiseStack+0x64>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b14      	subs	r3, #20
 800580a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b04      	subs	r3, #4
 8005816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f06f 0202 	mvn.w	r2, #2
 800581e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b20      	subs	r3, #32
 8005824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	08005839 	.word	0x08005839

08005838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <prvTaskExitError+0x54>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d00a      	beq.n	8005862 <prvTaskExitError+0x2a>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60fb      	str	r3, [r7, #12]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <prvTaskExitError+0x28>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60bb      	str	r3, [r7, #8]
}
 8005874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005876:	bf00      	nop
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0fc      	beq.n	8005878 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	2000000c 	.word	0x2000000c

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <xPortStartScheduler+0x120>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a46      	ldr	r2, [pc, #280]	; (8005a04 <xPortStartScheduler+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10a      	bne.n	8005906 <xPortStartScheduler+0x26>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x46>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <xPortStartScheduler+0x130>)
 800594c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <xPortStartScheduler+0x134>)
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005954:	e009      	b.n	800596a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <xPortStartScheduler+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xPortStartScheduler+0x134>)
 800595e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d0ef      	beq.n	8005956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00a      	beq.n	8005998 <xPortStartScheduler+0xb8>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60bb      	str	r3, [r7, #8]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <xPortStartScheduler+0x134>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <xPortStartScheduler+0x134>)
 80059ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xPortStartScheduler+0x138>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <xPortStartScheduler+0x138>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ce:	f000 f8dd 	bl	8005b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <xPortStartScheduler+0x13c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059d8:	f000 f8fc 	bl	8005bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xPortStartScheduler+0x140>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <xPortStartScheduler+0x140>)
 80059e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e8:	f7ff ff66 	bl	80058b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ec:	f7ff fa92 	bl	8004f14 <vTaskSwitchContext>
	prvTaskExitError();
 80059f0:	f7ff ff22 	bl	8005838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000ed00 	.word	0xe000ed00
 8005a04:	410fc271 	.word	0x410fc271
 8005a08:	410fc270 	.word	0x410fc270
 8005a0c:	e000e400 	.word	0xe000e400
 8005a10:	200004e4 	.word	0x200004e4
 8005a14:	200004e8 	.word	0x200004e8
 8005a18:	e000ed20 	.word	0xe000ed20
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	e000ef34 	.word	0xe000ef34

08005a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
}
 8005a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a3e:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortEnterCritical+0x5c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vPortEnterCritical+0x4a>
	}
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vPortExitCritical+0x50>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vPortExitCritical+0x24>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vPortExitCritical+0x50>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <vPortExitCritical+0x42>
 8005aba:	2300      	movs	r3, #0
 8005abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
}
 8005ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	2000000c 	.word	0x2000000c
	...

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7ff fa00 	bl	8004f14 <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7ff f91f 	bl	8004da4 <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <xPortSysTickHandler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005be2:	bf00      	nop
 8005be4:	e000ed88 	.word	0xe000ed88

08005be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d914      	bls.n	8005c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <vPortValidateInterruptPriority+0x70>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20a      	bcs.n	8005c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <vPortValidateInterruptPriority+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d90a      	bls.n	8005c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	603b      	str	r3, [r7, #0]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <vPortValidateInterruptPriority+0x60>
	}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e3f0 	.word	0xe000e3f0
 8005c5c:	200004e4 	.word	0x200004e4
 8005c60:	e000ed0c 	.word	0xe000ed0c
 8005c64:	200004e8 	.word	0x200004e8

08005c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c74:	f7fe ffec 	bl	8004c50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <pvPortMalloc+0x180>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c80:	f000 f920 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8093 	bne.w	8005db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01d      	beq.n	8005cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <pvPortMalloc+0x188>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d869      	bhi.n	8005db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <pvPortMalloc+0x18c>)
 8005ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <pvPortMalloc+0x18c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cee:	e004      	b.n	8005cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <pvPortMalloc+0xa4>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f1      	bne.n	8005cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <pvPortMalloc+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d050      	beq.n	8005db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d91f      	bls.n	8005d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <pvPortMalloc+0xf8>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	613b      	str	r3, [r7, #16]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f000 f908 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <pvPortMalloc+0x188>)
 8005d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <pvPortMalloc+0x188>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <pvPortMalloc+0x190>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d203      	bcs.n	8005d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <pvPortMalloc+0x188>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <pvPortMalloc+0x190>)
 8005d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x184>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <pvPortMalloc+0x194>)
 8005db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db8:	f7fe ff58 	bl	8004c6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <pvPortMalloc+0x174>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <pvPortMalloc+0x172>
	return pvReturn;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200040f4 	.word	0x200040f4
 8005dec:	20004108 	.word	0x20004108
 8005df0:	200040f8 	.word	0x200040f8
 8005df4:	200040ec 	.word	0x200040ec
 8005df8:	200040fc 	.word	0x200040fc
 8005dfc:	20004100 	.word	0x20004100

08005e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04d      	beq.n	8005eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e12:	2308      	movs	r3, #8
 8005e14:	425b      	negs	r3, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vPortFree+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <vPortFree+0x44>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <vPortFree+0x62>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <vPortFree+0xb8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <vPortFree+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e88:	f7fe fee2 	bl	8004c50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <vPortFree+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vPortFree+0xbc>)
 8005e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xc0>)
 8005ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eaa:	f7fe fedf 	bl	8004c6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20004108 	.word	0x20004108
 8005ebc:	200040f8 	.word	0x200040f8
 8005ec0:	20004104 	.word	0x20004104

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	200004ec 	.word	0x200004ec
 8005f74:	200040ec 	.word	0x200040ec
 8005f78:	200040f4 	.word	0x200040f4
 8005f7c:	200040fc 	.word	0x200040fc
 8005f80:	200040f8 	.word	0x200040f8
 8005f84:	20004108 	.word	0x20004108

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	200040ec 	.word	0x200040ec
 8006038:	200040f4 	.word	0x200040f4

0800603c <srand>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4b10      	ldr	r3, [pc, #64]	; (8006080 <srand+0x44>)
 8006040:	681d      	ldr	r5, [r3, #0]
 8006042:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006044:	4604      	mov	r4, r0
 8006046:	b9b3      	cbnz	r3, 8006076 <srand+0x3a>
 8006048:	2018      	movs	r0, #24
 800604a:	f000 fa89 	bl	8006560 <malloc>
 800604e:	4602      	mov	r2, r0
 8006050:	6328      	str	r0, [r5, #48]	; 0x30
 8006052:	b920      	cbnz	r0, 800605e <srand+0x22>
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <srand+0x48>)
 8006056:	480c      	ldr	r0, [pc, #48]	; (8006088 <srand+0x4c>)
 8006058:	2146      	movs	r1, #70	; 0x46
 800605a:	f000 fa17 	bl	800648c <__assert_func>
 800605e:	490b      	ldr	r1, [pc, #44]	; (800608c <srand+0x50>)
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <srand+0x54>)
 8006062:	e9c0 1300 	strd	r1, r3, [r0]
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <srand+0x58>)
 8006068:	6083      	str	r3, [r0, #8]
 800606a:	230b      	movs	r3, #11
 800606c:	8183      	strh	r3, [r0, #12]
 800606e:	2100      	movs	r1, #0
 8006070:	2001      	movs	r0, #1
 8006072:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006076:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	611c      	str	r4, [r3, #16]
 800607c:	615a      	str	r2, [r3, #20]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20000068 	.word	0x20000068
 8006084:	08007204 	.word	0x08007204
 8006088:	0800721b 	.word	0x0800721b
 800608c:	abcd330e 	.word	0xabcd330e
 8006090:	e66d1234 	.word	0xe66d1234
 8006094:	0005deec 	.word	0x0005deec

08006098 <rand>:
 8006098:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <rand+0x5c>)
 800609a:	b510      	push	{r4, lr}
 800609c:	681c      	ldr	r4, [r3, #0]
 800609e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060a0:	b9b3      	cbnz	r3, 80060d0 <rand+0x38>
 80060a2:	2018      	movs	r0, #24
 80060a4:	f000 fa5c 	bl	8006560 <malloc>
 80060a8:	4602      	mov	r2, r0
 80060aa:	6320      	str	r0, [r4, #48]	; 0x30
 80060ac:	b920      	cbnz	r0, 80060b8 <rand+0x20>
 80060ae:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <rand+0x60>)
 80060b0:	4812      	ldr	r0, [pc, #72]	; (80060fc <rand+0x64>)
 80060b2:	2152      	movs	r1, #82	; 0x52
 80060b4:	f000 f9ea 	bl	800648c <__assert_func>
 80060b8:	4911      	ldr	r1, [pc, #68]	; (8006100 <rand+0x68>)
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <rand+0x6c>)
 80060bc:	e9c0 1300 	strd	r1, r3, [r0]
 80060c0:	4b11      	ldr	r3, [pc, #68]	; (8006108 <rand+0x70>)
 80060c2:	6083      	str	r3, [r0, #8]
 80060c4:	230b      	movs	r3, #11
 80060c6:	8183      	strh	r3, [r0, #12]
 80060c8:	2100      	movs	r1, #0
 80060ca:	2001      	movs	r0, #1
 80060cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80060d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80060d2:	480e      	ldr	r0, [pc, #56]	; (800610c <rand+0x74>)
 80060d4:	690b      	ldr	r3, [r1, #16]
 80060d6:	694c      	ldr	r4, [r1, #20]
 80060d8:	4a0d      	ldr	r2, [pc, #52]	; (8006110 <rand+0x78>)
 80060da:	4358      	muls	r0, r3
 80060dc:	fb02 0004 	mla	r0, r2, r4, r0
 80060e0:	fba3 3202 	umull	r3, r2, r3, r2
 80060e4:	3301      	adds	r3, #1
 80060e6:	eb40 0002 	adc.w	r0, r0, r2
 80060ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80060ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80060f2:	bd10      	pop	{r4, pc}
 80060f4:	20000068 	.word	0x20000068
 80060f8:	08007204 	.word	0x08007204
 80060fc:	0800721b 	.word	0x0800721b
 8006100:	abcd330e 	.word	0xabcd330e
 8006104:	e66d1234 	.word	0xe66d1234
 8006108:	0005deec 	.word	0x0005deec
 800610c:	5851f42d 	.word	0x5851f42d
 8006110:	4c957f2d 	.word	0x4c957f2d

08006114 <std>:
 8006114:	2300      	movs	r3, #0
 8006116:	b510      	push	{r4, lr}
 8006118:	4604      	mov	r4, r0
 800611a:	e9c0 3300 	strd	r3, r3, [r0]
 800611e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006122:	6083      	str	r3, [r0, #8]
 8006124:	8181      	strh	r1, [r0, #12]
 8006126:	6643      	str	r3, [r0, #100]	; 0x64
 8006128:	81c2      	strh	r2, [r0, #14]
 800612a:	6183      	str	r3, [r0, #24]
 800612c:	4619      	mov	r1, r3
 800612e:	2208      	movs	r2, #8
 8006130:	305c      	adds	r0, #92	; 0x5c
 8006132:	f000 f8f4 	bl	800631e <memset>
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <std+0x58>)
 8006138:	6263      	str	r3, [r4, #36]	; 0x24
 800613a:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <std+0x5c>)
 800613c:	62a3      	str	r3, [r4, #40]	; 0x28
 800613e:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <std+0x60>)
 8006140:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <std+0x64>)
 8006144:	6323      	str	r3, [r4, #48]	; 0x30
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <std+0x68>)
 8006148:	6224      	str	r4, [r4, #32]
 800614a:	429c      	cmp	r4, r3
 800614c:	d006      	beq.n	800615c <std+0x48>
 800614e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006152:	4294      	cmp	r4, r2
 8006154:	d002      	beq.n	800615c <std+0x48>
 8006156:	33d0      	adds	r3, #208	; 0xd0
 8006158:	429c      	cmp	r4, r3
 800615a:	d105      	bne.n	8006168 <std+0x54>
 800615c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	f000 b980 	b.w	8006468 <__retarget_lock_init_recursive>
 8006168:	bd10      	pop	{r4, pc}
 800616a:	bf00      	nop
 800616c:	08006299 	.word	0x08006299
 8006170:	080062bb 	.word	0x080062bb
 8006174:	080062f3 	.word	0x080062f3
 8006178:	08006317 	.word	0x08006317
 800617c:	2000410c 	.word	0x2000410c

08006180 <stdio_exit_handler>:
 8006180:	4a02      	ldr	r2, [pc, #8]	; (800618c <stdio_exit_handler+0xc>)
 8006182:	4903      	ldr	r1, [pc, #12]	; (8006190 <stdio_exit_handler+0x10>)
 8006184:	4803      	ldr	r0, [pc, #12]	; (8006194 <stdio_exit_handler+0x14>)
 8006186:	f000 b869 	b.w	800625c <_fwalk_sglue>
 800618a:	bf00      	nop
 800618c:	20000010 	.word	0x20000010
 8006190:	080067d5 	.word	0x080067d5
 8006194:	2000001c 	.word	0x2000001c

08006198 <cleanup_stdio>:
 8006198:	6841      	ldr	r1, [r0, #4]
 800619a:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <cleanup_stdio+0x34>)
 800619c:	4299      	cmp	r1, r3
 800619e:	b510      	push	{r4, lr}
 80061a0:	4604      	mov	r4, r0
 80061a2:	d001      	beq.n	80061a8 <cleanup_stdio+0x10>
 80061a4:	f000 fb16 	bl	80067d4 <_fflush_r>
 80061a8:	68a1      	ldr	r1, [r4, #8]
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <cleanup_stdio+0x38>)
 80061ac:	4299      	cmp	r1, r3
 80061ae:	d002      	beq.n	80061b6 <cleanup_stdio+0x1e>
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fb0f 	bl	80067d4 <_fflush_r>
 80061b6:	68e1      	ldr	r1, [r4, #12]
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <cleanup_stdio+0x3c>)
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d004      	beq.n	80061c8 <cleanup_stdio+0x30>
 80061be:	4620      	mov	r0, r4
 80061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c4:	f000 bb06 	b.w	80067d4 <_fflush_r>
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	bf00      	nop
 80061cc:	2000410c 	.word	0x2000410c
 80061d0:	20004174 	.word	0x20004174
 80061d4:	200041dc 	.word	0x200041dc

080061d8 <global_stdio_init.part.0>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <global_stdio_init.part.0+0x30>)
 80061dc:	4c0b      	ldr	r4, [pc, #44]	; (800620c <global_stdio_init.part.0+0x34>)
 80061de:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <global_stdio_init.part.0+0x38>)
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	4620      	mov	r0, r4
 80061e4:	2200      	movs	r2, #0
 80061e6:	2104      	movs	r1, #4
 80061e8:	f7ff ff94 	bl	8006114 <std>
 80061ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061f0:	2201      	movs	r2, #1
 80061f2:	2109      	movs	r1, #9
 80061f4:	f7ff ff8e 	bl	8006114 <std>
 80061f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061fc:	2202      	movs	r2, #2
 80061fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006202:	2112      	movs	r1, #18
 8006204:	f7ff bf86 	b.w	8006114 <std>
 8006208:	20004244 	.word	0x20004244
 800620c:	2000410c 	.word	0x2000410c
 8006210:	08006181 	.word	0x08006181

08006214 <__sfp_lock_acquire>:
 8006214:	4801      	ldr	r0, [pc, #4]	; (800621c <__sfp_lock_acquire+0x8>)
 8006216:	f000 b928 	b.w	800646a <__retarget_lock_acquire_recursive>
 800621a:	bf00      	nop
 800621c:	2000424d 	.word	0x2000424d

08006220 <__sfp_lock_release>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__sfp_lock_release+0x8>)
 8006222:	f000 b923 	b.w	800646c <__retarget_lock_release_recursive>
 8006226:	bf00      	nop
 8006228:	2000424d 	.word	0x2000424d

0800622c <__sinit>:
 800622c:	b510      	push	{r4, lr}
 800622e:	4604      	mov	r4, r0
 8006230:	f7ff fff0 	bl	8006214 <__sfp_lock_acquire>
 8006234:	6a23      	ldr	r3, [r4, #32]
 8006236:	b11b      	cbz	r3, 8006240 <__sinit+0x14>
 8006238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800623c:	f7ff bff0 	b.w	8006220 <__sfp_lock_release>
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <__sinit+0x28>)
 8006242:	6223      	str	r3, [r4, #32]
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <__sinit+0x2c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f5      	bne.n	8006238 <__sinit+0xc>
 800624c:	f7ff ffc4 	bl	80061d8 <global_stdio_init.part.0>
 8006250:	e7f2      	b.n	8006238 <__sinit+0xc>
 8006252:	bf00      	nop
 8006254:	08006199 	.word	0x08006199
 8006258:	20004244 	.word	0x20004244

0800625c <_fwalk_sglue>:
 800625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006260:	4607      	mov	r7, r0
 8006262:	4688      	mov	r8, r1
 8006264:	4614      	mov	r4, r2
 8006266:	2600      	movs	r6, #0
 8006268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800626c:	f1b9 0901 	subs.w	r9, r9, #1
 8006270:	d505      	bpl.n	800627e <_fwalk_sglue+0x22>
 8006272:	6824      	ldr	r4, [r4, #0]
 8006274:	2c00      	cmp	r4, #0
 8006276:	d1f7      	bne.n	8006268 <_fwalk_sglue+0xc>
 8006278:	4630      	mov	r0, r6
 800627a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d907      	bls.n	8006294 <_fwalk_sglue+0x38>
 8006284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006288:	3301      	adds	r3, #1
 800628a:	d003      	beq.n	8006294 <_fwalk_sglue+0x38>
 800628c:	4629      	mov	r1, r5
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	4306      	orrs	r6, r0
 8006294:	3568      	adds	r5, #104	; 0x68
 8006296:	e7e9      	b.n	800626c <_fwalk_sglue+0x10>

08006298 <__sread>:
 8006298:	b510      	push	{r4, lr}
 800629a:	460c      	mov	r4, r1
 800629c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a0:	f000 f894 	bl	80063cc <_read_r>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	bfab      	itete	ge
 80062a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062aa:	89a3      	ldrhlt	r3, [r4, #12]
 80062ac:	181b      	addge	r3, r3, r0
 80062ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062b2:	bfac      	ite	ge
 80062b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80062b6:	81a3      	strhlt	r3, [r4, #12]
 80062b8:	bd10      	pop	{r4, pc}

080062ba <__swrite>:
 80062ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	461f      	mov	r7, r3
 80062c0:	898b      	ldrh	r3, [r1, #12]
 80062c2:	05db      	lsls	r3, r3, #23
 80062c4:	4605      	mov	r5, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	4616      	mov	r6, r2
 80062ca:	d505      	bpl.n	80062d8 <__swrite+0x1e>
 80062cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d0:	2302      	movs	r3, #2
 80062d2:	2200      	movs	r2, #0
 80062d4:	f000 f868 	bl	80063a8 <_lseek_r>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	4632      	mov	r2, r6
 80062e6:	463b      	mov	r3, r7
 80062e8:	4628      	mov	r0, r5
 80062ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	f000 b87f 	b.w	80063f0 <_write_r>

080062f2 <__sseek>:
 80062f2:	b510      	push	{r4, lr}
 80062f4:	460c      	mov	r4, r1
 80062f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fa:	f000 f855 	bl	80063a8 <_lseek_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	bf15      	itete	ne
 8006304:	6560      	strne	r0, [r4, #84]	; 0x54
 8006306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800630a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800630e:	81a3      	strheq	r3, [r4, #12]
 8006310:	bf18      	it	ne
 8006312:	81a3      	strhne	r3, [r4, #12]
 8006314:	bd10      	pop	{r4, pc}

08006316 <__sclose>:
 8006316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631a:	f000 b823 	b.w	8006364 <_close_r>

0800631e <memset>:
 800631e:	4402      	add	r2, r0
 8006320:	4603      	mov	r3, r0
 8006322:	4293      	cmp	r3, r2
 8006324:	d100      	bne.n	8006328 <memset+0xa>
 8006326:	4770      	bx	lr
 8006328:	f803 1b01 	strb.w	r1, [r3], #1
 800632c:	e7f9      	b.n	8006322 <memset+0x4>
	...

08006330 <time>:
 8006330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <time+0x30>)
 8006334:	2200      	movs	r2, #0
 8006336:	4669      	mov	r1, sp
 8006338:	4604      	mov	r4, r0
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	f000 f822 	bl	8006384 <_gettimeofday_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	bfbe      	ittt	lt
 8006344:	f04f 32ff 	movlt.w	r2, #4294967295
 8006348:	f04f 33ff 	movlt.w	r3, #4294967295
 800634c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006354:	b10c      	cbz	r4, 800635a <time+0x2a>
 8006356:	e9c4 0100 	strd	r0, r1, [r4]
 800635a:	b004      	add	sp, #16
 800635c:	bd10      	pop	{r4, pc}
 800635e:	bf00      	nop
 8006360:	20000068 	.word	0x20000068

08006364 <_close_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d06      	ldr	r5, [pc, #24]	; (8006380 <_close_r+0x1c>)
 8006368:	2300      	movs	r3, #0
 800636a:	4604      	mov	r4, r0
 800636c:	4608      	mov	r0, r1
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	f7fb fbdc 	bl	8001b2c <_close>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_close_r+0x1a>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_close_r+0x1a>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	20004248 	.word	0x20004248

08006384 <_gettimeofday_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d07      	ldr	r5, [pc, #28]	; (80063a4 <_gettimeofday_r+0x20>)
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	4611      	mov	r1, r2
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	f000 fea1 	bl	80070d8 <_gettimeofday>
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	d102      	bne.n	80063a0 <_gettimeofday_r+0x1c>
 800639a:	682b      	ldr	r3, [r5, #0]
 800639c:	b103      	cbz	r3, 80063a0 <_gettimeofday_r+0x1c>
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
 80063a2:	bf00      	nop
 80063a4:	20004248 	.word	0x20004248

080063a8 <_lseek_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	; (80063c8 <_lseek_r+0x20>)
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fb fbdf 	bl	8001b7a <_lseek>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_lseek_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_lseek_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	20004248 	.word	0x20004248

080063cc <_read_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d07      	ldr	r5, [pc, #28]	; (80063ec <_read_r+0x20>)
 80063d0:	4604      	mov	r4, r0
 80063d2:	4608      	mov	r0, r1
 80063d4:	4611      	mov	r1, r2
 80063d6:	2200      	movs	r2, #0
 80063d8:	602a      	str	r2, [r5, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	f7fb fb6d 	bl	8001aba <_read>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_read_r+0x1e>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_read_r+0x1e>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	20004248 	.word	0x20004248

080063f0 <_write_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4d07      	ldr	r5, [pc, #28]	; (8006410 <_write_r+0x20>)
 80063f4:	4604      	mov	r4, r0
 80063f6:	4608      	mov	r0, r1
 80063f8:	4611      	mov	r1, r2
 80063fa:	2200      	movs	r2, #0
 80063fc:	602a      	str	r2, [r5, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	f7fb fb78 	bl	8001af4 <_write>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_write_r+0x1e>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	b103      	cbz	r3, 800640e <_write_r+0x1e>
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	20004248 	.word	0x20004248

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000068 	.word	0x20000068

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4d0d      	ldr	r5, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2600      	movs	r6, #0
 800642c:	42a6      	cmp	r6, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4d0b      	ldr	r5, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f000 fe58 	bl	80070e8 <_init>
 8006438:	1b64      	subs	r4, r4, r5
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2600      	movs	r6, #0
 800643e:	42a6      	cmp	r6, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f855 3b04 	ldr.w	r3, [r5], #4
 8006448:	4798      	blx	r3
 800644a:	3601      	adds	r6, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006452:	4798      	blx	r3
 8006454:	3601      	adds	r6, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	080072ec 	.word	0x080072ec
 800645c:	080072ec 	.word	0x080072ec
 8006460:	080072ec 	.word	0x080072ec
 8006464:	080072f0 	.word	0x080072f0

08006468 <__retarget_lock_init_recursive>:
 8006468:	4770      	bx	lr

0800646a <__retarget_lock_acquire_recursive>:
 800646a:	4770      	bx	lr

0800646c <__retarget_lock_release_recursive>:
 800646c:	4770      	bx	lr

0800646e <memcpy>:
 800646e:	440a      	add	r2, r1
 8006470:	4291      	cmp	r1, r2
 8006472:	f100 33ff 	add.w	r3, r0, #4294967295
 8006476:	d100      	bne.n	800647a <memcpy+0xc>
 8006478:	4770      	bx	lr
 800647a:	b510      	push	{r4, lr}
 800647c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006484:	4291      	cmp	r1, r2
 8006486:	d1f9      	bne.n	800647c <memcpy+0xe>
 8006488:	bd10      	pop	{r4, pc}
	...

0800648c <__assert_func>:
 800648c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800648e:	4614      	mov	r4, r2
 8006490:	461a      	mov	r2, r3
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <__assert_func+0x2c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4605      	mov	r5, r0
 8006498:	68d8      	ldr	r0, [r3, #12]
 800649a:	b14c      	cbz	r4, 80064b0 <__assert_func+0x24>
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <__assert_func+0x30>)
 800649e:	9100      	str	r1, [sp, #0]
 80064a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064a4:	4906      	ldr	r1, [pc, #24]	; (80064c0 <__assert_func+0x34>)
 80064a6:	462b      	mov	r3, r5
 80064a8:	f000 f9bc 	bl	8006824 <fiprintf>
 80064ac:	f000 f9dc 	bl	8006868 <abort>
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <__assert_func+0x38>)
 80064b2:	461c      	mov	r4, r3
 80064b4:	e7f3      	b.n	800649e <__assert_func+0x12>
 80064b6:	bf00      	nop
 80064b8:	20000068 	.word	0x20000068
 80064bc:	08007273 	.word	0x08007273
 80064c0:	08007280 	.word	0x08007280
 80064c4:	080072ae 	.word	0x080072ae

080064c8 <_free_r>:
 80064c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ca:	2900      	cmp	r1, #0
 80064cc:	d044      	beq.n	8006558 <_free_r+0x90>
 80064ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d2:	9001      	str	r0, [sp, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f1a1 0404 	sub.w	r4, r1, #4
 80064da:	bfb8      	it	lt
 80064dc:	18e4      	addlt	r4, r4, r3
 80064de:	f000 f8e7 	bl	80066b0 <__malloc_lock>
 80064e2:	4a1e      	ldr	r2, [pc, #120]	; (800655c <_free_r+0x94>)
 80064e4:	9801      	ldr	r0, [sp, #4]
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	b933      	cbnz	r3, 80064f8 <_free_r+0x30>
 80064ea:	6063      	str	r3, [r4, #4]
 80064ec:	6014      	str	r4, [r2, #0]
 80064ee:	b003      	add	sp, #12
 80064f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064f4:	f000 b8e2 	b.w	80066bc <__malloc_unlock>
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d908      	bls.n	800650e <_free_r+0x46>
 80064fc:	6825      	ldr	r5, [r4, #0]
 80064fe:	1961      	adds	r1, r4, r5
 8006500:	428b      	cmp	r3, r1
 8006502:	bf01      	itttt	eq
 8006504:	6819      	ldreq	r1, [r3, #0]
 8006506:	685b      	ldreq	r3, [r3, #4]
 8006508:	1949      	addeq	r1, r1, r5
 800650a:	6021      	streq	r1, [r4, #0]
 800650c:	e7ed      	b.n	80064ea <_free_r+0x22>
 800650e:	461a      	mov	r2, r3
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	b10b      	cbz	r3, 8006518 <_free_r+0x50>
 8006514:	42a3      	cmp	r3, r4
 8006516:	d9fa      	bls.n	800650e <_free_r+0x46>
 8006518:	6811      	ldr	r1, [r2, #0]
 800651a:	1855      	adds	r5, r2, r1
 800651c:	42a5      	cmp	r5, r4
 800651e:	d10b      	bne.n	8006538 <_free_r+0x70>
 8006520:	6824      	ldr	r4, [r4, #0]
 8006522:	4421      	add	r1, r4
 8006524:	1854      	adds	r4, r2, r1
 8006526:	42a3      	cmp	r3, r4
 8006528:	6011      	str	r1, [r2, #0]
 800652a:	d1e0      	bne.n	80064ee <_free_r+0x26>
 800652c:	681c      	ldr	r4, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	6053      	str	r3, [r2, #4]
 8006532:	440c      	add	r4, r1
 8006534:	6014      	str	r4, [r2, #0]
 8006536:	e7da      	b.n	80064ee <_free_r+0x26>
 8006538:	d902      	bls.n	8006540 <_free_r+0x78>
 800653a:	230c      	movs	r3, #12
 800653c:	6003      	str	r3, [r0, #0]
 800653e:	e7d6      	b.n	80064ee <_free_r+0x26>
 8006540:	6825      	ldr	r5, [r4, #0]
 8006542:	1961      	adds	r1, r4, r5
 8006544:	428b      	cmp	r3, r1
 8006546:	bf04      	itt	eq
 8006548:	6819      	ldreq	r1, [r3, #0]
 800654a:	685b      	ldreq	r3, [r3, #4]
 800654c:	6063      	str	r3, [r4, #4]
 800654e:	bf04      	itt	eq
 8006550:	1949      	addeq	r1, r1, r5
 8006552:	6021      	streq	r1, [r4, #0]
 8006554:	6054      	str	r4, [r2, #4]
 8006556:	e7ca      	b.n	80064ee <_free_r+0x26>
 8006558:	b003      	add	sp, #12
 800655a:	bd30      	pop	{r4, r5, pc}
 800655c:	20004250 	.word	0x20004250

08006560 <malloc>:
 8006560:	4b02      	ldr	r3, [pc, #8]	; (800656c <malloc+0xc>)
 8006562:	4601      	mov	r1, r0
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	f000 b823 	b.w	80065b0 <_malloc_r>
 800656a:	bf00      	nop
 800656c:	20000068 	.word	0x20000068

08006570 <sbrk_aligned>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4e0e      	ldr	r6, [pc, #56]	; (80065ac <sbrk_aligned+0x3c>)
 8006574:	460c      	mov	r4, r1
 8006576:	6831      	ldr	r1, [r6, #0]
 8006578:	4605      	mov	r5, r0
 800657a:	b911      	cbnz	r1, 8006582 <sbrk_aligned+0x12>
 800657c:	f000 f964 	bl	8006848 <_sbrk_r>
 8006580:	6030      	str	r0, [r6, #0]
 8006582:	4621      	mov	r1, r4
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f95f 	bl	8006848 <_sbrk_r>
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	d00a      	beq.n	80065a4 <sbrk_aligned+0x34>
 800658e:	1cc4      	adds	r4, r0, #3
 8006590:	f024 0403 	bic.w	r4, r4, #3
 8006594:	42a0      	cmp	r0, r4
 8006596:	d007      	beq.n	80065a8 <sbrk_aligned+0x38>
 8006598:	1a21      	subs	r1, r4, r0
 800659a:	4628      	mov	r0, r5
 800659c:	f000 f954 	bl	8006848 <_sbrk_r>
 80065a0:	3001      	adds	r0, #1
 80065a2:	d101      	bne.n	80065a8 <sbrk_aligned+0x38>
 80065a4:	f04f 34ff 	mov.w	r4, #4294967295
 80065a8:	4620      	mov	r0, r4
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	20004254 	.word	0x20004254

080065b0 <_malloc_r>:
 80065b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b4:	1ccd      	adds	r5, r1, #3
 80065b6:	f025 0503 	bic.w	r5, r5, #3
 80065ba:	3508      	adds	r5, #8
 80065bc:	2d0c      	cmp	r5, #12
 80065be:	bf38      	it	cc
 80065c0:	250c      	movcc	r5, #12
 80065c2:	2d00      	cmp	r5, #0
 80065c4:	4607      	mov	r7, r0
 80065c6:	db01      	blt.n	80065cc <_malloc_r+0x1c>
 80065c8:	42a9      	cmp	r1, r5
 80065ca:	d905      	bls.n	80065d8 <_malloc_r+0x28>
 80065cc:	230c      	movs	r3, #12
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	2600      	movs	r6, #0
 80065d2:	4630      	mov	r0, r6
 80065d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066ac <_malloc_r+0xfc>
 80065dc:	f000 f868 	bl	80066b0 <__malloc_lock>
 80065e0:	f8d8 3000 	ldr.w	r3, [r8]
 80065e4:	461c      	mov	r4, r3
 80065e6:	bb5c      	cbnz	r4, 8006640 <_malloc_r+0x90>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4638      	mov	r0, r7
 80065ec:	f7ff ffc0 	bl	8006570 <sbrk_aligned>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	4604      	mov	r4, r0
 80065f4:	d155      	bne.n	80066a2 <_malloc_r+0xf2>
 80065f6:	f8d8 4000 	ldr.w	r4, [r8]
 80065fa:	4626      	mov	r6, r4
 80065fc:	2e00      	cmp	r6, #0
 80065fe:	d145      	bne.n	800668c <_malloc_r+0xdc>
 8006600:	2c00      	cmp	r4, #0
 8006602:	d048      	beq.n	8006696 <_malloc_r+0xe6>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	4631      	mov	r1, r6
 8006608:	4638      	mov	r0, r7
 800660a:	eb04 0903 	add.w	r9, r4, r3
 800660e:	f000 f91b 	bl	8006848 <_sbrk_r>
 8006612:	4581      	cmp	r9, r0
 8006614:	d13f      	bne.n	8006696 <_malloc_r+0xe6>
 8006616:	6821      	ldr	r1, [r4, #0]
 8006618:	1a6d      	subs	r5, r5, r1
 800661a:	4629      	mov	r1, r5
 800661c:	4638      	mov	r0, r7
 800661e:	f7ff ffa7 	bl	8006570 <sbrk_aligned>
 8006622:	3001      	adds	r0, #1
 8006624:	d037      	beq.n	8006696 <_malloc_r+0xe6>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	442b      	add	r3, r5
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	f8d8 3000 	ldr.w	r3, [r8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d038      	beq.n	80066a6 <_malloc_r+0xf6>
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	42a2      	cmp	r2, r4
 8006638:	d12b      	bne.n	8006692 <_malloc_r+0xe2>
 800663a:	2200      	movs	r2, #0
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	e00f      	b.n	8006660 <_malloc_r+0xb0>
 8006640:	6822      	ldr	r2, [r4, #0]
 8006642:	1b52      	subs	r2, r2, r5
 8006644:	d41f      	bmi.n	8006686 <_malloc_r+0xd6>
 8006646:	2a0b      	cmp	r2, #11
 8006648:	d917      	bls.n	800667a <_malloc_r+0xca>
 800664a:	1961      	adds	r1, r4, r5
 800664c:	42a3      	cmp	r3, r4
 800664e:	6025      	str	r5, [r4, #0]
 8006650:	bf18      	it	ne
 8006652:	6059      	strne	r1, [r3, #4]
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	bf08      	it	eq
 8006658:	f8c8 1000 	streq.w	r1, [r8]
 800665c:	5162      	str	r2, [r4, r5]
 800665e:	604b      	str	r3, [r1, #4]
 8006660:	4638      	mov	r0, r7
 8006662:	f104 060b 	add.w	r6, r4, #11
 8006666:	f000 f829 	bl	80066bc <__malloc_unlock>
 800666a:	f026 0607 	bic.w	r6, r6, #7
 800666e:	1d23      	adds	r3, r4, #4
 8006670:	1af2      	subs	r2, r6, r3
 8006672:	d0ae      	beq.n	80065d2 <_malloc_r+0x22>
 8006674:	1b9b      	subs	r3, r3, r6
 8006676:	50a3      	str	r3, [r4, r2]
 8006678:	e7ab      	b.n	80065d2 <_malloc_r+0x22>
 800667a:	42a3      	cmp	r3, r4
 800667c:	6862      	ldr	r2, [r4, #4]
 800667e:	d1dd      	bne.n	800663c <_malloc_r+0x8c>
 8006680:	f8c8 2000 	str.w	r2, [r8]
 8006684:	e7ec      	b.n	8006660 <_malloc_r+0xb0>
 8006686:	4623      	mov	r3, r4
 8006688:	6864      	ldr	r4, [r4, #4]
 800668a:	e7ac      	b.n	80065e6 <_malloc_r+0x36>
 800668c:	4634      	mov	r4, r6
 800668e:	6876      	ldr	r6, [r6, #4]
 8006690:	e7b4      	b.n	80065fc <_malloc_r+0x4c>
 8006692:	4613      	mov	r3, r2
 8006694:	e7cc      	b.n	8006630 <_malloc_r+0x80>
 8006696:	230c      	movs	r3, #12
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4638      	mov	r0, r7
 800669c:	f000 f80e 	bl	80066bc <__malloc_unlock>
 80066a0:	e797      	b.n	80065d2 <_malloc_r+0x22>
 80066a2:	6025      	str	r5, [r4, #0]
 80066a4:	e7dc      	b.n	8006660 <_malloc_r+0xb0>
 80066a6:	605b      	str	r3, [r3, #4]
 80066a8:	deff      	udf	#255	; 0xff
 80066aa:	bf00      	nop
 80066ac:	20004250 	.word	0x20004250

080066b0 <__malloc_lock>:
 80066b0:	4801      	ldr	r0, [pc, #4]	; (80066b8 <__malloc_lock+0x8>)
 80066b2:	f7ff beda 	b.w	800646a <__retarget_lock_acquire_recursive>
 80066b6:	bf00      	nop
 80066b8:	2000424c 	.word	0x2000424c

080066bc <__malloc_unlock>:
 80066bc:	4801      	ldr	r0, [pc, #4]	; (80066c4 <__malloc_unlock+0x8>)
 80066be:	f7ff bed5 	b.w	800646c <__retarget_lock_release_recursive>
 80066c2:	bf00      	nop
 80066c4:	2000424c 	.word	0x2000424c

080066c8 <__sflush_r>:
 80066c8:	898a      	ldrh	r2, [r1, #12]
 80066ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ce:	4605      	mov	r5, r0
 80066d0:	0710      	lsls	r0, r2, #28
 80066d2:	460c      	mov	r4, r1
 80066d4:	d458      	bmi.n	8006788 <__sflush_r+0xc0>
 80066d6:	684b      	ldr	r3, [r1, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dc05      	bgt.n	80066e8 <__sflush_r+0x20>
 80066dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	dc02      	bgt.n	80066e8 <__sflush_r+0x20>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	d0f9      	beq.n	80066e2 <__sflush_r+0x1a>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066f4:	682f      	ldr	r7, [r5, #0]
 80066f6:	6a21      	ldr	r1, [r4, #32]
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	d032      	beq.n	8006762 <__sflush_r+0x9a>
 80066fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	075a      	lsls	r2, r3, #29
 8006702:	d505      	bpl.n	8006710 <__sflush_r+0x48>
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	1ac0      	subs	r0, r0, r3
 8006708:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800670a:	b10b      	cbz	r3, 8006710 <__sflush_r+0x48>
 800670c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800670e:	1ac0      	subs	r0, r0, r3
 8006710:	2300      	movs	r3, #0
 8006712:	4602      	mov	r2, r0
 8006714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006716:	6a21      	ldr	r1, [r4, #32]
 8006718:	4628      	mov	r0, r5
 800671a:	47b0      	blx	r6
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	d106      	bne.n	8006730 <__sflush_r+0x68>
 8006722:	6829      	ldr	r1, [r5, #0]
 8006724:	291d      	cmp	r1, #29
 8006726:	d82b      	bhi.n	8006780 <__sflush_r+0xb8>
 8006728:	4a29      	ldr	r2, [pc, #164]	; (80067d0 <__sflush_r+0x108>)
 800672a:	410a      	asrs	r2, r1
 800672c:	07d6      	lsls	r6, r2, #31
 800672e:	d427      	bmi.n	8006780 <__sflush_r+0xb8>
 8006730:	2200      	movs	r2, #0
 8006732:	6062      	str	r2, [r4, #4]
 8006734:	04d9      	lsls	r1, r3, #19
 8006736:	6922      	ldr	r2, [r4, #16]
 8006738:	6022      	str	r2, [r4, #0]
 800673a:	d504      	bpl.n	8006746 <__sflush_r+0x7e>
 800673c:	1c42      	adds	r2, r0, #1
 800673e:	d101      	bne.n	8006744 <__sflush_r+0x7c>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b903      	cbnz	r3, 8006746 <__sflush_r+0x7e>
 8006744:	6560      	str	r0, [r4, #84]	; 0x54
 8006746:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006748:	602f      	str	r7, [r5, #0]
 800674a:	2900      	cmp	r1, #0
 800674c:	d0c9      	beq.n	80066e2 <__sflush_r+0x1a>
 800674e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006752:	4299      	cmp	r1, r3
 8006754:	d002      	beq.n	800675c <__sflush_r+0x94>
 8006756:	4628      	mov	r0, r5
 8006758:	f7ff feb6 	bl	80064c8 <_free_r>
 800675c:	2000      	movs	r0, #0
 800675e:	6360      	str	r0, [r4, #52]	; 0x34
 8006760:	e7c0      	b.n	80066e4 <__sflush_r+0x1c>
 8006762:	2301      	movs	r3, #1
 8006764:	4628      	mov	r0, r5
 8006766:	47b0      	blx	r6
 8006768:	1c41      	adds	r1, r0, #1
 800676a:	d1c8      	bne.n	80066fe <__sflush_r+0x36>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0c5      	beq.n	80066fe <__sflush_r+0x36>
 8006772:	2b1d      	cmp	r3, #29
 8006774:	d001      	beq.n	800677a <__sflush_r+0xb2>
 8006776:	2b16      	cmp	r3, #22
 8006778:	d101      	bne.n	800677e <__sflush_r+0xb6>
 800677a:	602f      	str	r7, [r5, #0]
 800677c:	e7b1      	b.n	80066e2 <__sflush_r+0x1a>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	e7ad      	b.n	80066e4 <__sflush_r+0x1c>
 8006788:	690f      	ldr	r7, [r1, #16]
 800678a:	2f00      	cmp	r7, #0
 800678c:	d0a9      	beq.n	80066e2 <__sflush_r+0x1a>
 800678e:	0793      	lsls	r3, r2, #30
 8006790:	680e      	ldr	r6, [r1, #0]
 8006792:	bf08      	it	eq
 8006794:	694b      	ldreq	r3, [r1, #20]
 8006796:	600f      	str	r7, [r1, #0]
 8006798:	bf18      	it	ne
 800679a:	2300      	movne	r3, #0
 800679c:	eba6 0807 	sub.w	r8, r6, r7
 80067a0:	608b      	str	r3, [r1, #8]
 80067a2:	f1b8 0f00 	cmp.w	r8, #0
 80067a6:	dd9c      	ble.n	80066e2 <__sflush_r+0x1a>
 80067a8:	6a21      	ldr	r1, [r4, #32]
 80067aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067ac:	4643      	mov	r3, r8
 80067ae:	463a      	mov	r2, r7
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b0      	blx	r6
 80067b4:	2800      	cmp	r0, #0
 80067b6:	dc06      	bgt.n	80067c6 <__sflush_r+0xfe>
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	e78e      	b.n	80066e4 <__sflush_r+0x1c>
 80067c6:	4407      	add	r7, r0
 80067c8:	eba8 0800 	sub.w	r8, r8, r0
 80067cc:	e7e9      	b.n	80067a2 <__sflush_r+0xda>
 80067ce:	bf00      	nop
 80067d0:	dfbffffe 	.word	0xdfbffffe

080067d4 <_fflush_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	4605      	mov	r5, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b913      	cbnz	r3, 80067e4 <_fflush_r+0x10>
 80067de:	2500      	movs	r5, #0
 80067e0:	4628      	mov	r0, r5
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	b118      	cbz	r0, 80067ee <_fflush_r+0x1a>
 80067e6:	6a03      	ldr	r3, [r0, #32]
 80067e8:	b90b      	cbnz	r3, 80067ee <_fflush_r+0x1a>
 80067ea:	f7ff fd1f 	bl	800622c <__sinit>
 80067ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f3      	beq.n	80067de <_fflush_r+0xa>
 80067f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067f8:	07d0      	lsls	r0, r2, #31
 80067fa:	d404      	bmi.n	8006806 <_fflush_r+0x32>
 80067fc:	0599      	lsls	r1, r3, #22
 80067fe:	d402      	bmi.n	8006806 <_fflush_r+0x32>
 8006800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006802:	f7ff fe32 	bl	800646a <__retarget_lock_acquire_recursive>
 8006806:	4628      	mov	r0, r5
 8006808:	4621      	mov	r1, r4
 800680a:	f7ff ff5d 	bl	80066c8 <__sflush_r>
 800680e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006810:	07da      	lsls	r2, r3, #31
 8006812:	4605      	mov	r5, r0
 8006814:	d4e4      	bmi.n	80067e0 <_fflush_r+0xc>
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	059b      	lsls	r3, r3, #22
 800681a:	d4e1      	bmi.n	80067e0 <_fflush_r+0xc>
 800681c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681e:	f7ff fe25 	bl	800646c <__retarget_lock_release_recursive>
 8006822:	e7dd      	b.n	80067e0 <_fflush_r+0xc>

08006824 <fiprintf>:
 8006824:	b40e      	push	{r1, r2, r3}
 8006826:	b503      	push	{r0, r1, lr}
 8006828:	4601      	mov	r1, r0
 800682a:	ab03      	add	r3, sp, #12
 800682c:	4805      	ldr	r0, [pc, #20]	; (8006844 <fiprintf+0x20>)
 800682e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	f000 f847 	bl	80068c8 <_vfiprintf_r>
 800683a:	b002      	add	sp, #8
 800683c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006840:	b003      	add	sp, #12
 8006842:	4770      	bx	lr
 8006844:	20000068 	.word	0x20000068

08006848 <_sbrk_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d06      	ldr	r5, [pc, #24]	; (8006864 <_sbrk_r+0x1c>)
 800684c:	2300      	movs	r3, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f7fb f99e 	bl	8001b94 <_sbrk>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_sbrk_r+0x1a>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_sbrk_r+0x1a>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20004248 	.word	0x20004248

08006868 <abort>:
 8006868:	b508      	push	{r3, lr}
 800686a:	2006      	movs	r0, #6
 800686c:	f000 fb94 	bl	8006f98 <raise>
 8006870:	2001      	movs	r0, #1
 8006872:	f7fb f918 	bl	8001aa6 <_exit>

08006876 <__sfputc_r>:
 8006876:	6893      	ldr	r3, [r2, #8]
 8006878:	3b01      	subs	r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	b410      	push	{r4}
 800687e:	6093      	str	r3, [r2, #8]
 8006880:	da08      	bge.n	8006894 <__sfputc_r+0x1e>
 8006882:	6994      	ldr	r4, [r2, #24]
 8006884:	42a3      	cmp	r3, r4
 8006886:	db01      	blt.n	800688c <__sfputc_r+0x16>
 8006888:	290a      	cmp	r1, #10
 800688a:	d103      	bne.n	8006894 <__sfputc_r+0x1e>
 800688c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006890:	f000 bac4 	b.w	8006e1c <__swbuf_r>
 8006894:	6813      	ldr	r3, [r2, #0]
 8006896:	1c58      	adds	r0, r3, #1
 8006898:	6010      	str	r0, [r2, #0]
 800689a:	7019      	strb	r1, [r3, #0]
 800689c:	4608      	mov	r0, r1
 800689e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <__sfputs_r>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	4614      	mov	r4, r2
 80068ac:	18d5      	adds	r5, r2, r3
 80068ae:	42ac      	cmp	r4, r5
 80068b0:	d101      	bne.n	80068b6 <__sfputs_r+0x12>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e007      	b.n	80068c6 <__sfputs_r+0x22>
 80068b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ba:	463a      	mov	r2, r7
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff ffda 	bl	8006876 <__sfputc_r>
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	d1f3      	bne.n	80068ae <__sfputs_r+0xa>
 80068c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068c8 <_vfiprintf_r>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	460d      	mov	r5, r1
 80068ce:	b09d      	sub	sp, #116	; 0x74
 80068d0:	4614      	mov	r4, r2
 80068d2:	4698      	mov	r8, r3
 80068d4:	4606      	mov	r6, r0
 80068d6:	b118      	cbz	r0, 80068e0 <_vfiprintf_r+0x18>
 80068d8:	6a03      	ldr	r3, [r0, #32]
 80068da:	b90b      	cbnz	r3, 80068e0 <_vfiprintf_r+0x18>
 80068dc:	f7ff fca6 	bl	800622c <__sinit>
 80068e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e2:	07d9      	lsls	r1, r3, #31
 80068e4:	d405      	bmi.n	80068f2 <_vfiprintf_r+0x2a>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	059a      	lsls	r2, r3, #22
 80068ea:	d402      	bmi.n	80068f2 <_vfiprintf_r+0x2a>
 80068ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ee:	f7ff fdbc 	bl	800646a <__retarget_lock_acquire_recursive>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	071b      	lsls	r3, r3, #28
 80068f6:	d501      	bpl.n	80068fc <_vfiprintf_r+0x34>
 80068f8:	692b      	ldr	r3, [r5, #16]
 80068fa:	b99b      	cbnz	r3, 8006924 <_vfiprintf_r+0x5c>
 80068fc:	4629      	mov	r1, r5
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 faca 	bl	8006e98 <__swsetup_r>
 8006904:	b170      	cbz	r0, 8006924 <_vfiprintf_r+0x5c>
 8006906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006908:	07dc      	lsls	r4, r3, #31
 800690a:	d504      	bpl.n	8006916 <_vfiprintf_r+0x4e>
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	b01d      	add	sp, #116	; 0x74
 8006912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	0598      	lsls	r0, r3, #22
 800691a:	d4f7      	bmi.n	800690c <_vfiprintf_r+0x44>
 800691c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800691e:	f7ff fda5 	bl	800646c <__retarget_lock_release_recursive>
 8006922:	e7f3      	b.n	800690c <_vfiprintf_r+0x44>
 8006924:	2300      	movs	r3, #0
 8006926:	9309      	str	r3, [sp, #36]	; 0x24
 8006928:	2320      	movs	r3, #32
 800692a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800692e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006932:	2330      	movs	r3, #48	; 0x30
 8006934:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006ae8 <_vfiprintf_r+0x220>
 8006938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800693c:	f04f 0901 	mov.w	r9, #1
 8006940:	4623      	mov	r3, r4
 8006942:	469a      	mov	sl, r3
 8006944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006948:	b10a      	cbz	r2, 800694e <_vfiprintf_r+0x86>
 800694a:	2a25      	cmp	r2, #37	; 0x25
 800694c:	d1f9      	bne.n	8006942 <_vfiprintf_r+0x7a>
 800694e:	ebba 0b04 	subs.w	fp, sl, r4
 8006952:	d00b      	beq.n	800696c <_vfiprintf_r+0xa4>
 8006954:	465b      	mov	r3, fp
 8006956:	4622      	mov	r2, r4
 8006958:	4629      	mov	r1, r5
 800695a:	4630      	mov	r0, r6
 800695c:	f7ff ffa2 	bl	80068a4 <__sfputs_r>
 8006960:	3001      	adds	r0, #1
 8006962:	f000 80a9 	beq.w	8006ab8 <_vfiprintf_r+0x1f0>
 8006966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006968:	445a      	add	r2, fp
 800696a:	9209      	str	r2, [sp, #36]	; 0x24
 800696c:	f89a 3000 	ldrb.w	r3, [sl]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 80a1 	beq.w	8006ab8 <_vfiprintf_r+0x1f0>
 8006976:	2300      	movs	r3, #0
 8006978:	f04f 32ff 	mov.w	r2, #4294967295
 800697c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006980:	f10a 0a01 	add.w	sl, sl, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	9307      	str	r3, [sp, #28]
 8006988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800698c:	931a      	str	r3, [sp, #104]	; 0x68
 800698e:	4654      	mov	r4, sl
 8006990:	2205      	movs	r2, #5
 8006992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006996:	4854      	ldr	r0, [pc, #336]	; (8006ae8 <_vfiprintf_r+0x220>)
 8006998:	f7f9 fc1a 	bl	80001d0 <memchr>
 800699c:	9a04      	ldr	r2, [sp, #16]
 800699e:	b9d8      	cbnz	r0, 80069d8 <_vfiprintf_r+0x110>
 80069a0:	06d1      	lsls	r1, r2, #27
 80069a2:	bf44      	itt	mi
 80069a4:	2320      	movmi	r3, #32
 80069a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069aa:	0713      	lsls	r3, r2, #28
 80069ac:	bf44      	itt	mi
 80069ae:	232b      	movmi	r3, #43	; 0x2b
 80069b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b4:	f89a 3000 	ldrb.w	r3, [sl]
 80069b8:	2b2a      	cmp	r3, #42	; 0x2a
 80069ba:	d015      	beq.n	80069e8 <_vfiprintf_r+0x120>
 80069bc:	9a07      	ldr	r2, [sp, #28]
 80069be:	4654      	mov	r4, sl
 80069c0:	2000      	movs	r0, #0
 80069c2:	f04f 0c0a 	mov.w	ip, #10
 80069c6:	4621      	mov	r1, r4
 80069c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069cc:	3b30      	subs	r3, #48	; 0x30
 80069ce:	2b09      	cmp	r3, #9
 80069d0:	d94d      	bls.n	8006a6e <_vfiprintf_r+0x1a6>
 80069d2:	b1b0      	cbz	r0, 8006a02 <_vfiprintf_r+0x13a>
 80069d4:	9207      	str	r2, [sp, #28]
 80069d6:	e014      	b.n	8006a02 <_vfiprintf_r+0x13a>
 80069d8:	eba0 0308 	sub.w	r3, r0, r8
 80069dc:	fa09 f303 	lsl.w	r3, r9, r3
 80069e0:	4313      	orrs	r3, r2
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	46a2      	mov	sl, r4
 80069e6:	e7d2      	b.n	800698e <_vfiprintf_r+0xc6>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	1d19      	adds	r1, r3, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	9103      	str	r1, [sp, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bfbb      	ittet	lt
 80069f4:	425b      	neglt	r3, r3
 80069f6:	f042 0202 	orrlt.w	r2, r2, #2
 80069fa:	9307      	strge	r3, [sp, #28]
 80069fc:	9307      	strlt	r3, [sp, #28]
 80069fe:	bfb8      	it	lt
 8006a00:	9204      	strlt	r2, [sp, #16]
 8006a02:	7823      	ldrb	r3, [r4, #0]
 8006a04:	2b2e      	cmp	r3, #46	; 0x2e
 8006a06:	d10c      	bne.n	8006a22 <_vfiprintf_r+0x15a>
 8006a08:	7863      	ldrb	r3, [r4, #1]
 8006a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0c:	d134      	bne.n	8006a78 <_vfiprintf_r+0x1b0>
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	1d1a      	adds	r2, r3, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	9203      	str	r2, [sp, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bfb8      	it	lt
 8006a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a1e:	3402      	adds	r4, #2
 8006a20:	9305      	str	r3, [sp, #20]
 8006a22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006af8 <_vfiprintf_r+0x230>
 8006a26:	7821      	ldrb	r1, [r4, #0]
 8006a28:	2203      	movs	r2, #3
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	f7f9 fbd0 	bl	80001d0 <memchr>
 8006a30:	b138      	cbz	r0, 8006a42 <_vfiprintf_r+0x17a>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	eba0 000a 	sub.w	r0, r0, sl
 8006a38:	2240      	movs	r2, #64	; 0x40
 8006a3a:	4082      	lsls	r2, r0
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	3401      	adds	r4, #1
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a46:	4829      	ldr	r0, [pc, #164]	; (8006aec <_vfiprintf_r+0x224>)
 8006a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a4c:	2206      	movs	r2, #6
 8006a4e:	f7f9 fbbf 	bl	80001d0 <memchr>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d03f      	beq.n	8006ad6 <_vfiprintf_r+0x20e>
 8006a56:	4b26      	ldr	r3, [pc, #152]	; (8006af0 <_vfiprintf_r+0x228>)
 8006a58:	bb1b      	cbnz	r3, 8006aa2 <_vfiprintf_r+0x1da>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	3307      	adds	r3, #7
 8006a5e:	f023 0307 	bic.w	r3, r3, #7
 8006a62:	3308      	adds	r3, #8
 8006a64:	9303      	str	r3, [sp, #12]
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	443b      	add	r3, r7
 8006a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6c:	e768      	b.n	8006940 <_vfiprintf_r+0x78>
 8006a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a72:	460c      	mov	r4, r1
 8006a74:	2001      	movs	r0, #1
 8006a76:	e7a6      	b.n	80069c6 <_vfiprintf_r+0xfe>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	3401      	adds	r4, #1
 8006a7c:	9305      	str	r3, [sp, #20]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	f04f 0c0a 	mov.w	ip, #10
 8006a84:	4620      	mov	r0, r4
 8006a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a8a:	3a30      	subs	r2, #48	; 0x30
 8006a8c:	2a09      	cmp	r2, #9
 8006a8e:	d903      	bls.n	8006a98 <_vfiprintf_r+0x1d0>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0c6      	beq.n	8006a22 <_vfiprintf_r+0x15a>
 8006a94:	9105      	str	r1, [sp, #20]
 8006a96:	e7c4      	b.n	8006a22 <_vfiprintf_r+0x15a>
 8006a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e7f0      	b.n	8006a84 <_vfiprintf_r+0x1bc>
 8006aa2:	ab03      	add	r3, sp, #12
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	462a      	mov	r2, r5
 8006aa8:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <_vfiprintf_r+0x22c>)
 8006aaa:	a904      	add	r1, sp, #16
 8006aac:	4630      	mov	r0, r6
 8006aae:	f3af 8000 	nop.w
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	1c78      	adds	r0, r7, #1
 8006ab6:	d1d6      	bne.n	8006a66 <_vfiprintf_r+0x19e>
 8006ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aba:	07d9      	lsls	r1, r3, #31
 8006abc:	d405      	bmi.n	8006aca <_vfiprintf_r+0x202>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	059a      	lsls	r2, r3, #22
 8006ac2:	d402      	bmi.n	8006aca <_vfiprintf_r+0x202>
 8006ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ac6:	f7ff fcd1 	bl	800646c <__retarget_lock_release_recursive>
 8006aca:	89ab      	ldrh	r3, [r5, #12]
 8006acc:	065b      	lsls	r3, r3, #25
 8006ace:	f53f af1d 	bmi.w	800690c <_vfiprintf_r+0x44>
 8006ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad4:	e71c      	b.n	8006910 <_vfiprintf_r+0x48>
 8006ad6:	ab03      	add	r3, sp, #12
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	462a      	mov	r2, r5
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <_vfiprintf_r+0x22c>)
 8006ade:	a904      	add	r1, sp, #16
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 f879 	bl	8006bd8 <_printf_i>
 8006ae6:	e7e4      	b.n	8006ab2 <_vfiprintf_r+0x1ea>
 8006ae8:	080072af 	.word	0x080072af
 8006aec:	080072b9 	.word	0x080072b9
 8006af0:	00000000 	.word	0x00000000
 8006af4:	080068a5 	.word	0x080068a5
 8006af8:	080072b5 	.word	0x080072b5

08006afc <_printf_common>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	4616      	mov	r6, r2
 8006b02:	4699      	mov	r9, r3
 8006b04:	688a      	ldr	r2, [r1, #8]
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bfb8      	it	lt
 8006b10:	4613      	movlt	r3, r2
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b18:	4607      	mov	r7, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	b10a      	cbz	r2, 8006b22 <_printf_common+0x26>
 8006b1e:	3301      	adds	r3, #1
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	0699      	lsls	r1, r3, #26
 8006b26:	bf42      	ittt	mi
 8006b28:	6833      	ldrmi	r3, [r6, #0]
 8006b2a:	3302      	addmi	r3, #2
 8006b2c:	6033      	strmi	r3, [r6, #0]
 8006b2e:	6825      	ldr	r5, [r4, #0]
 8006b30:	f015 0506 	ands.w	r5, r5, #6
 8006b34:	d106      	bne.n	8006b44 <_printf_common+0x48>
 8006b36:	f104 0a19 	add.w	sl, r4, #25
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	6832      	ldr	r2, [r6, #0]
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dc26      	bgt.n	8006b92 <_printf_common+0x96>
 8006b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b48:	1e13      	subs	r3, r2, #0
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	bf18      	it	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	0692      	lsls	r2, r2, #26
 8006b52:	d42b      	bmi.n	8006bac <_printf_common+0xb0>
 8006b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d01e      	beq.n	8006ba0 <_printf_common+0xa4>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	6922      	ldr	r2, [r4, #16]
 8006b66:	f003 0306 	and.w	r3, r3, #6
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	bf02      	ittt	eq
 8006b6e:	68e5      	ldreq	r5, [r4, #12]
 8006b70:	6833      	ldreq	r3, [r6, #0]
 8006b72:	1aed      	subeq	r5, r5, r3
 8006b74:	68a3      	ldr	r3, [r4, #8]
 8006b76:	bf0c      	ite	eq
 8006b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b7c:	2500      	movne	r5, #0
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	bfc4      	itt	gt
 8006b82:	1a9b      	subgt	r3, r3, r2
 8006b84:	18ed      	addgt	r5, r5, r3
 8006b86:	2600      	movs	r6, #0
 8006b88:	341a      	adds	r4, #26
 8006b8a:	42b5      	cmp	r5, r6
 8006b8c:	d11a      	bne.n	8006bc4 <_printf_common+0xc8>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e008      	b.n	8006ba4 <_printf_common+0xa8>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4652      	mov	r2, sl
 8006b96:	4649      	mov	r1, r9
 8006b98:	4638      	mov	r0, r7
 8006b9a:	47c0      	blx	r8
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d103      	bne.n	8006ba8 <_printf_common+0xac>
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba8:	3501      	adds	r5, #1
 8006baa:	e7c6      	b.n	8006b3a <_printf_common+0x3e>
 8006bac:	18e1      	adds	r1, r4, r3
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	2030      	movs	r0, #48	; 0x30
 8006bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb6:	4422      	add	r2, r4
 8006bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	e7c7      	b.n	8006b54 <_printf_common+0x58>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	4649      	mov	r1, r9
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c0      	blx	r8
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d0e6      	beq.n	8006ba0 <_printf_common+0xa4>
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	e7d9      	b.n	8006b8a <_printf_common+0x8e>
	...

08006bd8 <_printf_i>:
 8006bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	7e0f      	ldrb	r7, [r1, #24]
 8006bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006be0:	2f78      	cmp	r7, #120	; 0x78
 8006be2:	4691      	mov	r9, r2
 8006be4:	4680      	mov	r8, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	469a      	mov	sl, r3
 8006bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bee:	d807      	bhi.n	8006c00 <_printf_i+0x28>
 8006bf0:	2f62      	cmp	r7, #98	; 0x62
 8006bf2:	d80a      	bhi.n	8006c0a <_printf_i+0x32>
 8006bf4:	2f00      	cmp	r7, #0
 8006bf6:	f000 80d4 	beq.w	8006da2 <_printf_i+0x1ca>
 8006bfa:	2f58      	cmp	r7, #88	; 0x58
 8006bfc:	f000 80c0 	beq.w	8006d80 <_printf_i+0x1a8>
 8006c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c08:	e03a      	b.n	8006c80 <_printf_i+0xa8>
 8006c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c0e:	2b15      	cmp	r3, #21
 8006c10:	d8f6      	bhi.n	8006c00 <_printf_i+0x28>
 8006c12:	a101      	add	r1, pc, #4	; (adr r1, 8006c18 <_printf_i+0x40>)
 8006c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	08006c85 	.word	0x08006c85
 8006c20:	08006c01 	.word	0x08006c01
 8006c24:	08006c01 	.word	0x08006c01
 8006c28:	08006c01 	.word	0x08006c01
 8006c2c:	08006c01 	.word	0x08006c01
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006c01 	.word	0x08006c01
 8006c38:	08006c01 	.word	0x08006c01
 8006c3c:	08006c01 	.word	0x08006c01
 8006c40:	08006c01 	.word	0x08006c01
 8006c44:	08006d89 	.word	0x08006d89
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006d43 	.word	0x08006d43
 8006c50:	08006c01 	.word	0x08006c01
 8006c54:	08006c01 	.word	0x08006c01
 8006c58:	08006dab 	.word	0x08006dab
 8006c5c:	08006c01 	.word	0x08006c01
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006c01 	.word	0x08006c01
 8006c68:	08006c01 	.word	0x08006c01
 8006c6c:	08006d4b 	.word	0x08006d4b
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	1d1a      	adds	r2, r3, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	602a      	str	r2, [r5, #0]
 8006c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c80:	2301      	movs	r3, #1
 8006c82:	e09f      	b.n	8006dc4 <_printf_i+0x1ec>
 8006c84:	6820      	ldr	r0, [r4, #0]
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	0607      	lsls	r7, r0, #24
 8006c8a:	f103 0104 	add.w	r1, r3, #4
 8006c8e:	6029      	str	r1, [r5, #0]
 8006c90:	d501      	bpl.n	8006c96 <_printf_i+0xbe>
 8006c92:	681e      	ldr	r6, [r3, #0]
 8006c94:	e003      	b.n	8006c9e <_printf_i+0xc6>
 8006c96:	0646      	lsls	r6, r0, #25
 8006c98:	d5fb      	bpl.n	8006c92 <_printf_i+0xba>
 8006c9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	da03      	bge.n	8006caa <_printf_i+0xd2>
 8006ca2:	232d      	movs	r3, #45	; 0x2d
 8006ca4:	4276      	negs	r6, r6
 8006ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006caa:	485a      	ldr	r0, [pc, #360]	; (8006e14 <_printf_i+0x23c>)
 8006cac:	230a      	movs	r3, #10
 8006cae:	e012      	b.n	8006cd6 <_printf_i+0xfe>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	6820      	ldr	r0, [r4, #0]
 8006cb4:	1d19      	adds	r1, r3, #4
 8006cb6:	6029      	str	r1, [r5, #0]
 8006cb8:	0605      	lsls	r5, r0, #24
 8006cba:	d501      	bpl.n	8006cc0 <_printf_i+0xe8>
 8006cbc:	681e      	ldr	r6, [r3, #0]
 8006cbe:	e002      	b.n	8006cc6 <_printf_i+0xee>
 8006cc0:	0641      	lsls	r1, r0, #25
 8006cc2:	d5fb      	bpl.n	8006cbc <_printf_i+0xe4>
 8006cc4:	881e      	ldrh	r6, [r3, #0]
 8006cc6:	4853      	ldr	r0, [pc, #332]	; (8006e14 <_printf_i+0x23c>)
 8006cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8006cca:	bf0c      	ite	eq
 8006ccc:	2308      	moveq	r3, #8
 8006cce:	230a      	movne	r3, #10
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cd6:	6865      	ldr	r5, [r4, #4]
 8006cd8:	60a5      	str	r5, [r4, #8]
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	bfa2      	ittt	ge
 8006cde:	6821      	ldrge	r1, [r4, #0]
 8006ce0:	f021 0104 	bicge.w	r1, r1, #4
 8006ce4:	6021      	strge	r1, [r4, #0]
 8006ce6:	b90e      	cbnz	r6, 8006cec <_printf_i+0x114>
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	d04b      	beq.n	8006d84 <_printf_i+0x1ac>
 8006cec:	4615      	mov	r5, r2
 8006cee:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cf2:	fb03 6711 	mls	r7, r3, r1, r6
 8006cf6:	5dc7      	ldrb	r7, [r0, r7]
 8006cf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cfc:	4637      	mov	r7, r6
 8006cfe:	42bb      	cmp	r3, r7
 8006d00:	460e      	mov	r6, r1
 8006d02:	d9f4      	bls.n	8006cee <_printf_i+0x116>
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d10b      	bne.n	8006d20 <_printf_i+0x148>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	07de      	lsls	r6, r3, #31
 8006d0c:	d508      	bpl.n	8006d20 <_printf_i+0x148>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6861      	ldr	r1, [r4, #4]
 8006d12:	4299      	cmp	r1, r3
 8006d14:	bfde      	ittt	le
 8006d16:	2330      	movle	r3, #48	; 0x30
 8006d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d20:	1b52      	subs	r2, r2, r5
 8006d22:	6122      	str	r2, [r4, #16]
 8006d24:	f8cd a000 	str.w	sl, [sp]
 8006d28:	464b      	mov	r3, r9
 8006d2a:	aa03      	add	r2, sp, #12
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff fee4 	bl	8006afc <_printf_common>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d14a      	bne.n	8006dce <_printf_i+0x1f6>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	b004      	add	sp, #16
 8006d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	4833      	ldr	r0, [pc, #204]	; (8006e18 <_printf_i+0x240>)
 8006d4c:	2778      	movs	r7, #120	; 0x78
 8006d4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	6829      	ldr	r1, [r5, #0]
 8006d56:	061f      	lsls	r7, r3, #24
 8006d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d5c:	d402      	bmi.n	8006d64 <_printf_i+0x18c>
 8006d5e:	065f      	lsls	r7, r3, #25
 8006d60:	bf48      	it	mi
 8006d62:	b2b6      	uxthmi	r6, r6
 8006d64:	07df      	lsls	r7, r3, #31
 8006d66:	bf48      	it	mi
 8006d68:	f043 0320 	orrmi.w	r3, r3, #32
 8006d6c:	6029      	str	r1, [r5, #0]
 8006d6e:	bf48      	it	mi
 8006d70:	6023      	strmi	r3, [r4, #0]
 8006d72:	b91e      	cbnz	r6, 8006d7c <_printf_i+0x1a4>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f023 0320 	bic.w	r3, r3, #32
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	e7a7      	b.n	8006cd0 <_printf_i+0xf8>
 8006d80:	4824      	ldr	r0, [pc, #144]	; (8006e14 <_printf_i+0x23c>)
 8006d82:	e7e4      	b.n	8006d4e <_printf_i+0x176>
 8006d84:	4615      	mov	r5, r2
 8006d86:	e7bd      	b.n	8006d04 <_printf_i+0x12c>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	6826      	ldr	r6, [r4, #0]
 8006d8c:	6961      	ldr	r1, [r4, #20]
 8006d8e:	1d18      	adds	r0, r3, #4
 8006d90:	6028      	str	r0, [r5, #0]
 8006d92:	0635      	lsls	r5, r6, #24
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	d501      	bpl.n	8006d9c <_printf_i+0x1c4>
 8006d98:	6019      	str	r1, [r3, #0]
 8006d9a:	e002      	b.n	8006da2 <_printf_i+0x1ca>
 8006d9c:	0670      	lsls	r0, r6, #25
 8006d9e:	d5fb      	bpl.n	8006d98 <_printf_i+0x1c0>
 8006da0:	8019      	strh	r1, [r3, #0]
 8006da2:	2300      	movs	r3, #0
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	4615      	mov	r5, r2
 8006da8:	e7bc      	b.n	8006d24 <_printf_i+0x14c>
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	602a      	str	r2, [r5, #0]
 8006db0:	681d      	ldr	r5, [r3, #0]
 8006db2:	6862      	ldr	r2, [r4, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7f9 fa0a 	bl	80001d0 <memchr>
 8006dbc:	b108      	cbz	r0, 8006dc2 <_printf_i+0x1ea>
 8006dbe:	1b40      	subs	r0, r0, r5
 8006dc0:	6060      	str	r0, [r4, #4]
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dcc:	e7aa      	b.n	8006d24 <_printf_i+0x14c>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	47d0      	blx	sl
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d0ad      	beq.n	8006d38 <_printf_i+0x160>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	079b      	lsls	r3, r3, #30
 8006de0:	d413      	bmi.n	8006e0a <_printf_i+0x232>
 8006de2:	68e0      	ldr	r0, [r4, #12]
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	4298      	cmp	r0, r3
 8006de8:	bfb8      	it	lt
 8006dea:	4618      	movlt	r0, r3
 8006dec:	e7a6      	b.n	8006d3c <_printf_i+0x164>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4632      	mov	r2, r6
 8006df2:	4649      	mov	r1, r9
 8006df4:	4640      	mov	r0, r8
 8006df6:	47d0      	blx	sl
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d09d      	beq.n	8006d38 <_printf_i+0x160>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	68e3      	ldr	r3, [r4, #12]
 8006e00:	9903      	ldr	r1, [sp, #12]
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	42ab      	cmp	r3, r5
 8006e06:	dcf2      	bgt.n	8006dee <_printf_i+0x216>
 8006e08:	e7eb      	b.n	8006de2 <_printf_i+0x20a>
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	f104 0619 	add.w	r6, r4, #25
 8006e10:	e7f5      	b.n	8006dfe <_printf_i+0x226>
 8006e12:	bf00      	nop
 8006e14:	080072c0 	.word	0x080072c0
 8006e18:	080072d1 	.word	0x080072d1

08006e1c <__swbuf_r>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	460e      	mov	r6, r1
 8006e20:	4614      	mov	r4, r2
 8006e22:	4605      	mov	r5, r0
 8006e24:	b118      	cbz	r0, 8006e2e <__swbuf_r+0x12>
 8006e26:	6a03      	ldr	r3, [r0, #32]
 8006e28:	b90b      	cbnz	r3, 8006e2e <__swbuf_r+0x12>
 8006e2a:	f7ff f9ff 	bl	800622c <__sinit>
 8006e2e:	69a3      	ldr	r3, [r4, #24]
 8006e30:	60a3      	str	r3, [r4, #8]
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	071a      	lsls	r2, r3, #28
 8006e36:	d525      	bpl.n	8006e84 <__swbuf_r+0x68>
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	b31b      	cbz	r3, 8006e84 <__swbuf_r+0x68>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	6922      	ldr	r2, [r4, #16]
 8006e40:	1a98      	subs	r0, r3, r2
 8006e42:	6963      	ldr	r3, [r4, #20]
 8006e44:	b2f6      	uxtb	r6, r6
 8006e46:	4283      	cmp	r3, r0
 8006e48:	4637      	mov	r7, r6
 8006e4a:	dc04      	bgt.n	8006e56 <__swbuf_r+0x3a>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7ff fcc0 	bl	80067d4 <_fflush_r>
 8006e54:	b9e0      	cbnz	r0, 8006e90 <__swbuf_r+0x74>
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	701e      	strb	r6, [r3, #0]
 8006e64:	6962      	ldr	r2, [r4, #20]
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d004      	beq.n	8006e76 <__swbuf_r+0x5a>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	07db      	lsls	r3, r3, #31
 8006e70:	d506      	bpl.n	8006e80 <__swbuf_r+0x64>
 8006e72:	2e0a      	cmp	r6, #10
 8006e74:	d104      	bne.n	8006e80 <__swbuf_r+0x64>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f7ff fcab 	bl	80067d4 <_fflush_r>
 8006e7e:	b938      	cbnz	r0, 8006e90 <__swbuf_r+0x74>
 8006e80:	4638      	mov	r0, r7
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	4621      	mov	r1, r4
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 f806 	bl	8006e98 <__swsetup_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d0d5      	beq.n	8006e3c <__swbuf_r+0x20>
 8006e90:	f04f 37ff 	mov.w	r7, #4294967295
 8006e94:	e7f4      	b.n	8006e80 <__swbuf_r+0x64>
	...

08006e98 <__swsetup_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <__swsetup_r+0xac>)
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	b118      	cbz	r0, 8006eac <__swsetup_r+0x14>
 8006ea4:	6a03      	ldr	r3, [r0, #32]
 8006ea6:	b90b      	cbnz	r3, 8006eac <__swsetup_r+0x14>
 8006ea8:	f7ff f9c0 	bl	800622c <__sinit>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eb2:	0718      	lsls	r0, r3, #28
 8006eb4:	d422      	bmi.n	8006efc <__swsetup_r+0x64>
 8006eb6:	06d9      	lsls	r1, r3, #27
 8006eb8:	d407      	bmi.n	8006eca <__swsetup_r+0x32>
 8006eba:	2309      	movs	r3, #9
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	e034      	b.n	8006f34 <__swsetup_r+0x9c>
 8006eca:	0758      	lsls	r0, r3, #29
 8006ecc:	d512      	bpl.n	8006ef4 <__swsetup_r+0x5c>
 8006ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ed0:	b141      	cbz	r1, 8006ee4 <__swsetup_r+0x4c>
 8006ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed6:	4299      	cmp	r1, r3
 8006ed8:	d002      	beq.n	8006ee0 <__swsetup_r+0x48>
 8006eda:	4628      	mov	r0, r5
 8006edc:	f7ff faf4 	bl	80064c8 <_free_r>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6363      	str	r3, [r4, #52]	; 0x34
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	2300      	movs	r3, #0
 8006eee:	6063      	str	r3, [r4, #4]
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f043 0308 	orr.w	r3, r3, #8
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	b94b      	cbnz	r3, 8006f14 <__swsetup_r+0x7c>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0a:	d003      	beq.n	8006f14 <__swsetup_r+0x7c>
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 f884 	bl	800701c <__smakebuf_r>
 8006f14:	89a0      	ldrh	r0, [r4, #12]
 8006f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f1a:	f010 0301 	ands.w	r3, r0, #1
 8006f1e:	d00a      	beq.n	8006f36 <__swsetup_r+0x9e>
 8006f20:	2300      	movs	r3, #0
 8006f22:	60a3      	str	r3, [r4, #8]
 8006f24:	6963      	ldr	r3, [r4, #20]
 8006f26:	425b      	negs	r3, r3
 8006f28:	61a3      	str	r3, [r4, #24]
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	b943      	cbnz	r3, 8006f40 <__swsetup_r+0xa8>
 8006f2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f32:	d1c4      	bne.n	8006ebe <__swsetup_r+0x26>
 8006f34:	bd38      	pop	{r3, r4, r5, pc}
 8006f36:	0781      	lsls	r1, r0, #30
 8006f38:	bf58      	it	pl
 8006f3a:	6963      	ldrpl	r3, [r4, #20]
 8006f3c:	60a3      	str	r3, [r4, #8]
 8006f3e:	e7f4      	b.n	8006f2a <__swsetup_r+0x92>
 8006f40:	2000      	movs	r0, #0
 8006f42:	e7f7      	b.n	8006f34 <__swsetup_r+0x9c>
 8006f44:	20000068 	.word	0x20000068

08006f48 <_raise_r>:
 8006f48:	291f      	cmp	r1, #31
 8006f4a:	b538      	push	{r3, r4, r5, lr}
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	460d      	mov	r5, r1
 8006f50:	d904      	bls.n	8006f5c <_raise_r+0x14>
 8006f52:	2316      	movs	r3, #22
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f5e:	b112      	cbz	r2, 8006f66 <_raise_r+0x1e>
 8006f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f64:	b94b      	cbnz	r3, 8006f7a <_raise_r+0x32>
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f830 	bl	8006fcc <_getpid_r>
 8006f6c:	462a      	mov	r2, r5
 8006f6e:	4601      	mov	r1, r0
 8006f70:	4620      	mov	r0, r4
 8006f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f76:	f000 b817 	b.w	8006fa8 <_kill_r>
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d00a      	beq.n	8006f94 <_raise_r+0x4c>
 8006f7e:	1c59      	adds	r1, r3, #1
 8006f80:	d103      	bne.n	8006f8a <_raise_r+0x42>
 8006f82:	2316      	movs	r3, #22
 8006f84:	6003      	str	r3, [r0, #0]
 8006f86:	2001      	movs	r0, #1
 8006f88:	e7e7      	b.n	8006f5a <_raise_r+0x12>
 8006f8a:	2400      	movs	r4, #0
 8006f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f90:	4628      	mov	r0, r5
 8006f92:	4798      	blx	r3
 8006f94:	2000      	movs	r0, #0
 8006f96:	e7e0      	b.n	8006f5a <_raise_r+0x12>

08006f98 <raise>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <raise+0xc>)
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f7ff bfd3 	b.w	8006f48 <_raise_r>
 8006fa2:	bf00      	nop
 8006fa4:	20000068 	.word	0x20000068

08006fa8 <_kill_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	; (8006fc8 <_kill_r+0x20>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	f7fa fd66 	bl	8001a86 <_kill>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	d102      	bne.n	8006fc4 <_kill_r+0x1c>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	b103      	cbz	r3, 8006fc4 <_kill_r+0x1c>
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	bd38      	pop	{r3, r4, r5, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20004248 	.word	0x20004248

08006fcc <_getpid_r>:
 8006fcc:	f7fa bd53 	b.w	8001a76 <_getpid>

08006fd0 <__swhatbuf_r>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	b096      	sub	sp, #88	; 0x58
 8006fdc:	4615      	mov	r5, r2
 8006fde:	461e      	mov	r6, r3
 8006fe0:	da0d      	bge.n	8006ffe <__swhatbuf_r+0x2e>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	bf0c      	ite	eq
 8006fee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ff2:	2340      	movne	r3, #64	; 0x40
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	6031      	str	r1, [r6, #0]
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	b016      	add	sp, #88	; 0x58
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	466a      	mov	r2, sp
 8007000:	f000 f848 	bl	8007094 <_fstat_r>
 8007004:	2800      	cmp	r0, #0
 8007006:	dbec      	blt.n	8006fe2 <__swhatbuf_r+0x12>
 8007008:	9901      	ldr	r1, [sp, #4]
 800700a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800700e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007012:	4259      	negs	r1, r3
 8007014:	4159      	adcs	r1, r3
 8007016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800701a:	e7eb      	b.n	8006ff4 <__swhatbuf_r+0x24>

0800701c <__smakebuf_r>:
 800701c:	898b      	ldrh	r3, [r1, #12]
 800701e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007020:	079d      	lsls	r5, r3, #30
 8007022:	4606      	mov	r6, r0
 8007024:	460c      	mov	r4, r1
 8007026:	d507      	bpl.n	8007038 <__smakebuf_r+0x1c>
 8007028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	2301      	movs	r3, #1
 8007032:	6163      	str	r3, [r4, #20]
 8007034:	b002      	add	sp, #8
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	ab01      	add	r3, sp, #4
 800703a:	466a      	mov	r2, sp
 800703c:	f7ff ffc8 	bl	8006fd0 <__swhatbuf_r>
 8007040:	9900      	ldr	r1, [sp, #0]
 8007042:	4605      	mov	r5, r0
 8007044:	4630      	mov	r0, r6
 8007046:	f7ff fab3 	bl	80065b0 <_malloc_r>
 800704a:	b948      	cbnz	r0, 8007060 <__smakebuf_r+0x44>
 800704c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007050:	059a      	lsls	r2, r3, #22
 8007052:	d4ef      	bmi.n	8007034 <__smakebuf_r+0x18>
 8007054:	f023 0303 	bic.w	r3, r3, #3
 8007058:	f043 0302 	orr.w	r3, r3, #2
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	e7e3      	b.n	8007028 <__smakebuf_r+0xc>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	6020      	str	r0, [r4, #0]
 8007064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	9b00      	ldr	r3, [sp, #0]
 800706c:	6163      	str	r3, [r4, #20]
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	6120      	str	r0, [r4, #16]
 8007072:	b15b      	cbz	r3, 800708c <__smakebuf_r+0x70>
 8007074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007078:	4630      	mov	r0, r6
 800707a:	f000 f81d 	bl	80070b8 <_isatty_r>
 800707e:	b128      	cbz	r0, 800708c <__smakebuf_r+0x70>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	431d      	orrs	r5, r3
 8007090:	81a5      	strh	r5, [r4, #12]
 8007092:	e7cf      	b.n	8007034 <__smakebuf_r+0x18>

08007094 <_fstat_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d07      	ldr	r5, [pc, #28]	; (80070b4 <_fstat_r+0x20>)
 8007098:	2300      	movs	r3, #0
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	f7fa fd4f 	bl	8001b44 <_fstat>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d102      	bne.n	80070b0 <_fstat_r+0x1c>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	b103      	cbz	r3, 80070b0 <_fstat_r+0x1c>
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	bd38      	pop	{r3, r4, r5, pc}
 80070b2:	bf00      	nop
 80070b4:	20004248 	.word	0x20004248

080070b8 <_isatty_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d06      	ldr	r5, [pc, #24]	; (80070d4 <_isatty_r+0x1c>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7fa fd4e 	bl	8001b64 <_isatty>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_isatty_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_isatty_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	20004248 	.word	0x20004248

080070d8 <_gettimeofday>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <_gettimeofday+0xc>)
 80070da:	2258      	movs	r2, #88	; 0x58
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	4770      	bx	lr
 80070e4:	20004248 	.word	0x20004248

080070e8 <_init>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr

080070f4 <_fini>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr
