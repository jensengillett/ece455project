
ECE 455 Project 1 Functional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006440  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a4  080067a4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067ac  080067ac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080067b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041e8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004254  20004254  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000deae  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028d2  00000000  00000000  0002df8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a3d  00000000  00000000  000315f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002402e  00000000  00000000  00032035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fa1c  00000000  00000000  00056063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d99d2  00000000  00000000  00065a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004070  00000000  00000000  0013f454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001434c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065b8 	.word	0x080065b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080065b8 	.word	0x080065b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	200000dc 	.word	0x200000dc

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b0ba      	sub	sp, #232	; 0xe8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fe45 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8f5 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f9e5 	bl	800097c <MX_GPIO_Init>
  MX_SPI1_Init();
 80005b2:	f000 f9ad 	bl	8000910 <MX_SPI1_Init>
  MX_ADC1_Init();
 80005b6:	f000 f959 	bl	800086c <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of cars_array_mutex */
  osMutexDef(cars_array_mutex);
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  cars_array_mutexHandle = osMutexCreate(osMutex(cars_array_mutex));
 80005c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f920 	bl	8002810 <osMutexCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a5f      	ldr	r2, [pc, #380]	; (8000750 <main+0x1b0>)
 80005d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_mutex */
  osMutexDef(traffic_rate_mutex);
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  traffic_rate_mutexHandle = osMutexCreate(osMutex(traffic_rate_mutex));
 80005e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f912 	bl	8002810 <osMutexCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a59      	ldr	r2, [pc, #356]	; (8000754 <main+0x1b4>)
 80005f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_mutex */
  osMutexDef(light_status_mutex);
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  light_status_mutexHandle = osMutexCreate(osMutex(light_status_mutex));
 80005fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f904 	bl	8002810 <osMutexCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a53      	ldr	r2, [pc, #332]	; (8000758 <main+0x1b8>)
 800060c:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of traffic_queue_1 */
  osMessageQDef(traffic_queue_1, 16, uint16_t);
 800060e:	4b53      	ldr	r3, [pc, #332]	; (800075c <main+0x1bc>)
 8000610:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_1Handle = osMessageCreate(osMessageQ(traffic_queue_1), NULL);
 800061a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f002 f9ee 	bl	8002a02 <osMessageCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a4d      	ldr	r2, [pc, #308]	; (8000760 <main+0x1c0>)
 800062a:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_queue_2 */
  osMessageQDef(traffic_queue_2, 16, uint16_t);
 800062c:	4b4b      	ldr	r3, [pc, #300]	; (800075c <main+0x1bc>)
 800062e:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_2Handle = osMessageCreate(osMessageQ(traffic_queue_2), NULL);
 8000638:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 f9df 	bl	8002a02 <osMessageCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a47      	ldr	r2, [pc, #284]	; (8000764 <main+0x1c4>)
 8000648:	6013      	str	r3, [r2, #0]

  /* definition and creation of cars_array_queue */
  osMailQDef(cars_array_queue, 16, uint16_t);
 800064a:	2310      	movs	r3, #16
 800064c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000650:	2302      	movs	r3, #2
 8000652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000656:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800065a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  cars_array_queueHandle = osMailCreate(osMailQ(cars_array_queue), NULL);
 800065e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f002 faa9 	bl	8002bbc <osMailCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a3e      	ldr	r2, [pc, #248]	; (8000768 <main+0x1c8>)
 800066e:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_queue */
  osMessageQDef(light_status_queue, 16, uint16_t);
 8000670:	4b3a      	ldr	r3, [pc, #232]	; (800075c <main+0x1bc>)
 8000672:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_status_queueHandle = osMessageCreate(osMessageQ(light_status_queue), NULL);
 800067c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f9bd 	bl	8002a02 <osMessageCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <main+0x1cc>)
 800068c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <main+0x1d0>)
 8000690:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000694:	461d      	mov	r5, r3
 8000696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f851 	bl	8002750 <osThreadCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a30      	ldr	r2, [pc, #192]	; (8000774 <main+0x1d4>)
 80006b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_generat */
  osThreadDef(traffic_generat, TrafficGeneration, osPriorityIdle, 0, 128);
 80006b4:	4b30      	ldr	r3, [pc, #192]	; (8000778 <main+0x1d8>)
 80006b6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  traffic_generatHandle = osThreadCreate(osThread(traffic_generat), NULL);
 80006c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f83e 	bl	8002750 <osThreadCreate>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a29      	ldr	r2, [pc, #164]	; (800077c <main+0x1dc>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of adjust_flow */
  osThreadDef(adjust_flow, AdjustFlow, osPriorityIdle, 0, 128);
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <main+0x1e0>)
 80006dc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006e0:	461d      	mov	r5, r3
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adjust_flowHandle = osThreadCreate(osThread(adjust_flow), NULL);
 80006ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 f82b 	bl	8002750 <osThreadCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <main+0x1e4>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_state */
  osThreadDef(light_state, LightState, osPriorityIdle, 0, 128);
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <main+0x1e8>)
 8000702:	f107 0420 	add.w	r4, r7, #32
 8000706:	461d      	mov	r5, r3
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  light_stateHandle = osThreadCreate(osThread(light_state), NULL);
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f818 	bl	8002750 <osThreadCreate>
 8000720:	4603      	mov	r3, r0
 8000722:	4a1a      	ldr	r2, [pc, #104]	; (800078c <main+0x1ec>)
 8000724:	6013      	str	r3, [r2, #0]

  /* definition and creation of sys_manage */
  osThreadDef(sys_manage, SysManage, osPriorityIdle, 0, 128);
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <main+0x1f0>)
 8000728:	1d3c      	adds	r4, r7, #4
 800072a:	461d      	mov	r5, r3
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sys_manageHandle = osThreadCreate(osThread(sys_manage), NULL);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f807 	bl	8002750 <osThreadCreate>
 8000742:	4603      	mov	r3, r0
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <main+0x1f4>)
 8000746:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000748:	f001 fffb 	bl	8002742 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800074c:	e7fe      	b.n	800074c <main+0x1ac>
 800074e:	bf00      	nop
 8000750:	200003a0 	.word	0x200003a0
 8000754:	200003a4 	.word	0x200003a4
 8000758:	200003a8 	.word	0x200003a8
 800075c:	080065d0 	.word	0x080065d0
 8000760:	20000390 	.word	0x20000390
 8000764:	20000394 	.word	0x20000394
 8000768:	20000398 	.word	0x20000398
 800076c:	2000039c 	.word	0x2000039c
 8000770:	080065ec 	.word	0x080065ec
 8000774:	2000037c 	.word	0x2000037c
 8000778:	08006618 	.word	0x08006618
 800077c:	20000380 	.word	0x20000380
 8000780:	08006640 	.word	0x08006640
 8000784:	20000384 	.word	0x20000384
 8000788:	08006668 	.word	0x08006668
 800078c:	20000388 	.word	0x20000388
 8000790:	08006690 	.word	0x08006690
 8000794:	2000038c 	.word	0x2000038c

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 f821 	bl	80057ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <SystemClock_Config+0xcc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <SystemClock_Config+0xd0>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000808:	2308      	movs	r3, #8
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800080c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000816:	2307      	movs	r3, #7
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fa78 	bl	8001d14 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800082a:	f000 fb21 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2105      	movs	r1, #5
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fcd9 	bl	8002204 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000858:	f000 fb0a 	bl	8000e70 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	; 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_ADC1_Init+0x98>)
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <MX_ADC1_Init+0x9c>)
 8000882:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_ADC1_Init+0x98>)
 8000886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800088a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_ADC1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_ADC1_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_ADC1_Init+0x98>)
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <MX_ADC1_Init+0xa0>)
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_ADC1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_ADC1_Init+0x98>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_ADC1_Init+0x98>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_ADC1_Init+0x98>)
 80008ce:	f000 fd23 	bl	8001318 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008d8:	f000 faca 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008dc:	230d      	movs	r3, #13
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_ADC1_Init+0x98>)
 80008ee:	f000 fd57 	bl	80013a0 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f8:	f000 faba 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200002dc 	.word	0x200002dc
 8000908:	40012000 	.word	0x40012000
 800090c:	0f000001 	.word	0x0f000001

08000910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <MX_SPI1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI1_Init+0x64>)
 800091c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI1_Init+0x64>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI1_Init+0x64>)
 800095c:	220a      	movs	r2, #10
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_SPI1_Init+0x64>)
 8000962:	f001 fe3b 	bl	80025dc <HAL_SPI_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 fa80 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000324 	.word	0x20000324
 8000978:	40013000 	.word	0x40013000

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <MX_GPIO_Init+0x134>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <MX_GPIO_Init+0x134>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a37      	ldr	r2, [pc, #220]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <MX_GPIO_Init+0x134>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a29      	ldr	r2, [pc, #164]	; (8000ab0 <MX_GPIO_Init+0x134>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f240 11c7 	movw	r1, #455	; 0x1c7
 8000a24:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <MX_GPIO_Init+0x138>)
 8000a26:	f001 f95b 	bl	8001ce0 <HAL_GPIO_WritePin>
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a30:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 8000a32:	f001 f955 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Red_Light_Pin Amber_Light_Pin Green_Light_Pin Shift_Reg_Data_Pin
                           Shift_Reg_Clock_Pin Shift_Reg_Reset_Pin */
  GPIO_InitStruct.Pin = Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 8000a36:	f240 13c7 	movw	r3, #455	; 0x1c7
 8000a3a:	617b      	str	r3, [r7, #20]
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0x138>)
 8000a50:	f000 ffaa 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a54:	2304      	movs	r3, #4
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4815      	ldr	r0, [pc, #84]	; (8000abc <MX_GPIO_Init+0x140>)
 8000a68:	f000 ff9e 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000a6c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 8000a86:	f000 ff8f 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0x138>)
 8000aa2:	f000 ff81 	bl	80019a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40020400 	.word	0x40020400

08000ac0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f001 fe8d 	bl	80027e8 <osDelay>
 8000ace:	e7fb      	b.n	8000ac8 <StartDefaultTask+0x8>

08000ad0 <TrafficGeneration>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TrafficGeneration */
void TrafficGeneration(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TrafficGeneration */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f001 fe85 	bl	80027e8 <osDelay>
 8000ade:	e7fb      	b.n	8000ad8 <TrafficGeneration+0x8>

08000ae0 <AdjustFlow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AdjustFlow */
void AdjustFlow(void const * argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AdjustFlow */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 fe7d 	bl	80027e8 <osDelay>
 8000aee:	e7fb      	b.n	8000ae8 <AdjustFlow+0x8>

08000af0 <trafficGenerated>:
 * @brief Function implementing the light_state thread.
 * @param argument: Not used
 * @retval None
 */

int trafficGenerated(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	osMutexWait(traffic_rate_mutexHandle, osWaitForever);
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <trafficGenerated+0x68>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f04f 31ff 	mov.w	r1, #4294967295
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fe9e 	bl	8002840 <osMutexWait>
	// int traffic = traffic_rate; //TODO: traffic_queue_0
	//osEvent event = osMessageGet(traffic_queue_1Handle, osWaitForever);
	//int traffic = event.value.v;
	int traffic = 1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
	osMutexRelease(traffic_rate_mutexHandle);
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <trafficGenerated+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fee5 	bl	80028dc <osMutexRelease>
	// modulate traffic rate from 1 to 10

	srand(time(NULL));
 8000b12:	2000      	movs	r0, #0
 8000b14:	f004 fe74 	bl	8005800 <time>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fcf4 	bl	800550c <srand>
	int random = rand() % 10;
 8000b24:	f004 fd20 	bl	8005568 <rand>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <trafficGenerated+0x6c>)
 8000b2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b30:	1099      	asrs	r1, r3, #2
 8000b32:	17d3      	asrs	r3, r2, #31
 8000b34:	1ac9      	subs	r1, r1, r3
 8000b36:	460b      	mov	r3, r1
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	603b      	str	r3, [r7, #0]
	if (random > traffic) {
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dd01      	ble.n	8000b4e <trafficGenerated+0x5e>
		return 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <trafficGenerated+0x60>
	}
	return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200003a4 	.word	0x200003a4
 8000b5c:	66666667 	.word	0x66666667

08000b60 <LightState>:
/* USER CODE END Header_LightState */
void LightState(void const * argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LightState */
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(traffic_rate_mutexHandle, osWaitForever);
 8000b68:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <LightState+0x140>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fe65 	bl	8002840 <osMutexWait>
		// int rate = traffic_rate; // TODO: traffic_queue_1
		//osEvent event = osMessageGet(traffic_queue_2Handle, osWaitForever);
		//int rate = event.value.v;
		int rate = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
		osMutexRelease(traffic_rate_mutexHandle);
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <LightState+0x140>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 feac 	bl	80028dc <osMutexRelease>
		// turn green LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2101      	movs	r1, #1
 8000b88:	4846      	ldr	r0, [pc, #280]	; (8000ca4 <LightState+0x144>)
 8000b8a:	f001 f8a9 	bl	8001ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2102      	movs	r1, #2
 8000b92:	4844      	ldr	r0, [pc, #272]	; (8000ca4 <LightState+0x144>)
 8000b94:	f001 f8a4 	bl	8001ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <LightState+0x144>)
 8000b9e:	f001 f89f 	bl	8001ce0 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000ba2:	4b41      	ldr	r3, [pc, #260]	; (8000ca8 <LightState+0x148>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fe48 	bl	8002840 <osMutexWait>
		osMessagePut(light_status_queueHandle, 2, osWaitForever);
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <LightState+0x14c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 ff4a 	bl	8002a54 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <LightState+0x148>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fe89 	bl	80028dc <osMutexRelease>
		// light_status = 2; //TODO: light_queue_0
		// modulate traffic rate to 1
		osDelay(3000 + 3000 * rate);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fe06 	bl	80027e8 <osDelay>

		// turn yellow LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	4830      	ldr	r0, [pc, #192]	; (8000ca4 <LightState+0x144>)
 8000be2:	f001 f87d 	bl	8001ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2102      	movs	r1, #2
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <LightState+0x144>)
 8000bec:	f001 f878 	bl	8001ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	482b      	ldr	r0, [pc, #172]	; (8000ca4 <LightState+0x144>)
 8000bf6:	f001 f873 	bl	8001ce0 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <LightState+0x148>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fe1c 	bl	8002840 <osMutexWait>
		osMessagePut(light_status_queueHandle, 1, osWaitForever);
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <LightState+0x14c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	2101      	movs	r1, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 ff1e 	bl	8002a54 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <LightState+0x148>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fe5d 	bl	80028dc <osMutexRelease>
		// light_status = 1;
		osDelay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c26:	f001 fddf 	bl	80027e8 <osDelay>

		osMutexWait(traffic_rate_mutexHandle, osWaitForever);
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <LightState+0x140>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fe04 	bl	8002840 <osMutexWait>
		//event = osMessageGet(traffic_queue_2Handle, osWaitForever); //TODO: traffic_queue_1
		//rate = event.value.v;
		rate = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
		osMutexRelease(traffic_rate_mutexHandle);
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <LightState+0x140>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fe4b 	bl	80028dc <osMutexRelease>
		// turn red LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <LightState+0x144>)
 8000c4c:	f001 f848 	bl	8001ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2102      	movs	r1, #2
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <LightState+0x144>)
 8000c56:	f001 f843 	bl	8001ce0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <LightState+0x144>)
 8000c60:	f001 f83e 	bl	8001ce0 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <LightState+0x148>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fde7 	bl	8002840 <osMutexWait>
		osMessagePut(light_status_queueHandle, 0, osWaitForever);
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <LightState+0x14c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fee9 	bl	8002a54 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <LightState+0x148>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fe28 	bl	80028dc <osMutexRelease>
		// light_status = 0;
		// modulate traffic rate to 1
		osDelay(3000 + 3000 * rate);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fda5 	bl	80027e8 <osDelay>
	{
 8000c9e:	e763      	b.n	8000b68 <LightState+0x8>
 8000ca0:	200003a4 	.word	0x200003a4
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	200003a8 	.word	0x200003a8
 8000cac:	2000039c 	.word	0x2000039c

08000cb0 <SysManage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SysManage */
void SysManage(void const * argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b098      	sub	sp, #96	; 0x60
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SysManage */
	/* Infinite loop */
	int i;
	int cars[16];
	int light_colour = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	65bb      	str	r3, [r7, #88]	; 0x58
	for(;;)
	{
		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000cbc:	4b68      	ldr	r3, [pc, #416]	; (8000e60 <SysManage+0x1b0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fdbb 	bl	8002840 <osMutexWait>
		osEvent event = osMessageGet(light_status_queueHandle, 0); //TODO: light_queue_0
 8000cca:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <SysManage+0x1b4>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fefd 	bl	8002ad4 <osMessageGet>
		if(event.status == 1){
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d101      	bne.n	8000ce4 <SysManage+0x34>
			light_colour = event.value.v;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		osMutexRelease(light_status_mutexHandle);
 8000ce4:	4b5e      	ldr	r3, [pc, #376]	; (8000e60 <SysManage+0x1b0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fdf7 	bl	80028dc <osMutexRelease>

		// osMutexWait(cars_array_mutexHandle); //TODO: cars_queue_0
		for (i = 15; i>0; i--){
 8000cee:	230f      	movs	r3, #15
 8000cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cf2:	e08e      	b.n	8000e12 <SysManage+0x162>
			if (light_colour == 2) { //green
 8000cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d115      	bne.n	8000d26 <SysManage+0x76>
				cars[i] = cars[i-1];
 8000cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	3360      	adds	r3, #96	; 0x60
 8000d02:	443b      	add	r3, r7
 8000d04:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	3360      	adds	r3, #96	; 0x60
 8000d0e:	443b      	add	r3, r7
 8000d10:	f843 2c48 	str.w	r2, [r3, #-72]
				cars[i - 1] = 0;
 8000d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d16:	3b01      	subs	r3, #1
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	3360      	adds	r3, #96	; 0x60
 8000d1c:	443b      	add	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f843 2c48 	str.w	r2, [r3, #-72]
 8000d24:	e072      	b.n	8000e0c <SysManage+0x15c>
			}
			else if (light_colour == 1) { //yellow
 8000d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d136      	bne.n	8000d9a <SysManage+0xea>
				if (i > 8) {
 8000d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d2e:	2b08      	cmp	r3, #8
 8000d30:	dd15      	ble.n	8000d5e <SysManage+0xae>
					cars[i] = cars[i-1];
 8000d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d34:	3b01      	subs	r3, #1
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	3360      	adds	r3, #96	; 0x60
 8000d3a:	443b      	add	r3, r7
 8000d3c:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	3360      	adds	r3, #96	; 0x60
 8000d46:	443b      	add	r3, r7
 8000d48:	f843 2c48 	str.w	r2, [r3, #-72]
					cars[i-1] = 0;
 8000d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	3360      	adds	r3, #96	; 0x60
 8000d54:	443b      	add	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	f843 2c48 	str.w	r2, [r3, #-72]
 8000d5c:	e056      	b.n	8000e0c <SysManage+0x15c>
				}
				else {
					if (!cars[i]){
 8000d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	3360      	adds	r3, #96	; 0x60
 8000d64:	443b      	add	r3, r7
 8000d66:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d14e      	bne.n	8000e0c <SysManage+0x15c>
						cars[i] = cars[i-1];
 8000d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d70:	3b01      	subs	r3, #1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	3360      	adds	r3, #96	; 0x60
 8000d76:	443b      	add	r3, r7
 8000d78:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	3360      	adds	r3, #96	; 0x60
 8000d82:	443b      	add	r3, r7
 8000d84:	f843 2c48 	str.w	r2, [r3, #-72]
						cars[i-1] = 0;
 8000d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	3360      	adds	r3, #96	; 0x60
 8000d90:	443b      	add	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	f843 2c48 	str.w	r2, [r3, #-72]
 8000d98:	e038      	b.n	8000e0c <SysManage+0x15c>
					}
				}
			}
			else { //red
				if (i > 11){
 8000d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d9c:	2b0b      	cmp	r3, #11
 8000d9e:	dd15      	ble.n	8000dcc <SysManage+0x11c>
					cars[i] = cars[i-1];
 8000da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da2:	3b01      	subs	r3, #1
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	3360      	adds	r3, #96	; 0x60
 8000da8:	443b      	add	r3, r7
 8000daa:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	3360      	adds	r3, #96	; 0x60
 8000db4:	443b      	add	r3, r7
 8000db6:	f843 2c48 	str.w	r2, [r3, #-72]
					cars[i-1] = 0;
 8000dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	3360      	adds	r3, #96	; 0x60
 8000dc2:	443b      	add	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f843 2c48 	str.w	r2, [r3, #-72]
 8000dca:	e01f      	b.n	8000e0c <SysManage+0x15c>
				}
				else if (i < 8){
 8000dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dce:	2b07      	cmp	r3, #7
 8000dd0:	dc1c      	bgt.n	8000e0c <SysManage+0x15c>
					if (!cars[i]) {
 8000dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	3360      	adds	r3, #96	; 0x60
 8000dd8:	443b      	add	r3, r7
 8000dda:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d114      	bne.n	8000e0c <SysManage+0x15c>
						cars[i] = cars[i-1];
 8000de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de4:	3b01      	subs	r3, #1
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	3360      	adds	r3, #96	; 0x60
 8000dea:	443b      	add	r3, r7
 8000dec:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	3360      	adds	r3, #96	; 0x60
 8000df6:	443b      	add	r3, r7
 8000df8:	f843 2c48 	str.w	r2, [r3, #-72]
						cars[i-1] = 0;
 8000dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	3360      	adds	r3, #96	; 0x60
 8000e04:	443b      	add	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	f843 2c48 	str.w	r2, [r3, #-72]
		for (i = 15; i>0; i--){
 8000e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f73f af6d 	bgt.w	8000cf4 <SysManage+0x44>
					}
				}
			}
		}
		if (trafficGenerated()){
 8000e1a:	f7ff fe69 	bl	8000af0 <trafficGenerated>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <SysManage+0x17a>
			cars[0] = 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	e001      	b.n	8000e2e <SysManage+0x17e>
		}
		else {
			cars[0] = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
		}
		// osMutexRelease(cars_array_mutexHandle);
		osMutexWait(cars_array_mutexHandle, osWaitForever);
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <SysManage+0x1b8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f04f 31ff 	mov.w	r1, #4294967295
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fd02 	bl	8002840 <osMutexWait>
		// int* mail = (int *)osMailAlloc(cars_array_queueHandle, osWaitForever);
		osMailPut(cars_array_queueHandle, cars);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <SysManage+0x1bc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f107 0218 	add.w	r2, r7, #24
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 ff10 	bl	8002c6c <osMailPut>
		osMutexRelease(cars_array_mutexHandle);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SysManage+0x1b8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fd43 	bl	80028dc <osMutexRelease>
		osDelay(500);
 8000e56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e5a:	f001 fcc5 	bl	80027e8 <osDelay>
	{
 8000e5e:	e72d      	b.n	8000cbc <SysManage+0xc>
 8000e60:	200003a8 	.word	0x200003a8
 8000e64:	2000039c 	.word	0x2000039c
 8000e68:	200003a0 	.word	0x200003a0
 8000e6c:	20000398 	.word	0x20000398

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_MspInit+0x54>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_MspInit+0x54>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_MspInit+0x54>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	f06f 0001 	mvn.w	r0, #1
 8000ec2:	f000 fd48 	bl	8001956 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_ADC_MspInit+0x7c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d127      	bne.n	8000f46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Pot_In_Pin;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_In_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_ADC_MspInit+0x84>)
 8000f42:	f000 fd31 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40012000 	.word	0x40012000
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020800 	.word	0x40020800

08000f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_SPI_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12b      	bne.n	8000fd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_SPI_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fb6:	23e0      	movs	r3, #224	; 0xe0
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_SPI_MspInit+0x8c>)
 8000fd2:	f000 fce9 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40013000 	.word	0x40013000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f95c 	bl	80012d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001020:	f003 fc1c 	bl	800485c <xTaskGetSchedulerState>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d001      	beq.n	800102e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800102a:	f003 fff5 	bl	8005018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_kill>:

int _kill(int pid, int sig)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800104c:	f004 fc4a 	bl	80058e4 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	2216      	movs	r2, #22
 8001054:	601a      	str	r2, [r3, #0]
  return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_exit>:

void _exit (int status)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800106a:	f04f 31ff 	mov.w	r1, #4294967295
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffe7 	bl	8001042 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001074:	e7fe      	b.n	8001074 <_exit+0x12>

08001076 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e00a      	b.n	800109e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001088:	f3af 8000 	nop.w
 800108c:	4601      	mov	r1, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60ba      	str	r2, [r7, #8]
 8001094:	b2ca      	uxtb	r2, r1
 8001096:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf0      	blt.n	8001088 <_read+0x12>
  }

  return len;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e009      	b.n	80010d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	60ba      	str	r2, [r7, #8]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbf1      	blt.n	80010c2 <_write+0x12>
  }
  return len;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_close>:

int _close(int file)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001110:	605a      	str	r2, [r3, #4]
  return 0;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_isatty>:

int _isatty(int file)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001136:	b480      	push	{r7}
 8001138:	b085      	sub	sp, #20
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f004 fbb0 	bl	80058e4 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20020000 	.word	0x20020000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	200003ac 	.word	0x200003ac
 80011b8:	20004258 	.word	0x20004258

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011e4:	f7ff ffea 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f004 fb6f 	bl	80058f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff f9c5 	bl	80005a0 <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001224:	080067b4 	.word	0x080067b4
  ldr r2, =_sbss
 8001228:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800122c:	20004254 	.word	0x20004254

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <HAL_Init+0x40>)
 800123e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_Init+0x40>)
 800124a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_Init+0x40>)
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 fb6f 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001262:	200f      	movs	r0, #15
 8001264:	f000 f808 	bl	8001278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001268:	f7ff fe08 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023c00 	.word	0x40023c00

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x54>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x58>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fb79 	bl	800198e <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f000 fb4f 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x5c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000008 	.word	0x20000008
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200003b0 	.word	0x200003b0

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200003b0 	.word	0x200003b0

08001318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e033      	b.n	8001396 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fdcc 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d118      	bne.n	8001388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800135e:	f023 0302 	bic.w	r3, r3, #2
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f93a 	bl	80015e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
 8001386:	e001      	b.n	800138c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1c>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e105      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x228>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	d925      	bls.n	8001418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68d9      	ldr	r1, [r3, #12]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	3b1e      	subs	r3, #30
 80013e2:	2207      	movs	r2, #7
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43da      	mvns	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	400a      	ands	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68d9      	ldr	r1, [r3, #12]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	4603      	mov	r3, r0
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4403      	add	r3, r0
 800140a:	3b1e      	subs	r3, #30
 800140c:	409a      	lsls	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	e022      	b.n	800145e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6919      	ldr	r1, [r3, #16]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	2207      	movs	r2, #7
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	400a      	ands	r2, r1
 800143a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6919      	ldr	r1, [r3, #16]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4403      	add	r3, r0
 8001454:	409a      	lsls	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b06      	cmp	r3, #6
 8001464:	d824      	bhi.n	80014b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b05      	subs	r3, #5
 8001478:	221f      	movs	r2, #31
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3b05      	subs	r3, #5
 80014a2:	fa00 f203 	lsl.w	r2, r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e04c      	b.n	800154a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	d824      	bhi.n	8001502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b23      	subs	r3, #35	; 0x23
 80014ca:	221f      	movs	r2, #31
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43da      	mvns	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	400a      	ands	r2, r1
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b23      	subs	r3, #35	; 0x23
 80014f4:	fa00 f203 	lsl.w	r2, r0, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001500:	e023      	b.n	800154a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	3b41      	subs	r3, #65	; 0x41
 8001514:	221f      	movs	r2, #31
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	400a      	ands	r2, r1
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	3b41      	subs	r3, #65	; 0x41
 800153e:	fa00 f203 	lsl.w	r2, r0, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_ADC_ConfigChannel+0x234>)
 800154c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_ADC_ConfigChannel+0x238>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d109      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1cc>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b12      	cmp	r3, #18
 800155e:	d105      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_ADC_ConfigChannel+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d123      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d003      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x1e6>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b11      	cmp	r3, #17
 8001584:	d11b      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d111      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_ADC_ConfigChannel+0x23c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_ADC_ConfigChannel+0x240>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9a      	lsrs	r2, r3, #18
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40012300 	.word	0x40012300
 80015d8:	40012000 	.word	0x40012000
 80015dc:	20000000 	.word	0x20000000
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ec:	4b79      	ldr	r3, [pc, #484]	; (80017d4 <ADC_Init+0x1f0>)
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	021a      	lsls	r2, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <ADC_Init+0x1f4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d022      	beq.n	80016c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800168a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e00f      	b.n	80016e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0202 	bic.w	r2, r2, #2
 80016f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	005a      	lsls	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800172e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6859      	ldr	r1, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	035a      	lsls	r2, r3, #13
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001756:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	3b01      	subs	r3, #1
 8001774:	051a      	lsls	r2, r3, #20
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800178c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800179a:	025a      	lsls	r2, r3, #9
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	029a      	lsls	r2, r3, #10
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	0f000001 	.word	0x0f000001

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff47 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff5c 	bl	8001824 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffb0 	bl	80018fc <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e16b      	b.n	8001c9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 815a 	bne.w	8001c96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d005      	beq.n	80019fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d130      	bne.n	8001a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d017      	beq.n	8001a98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80b4 	beq.w	8001c96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b60      	ldr	r3, [pc, #384]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a5f      	ldr	r2, [pc, #380]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4a:	4a5b      	ldr	r2, [pc, #364]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x314>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d02b      	beq.n	8001bce <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_GPIO_Init+0x318>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d025      	beq.n	8001bca <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_GPIO_Init+0x31c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01f      	beq.n	8001bc6 <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x320>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x21a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4e      	ldr	r2, [pc, #312]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x216>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4d      	ldr	r2, [pc, #308]	; (8001cd0 <HAL_GPIO_Init+0x328>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x212>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	; (8001cd4 <HAL_GPIO_Init+0x32c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x20a>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e00e      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	e00c      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	e00a      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be0:	4935      	ldr	r1, [pc, #212]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bee:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c12:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c3c:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_GPIO_Init+0x334>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	f67f ae90 	bls.w	80019c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40021400 	.word	0x40021400
 8001cd4:	40021800 	.word	0x40021800
 8001cd8:	40021c00 	.word	0x40021c00
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e267      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d075      	beq.n	8001e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d00c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d112      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b7e      	ldr	r3, [pc, #504]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d05b      	beq.n	8001e1c <HAL_RCC_OscConfig+0x108>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d157      	bne.n	8001e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e242      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x74>
 8001d7a:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a75      	ldr	r2, [pc, #468]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x98>
 8001d92:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6f      	ldr	r2, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6c      	ldr	r2, [pc, #432]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001dac:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a68      	ldr	r2, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a65      	ldr	r2, [pc, #404]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fa98 	bl	8001300 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fa94 	bl	8001300 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e207      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xc0>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa84 	bl	8001300 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fa80 	bl	8001300 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1f3      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0xe8>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e1c7      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4937      	ldr	r1, [pc, #220]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	e03a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_RCC_OscConfig+0x244>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fa39 	bl	8001300 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff fa35 	bl	8001300 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1a8      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4925      	ldr	r1, [pc, #148]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_RCC_OscConfig+0x244>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fa18 	bl	8001300 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fa14 	bl	8001300 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e187      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d036      	beq.n	8001f6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_RCC_OscConfig+0x248>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f9f8 	bl	8001300 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff f9f4 	bl	8001300 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e167      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x200>
 8001f32:	e01b      	b.n	8001f6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_OscConfig+0x248>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f9e1 	bl	8001300 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	e00e      	b.n	8001f60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff f9dd 	bl	8001300 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d907      	bls.n	8001f60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e150      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	42470000 	.word	0x42470000
 8001f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ea      	bne.n	8001f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8097 	beq.w	80020a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b81      	ldr	r3, [pc, #516]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10f      	bne.n	8001faa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b7d      	ldr	r3, [pc, #500]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a7c      	ldr	r2, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b77      	ldr	r3, [pc, #476]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b74      	ldr	r3, [pc, #464]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a73      	ldr	r2, [pc, #460]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f99d 	bl	8001300 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7ff f999 	bl	8001300 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e10c      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2ea>
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x324>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x30c>
 8002006:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a5b      	ldr	r2, [pc, #364]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x324>
 8002020:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7ff f95e 	bl	8001300 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7ff f95a 	bl	8001300 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0cb      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCC_OscConfig+0x334>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff f948 	bl	8001300 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7ff f944 	bl	8001300 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0b5      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ee      	bne.n	8002074 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a38      	ldr	r2, [pc, #224]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a1 	beq.w	80021f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d05c      	beq.n	8002178 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d141      	bne.n	800214a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x478>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff f918 	bl	8001300 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f914 	bl	8001300 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e087      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	3b01      	subs	r3, #1
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	491b      	ldr	r1, [pc, #108]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x478>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff f8ed 	bl	8001300 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff f8e9 	bl	8001300 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e05c      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x416>
 8002148:	e054      	b.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_RCC_OscConfig+0x478>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff f8d6 	bl	8001300 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f8d2 	bl	8001300 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e045      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x444>
 8002176:	e03d      	b.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e038      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
 8002184:	40023800 	.word	0x40023800
 8002188:	40007000 	.word	0x40007000
 800218c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x4ec>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d028      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d121      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d11a      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	3b01      	subs	r3, #1
 80021da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0cc      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d90c      	bls.n	8002240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b8      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800227a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	494d      	ldr	r1, [pc, #308]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d044      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e067      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4934      	ldr	r1, [pc, #208]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7ff f804 	bl	8001300 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff f800 	bl	8001300 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e04f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d20c      	bcs.n	800234c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e032      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4916      	ldr	r1, [pc, #88]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800238a:	f000 f821 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490a      	ldr	r1, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe ff64 	bl	8001278 <HAL_InitTick>

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00
 80023c0:	40023800 	.word	0x40023800
 80023c4:	080066b4 	.word	0x080066b4
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d4:	b094      	sub	sp, #80	; 0x50
 80023d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	647b      	str	r3, [r7, #68]	; 0x44
 80023dc:	2300      	movs	r3, #0
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e0:	2300      	movs	r3, #0
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d00d      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x40>
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	f200 80e1 	bhi.w	80025bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x34>
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x3a>
 8002402:	e0db      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002406:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002408:	e0db      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240a:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800240c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800240e:	e0d8      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002410:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002426:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	2200      	movs	r2, #0
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002430:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
 800243e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002442:	4622      	mov	r2, r4
 8002444:	462b      	mov	r3, r5
 8002446:	f04f 0000 	mov.w	r0, #0
 800244a:	f04f 0100 	mov.w	r1, #0
 800244e:	0159      	lsls	r1, r3, #5
 8002450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002454:	0150      	lsls	r0, r2, #5
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4621      	mov	r1, r4
 800245c:	1a51      	subs	r1, r2, r1
 800245e:	6139      	str	r1, [r7, #16]
 8002460:	4629      	mov	r1, r5
 8002462:	eb63 0301 	sbc.w	r3, r3, r1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002474:	4659      	mov	r1, fp
 8002476:	018b      	lsls	r3, r1, #6
 8002478:	4651      	mov	r1, sl
 800247a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800247e:	4651      	mov	r1, sl
 8002480:	018a      	lsls	r2, r1, #6
 8002482:	4651      	mov	r1, sl
 8002484:	ebb2 0801 	subs.w	r8, r2, r1
 8002488:	4659      	mov	r1, fp
 800248a:	eb63 0901 	sbc.w	r9, r3, r1
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024a2:	4690      	mov	r8, r2
 80024a4:	4699      	mov	r9, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	eb18 0303 	adds.w	r3, r8, r3
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	462b      	mov	r3, r5
 80024b0:	eb49 0303 	adc.w	r3, r9, r3
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024c2:	4629      	mov	r1, r5
 80024c4:	024b      	lsls	r3, r1, #9
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024cc:	4621      	mov	r1, r4
 80024ce:	024a      	lsls	r2, r1, #9
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	2200      	movs	r2, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024e0:	f7fd fec6 	bl	8000270 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ec:	e058      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	099b      	lsrs	r3, r3, #6
 80024f4:	2200      	movs	r2, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	4611      	mov	r1, r2
 80024fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002508:	4642      	mov	r2, r8
 800250a:	464b      	mov	r3, r9
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	0159      	lsls	r1, r3, #5
 8002516:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251a:	0150      	lsls	r0, r2, #5
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4641      	mov	r1, r8
 8002522:	ebb2 0a01 	subs.w	sl, r2, r1
 8002526:	4649      	mov	r1, r9
 8002528:	eb63 0b01 	sbc.w	fp, r3, r1
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002538:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800253c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002540:	ebb2 040a 	subs.w	r4, r2, sl
 8002544:	eb63 050b 	sbc.w	r5, r3, fp
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	00eb      	lsls	r3, r5, #3
 8002552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002556:	00e2      	lsls	r2, r4, #3
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
 800255c:	4643      	mov	r3, r8
 800255e:	18e3      	adds	r3, r4, r3
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	464b      	mov	r3, r9
 8002564:	eb45 0303 	adc.w	r3, r5, r3
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002576:	4629      	mov	r1, r5
 8002578:	028b      	lsls	r3, r1, #10
 800257a:	4621      	mov	r1, r4
 800257c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002580:	4621      	mov	r1, r4
 8002582:	028a      	lsls	r2, r1, #10
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258a:	2200      	movs	r2, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	61fa      	str	r2, [r7, #28]
 8002590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002594:	f7fd fe6c 	bl	8000270 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4613      	mov	r3, r2
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3750      	adds	r7, #80	; 0x50
 80025c8:	46bd      	mov	sp, r7
 80025ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	007a1200 	.word	0x007a1200

080025dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07b      	b.n	80026e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d108      	bne.n	8002608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025fe:	d009      	beq.n	8002614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
 8002606:	e005      	b.n	8002614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fc94 	bl	8000f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	ea42 0103 	orr.w	r1, r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	f003 0104 	and.w	r1, r3, #4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	f003 0210 	and.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002700:	2b84      	cmp	r3, #132	; 0x84
 8002702:	d005      	beq.n	8002710 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002704:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	3303      	adds	r3, #3
 800270e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002710:	68fb      	ldr	r3, [r7, #12]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002724:	f3ef 8305 	mrs	r3, IPSR
 8002728:	607b      	str	r3, [r7, #4]
  return(result);
 800272a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002746:	f001 fc8b 	bl	8004060 <vTaskStartScheduler>
  
  return osOK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}

08002750 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af04      	add	r7, sp, #16
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d020      	beq.n	80027a4 <osThreadCreate+0x54>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01c      	beq.n	80027a4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685c      	ldr	r4, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691e      	ldr	r6, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ffb6 	bl	80026ee <makeFreeRtosPriority>
 8002782:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800278c:	9202      	str	r2, [sp, #8]
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	9100      	str	r1, [sp, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	4632      	mov	r2, r6
 8002796:	4629      	mov	r1, r5
 8002798:	4620      	mov	r0, r4
 800279a:	f001 fa99 	bl	8003cd0 <xTaskCreateStatic>
 800279e:	4603      	mov	r3, r0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e01c      	b.n	80027de <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685c      	ldr	r4, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff98 	bl	80026ee <makeFreeRtosPriority>
 80027be:	4602      	mov	r2, r0
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4632      	mov	r2, r6
 80027cc:	4629      	mov	r1, r5
 80027ce:	4620      	mov	r0, r4
 80027d0:	f001 fadb 	bl	8003d8a <xTaskCreate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <osDelay+0x16>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	e000      	b.n	8002800 <osDelay+0x18>
 80027fe:	2301      	movs	r3, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fbf9 	bl	8003ff8 <vTaskDelay>
  
  return osOK;
 8002806:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4619      	mov	r1, r3
 8002826:	2001      	movs	r0, #1
 8002828:	f000 fc7d 	bl	8003126 <xQueueCreateMutexStatic>
 800282c:	4603      	mov	r3, r0
 800282e:	e003      	b.n	8002838 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002830:	2001      	movs	r0, #1
 8002832:	f000 fc60 	bl	80030f6 <xQueueCreateMutex>
 8002836:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <osMutexWait+0x18>
    return osErrorParameter;
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	e03a      	b.n	80028ce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d103      	bne.n	800286c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e009      	b.n	8002880 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <osMutexWait+0x40>
      ticks = 1;
 800287c:	2301      	movs	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002880:	f7ff ff4d 	bl	800271e <inHandlerMode>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d017      	beq.n	80028ba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	461a      	mov	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f001 f874 	bl	8003980 <xQueueReceiveFromISR>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d001      	beq.n	80028a2 <osMutexWait+0x62>
      return osErrorOS;
 800289e:	23ff      	movs	r3, #255	; 0xff
 80028a0:	e015      	b.n	80028ce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d011      	beq.n	80028cc <osMutexWait+0x8c>
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <osMutexWait+0x98>)
 80028aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	e008      	b.n	80028cc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 ff53 	bl	8003768 <xQueueSemaphoreTake>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <osMutexWait+0x8c>
    return osErrorOS;
 80028c8:	23ff      	movs	r3, #255	; 0xff
 80028ca:	e000      	b.n	80028ce <osMutexWait+0x8e>
  }
  
  return osOK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80028ec:	f7ff ff17 	bl	800271e <inHandlerMode>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fdc6 	bl	800348e <xQueueGiveFromISR>
 8002902:	4603      	mov	r3, r0
 8002904:	2b01      	cmp	r3, #1
 8002906:	d001      	beq.n	800290c <osMutexRelease+0x30>
      return osErrorOS;
 8002908:	23ff      	movs	r3, #255	; 0xff
 800290a:	e017      	b.n	800293c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d013      	beq.n	800293a <osMutexRelease+0x5e>
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <osMutexRelease+0x68>)
 8002914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	e00a      	b.n	800293a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002924:	2300      	movs	r3, #0
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fc16 	bl	800315c <xQueueGenericSend>
 8002930:	4603      	mov	r3, r0
 8002932:	2b01      	cmp	r3, #1
 8002934:	d001      	beq.n	800293a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002936:	23ff      	movs	r3, #255	; 0xff
 8002938:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	3303      	adds	r3, #3
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800295c:	2014      	movs	r0, #20
 800295e:	f002 fbeb 	bl	8005138 <pvPortMalloc>
 8002962:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d046      	beq.n	80029f8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f002 fbd8 	bl	8005138 <pvPortMalloc>
 8002988:	4602      	mov	r2, r0
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02b      	beq.n	80029ee <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fbc9 	bl	8005138 <pvPortMalloc>
 80029a6:	4602      	mov	r2, r0
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d011      	beq.n	80029d8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	e008      	b.n	80029cc <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	3301      	adds	r3, #1
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d3f1      	bcc.n	80029ba <osPoolCreate+0x72>
 80029d6:	e00f      	b.n	80029f8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fc77 	bl	80052d0 <vPortFree>
        vPortFree(thePool);
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f002 fc74 	bl	80052d0 <vPortFree>
        thePool = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e004      	b.n	80029f8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f002 fc6e 	bl	80052d0 <vPortFree>
      thePool = NULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80029f8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002a02:	b590      	push	{r4, r7, lr}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af02      	add	r7, sp, #8
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <osMessageCreate+0x36>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2400      	movs	r4, #0
 8002a2e:	9400      	str	r4, [sp, #0]
 8002a30:	f000 fa76 	bl	8002f20 <xQueueGenericCreateStatic>
 8002a34:	4603      	mov	r3, r0
 8002a36:	e008      	b.n	8002a4a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	4619      	mov	r1, r3
 8002a44:	f000 fae4 	bl	8003010 <xQueueGenericCreate>
 8002a48:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd90      	pop	{r4, r7, pc}
	...

08002a54 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <osMessagePut+0x1e>
    ticks = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002a72:	f7ff fe54 	bl	800271e <inHandlerMode>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d018      	beq.n	8002aae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002a7c:	f107 0210 	add.w	r2, r7, #16
 8002a80:	f107 0108 	add.w	r1, r7, #8
 8002a84:	2300      	movs	r3, #0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fc66 	bl	8003358 <xQueueGenericSendFromISR>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <osMessagePut+0x42>
      return osErrorOS;
 8002a92:	23ff      	movs	r3, #255	; 0xff
 8002a94:	e018      	b.n	8002ac8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d014      	beq.n	8002ac6 <osMessagePut+0x72>
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <osMessagePut+0x7c>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	e00b      	b.n	8002ac6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002aae:	f107 0108 	add.w	r1, r7, #8
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fb50 	bl	800315c <xQueueGenericSend>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <osMessagePut+0x72>
      return osErrorOS;
 8002ac2:	23ff      	movs	r3, #255	; 0xff
 8002ac4:	e000      	b.n	8002ac8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	e000ed04 	.word	0xe000ed04

08002ad4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b08b      	sub	sp, #44	; 0x2c
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	617b      	str	r3, [r7, #20]
    return event;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	461c      	mov	r4, r3
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b02:	e054      	b.n	8002bae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d103      	bne.n	8002b1c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e009      	b.n	8002b30 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <osMessageGet+0x5c>
      ticks = 1;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002b30:	f7ff fdf5 	bl	800271e <inHandlerMode>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01c      	beq.n	8002b74 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002b3a:	f107 0220 	add.w	r2, r7, #32
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	68b8      	ldr	r0, [r7, #8]
 8002b48:	f000 ff1a 	bl	8003980 <xQueueReceiveFromISR>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d102      	bne.n	8002b58 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002b52:	2310      	movs	r3, #16
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e001      	b.n	8002b5c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01d      	beq.n	8002b9e <osMessageGet+0xca>
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <osMessageGet+0xe4>)
 8002b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	e014      	b.n	8002b9e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	3304      	adds	r3, #4
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	68b8      	ldr	r0, [r7, #8]
 8002b80:	f000 fd12 	bl	80035a8 <xQueueReceive>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e006      	b.n	8002b9e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <osMessageGet+0xc6>
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <osMessageGet+0xc8>
 8002b9a:	2340      	movs	r3, #64	; 0x40
 8002b9c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	461c      	mov	r4, r3
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	372c      	adds	r7, #44	; 0x2c
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689c      	ldr	r4, [r3, #8]
 8002bda:	200c      	movs	r0, #12
 8002bdc:	f002 faac 	bl	8005138 <pvPortMalloc>
 8002be0:	4603      	mov	r3, r0
 8002be2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <osMailCreate+0x36>
    return NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e038      	b.n	8002c64 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	681c      	ldr	r4, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2104      	movs	r1, #4
 8002c0a:	f000 fa01 	bl	8003010 <xQueueGenericCreate>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 fb53 	bl	80052d0 <vPortFree>
    return NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e01a      	b.n	8002c64 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	681c      	ldr	r4, [r3, #0]
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe85 	bl	8002948 <osPoolCreate>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fb3b 	bl	80052d0 <vPortFree>
    return NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e002      	b.n	8002c64 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd90      	pop	{r4, r7, pc}

08002c6c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <osMailPut+0x14>
    return osErrorParameter;
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	e02c      	b.n	8002cda <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8002c84:	f7ff fd4b 	bl	800271e <inHandlerMode>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d018      	beq.n	8002cc0 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6858      	ldr	r0, [r3, #4]
 8002c92:	f107 020c 	add.w	r2, r7, #12
 8002c96:	4639      	mov	r1, r7
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f000 fb5d 	bl	8003358 <xQueueGenericSendFromISR>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d001      	beq.n	8002ca8 <osMailPut+0x3c>
      return osErrorOS;
 8002ca4:	23ff      	movs	r3, #255	; 0xff
 8002ca6:	e018      	b.n	8002cda <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d014      	beq.n	8002cd8 <osMailPut+0x6c>
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <osMailPut+0x78>)
 8002cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	e00b      	b.n	8002cd8 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6858      	ldr	r0, [r3, #4]
 8002cc4:	4639      	mov	r1, r7
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f000 fa47 	bl	800315c <xQueueGenericSend>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <osMailPut+0x6c>
      return osErrorOS;
 8002cd4:	23ff      	movs	r3, #255	; 0xff
 8002cd6:	e000      	b.n	8002cda <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f103 0208 	add.w	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0208 	add.w	r2, r3, #8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f103 0208 	add.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d103      	bne.n	8002daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e00c      	b.n	8002dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3308      	adds	r3, #8
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e002      	b.n	8002db8 <vListInsert+0x2e>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d2f6      	bcs.n	8002db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6852      	ldr	r2, [r2, #4]
 8002e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d103      	bne.n	8002e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1e5a      	subs	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e7a:	f002 f83b 	bl	8004ef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	441a      	add	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d114      	bne.n	8002efa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01a      	beq.n	8002f0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3310      	adds	r3, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fb01 	bl	80044e4 <xTaskRemoveFromEventList>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <xQueueGenericReset+0xcc>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	e009      	b.n	8002f0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3310      	adds	r3, #16
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fef2 	bl	8002ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff feed 	bl	8002ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f0e:	f002 f821 	bl	8004f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	; 0x38
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <xQueueGenericCreateStatic+0x52>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <xQueueGenericCreateStatic+0x56>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <xQueueGenericCreateStatic+0x58>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	623b      	str	r3, [r7, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <xQueueGenericCreateStatic+0x7e>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <xQueueGenericCreateStatic+0x82>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueGenericCreateStatic+0x84>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	61fb      	str	r3, [r7, #28]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fbe:	2348      	movs	r3, #72	; 0x48
 8002fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b48      	cmp	r3, #72	; 0x48
 8002fc6:	d00a      	beq.n	8002fde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61bb      	str	r3, [r7, #24]
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f83f 	bl	8003084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003008:	4618      	mov	r0, r3
 800300a:	3730      	adds	r7, #48	; 0x30
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	3348      	adds	r3, #72	; 0x48
 8003048:	4618      	mov	r0, r3
 800304a:	f002 f875 	bl	8005138 <pvPortMalloc>
 800304e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d011      	beq.n	800307a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3348      	adds	r3, #72	; 0x48
 800305e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f805 	bl	8003084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800307a:	69bb      	ldr	r3, [r7, #24]
	}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e002      	b.n	80030a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030b2:	2101      	movs	r1, #1
 80030b4:	69b8      	ldr	r0, [r7, #24]
 80030b6:	f7ff fecb 	bl	8002e50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00e      	beq.n	80030ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80030e2:	2300      	movs	r3, #0
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f837 	bl	800315c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003100:	2301      	movs	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	461a      	mov	r2, r3
 800310c:	6939      	ldr	r1, [r7, #16]
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff7e 	bl	8003010 <xQueueGenericCreate>
 8003114:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ffd3 	bl	80030c2 <prvInitialiseMutex>

		return xNewQueue;
 800311c:	68fb      	ldr	r3, [r7, #12]
	}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003126:	b580      	push	{r7, lr}
 8003128:	b088      	sub	sp, #32
 800312a:	af02      	add	r7, sp, #8
 800312c:	4603      	mov	r3, r0
 800312e:	6039      	str	r1, [r7, #0]
 8003130:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003132:	2301      	movs	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	6939      	ldr	r1, [r7, #16]
 8003144:	6978      	ldr	r0, [r7, #20]
 8003146:	f7ff feeb 	bl	8002f20 <xQueueGenericCreateStatic>
 800314a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff ffb8 	bl	80030c2 <prvInitialiseMutex>

		return xNewQueue;
 8003152:	68fb      	ldr	r3, [r7, #12]
	}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08e      	sub	sp, #56	; 0x38
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800316a:	2300      	movs	r3, #0
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <xQueueGenericSend+0x32>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <xQueueGenericSend+0x40>
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <xQueueGenericSend+0x44>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <xQueueGenericSend+0x46>
 80031a0:	2300      	movs	r3, #0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <xQueueGenericSend+0x60>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d103      	bne.n	80031ca <xQueueGenericSend+0x6e>
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <xQueueGenericSend+0x72>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueGenericSend+0x74>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericSend+0x8e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	623b      	str	r3, [r7, #32]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ea:	f001 fb37 	bl	800485c <xTaskGetSchedulerState>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <xQueueGenericSend+0x9e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <xQueueGenericSend+0xa2>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <xQueueGenericSend+0xa4>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <xQueueGenericSend+0xbe>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	61fb      	str	r3, [r7, #28]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800321a:	f001 fe6b 	bl	8004ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <xQueueGenericSend+0xd4>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d129      	bne.n	8003284 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003236:	f000 fc3b 	bl	8003ab0 <prvCopyDataToQueue>
 800323a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	3324      	adds	r3, #36	; 0x24
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f94b 	bl	80044e4 <xTaskRemoveFromEventList>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <xQueueGenericSend+0x1f8>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	e00a      	b.n	800327c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <xQueueGenericSend+0x1f8>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800327c:	f001 fe6a 	bl	8004f54 <vPortExitCritical>
				return pdPASS;
 8003280:	2301      	movs	r3, #1
 8003282:	e063      	b.n	800334c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800328a:	f001 fe63 	bl	8004f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800328e:	2300      	movs	r3, #0
 8003290:	e05c      	b.n	800334c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4618      	mov	r0, r3
 800329e:	f001 f983 	bl	80045a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032a2:	2301      	movs	r3, #1
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032a6:	f001 fe55 	bl	8004f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032aa:	f000 ff39 	bl	8004120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ae:	f001 fe21 	bl	8004ef4 <vPortEnterCritical>
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d103      	bne.n	80032c8 <xQueueGenericSend+0x16c>
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d103      	bne.n	80032de <xQueueGenericSend+0x182>
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032de:	f001 fe39 	bl	8004f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032e2:	1d3a      	adds	r2, r7, #4
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 f972 	bl	80045d4 <xTaskCheckForTimeOut>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d124      	bne.n	8003340 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f8:	f000 fcd2 	bl	8003ca0 <prvIsQueueFull>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d018      	beq.n	8003334 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	3310      	adds	r3, #16
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f001 f8c6 	bl	800449c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003312:	f000 fc5d 	bl	8003bd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003316:	f000 ff11 	bl	800413c <xTaskResumeAll>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f47f af7c 	bne.w	800321a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <xQueueGenericSend+0x1f8>)
 8003324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	e772      	b.n	800321a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003336:	f000 fc4b 	bl	8003bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800333a:	f000 feff 	bl	800413c <xTaskResumeAll>
 800333e:	e76c      	b.n	800321a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003342:	f000 fc45 	bl	8003bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003346:	f000 fef9 	bl	800413c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800334a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800334c:	4618      	mov	r0, r3
 800334e:	3738      	adds	r7, #56	; 0x38
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b090      	sub	sp, #64	; 0x40
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <xQueueGenericSendFromISR+0x3c>
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <xQueueGenericSendFromISR+0x40>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <xQueueGenericSendFromISR+0x42>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d103      	bne.n	80033c2 <xQueueGenericSendFromISR+0x6a>
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <xQueueGenericSendFromISR+0x6e>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <xQueueGenericSendFromISR+0x70>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	623b      	str	r3, [r7, #32]
}
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033e2:	f001 fe69 	bl	80050b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033e6:	f3ef 8211 	mrs	r2, BASEPRI
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	61fa      	str	r2, [r7, #28]
 80033fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <xQueueGenericSendFromISR+0xbc>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d12f      	bne.n	8003474 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800342a:	f000 fb41 	bl	8003ab0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800342e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d112      	bne.n	800345e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d016      	beq.n	800346e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	3324      	adds	r3, #36	; 0x24
 8003444:	4618      	mov	r0, r3
 8003446:	f001 f84d 	bl	80044e4 <xTaskRemoveFromEventList>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e007      	b.n	800346e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800345e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003462:	3301      	adds	r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	b25a      	sxtb	r2, r3
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800346e:	2301      	movs	r3, #1
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003472:	e001      	b.n	8003478 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003474:	2300      	movs	r3, #0
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003482:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003486:	4618      	mov	r0, r3
 8003488:	3740      	adds	r7, #64	; 0x40
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08e      	sub	sp, #56	; 0x38
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	623b      	str	r3, [r7, #32]
}
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	61fb      	str	r3, [r7, #28]
}
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <xQueueGiveFromISR+0x58>
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <xQueueGiveFromISR+0x5c>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <xQueueGiveFromISR+0x5e>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <xQueueGiveFromISR+0x78>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	61bb      	str	r3, [r7, #24]
}
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003506:	f001 fdd7 	bl	80050b8 <vPortValidateInterruptPriority>
	__asm volatile
 800350a:	f3ef 8211 	mrs	r2, BASEPRI
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	617a      	str	r2, [r7, #20]
 8003520:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003522:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003532:	429a      	cmp	r2, r3
 8003534:	d22b      	bcs.n	800358e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800353c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d112      	bne.n	8003578 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	3324      	adds	r3, #36	; 0x24
 800355e:	4618      	mov	r0, r3
 8003560:	f000 ffc0 	bl	80044e4 <xTaskRemoveFromEventList>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e007      	b.n	8003588 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800357c:	3301      	adds	r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	b25a      	sxtb	r2, r3
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003588:	2301      	movs	r3, #1
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
 800358c:	e001      	b.n	8003592 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800358e:	2300      	movs	r3, #0
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f383 8811 	msr	BASEPRI, r3
}
 800359c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3738      	adds	r7, #56	; 0x38
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <xQueueReceive+0x30>
	__asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	623b      	str	r3, [r7, #32]
}
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <xQueueReceive+0x3e>
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <xQueueReceive+0x42>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <xQueueReceive+0x44>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xQueueReceive+0x5e>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	61fb      	str	r3, [r7, #28]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003606:	f001 f929 	bl	800485c <xTaskGetSchedulerState>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <xQueueReceive+0x6e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <xQueueReceive+0x72>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <xQueueReceive+0x74>
 800361a:	2300      	movs	r3, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <xQueueReceive+0x8e>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	61bb      	str	r3, [r7, #24]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003636:	f001 fc5d 	bl	8004ef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01f      	beq.n	8003686 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800364a:	f000 fa9b 	bl	8003b84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	1e5a      	subs	r2, r3, #1
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00f      	beq.n	800367e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	3310      	adds	r3, #16
 8003662:	4618      	mov	r0, r3
 8003664:	f000 ff3e 	bl	80044e4 <xTaskRemoveFromEventList>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <xQueueReceive+0x1bc>)
 8003670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800367e:	f001 fc69 	bl	8004f54 <vPortExitCritical>
				return pdPASS;
 8003682:	2301      	movs	r3, #1
 8003684:	e069      	b.n	800375a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d103      	bne.n	8003694 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800368c:	f001 fc62 	bl	8004f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003690:	2300      	movs	r3, #0
 8003692:	e062      	b.n	800375a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800369a:	f107 0310 	add.w	r3, r7, #16
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 ff82 	bl	80045a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036a4:	2301      	movs	r3, #1
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036a8:	f001 fc54 	bl	8004f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036ac:	f000 fd38 	bl	8004120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036b0:	f001 fc20 	bl	8004ef4 <vPortEnterCritical>
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d103      	bne.n	80036ca <xQueueReceive+0x122>
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d103      	bne.n	80036e0 <xQueueReceive+0x138>
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e0:	f001 fc38 	bl	8004f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036e4:	1d3a      	adds	r2, r7, #4
 80036e6:	f107 0310 	add.w	r3, r7, #16
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 ff71 	bl	80045d4 <xTaskCheckForTimeOut>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d123      	bne.n	8003740 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fa:	f000 fabb 	bl	8003c74 <prvIsQueueEmpty>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	3324      	adds	r3, #36	; 0x24
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fec5 	bl	800449c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003714:	f000 fa5c 	bl	8003bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003718:	f000 fd10 	bl	800413c <xTaskResumeAll>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d189      	bne.n	8003636 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <xQueueReceive+0x1bc>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	e780      	b.n	8003636 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003736:	f000 fa4b 	bl	8003bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800373a:	f000 fcff 	bl	800413c <xTaskResumeAll>
 800373e:	e77a      	b.n	8003636 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003742:	f000 fa45 	bl	8003bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003746:	f000 fcf9 	bl	800413c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800374a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800374c:	f000 fa92 	bl	8003c74 <prvIsQueueEmpty>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	f43f af6f 	beq.w	8003636 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800375a:	4618      	mov	r0, r3
 800375c:	3730      	adds	r7, #48	; 0x30
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	; 0x38
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	623b      	str	r3, [r7, #32]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	61fb      	str	r3, [r7, #28]
}
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037b8:	f001 f850 	bl	800485c <xTaskGetSchedulerState>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <xQueueSemaphoreTake+0x60>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <xQueueSemaphoreTake+0x64>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <xQueueSemaphoreTake+0x66>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	61bb      	str	r3, [r7, #24]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037e8:	f001 fb84 	bl	8004ef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d024      	beq.n	8003842 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	1e5a      	subs	r2, r3, #1
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d104      	bne.n	8003812 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003808:	f001 f9d0 	bl	8004bac <pvTaskIncrementMutexHeldCount>
 800380c:	4602      	mov	r2, r0
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00f      	beq.n	800383a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	3310      	adds	r3, #16
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fe60 	bl	80044e4 <xTaskRemoveFromEventList>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <xQueueSemaphoreTake+0x214>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800383a:	f001 fb8b 	bl	8004f54 <vPortExitCritical>
				return pdPASS;
 800383e:	2301      	movs	r3, #1
 8003840:	e097      	b.n	8003972 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d111      	bne.n	800386c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	617b      	str	r3, [r7, #20]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003864:	f001 fb76 	bl	8004f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003868:	2300      	movs	r3, #0
 800386a:	e082      	b.n	8003972 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003872:	f107 030c 	add.w	r3, r7, #12
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fe96 	bl	80045a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800387c:	2301      	movs	r3, #1
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003880:	f001 fb68 	bl	8004f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003884:	f000 fc4c 	bl	8004120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003888:	f001 fb34 	bl	8004ef4 <vPortEnterCritical>
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003892:	b25b      	sxtb	r3, r3
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d103      	bne.n	80038a2 <xQueueSemaphoreTake+0x13a>
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d103      	bne.n	80038b8 <xQueueSemaphoreTake+0x150>
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b8:	f001 fb4c 	bl	8004f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038bc:	463a      	mov	r2, r7
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fe85 	bl	80045d4 <xTaskCheckForTimeOut>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d132      	bne.n	8003936 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038d2:	f000 f9cf 	bl	8003c74 <prvIsQueueEmpty>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d026      	beq.n	800392a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80038e4:	f001 fb06 	bl	8004ef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 ffd3 	bl	8004898 <xTaskPriorityInherit>
 80038f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80038f4:	f001 fb2e 	bl	8004f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	3324      	adds	r3, #36	; 0x24
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fdcb 	bl	800449c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003908:	f000 f962 	bl	8003bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800390c:	f000 fc16 	bl	800413c <xTaskResumeAll>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	f47f af68 	bne.w	80037e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <xQueueSemaphoreTake+0x214>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	e75e      	b.n	80037e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800392a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800392c:	f000 f950 	bl	8003bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003930:	f000 fc04 	bl	800413c <xTaskResumeAll>
 8003934:	e758      	b.n	80037e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003938:	f000 f94a 	bl	8003bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800393c:	f000 fbfe 	bl	800413c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003942:	f000 f997 	bl	8003c74 <prvIsQueueEmpty>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	f43f af4d 	beq.w	80037e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003954:	f001 face 	bl	8004ef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800395a:	f000 f891 	bl	8003a80 <prvGetDisinheritPriorityAfterTimeout>
 800395e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f892 	bl	8004a90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800396c:	f001 faf2 	bl	8004f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003970:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003972:	4618      	mov	r0, r3
 8003974:	3738      	adds	r7, #56	; 0x38
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08e      	sub	sp, #56	; 0x38
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	623b      	str	r3, [r7, #32]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <xQueueReceiveFromISR+0x3a>
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueueReceiveFromISR+0x3e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueReceiveFromISR+0x40>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61fb      	str	r3, [r7, #28]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039da:	f001 fb6d 	bl	80050b8 <vPortValidateInterruptPriority>
	__asm volatile
 80039de:	f3ef 8211 	mrs	r2, BASEPRI
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	61ba      	str	r2, [r7, #24]
 80039f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80039f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d02f      	beq.n	8003a66 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a14:	f000 f8b6 	bl	8003b84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003a20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d112      	bne.n	8003a50 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	3310      	adds	r3, #16
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fd54 	bl	80044e4 <xTaskRemoveFromEventList>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00e      	beq.n	8003a60 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e007      	b.n	8003a60 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a54:	3301      	adds	r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	b25a      	sxtb	r2, r3
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003a60:	2301      	movs	r3, #1
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
 8003a64:	e001      	b.n	8003a6a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f383 8811 	msr	BASEPRI, r3
}
 8003a74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3738      	adds	r7, #56	; 0x38
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e001      	b.n	8003aa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
	}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d14d      	bne.n	8003b72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 ff52 	bl	8004984 <xTaskPriorityDisinherit>
 8003ae0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	e043      	b.n	8003b72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d119      	bne.n	8003b24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6858      	ldr	r0, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	461a      	mov	r2, r3
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	f001 ff1f 	bl	800593e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	441a      	add	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d32b      	bcc.n	8003b72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e026      	b.n	8003b72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68d8      	ldr	r0, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	f001 ff05 	bl	800593e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	425b      	negs	r3, r3
 8003b3e:	441a      	add	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d207      	bcs.n	8003b60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	425b      	negs	r3, r3
 8003b5a:	441a      	add	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d105      	bne.n	8003b72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b7a:	697b      	ldr	r3, [r7, #20]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d018      	beq.n	8003bc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	441a      	add	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d303      	bcc.n	8003bb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68d9      	ldr	r1, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6838      	ldr	r0, [r7, #0]
 8003bc4:	f001 febb 	bl	800593e <memcpy>
	}
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bd8:	f001 f98c 	bl	8004ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003be4:	e011      	b.n	8003c0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d012      	beq.n	8003c14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3324      	adds	r3, #36	; 0x24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fc76 	bl	80044e4 <xTaskRemoveFromEventList>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bfe:	f000 fd4b 	bl	8004698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	dce9      	bgt.n	8003be6 <prvUnlockQueue+0x16>
 8003c12:	e000      	b.n	8003c16 <prvUnlockQueue+0x46>
					break;
 8003c14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	22ff      	movs	r2, #255	; 0xff
 8003c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c1e:	f001 f999 	bl	8004f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c22:	f001 f967 	bl	8004ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c2e:	e011      	b.n	8003c54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d012      	beq.n	8003c5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fc51 	bl	80044e4 <xTaskRemoveFromEventList>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c48:	f000 fd26 	bl	8004698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c4c:	7bbb      	ldrb	r3, [r7, #14]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dce9      	bgt.n	8003c30 <prvUnlockQueue+0x60>
 8003c5c:	e000      	b.n	8003c60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	22ff      	movs	r2, #255	; 0xff
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c68:	f001 f974 	bl	8004f54 <vPortExitCritical>
}
 8003c6c:	bf00      	nop
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c7c:	f001 f93a 	bl	8004ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e001      	b.n	8003c92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c92:	f001 f95f 	bl	8004f54 <vPortExitCritical>

	return xReturn;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ca8:	f001 f924 	bl	8004ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d102      	bne.n	8003cbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e001      	b.n	8003cc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cc2:	f001 f947 	bl	8004f54 <vPortExitCritical>

	return xReturn;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	; 0x38
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	61fb      	str	r3, [r7, #28]
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d16:	2354      	movs	r3, #84	; 0x54
 8003d18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b54      	cmp	r3, #84	; 0x54
 8003d1e:	d00a      	beq.n	8003d36 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	61bb      	str	r3, [r7, #24]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01e      	beq.n	8003d7c <xTaskCreateStatic+0xac>
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01b      	beq.n	8003d7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d56:	2300      	movs	r3, #0
 8003d58:	9303      	str	r3, [sp, #12]
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	9302      	str	r3, [sp, #8]
 8003d5e:	f107 0314 	add.w	r3, r7, #20
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f850 	bl	8003e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d76:	f000 f8d5 	bl	8003f24 <prvAddNewTaskToReadyList>
 8003d7a:	e001      	b.n	8003d80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d80:	697b      	ldr	r3, [r7, #20]
	}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08c      	sub	sp, #48	; 0x30
 8003d8e:	af04      	add	r7, sp, #16
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f9ca 	bl	8005138 <pvPortMalloc>
 8003da4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dac:	2054      	movs	r0, #84	; 0x54
 8003dae:	f001 f9c3 	bl	8005138 <pvPortMalloc>
 8003db2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc0:	e005      	b.n	8003dce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f001 fa84 	bl	80052d0 <vPortFree>
 8003dc8:	e001      	b.n	8003dce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d017      	beq.n	8003e04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	9302      	str	r3, [sp, #8]
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f80e 	bl	8003e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003df8:	69f8      	ldr	r0, [r7, #28]
 8003dfa:	f000 f893 	bl	8003f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e002      	b.n	8003e0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	617b      	str	r3, [r7, #20]
}
 8003e58:	bf00      	nop
 8003e5a:	e7fe      	b.n	8003e5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01f      	beq.n	8003ea2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e012      	b.n	8003e8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	7819      	ldrb	r1, [r3, #0]
 8003e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	3334      	adds	r3, #52	; 0x34
 8003e78:	460a      	mov	r2, r1
 8003e7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	d9e9      	bls.n	8003e68 <prvInitialiseNewTask+0x54>
 8003e94:	e000      	b.n	8003e98 <prvInitialiseNewTask+0x84>
			{
				break;
 8003e96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea0:	e003      	b.n	8003eaa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d901      	bls.n	8003eb4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003eb0:	2306      	movs	r3, #6
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ebe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe ff2c 	bl	8002d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	3318      	adds	r3, #24
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe ff27 	bl	8002d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ede:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	f1c3 0207 	rsb	r2, r3, #7
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	69b8      	ldr	r0, [r7, #24]
 8003f04:	f000 fecc 	bl	8004ca0 <pxPortInitialiseStack>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f1a:	bf00      	nop
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f2c:	f000 ffe2 	bl	8004ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f30:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <prvAddNewTaskToReadyList+0xb8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	4a29      	ldr	r2, [pc, #164]	; (8003fdc <prvAddNewTaskToReadyList+0xb8>)
 8003f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f3a:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f42:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f48:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <prvAddNewTaskToReadyList+0xb8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d110      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f50:	f000 fbc6 	bl	80046e0 <prvInitialiseTaskLists>
 8003f54:	e00d      	b.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <prvAddNewTaskToReadyList+0xc0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f5e:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d802      	bhi.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	2201      	movs	r2, #1
 8003f82:	409a      	lsls	r2, r3
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	4a18      	ldr	r2, [pc, #96]	; (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <prvAddNewTaskToReadyList+0xcc>)
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f7fe fecc 	bl	8002d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003faa:	f000 ffd3 	bl	8004f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <prvAddNewTaskToReadyList+0xc0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <prvAddNewTaskToReadyList+0xbc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d207      	bcs.n	8003fd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <prvAddNewTaskToReadyList+0xd0>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200004b4 	.word	0x200004b4
 8003fe0:	200003b4 	.word	0x200003b4
 8003fe4:	200004c0 	.word	0x200004c0
 8003fe8:	200004d0 	.word	0x200004d0
 8003fec:	200004bc 	.word	0x200004bc
 8003ff0:	200003b8 	.word	0x200003b8
 8003ff4:	e000ed04 	.word	0xe000ed04

08003ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d017      	beq.n	800403a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <vTaskDelay+0x60>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <vTaskDelay+0x30>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60bb      	str	r3, [r7, #8]
}
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004028:	f000 f87a 	bl	8004120 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800402c:	2100      	movs	r1, #0
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fdd0 	bl	8004bd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004034:	f000 f882 	bl	800413c <xTaskResumeAll>
 8004038:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <vTaskDelay+0x64>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200004dc 	.word	0x200004dc
 800405c:	e000ed04 	.word	0xe000ed04

08004060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800406e:	463a      	mov	r2, r7
 8004070:	1d39      	adds	r1, r7, #4
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc fa78 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	9202      	str	r2, [sp, #8]
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2300      	movs	r3, #0
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	460a      	mov	r2, r1
 800408e:	491e      	ldr	r1, [pc, #120]	; (8004108 <vTaskStartScheduler+0xa8>)
 8004090:	481e      	ldr	r0, [pc, #120]	; (800410c <vTaskStartScheduler+0xac>)
 8004092:	f7ff fe1d 	bl	8003cd0 <xTaskCreateStatic>
 8004096:	4603      	mov	r3, r0
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <vTaskStartScheduler+0xb0>)
 800409a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800409c:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <vTaskStartScheduler+0xb0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040a4:	2301      	movs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e001      	b.n	80040ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d116      	bne.n	80040e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	613b      	str	r3, [r7, #16]
}
 80040c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <vTaskStartScheduler+0xb4>)
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <vTaskStartScheduler+0xb8>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <vTaskStartScheduler+0xbc>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040dc:	f000 fe68 	bl	8004db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040e0:	e00e      	b.n	8004100 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d10a      	bne.n	8004100 <vTaskStartScheduler+0xa0>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <vTaskStartScheduler+0x9e>
}
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	080066ac 	.word	0x080066ac
 800410c:	080046b1 	.word	0x080046b1
 8004110:	200004d8 	.word	0x200004d8
 8004114:	200004d4 	.word	0x200004d4
 8004118:	200004c0 	.word	0x200004c0
 800411c:	200004b8 	.word	0x200004b8

08004120 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <vTaskSuspendAll+0x18>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	4a03      	ldr	r2, [pc, #12]	; (8004138 <vTaskSuspendAll+0x18>)
 800412c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	200004dc 	.word	0x200004dc

0800413c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800414a:	4b41      	ldr	r3, [pc, #260]	; (8004250 <xTaskResumeAll+0x114>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <xTaskResumeAll+0x2c>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	603b      	str	r3, [r7, #0]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004168:	f000 fec4 	bl	8004ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800416c:	4b38      	ldr	r3, [pc, #224]	; (8004250 <xTaskResumeAll+0x114>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	4a37      	ldr	r2, [pc, #220]	; (8004250 <xTaskResumeAll+0x114>)
 8004174:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004176:	4b36      	ldr	r3, [pc, #216]	; (8004250 <xTaskResumeAll+0x114>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d161      	bne.n	8004242 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800417e:	4b35      	ldr	r3, [pc, #212]	; (8004254 <xTaskResumeAll+0x118>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d05d      	beq.n	8004242 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004186:	e02e      	b.n	80041e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <xTaskResumeAll+0x11c>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3318      	adds	r3, #24
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fe31 	bl	8002dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3304      	adds	r3, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fe2c 	bl	8002dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2201      	movs	r2, #1
 80041aa:	409a      	lsls	r2, r3
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <xTaskResumeAll+0x120>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	4a2a      	ldr	r2, [pc, #168]	; (800425c <xTaskResumeAll+0x120>)
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4a27      	ldr	r2, [pc, #156]	; (8004260 <xTaskResumeAll+0x124>)
 80041c4:	441a      	add	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe fdb8 	bl	8002d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <xTaskResumeAll+0x128>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <xTaskResumeAll+0x12c>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <xTaskResumeAll+0x11c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1cc      	bne.n	8004188 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041f4:	f000 fb12 	bl	800481c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041f8:	4b1c      	ldr	r3, [pc, #112]	; (800426c <xTaskResumeAll+0x130>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004204:	f000 f836 	bl	8004274 <xTaskIncrementTick>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <xTaskResumeAll+0x12c>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f1      	bne.n	8004204 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <xTaskResumeAll+0x130>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <xTaskResumeAll+0x12c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800422e:	2301      	movs	r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <xTaskResumeAll+0x134>)
 8004234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004242:	f000 fe87 	bl	8004f54 <vPortExitCritical>

	return xAlreadyYielded;
 8004246:	68bb      	ldr	r3, [r7, #8]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	200004dc 	.word	0x200004dc
 8004254:	200004b4 	.word	0x200004b4
 8004258:	20000474 	.word	0x20000474
 800425c:	200004bc 	.word	0x200004bc
 8004260:	200003b8 	.word	0x200003b8
 8004264:	200003b4 	.word	0x200003b4
 8004268:	200004c8 	.word	0x200004c8
 800426c:	200004c4 	.word	0x200004c4
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427e:	4b4e      	ldr	r3, [pc, #312]	; (80043b8 <xTaskIncrementTick+0x144>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 808e 	bne.w	80043a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004288:	4b4c      	ldr	r3, [pc, #304]	; (80043bc <xTaskIncrementTick+0x148>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004290:	4a4a      	ldr	r2, [pc, #296]	; (80043bc <xTaskIncrementTick+0x148>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d120      	bne.n	80042de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800429c:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <xTaskIncrementTick+0x14c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <xTaskIncrementTick+0x48>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	603b      	str	r3, [r7, #0]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xTaskIncrementTick+0x46>
 80042bc:	4b40      	ldr	r3, [pc, #256]	; (80043c0 <xTaskIncrementTick+0x14c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <xTaskIncrementTick+0x150>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3e      	ldr	r2, [pc, #248]	; (80043c0 <xTaskIncrementTick+0x14c>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4a3e      	ldr	r2, [pc, #248]	; (80043c4 <xTaskIncrementTick+0x150>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <xTaskIncrementTick+0x154>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <xTaskIncrementTick+0x154>)
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	f000 fa9f 	bl	800481c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042de:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <xTaskIncrementTick+0x158>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d348      	bcc.n	800437a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <xTaskIncrementTick+0x14c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <xTaskIncrementTick+0x158>)
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	601a      	str	r2, [r3, #0]
					break;
 80042fa:	e03e      	b.n	800437a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <xTaskIncrementTick+0x14c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	d203      	bcs.n	800431c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004314:	4a2d      	ldr	r2, [pc, #180]	; (80043cc <xTaskIncrementTick+0x158>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800431a:	e02e      	b.n	800437a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fd6b 	bl	8002dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3318      	adds	r3, #24
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fd62 	bl	8002dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <xTaskIncrementTick+0x15c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4313      	orrs	r3, r2
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <xTaskIncrementTick+0x15c>)
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <xTaskIncrementTick+0x160>)
 8004358:	441a      	add	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe fcee 	bl	8002d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <xTaskIncrementTick+0x164>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	429a      	cmp	r2, r3
 8004372:	d3b9      	bcc.n	80042e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004378:	e7b6      	b.n	80042e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800437a:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <xTaskIncrementTick+0x164>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	4914      	ldr	r1, [pc, #80]	; (80043d4 <xTaskIncrementTick+0x160>)
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d901      	bls.n	8004396 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <xTaskIncrementTick+0x168>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e004      	b.n	80043ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <xTaskIncrementTick+0x16c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <xTaskIncrementTick+0x16c>)
 80043ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043ae:	697b      	ldr	r3, [r7, #20]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200004dc 	.word	0x200004dc
 80043bc:	200004b8 	.word	0x200004b8
 80043c0:	2000046c 	.word	0x2000046c
 80043c4:	20000470 	.word	0x20000470
 80043c8:	200004cc 	.word	0x200004cc
 80043cc:	200004d4 	.word	0x200004d4
 80043d0:	200004bc 	.word	0x200004bc
 80043d4:	200003b8 	.word	0x200003b8
 80043d8:	200003b4 	.word	0x200003b4
 80043dc:	200004c8 	.word	0x200004c8
 80043e0:	200004c4 	.word	0x200004c4

080043e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ea:	4b27      	ldr	r3, [pc, #156]	; (8004488 <vTaskSwitchContext+0xa4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043f2:	4b26      	ldr	r3, [pc, #152]	; (800448c <vTaskSwitchContext+0xa8>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043f8:	e03f      	b.n	800447a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <vTaskSwitchContext+0xa8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004400:	4b23      	ldr	r3, [pc, #140]	; (8004490 <vTaskSwitchContext+0xac>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	f1c3 031f 	rsb	r3, r3, #31
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	491f      	ldr	r1, [pc, #124]	; (8004494 <vTaskSwitchContext+0xb0>)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <vTaskSwitchContext+0x5c>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <vTaskSwitchContext+0x5a>
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a12      	ldr	r2, [pc, #72]	; (8004494 <vTaskSwitchContext+0xb0>)
 800444c:	4413      	add	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3308      	adds	r3, #8
 8004462:	429a      	cmp	r2, r3
 8004464:	d104      	bne.n	8004470 <vTaskSwitchContext+0x8c>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <vTaskSwitchContext+0xb4>)
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	200004dc 	.word	0x200004dc
 800448c:	200004c8 	.word	0x200004c8
 8004490:	200004bc 	.word	0x200004bc
 8004494:	200003b8 	.word	0x200003b8
 8004498:	200003b4 	.word	0x200003b4

0800449c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	60fb      	str	r3, [r7, #12]
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <vTaskPlaceOnEventList+0x44>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3318      	adds	r3, #24
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fe fc5d 	bl	8002d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044d0:	2101      	movs	r1, #1
 80044d2:	6838      	ldr	r0, [r7, #0]
 80044d4:	f000 fb7e 	bl	8004bd4 <prvAddCurrentTaskToDelayedList>
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200003b4 	.word	0x200003b4

080044e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	60fb      	str	r3, [r7, #12]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3318      	adds	r3, #24
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fc71 	bl	8002dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800451a:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <xTaskRemoveFromEventList+0xac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11c      	bne.n	800455c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fc68 	bl	8002dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	2201      	movs	r2, #1
 8004532:	409a      	lsls	r2, r3
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <xTaskRemoveFromEventList+0xb0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4313      	orrs	r3, r2
 800453a:	4a16      	ldr	r2, [pc, #88]	; (8004594 <xTaskRemoveFromEventList+0xb0>)
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <xTaskRemoveFromEventList+0xb4>)
 800454c:	441a      	add	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe fbf4 	bl	8002d42 <vListInsertEnd>
 800455a:	e005      	b.n	8004568 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	3318      	adds	r3, #24
 8004560:	4619      	mov	r1, r3
 8004562:	480e      	ldr	r0, [pc, #56]	; (800459c <xTaskRemoveFromEventList+0xb8>)
 8004564:	f7fe fbed 	bl	8002d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <xTaskRemoveFromEventList+0xbc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	429a      	cmp	r2, r3
 8004574:	d905      	bls.n	8004582 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <xTaskRemoveFromEventList+0xc0>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e001      	b.n	8004586 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004586:	697b      	ldr	r3, [r7, #20]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200004dc 	.word	0x200004dc
 8004594:	200004bc 	.word	0x200004bc
 8004598:	200003b8 	.word	0x200003b8
 800459c:	20000474 	.word	0x20000474
 80045a0:	200003b4 	.word	0x200003b4
 80045a4:	200004c8 	.word	0x200004c8

080045a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <vTaskInternalSetTimeOutState+0x24>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <vTaskInternalSetTimeOutState+0x28>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	200004cc 	.word	0x200004cc
 80045d0:	200004b8 	.word	0x200004b8

080045d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	613b      	str	r3, [r7, #16]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004616:	f000 fc6d 	bl	8004ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <xTaskCheckForTimeOut+0xbc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d102      	bne.n	800463a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e023      	b.n	8004682 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <xTaskCheckForTimeOut+0xc0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d007      	beq.n	8004656 <xTaskCheckForTimeOut+0x82>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e015      	b.n	8004682 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	429a      	cmp	r2, r3
 800465e:	d20b      	bcs.n	8004678 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	1ad2      	subs	r2, r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff9b 	bl	80045a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	e004      	b.n	8004682 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800467e:	2301      	movs	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004682:	f000 fc67 	bl	8004f54 <vPortExitCritical>

	return xReturn;
 8004686:	69fb      	ldr	r3, [r7, #28]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200004b8 	.word	0x200004b8
 8004694:	200004cc 	.word	0x200004cc

08004698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <vTaskMissedYield+0x14>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
}
 80046a2:	bf00      	nop
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	200004c8 	.word	0x200004c8

080046b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046b8:	f000 f852 	bl	8004760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <prvIdleTask+0x28>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d9f9      	bls.n	80046b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <prvIdleTask+0x2c>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046d4:	e7f0      	b.n	80046b8 <prvIdleTask+0x8>
 80046d6:	bf00      	nop
 80046d8:	200003b8 	.word	0x200003b8
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	e00c      	b.n	8004706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4a12      	ldr	r2, [pc, #72]	; (8004740 <prvInitialiseTaskLists+0x60>)
 80046f8:	4413      	add	r3, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe faf4 	bl	8002ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3301      	adds	r3, #1
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b06      	cmp	r3, #6
 800470a:	d9ef      	bls.n	80046ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800470c:	480d      	ldr	r0, [pc, #52]	; (8004744 <prvInitialiseTaskLists+0x64>)
 800470e:	f7fe faeb 	bl	8002ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004712:	480d      	ldr	r0, [pc, #52]	; (8004748 <prvInitialiseTaskLists+0x68>)
 8004714:	f7fe fae8 	bl	8002ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004718:	480c      	ldr	r0, [pc, #48]	; (800474c <prvInitialiseTaskLists+0x6c>)
 800471a:	f7fe fae5 	bl	8002ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800471e:	480c      	ldr	r0, [pc, #48]	; (8004750 <prvInitialiseTaskLists+0x70>)
 8004720:	f7fe fae2 	bl	8002ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004724:	480b      	ldr	r0, [pc, #44]	; (8004754 <prvInitialiseTaskLists+0x74>)
 8004726:	f7fe fadf 	bl	8002ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <prvInitialiseTaskLists+0x78>)
 800472c:	4a05      	ldr	r2, [pc, #20]	; (8004744 <prvInitialiseTaskLists+0x64>)
 800472e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <prvInitialiseTaskLists+0x7c>)
 8004732:	4a05      	ldr	r2, [pc, #20]	; (8004748 <prvInitialiseTaskLists+0x68>)
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200003b8 	.word	0x200003b8
 8004744:	20000444 	.word	0x20000444
 8004748:	20000458 	.word	0x20000458
 800474c:	20000474 	.word	0x20000474
 8004750:	20000488 	.word	0x20000488
 8004754:	200004a0 	.word	0x200004a0
 8004758:	2000046c 	.word	0x2000046c
 800475c:	20000470 	.word	0x20000470

08004760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004766:	e019      	b.n	800479c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004768:	f000 fbc4 	bl	8004ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476c:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <prvCheckTasksWaitingTermination+0x50>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fb3f 	bl	8002dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <prvCheckTasksWaitingTermination+0x54>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <prvCheckTasksWaitingTermination+0x54>)
 8004786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <prvCheckTasksWaitingTermination+0x58>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3b01      	subs	r3, #1
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <prvCheckTasksWaitingTermination+0x58>)
 8004790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004792:	f000 fbdf 	bl	8004f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f810 	bl	80047bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <prvCheckTasksWaitingTermination+0x58>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e1      	bne.n	8004768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000488 	.word	0x20000488
 80047b4:	200004b4 	.word	0x200004b4
 80047b8:	2000049c 	.word	0x2000049c

080047bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d108      	bne.n	80047e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd7c 	bl	80052d0 <vPortFree>
				vPortFree( pxTCB );
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fd79 	bl	80052d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047de:	e018      	b.n	8004812 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d103      	bne.n	80047f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fd70 	bl	80052d0 <vPortFree>
	}
 80047f0:	e00f      	b.n	8004812 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d00a      	beq.n	8004812 <prvDeleteTCB+0x56>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60fb      	str	r3, [r7, #12]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <prvDeleteTCB+0x54>
	}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <prvResetNextTaskUnblockTime+0x38>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <prvResetNextTaskUnblockTime+0x3c>)
 800482e:	f04f 32ff 	mov.w	r2, #4294967295
 8004832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004834:	e008      	b.n	8004848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004836:	4b07      	ldr	r3, [pc, #28]	; (8004854 <prvResetNextTaskUnblockTime+0x38>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4a04      	ldr	r2, [pc, #16]	; (8004858 <prvResetNextTaskUnblockTime+0x3c>)
 8004846:	6013      	str	r3, [r2, #0]
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	2000046c 	.word	0x2000046c
 8004858:	200004d4 	.word	0x200004d4

0800485c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <xTaskGetSchedulerState+0x34>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800486a:	2301      	movs	r3, #1
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	e008      	b.n	8004882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <xTaskGetSchedulerState+0x38>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004878:	2302      	movs	r3, #2
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	e001      	b.n	8004882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004882:	687b      	ldr	r3, [r7, #4]
	}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	200004c0 	.word	0x200004c0
 8004894:	200004dc 	.word	0x200004dc

08004898 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d05e      	beq.n	800496c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <xTaskPriorityInherit+0xe0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d24e      	bcs.n	800495a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db06      	blt.n	80048d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c4:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <xTaskPriorityInherit+0xe0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f1c3 0207 	rsb	r2, r3, #7
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6959      	ldr	r1, [r3, #20]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4a26      	ldr	r2, [pc, #152]	; (800497c <xTaskPriorityInherit+0xe4>)
 80048e4:	4413      	add	r3, r2
 80048e6:	4299      	cmp	r1, r3
 80048e8:	d12f      	bne.n	800494a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fa84 	bl	8002dfc <uxListRemove>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	2201      	movs	r2, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43da      	mvns	r2, r3
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <xTaskPriorityInherit+0xe8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4013      	ands	r3, r2
 800490c:	4a1c      	ldr	r2, [pc, #112]	; (8004980 <xTaskPriorityInherit+0xe8>)
 800490e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <xTaskPriorityInherit+0xe0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	2201      	movs	r2, #1
 8004920:	409a      	lsls	r2, r3
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <xTaskPriorityInherit+0xe8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	4a15      	ldr	r2, [pc, #84]	; (8004980 <xTaskPriorityInherit+0xe8>)
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4a10      	ldr	r2, [pc, #64]	; (800497c <xTaskPriorityInherit+0xe4>)
 800493a:	441a      	add	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe f9fd 	bl	8002d42 <vListInsertEnd>
 8004948:	e004      	b.n	8004954 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <xTaskPriorityInherit+0xe0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e008      	b.n	800496c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <xTaskPriorityInherit+0xe0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	429a      	cmp	r2, r3
 8004966:	d201      	bcs.n	800496c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800496c:	68fb      	ldr	r3, [r7, #12]
	}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200003b4 	.word	0x200003b4
 800497c:	200003b8 	.word	0x200003b8
 8004980:	200004bc 	.word	0x200004bc

08004984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d06e      	beq.n	8004a78 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800499a:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <xTaskPriorityDisinherit+0x100>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d00a      	beq.n	80049ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60fb      	str	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60bb      	str	r3, [r7, #8]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d044      	beq.n	8004a78 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d140      	bne.n	8004a78 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe f9fe 	bl	8002dfc <uxListRemove>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d115      	bne.n	8004a32 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0a:	491f      	ldr	r1, [pc, #124]	; (8004a88 <xTaskPriorityDisinherit+0x104>)
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xTaskPriorityDisinherit+0xae>
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2201      	movs	r2, #1
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43da      	mvns	r2, r3
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	f1c3 0207 	rsb	r2, r3, #7
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <xTaskPriorityDisinherit+0x104>)
 8004a66:	441a      	add	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f7fe f967 	bl	8002d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a78:	697b      	ldr	r3, [r7, #20]
	}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200003b4 	.word	0x200003b4
 8004a88:	200003b8 	.word	0x200003b8
 8004a8c:	200004bc 	.word	0x200004bc

08004a90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d077      	beq.n	8004b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d902      	bls.n	8004ad6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e002      	b.n	8004adc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d058      	beq.n	8004b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d153      	bne.n	8004b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004af0:	4b2b      	ldr	r3, [pc, #172]	; (8004ba0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d10a      	bne.n	8004b10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	60bb      	str	r3, [r7, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db04      	blt.n	8004b2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f1c3 0207 	rsb	r2, r3, #7
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	6959      	ldr	r1, [r3, #20]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004b3e:	4413      	add	r3, r2
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d129      	bne.n	8004b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe f957 	bl	8002dfc <uxListRemove>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	2201      	movs	r2, #1
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4013      	ands	r3, r2
 8004b66:	4a10      	ldr	r2, [pc, #64]	; (8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	2201      	movs	r2, #1
 8004b70:	409a      	lsls	r2, r3
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	4a0b      	ldr	r2, [pc, #44]	; (8004ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4a06      	ldr	r2, [pc, #24]	; (8004ba4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004b8a:	441a      	add	r2, r3
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fe f8d5 	bl	8002d42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b98:	bf00      	nop
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	200003b4 	.word	0x200003b4
 8004ba4:	200003b8 	.word	0x200003b8
 8004ba8:	200004bc 	.word	0x200004bc

08004bac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bbe:	3201      	adds	r2, #1
 8004bc0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004bc2:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
	}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	200003b4 	.word	0x200003b4

08004bd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be4:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3304      	adds	r3, #4
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe f906 	bl	8002dfc <uxListRemove>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d10a      	bne.n	8004c2c <prvAddCurrentTaskToDelayedList+0x58>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	481a      	ldr	r0, [pc, #104]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c26:	f7fe f88c 	bl	8002d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c2a:	e026      	b.n	8004c7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d209      	bcs.n	8004c58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fe f89a 	bl	8002d8a <vListInsert>
}
 8004c56:	e010      	b.n	8004c7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fe f890 	bl	8002d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d202      	bcs.n	8004c7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c74:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6013      	str	r3, [r2, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200004b8 	.word	0x200004b8
 8004c88:	200003b4 	.word	0x200003b4
 8004c8c:	200004bc 	.word	0x200004bc
 8004c90:	200004a0 	.word	0x200004a0
 8004c94:	20000470 	.word	0x20000470
 8004c98:	2000046c 	.word	0x2000046c
 8004c9c:	200004d4 	.word	0x200004d4

08004ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3b04      	subs	r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3b04      	subs	r3, #4
 8004cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3b04      	subs	r3, #4
 8004cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cd0:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <pxPortInitialiseStack+0x64>)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3b14      	subs	r3, #20
 8004cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f06f 0202 	mvn.w	r2, #2
 8004cee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3b20      	subs	r3, #32
 8004cf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	08004d09 	.word	0x08004d09

08004d08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <prvTaskExitError+0x54>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d00a      	beq.n	8004d32 <prvTaskExitError+0x2a>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60fb      	str	r3, [r7, #12]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <prvTaskExitError+0x28>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	60bb      	str	r3, [r7, #8]
}
 8004d44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d46:	bf00      	nop
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0fc      	beq.n	8004d48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	4770      	bx	lr
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst2>:
 8004d80:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d88:	4808      	ldr	r0, [pc, #32]	; (8004dac <prvPortStartFirstTask+0x24>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8814 	msr	CONTROL, r0
 8004d9a:	b662      	cpsie	i
 8004d9c:	b661      	cpsie	f
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	df00      	svc	0
 8004da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004daa:	bf00      	nop
 8004dac:	e000ed08 	.word	0xe000ed08

08004db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <xPortStartScheduler+0x120>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a46      	ldr	r2, [pc, #280]	; (8004ed4 <xPortStartScheduler+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10a      	bne.n	8004dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	613b      	str	r3, [r7, #16]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dd6:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <xPortStartScheduler+0x120>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3f      	ldr	r2, [pc, #252]	; (8004ed8 <xPortStartScheduler+0x128>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10a      	bne.n	8004df6 <xPortStartScheduler+0x46>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004df6:	4b39      	ldr	r3, [pc, #228]	; (8004edc <xPortStartScheduler+0x12c>)
 8004df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	22ff      	movs	r2, #255	; 0xff
 8004e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <xPortStartScheduler+0x130>)
 8004e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e24:	e009      	b.n	8004e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d0ef      	beq.n	8004e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e46:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1c3 0307 	rsb	r3, r3, #7
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d00a      	beq.n	8004e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60bb      	str	r3, [r7, #8]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e9e:	f000 f8dd 	bl	800505c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <xPortStartScheduler+0x13c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ea8:	f000 f8fc 	bl	80050a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004eac:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <xPortStartScheduler+0x140>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <xPortStartScheduler+0x140>)
 8004eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004eb8:	f7ff ff66 	bl	8004d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ebc:	f7ff fa92 	bl	80043e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004ec0:	f7ff ff22 	bl	8004d08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	e000ed00 	.word	0xe000ed00
 8004ed4:	410fc271 	.word	0x410fc271
 8004ed8:	410fc270 	.word	0x410fc270
 8004edc:	e000e400 	.word	0xe000e400
 8004ee0:	200004e0 	.word	0x200004e0
 8004ee4:	200004e4 	.word	0x200004e4
 8004ee8:	e000ed20 	.word	0xe000ed20
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	e000ef34 	.word	0xe000ef34

08004ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	607b      	str	r3, [r7, #4]
}
 8004f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d10f      	bne.n	8004f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <vPortEnterCritical+0x5c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	603b      	str	r3, [r7, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <vPortEnterCritical+0x4a>
	}
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	2000000c 	.word	0x2000000c
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <vPortExitCritical+0x24>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	607b      	str	r3, [r7, #4]
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <vPortExitCritical+0x42>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f383 8811 	msr	BASEPRI, r3
}
 8004f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000000c 	.word	0x2000000c
	...

08004fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fb0:	f3ef 8009 	mrs	r0, PSP
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4b15      	ldr	r3, [pc, #84]	; (8005010 <pxCurrentTCBConst>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f01e 0f10 	tst.w	lr, #16
 8004fc0:	bf08      	it	eq
 8004fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	6010      	str	r0, [r2, #0]
 8004fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fd4:	f380 8811 	msr	BASEPRI, r0
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f7ff fa00 	bl	80043e4 <vTaskSwitchContext>
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	f380 8811 	msr	BASEPRI, r0
 8004fec:	bc09      	pop	{r0, r3}
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	6808      	ldr	r0, [r1, #0]
 8004ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff6:	f01e 0f10 	tst.w	lr, #16
 8004ffa:	bf08      	it	eq
 8004ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005000:	f380 8809 	msr	PSP, r0
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst>:
 8005010:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	607b      	str	r3, [r7, #4]
}
 8005030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005032:	f7ff f91f 	bl	8004274 <xTaskIncrementTick>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <xPortSysTickHandler+0x40>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f383 8811 	msr	BASEPRI, r3
}
 800504e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <vPortSetupTimerInterrupt+0x38>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <vPortSetupTimerInterrupt+0x3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <vPortSetupTimerInterrupt+0x40>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <vPortSetupTimerInterrupt+0x44>)
 800507a:	3b01      	subs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010
 8005094:	e000e018 	.word	0xe000e018
 8005098:	20000000 	.word	0x20000000
 800509c:	10624dd3 	.word	0x10624dd3
 80050a0:	e000e014 	.word	0xe000e014

080050a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050b4 <vPortEnableVFP+0x10>
 80050a8:	6801      	ldr	r1, [r0, #0]
 80050aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ae:	6001      	str	r1, [r0, #0]
 80050b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050b2:	bf00      	nop
 80050b4:	e000ed88 	.word	0xe000ed88

080050b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d914      	bls.n	80050f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <vPortValidateInterruptPriority+0x70>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050d4:	4b15      	ldr	r3, [pc, #84]	; (800512c <vPortValidateInterruptPriority+0x74>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	7afa      	ldrb	r2, [r7, #11]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d20a      	bcs.n	80050f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <vPortValidateInterruptPriority+0x78>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050fc:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <vPortValidateInterruptPriority+0x7c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d90a      	bls.n	800511a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	603b      	str	r3, [r7, #0]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <vPortValidateInterruptPriority+0x60>
	}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000e3f0 	.word	0xe000e3f0
 800512c:	200004e0 	.word	0x200004e0
 8005130:	e000ed0c 	.word	0xe000ed0c
 8005134:	200004e4 	.word	0x200004e4

08005138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005144:	f7fe ffec 	bl	8004120 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005148:	4b5b      	ldr	r3, [pc, #364]	; (80052b8 <pvPortMalloc+0x180>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005150:	f000 f920 	bl	8005394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005154:	4b59      	ldr	r3, [pc, #356]	; (80052bc <pvPortMalloc+0x184>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 8093 	bne.w	8005288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01d      	beq.n	80051a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005168:	2208      	movs	r2, #8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f023 0307 	bic.w	r3, r3, #7
 8005180:	3308      	adds	r3, #8
 8005182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <pvPortMalloc+0x6c>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	617b      	str	r3, [r7, #20]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d06e      	beq.n	8005288 <pvPortMalloc+0x150>
 80051aa:	4b45      	ldr	r3, [pc, #276]	; (80052c0 <pvPortMalloc+0x188>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d869      	bhi.n	8005288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051b4:	4b43      	ldr	r3, [pc, #268]	; (80052c4 <pvPortMalloc+0x18c>)
 80051b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051b8:	4b42      	ldr	r3, [pc, #264]	; (80052c4 <pvPortMalloc+0x18c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051be:	e004      	b.n	80051ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d903      	bls.n	80051dc <pvPortMalloc+0xa4>
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f1      	bne.n	80051c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051dc:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <pvPortMalloc+0x180>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d050      	beq.n	8005288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2208      	movs	r2, #8
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	2308      	movs	r3, #8
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	429a      	cmp	r2, r3
 8005206:	d91f      	bls.n	8005248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <pvPortMalloc+0xf8>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	613b      	str	r3, [r7, #16]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005242:	69b8      	ldr	r0, [r7, #24]
 8005244:	f000 f908 	bl	8005458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005248:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <pvPortMalloc+0x188>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <pvPortMalloc+0x188>)
 8005254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <pvPortMalloc+0x188>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <pvPortMalloc+0x190>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d203      	bcs.n	800526a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <pvPortMalloc+0x188>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <pvPortMalloc+0x190>)
 8005268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <pvPortMalloc+0x184>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	431a      	orrs	r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <pvPortMalloc+0x194>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a11      	ldr	r2, [pc, #68]	; (80052cc <pvPortMalloc+0x194>)
 8005286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005288:	f7fe ff58 	bl	800413c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <pvPortMalloc+0x174>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60fb      	str	r3, [r7, #12]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <pvPortMalloc+0x172>
	return pvReturn;
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	200040f0 	.word	0x200040f0
 80052bc:	20004104 	.word	0x20004104
 80052c0:	200040f4 	.word	0x200040f4
 80052c4:	200040e8 	.word	0x200040e8
 80052c8:	200040f8 	.word	0x200040f8
 80052cc:	200040fc 	.word	0x200040fc

080052d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d04d      	beq.n	800537e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052e2:	2308      	movs	r3, #8
 80052e4:	425b      	negs	r3, r3
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4413      	add	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4b24      	ldr	r3, [pc, #144]	; (8005388 <vPortFree+0xb8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <vPortFree+0x44>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	60fb      	str	r3, [r7, #12]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <vPortFree+0x62>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60bb      	str	r3, [r7, #8]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <vPortFree+0xb8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01e      	beq.n	800537e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d11a      	bne.n	800537e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <vPortFree+0xb8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	43db      	mvns	r3, r3
 8005352:	401a      	ands	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005358:	f7fe fee2 	bl	8004120 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <vPortFree+0xbc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4413      	add	r3, r2
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <vPortFree+0xbc>)
 8005368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800536a:	6938      	ldr	r0, [r7, #16]
 800536c:	f000 f874 	bl	8005458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <vPortFree+0xc0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	4a06      	ldr	r2, [pc, #24]	; (8005390 <vPortFree+0xc0>)
 8005378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800537a:	f7fe fedf 	bl	800413c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20004104 	.word	0x20004104
 800538c:	200040f4 	.word	0x200040f4
 8005390:	20004100 	.word	0x20004100

08005394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800539a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800539e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053a0:	4b27      	ldr	r3, [pc, #156]	; (8005440 <prvHeapInit+0xac>)
 80053a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00c      	beq.n	80053c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3307      	adds	r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <prvHeapInit+0xac>)
 80053c4:	4413      	add	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053cc:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <prvHeapInit+0xb0>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <prvHeapInit+0xb0>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4413      	add	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053e0:	2208      	movs	r2, #8
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a15      	ldr	r2, [pc, #84]	; (8005448 <prvHeapInit+0xb4>)
 80053f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <prvHeapInit+0xb4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <prvHeapInit+0xb4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <prvHeapInit+0xb4>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4a0a      	ldr	r2, [pc, #40]	; (800544c <prvHeapInit+0xb8>)
 8005422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a09      	ldr	r2, [pc, #36]	; (8005450 <prvHeapInit+0xbc>)
 800542a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <prvHeapInit+0xc0>)
 800542e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	200004e8 	.word	0x200004e8
 8005444:	200040e8 	.word	0x200040e8
 8005448:	200040f0 	.word	0x200040f0
 800544c:	200040f8 	.word	0x200040f8
 8005450:	200040f4 	.word	0x200040f4
 8005454:	20004104 	.word	0x20004104

08005458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005460:	4b28      	ldr	r3, [pc, #160]	; (8005504 <prvInsertBlockIntoFreeList+0xac>)
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e002      	b.n	800546c <prvInsertBlockIntoFreeList+0x14>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d8f7      	bhi.n	8005466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d108      	bne.n	800549a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	441a      	add	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d118      	bne.n	80054e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <prvInsertBlockIntoFreeList+0xb0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d00d      	beq.n	80054d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e008      	b.n	80054e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <prvInsertBlockIntoFreeList+0xb0>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e003      	b.n	80054e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d002      	beq.n	80054f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	200040e8 	.word	0x200040e8
 8005508:	200040f0 	.word	0x200040f0

0800550c <srand>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <srand+0x44>)
 8005510:	681d      	ldr	r5, [r3, #0]
 8005512:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005514:	4604      	mov	r4, r0
 8005516:	b9b3      	cbnz	r3, 8005546 <srand+0x3a>
 8005518:	2018      	movs	r0, #24
 800551a:	f000 fa89 	bl	8005a30 <malloc>
 800551e:	4602      	mov	r2, r0
 8005520:	6328      	str	r0, [r5, #48]	; 0x30
 8005522:	b920      	cbnz	r0, 800552e <srand+0x22>
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <srand+0x48>)
 8005526:	480c      	ldr	r0, [pc, #48]	; (8005558 <srand+0x4c>)
 8005528:	2146      	movs	r1, #70	; 0x46
 800552a:	f000 fa17 	bl	800595c <__assert_func>
 800552e:	490b      	ldr	r1, [pc, #44]	; (800555c <srand+0x50>)
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <srand+0x54>)
 8005532:	e9c0 1300 	strd	r1, r3, [r0]
 8005536:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <srand+0x58>)
 8005538:	6083      	str	r3, [r0, #8]
 800553a:	230b      	movs	r3, #11
 800553c:	8183      	strh	r3, [r0, #12]
 800553e:	2100      	movs	r1, #0
 8005540:	2001      	movs	r0, #1
 8005542:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005546:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005548:	2200      	movs	r2, #0
 800554a:	611c      	str	r4, [r3, #16]
 800554c:	615a      	str	r2, [r3, #20]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	20000068 	.word	0x20000068
 8005554:	080066c4 	.word	0x080066c4
 8005558:	080066db 	.word	0x080066db
 800555c:	abcd330e 	.word	0xabcd330e
 8005560:	e66d1234 	.word	0xe66d1234
 8005564:	0005deec 	.word	0x0005deec

08005568 <rand>:
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <rand+0x5c>)
 800556a:	b510      	push	{r4, lr}
 800556c:	681c      	ldr	r4, [r3, #0]
 800556e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005570:	b9b3      	cbnz	r3, 80055a0 <rand+0x38>
 8005572:	2018      	movs	r0, #24
 8005574:	f000 fa5c 	bl	8005a30 <malloc>
 8005578:	4602      	mov	r2, r0
 800557a:	6320      	str	r0, [r4, #48]	; 0x30
 800557c:	b920      	cbnz	r0, 8005588 <rand+0x20>
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <rand+0x60>)
 8005580:	4812      	ldr	r0, [pc, #72]	; (80055cc <rand+0x64>)
 8005582:	2152      	movs	r1, #82	; 0x52
 8005584:	f000 f9ea 	bl	800595c <__assert_func>
 8005588:	4911      	ldr	r1, [pc, #68]	; (80055d0 <rand+0x68>)
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <rand+0x6c>)
 800558c:	e9c0 1300 	strd	r1, r3, [r0]
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <rand+0x70>)
 8005592:	6083      	str	r3, [r0, #8]
 8005594:	230b      	movs	r3, #11
 8005596:	8183      	strh	r3, [r0, #12]
 8005598:	2100      	movs	r1, #0
 800559a:	2001      	movs	r0, #1
 800559c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80055a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055a2:	480e      	ldr	r0, [pc, #56]	; (80055dc <rand+0x74>)
 80055a4:	690b      	ldr	r3, [r1, #16]
 80055a6:	694c      	ldr	r4, [r1, #20]
 80055a8:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <rand+0x78>)
 80055aa:	4358      	muls	r0, r3
 80055ac:	fb02 0004 	mla	r0, r2, r4, r0
 80055b0:	fba3 3202 	umull	r3, r2, r3, r2
 80055b4:	3301      	adds	r3, #1
 80055b6:	eb40 0002 	adc.w	r0, r0, r2
 80055ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80055be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80055c2:	bd10      	pop	{r4, pc}
 80055c4:	20000068 	.word	0x20000068
 80055c8:	080066c4 	.word	0x080066c4
 80055cc:	080066db 	.word	0x080066db
 80055d0:	abcd330e 	.word	0xabcd330e
 80055d4:	e66d1234 	.word	0xe66d1234
 80055d8:	0005deec 	.word	0x0005deec
 80055dc:	5851f42d 	.word	0x5851f42d
 80055e0:	4c957f2d 	.word	0x4c957f2d

080055e4 <std>:
 80055e4:	2300      	movs	r3, #0
 80055e6:	b510      	push	{r4, lr}
 80055e8:	4604      	mov	r4, r0
 80055ea:	e9c0 3300 	strd	r3, r3, [r0]
 80055ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055f2:	6083      	str	r3, [r0, #8]
 80055f4:	8181      	strh	r1, [r0, #12]
 80055f6:	6643      	str	r3, [r0, #100]	; 0x64
 80055f8:	81c2      	strh	r2, [r0, #14]
 80055fa:	6183      	str	r3, [r0, #24]
 80055fc:	4619      	mov	r1, r3
 80055fe:	2208      	movs	r2, #8
 8005600:	305c      	adds	r0, #92	; 0x5c
 8005602:	f000 f8f4 	bl	80057ee <memset>
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <std+0x58>)
 8005608:	6263      	str	r3, [r4, #36]	; 0x24
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <std+0x5c>)
 800560c:	62a3      	str	r3, [r4, #40]	; 0x28
 800560e:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <std+0x60>)
 8005610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <std+0x64>)
 8005614:	6323      	str	r3, [r4, #48]	; 0x30
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <std+0x68>)
 8005618:	6224      	str	r4, [r4, #32]
 800561a:	429c      	cmp	r4, r3
 800561c:	d006      	beq.n	800562c <std+0x48>
 800561e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005622:	4294      	cmp	r4, r2
 8005624:	d002      	beq.n	800562c <std+0x48>
 8005626:	33d0      	adds	r3, #208	; 0xd0
 8005628:	429c      	cmp	r4, r3
 800562a:	d105      	bne.n	8005638 <std+0x54>
 800562c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005634:	f000 b980 	b.w	8005938 <__retarget_lock_init_recursive>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	08005769 	.word	0x08005769
 8005640:	0800578b 	.word	0x0800578b
 8005644:	080057c3 	.word	0x080057c3
 8005648:	080057e7 	.word	0x080057e7
 800564c:	20004108 	.word	0x20004108

08005650 <stdio_exit_handler>:
 8005650:	4a02      	ldr	r2, [pc, #8]	; (800565c <stdio_exit_handler+0xc>)
 8005652:	4903      	ldr	r1, [pc, #12]	; (8005660 <stdio_exit_handler+0x10>)
 8005654:	4803      	ldr	r0, [pc, #12]	; (8005664 <stdio_exit_handler+0x14>)
 8005656:	f000 b869 	b.w	800572c <_fwalk_sglue>
 800565a:	bf00      	nop
 800565c:	20000010 	.word	0x20000010
 8005660:	08005ca5 	.word	0x08005ca5
 8005664:	2000001c 	.word	0x2000001c

08005668 <cleanup_stdio>:
 8005668:	6841      	ldr	r1, [r0, #4]
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <cleanup_stdio+0x34>)
 800566c:	4299      	cmp	r1, r3
 800566e:	b510      	push	{r4, lr}
 8005670:	4604      	mov	r4, r0
 8005672:	d001      	beq.n	8005678 <cleanup_stdio+0x10>
 8005674:	f000 fb16 	bl	8005ca4 <_fflush_r>
 8005678:	68a1      	ldr	r1, [r4, #8]
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <cleanup_stdio+0x38>)
 800567c:	4299      	cmp	r1, r3
 800567e:	d002      	beq.n	8005686 <cleanup_stdio+0x1e>
 8005680:	4620      	mov	r0, r4
 8005682:	f000 fb0f 	bl	8005ca4 <_fflush_r>
 8005686:	68e1      	ldr	r1, [r4, #12]
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <cleanup_stdio+0x3c>)
 800568a:	4299      	cmp	r1, r3
 800568c:	d004      	beq.n	8005698 <cleanup_stdio+0x30>
 800568e:	4620      	mov	r0, r4
 8005690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005694:	f000 bb06 	b.w	8005ca4 <_fflush_r>
 8005698:	bd10      	pop	{r4, pc}
 800569a:	bf00      	nop
 800569c:	20004108 	.word	0x20004108
 80056a0:	20004170 	.word	0x20004170
 80056a4:	200041d8 	.word	0x200041d8

080056a8 <global_stdio_init.part.0>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <global_stdio_init.part.0+0x30>)
 80056ac:	4c0b      	ldr	r4, [pc, #44]	; (80056dc <global_stdio_init.part.0+0x34>)
 80056ae:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <global_stdio_init.part.0+0x38>)
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	4620      	mov	r0, r4
 80056b4:	2200      	movs	r2, #0
 80056b6:	2104      	movs	r1, #4
 80056b8:	f7ff ff94 	bl	80055e4 <std>
 80056bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056c0:	2201      	movs	r2, #1
 80056c2:	2109      	movs	r1, #9
 80056c4:	f7ff ff8e 	bl	80055e4 <std>
 80056c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056cc:	2202      	movs	r2, #2
 80056ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d2:	2112      	movs	r1, #18
 80056d4:	f7ff bf86 	b.w	80055e4 <std>
 80056d8:	20004240 	.word	0x20004240
 80056dc:	20004108 	.word	0x20004108
 80056e0:	08005651 	.word	0x08005651

080056e4 <__sfp_lock_acquire>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sfp_lock_acquire+0x8>)
 80056e6:	f000 b928 	b.w	800593a <__retarget_lock_acquire_recursive>
 80056ea:	bf00      	nop
 80056ec:	20004249 	.word	0x20004249

080056f0 <__sfp_lock_release>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__sfp_lock_release+0x8>)
 80056f2:	f000 b923 	b.w	800593c <__retarget_lock_release_recursive>
 80056f6:	bf00      	nop
 80056f8:	20004249 	.word	0x20004249

080056fc <__sinit>:
 80056fc:	b510      	push	{r4, lr}
 80056fe:	4604      	mov	r4, r0
 8005700:	f7ff fff0 	bl	80056e4 <__sfp_lock_acquire>
 8005704:	6a23      	ldr	r3, [r4, #32]
 8005706:	b11b      	cbz	r3, 8005710 <__sinit+0x14>
 8005708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570c:	f7ff bff0 	b.w	80056f0 <__sfp_lock_release>
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__sinit+0x28>)
 8005712:	6223      	str	r3, [r4, #32]
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <__sinit+0x2c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f5      	bne.n	8005708 <__sinit+0xc>
 800571c:	f7ff ffc4 	bl	80056a8 <global_stdio_init.part.0>
 8005720:	e7f2      	b.n	8005708 <__sinit+0xc>
 8005722:	bf00      	nop
 8005724:	08005669 	.word	0x08005669
 8005728:	20004240 	.word	0x20004240

0800572c <_fwalk_sglue>:
 800572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005730:	4607      	mov	r7, r0
 8005732:	4688      	mov	r8, r1
 8005734:	4614      	mov	r4, r2
 8005736:	2600      	movs	r6, #0
 8005738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800573c:	f1b9 0901 	subs.w	r9, r9, #1
 8005740:	d505      	bpl.n	800574e <_fwalk_sglue+0x22>
 8005742:	6824      	ldr	r4, [r4, #0]
 8005744:	2c00      	cmp	r4, #0
 8005746:	d1f7      	bne.n	8005738 <_fwalk_sglue+0xc>
 8005748:	4630      	mov	r0, r6
 800574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574e:	89ab      	ldrh	r3, [r5, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d907      	bls.n	8005764 <_fwalk_sglue+0x38>
 8005754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005758:	3301      	adds	r3, #1
 800575a:	d003      	beq.n	8005764 <_fwalk_sglue+0x38>
 800575c:	4629      	mov	r1, r5
 800575e:	4638      	mov	r0, r7
 8005760:	47c0      	blx	r8
 8005762:	4306      	orrs	r6, r0
 8005764:	3568      	adds	r5, #104	; 0x68
 8005766:	e7e9      	b.n	800573c <_fwalk_sglue+0x10>

08005768 <__sread>:
 8005768:	b510      	push	{r4, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005770:	f000 f894 	bl	800589c <_read_r>
 8005774:	2800      	cmp	r0, #0
 8005776:	bfab      	itete	ge
 8005778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800577a:	89a3      	ldrhlt	r3, [r4, #12]
 800577c:	181b      	addge	r3, r3, r0
 800577e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005782:	bfac      	ite	ge
 8005784:	6563      	strge	r3, [r4, #84]	; 0x54
 8005786:	81a3      	strhlt	r3, [r4, #12]
 8005788:	bd10      	pop	{r4, pc}

0800578a <__swrite>:
 800578a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578e:	461f      	mov	r7, r3
 8005790:	898b      	ldrh	r3, [r1, #12]
 8005792:	05db      	lsls	r3, r3, #23
 8005794:	4605      	mov	r5, r0
 8005796:	460c      	mov	r4, r1
 8005798:	4616      	mov	r6, r2
 800579a:	d505      	bpl.n	80057a8 <__swrite+0x1e>
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	2302      	movs	r3, #2
 80057a2:	2200      	movs	r2, #0
 80057a4:	f000 f868 	bl	8005878 <_lseek_r>
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	4628      	mov	r0, r5
 80057ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	f000 b87f 	b.w	80058c0 <_write_r>

080057c2 <__sseek>:
 80057c2:	b510      	push	{r4, lr}
 80057c4:	460c      	mov	r4, r1
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 f855 	bl	8005878 <_lseek_r>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	bf15      	itete	ne
 80057d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057de:	81a3      	strheq	r3, [r4, #12]
 80057e0:	bf18      	it	ne
 80057e2:	81a3      	strhne	r3, [r4, #12]
 80057e4:	bd10      	pop	{r4, pc}

080057e6 <__sclose>:
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 b823 	b.w	8005834 <_close_r>

080057ee <memset>:
 80057ee:	4402      	add	r2, r0
 80057f0:	4603      	mov	r3, r0
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d100      	bne.n	80057f8 <memset+0xa>
 80057f6:	4770      	bx	lr
 80057f8:	f803 1b01 	strb.w	r1, [r3], #1
 80057fc:	e7f9      	b.n	80057f2 <memset+0x4>
	...

08005800 <time>:
 8005800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <time+0x30>)
 8005804:	2200      	movs	r2, #0
 8005806:	4669      	mov	r1, sp
 8005808:	4604      	mov	r4, r0
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	f000 f822 	bl	8005854 <_gettimeofday_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	bfbe      	ittt	lt
 8005814:	f04f 32ff 	movlt.w	r2, #4294967295
 8005818:	f04f 33ff 	movlt.w	r3, #4294967295
 800581c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005824:	b10c      	cbz	r4, 800582a <time+0x2a>
 8005826:	e9c4 0100 	strd	r0, r1, [r4]
 800582a:	b004      	add	sp, #16
 800582c:	bd10      	pop	{r4, pc}
 800582e:	bf00      	nop
 8005830:	20000068 	.word	0x20000068

08005834 <_close_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d06      	ldr	r5, [pc, #24]	; (8005850 <_close_r+0x1c>)
 8005838:	2300      	movs	r3, #0
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f7fb fc52 	bl	80010e8 <_close>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_close_r+0x1a>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_close_r+0x1a>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	20004244 	.word	0x20004244

08005854 <_gettimeofday_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d07      	ldr	r5, [pc, #28]	; (8005874 <_gettimeofday_r+0x20>)
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	4611      	mov	r1, r2
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	f000 fea1 	bl	80065a8 <_gettimeofday>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d102      	bne.n	8005870 <_gettimeofday_r+0x1c>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b103      	cbz	r3, 8005870 <_gettimeofday_r+0x1c>
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	bd38      	pop	{r3, r4, r5, pc}
 8005872:	bf00      	nop
 8005874:	20004244 	.word	0x20004244

08005878 <_lseek_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d07      	ldr	r5, [pc, #28]	; (8005898 <_lseek_r+0x20>)
 800587c:	4604      	mov	r4, r0
 800587e:	4608      	mov	r0, r1
 8005880:	4611      	mov	r1, r2
 8005882:	2200      	movs	r2, #0
 8005884:	602a      	str	r2, [r5, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f7fb fc55 	bl	8001136 <_lseek>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_lseek_r+0x1e>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_lseek_r+0x1e>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20004244 	.word	0x20004244

0800589c <_read_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d07      	ldr	r5, [pc, #28]	; (80058bc <_read_r+0x20>)
 80058a0:	4604      	mov	r4, r0
 80058a2:	4608      	mov	r0, r1
 80058a4:	4611      	mov	r1, r2
 80058a6:	2200      	movs	r2, #0
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fb fbe3 	bl	8001076 <_read>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_read_r+0x1e>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_read_r+0x1e>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	20004244 	.word	0x20004244

080058c0 <_write_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d07      	ldr	r5, [pc, #28]	; (80058e0 <_write_r+0x20>)
 80058c4:	4604      	mov	r4, r0
 80058c6:	4608      	mov	r0, r1
 80058c8:	4611      	mov	r1, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f7fb fbee 	bl	80010b0 <_write>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_write_r+0x1e>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_write_r+0x1e>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20004244 	.word	0x20004244

080058e4 <__errno>:
 80058e4:	4b01      	ldr	r3, [pc, #4]	; (80058ec <__errno+0x8>)
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000068 	.word	0x20000068

080058f0 <__libc_init_array>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	4d0d      	ldr	r5, [pc, #52]	; (8005928 <__libc_init_array+0x38>)
 80058f4:	4c0d      	ldr	r4, [pc, #52]	; (800592c <__libc_init_array+0x3c>)
 80058f6:	1b64      	subs	r4, r4, r5
 80058f8:	10a4      	asrs	r4, r4, #2
 80058fa:	2600      	movs	r6, #0
 80058fc:	42a6      	cmp	r6, r4
 80058fe:	d109      	bne.n	8005914 <__libc_init_array+0x24>
 8005900:	4d0b      	ldr	r5, [pc, #44]	; (8005930 <__libc_init_array+0x40>)
 8005902:	4c0c      	ldr	r4, [pc, #48]	; (8005934 <__libc_init_array+0x44>)
 8005904:	f000 fe58 	bl	80065b8 <_init>
 8005908:	1b64      	subs	r4, r4, r5
 800590a:	10a4      	asrs	r4, r4, #2
 800590c:	2600      	movs	r6, #0
 800590e:	42a6      	cmp	r6, r4
 8005910:	d105      	bne.n	800591e <__libc_init_array+0x2e>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	f855 3b04 	ldr.w	r3, [r5], #4
 8005918:	4798      	blx	r3
 800591a:	3601      	adds	r6, #1
 800591c:	e7ee      	b.n	80058fc <__libc_init_array+0xc>
 800591e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005922:	4798      	blx	r3
 8005924:	3601      	adds	r6, #1
 8005926:	e7f2      	b.n	800590e <__libc_init_array+0x1e>
 8005928:	080067ac 	.word	0x080067ac
 800592c:	080067ac 	.word	0x080067ac
 8005930:	080067ac 	.word	0x080067ac
 8005934:	080067b0 	.word	0x080067b0

08005938 <__retarget_lock_init_recursive>:
 8005938:	4770      	bx	lr

0800593a <__retarget_lock_acquire_recursive>:
 800593a:	4770      	bx	lr

0800593c <__retarget_lock_release_recursive>:
 800593c:	4770      	bx	lr

0800593e <memcpy>:
 800593e:	440a      	add	r2, r1
 8005940:	4291      	cmp	r1, r2
 8005942:	f100 33ff 	add.w	r3, r0, #4294967295
 8005946:	d100      	bne.n	800594a <memcpy+0xc>
 8005948:	4770      	bx	lr
 800594a:	b510      	push	{r4, lr}
 800594c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005954:	4291      	cmp	r1, r2
 8005956:	d1f9      	bne.n	800594c <memcpy+0xe>
 8005958:	bd10      	pop	{r4, pc}
	...

0800595c <__assert_func>:
 800595c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800595e:	4614      	mov	r4, r2
 8005960:	461a      	mov	r2, r3
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <__assert_func+0x2c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4605      	mov	r5, r0
 8005968:	68d8      	ldr	r0, [r3, #12]
 800596a:	b14c      	cbz	r4, 8005980 <__assert_func+0x24>
 800596c:	4b07      	ldr	r3, [pc, #28]	; (800598c <__assert_func+0x30>)
 800596e:	9100      	str	r1, [sp, #0]
 8005970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005974:	4906      	ldr	r1, [pc, #24]	; (8005990 <__assert_func+0x34>)
 8005976:	462b      	mov	r3, r5
 8005978:	f000 f9bc 	bl	8005cf4 <fiprintf>
 800597c:	f000 f9dc 	bl	8005d38 <abort>
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <__assert_func+0x38>)
 8005982:	461c      	mov	r4, r3
 8005984:	e7f3      	b.n	800596e <__assert_func+0x12>
 8005986:	bf00      	nop
 8005988:	20000068 	.word	0x20000068
 800598c:	08006733 	.word	0x08006733
 8005990:	08006740 	.word	0x08006740
 8005994:	0800676e 	.word	0x0800676e

08005998 <_free_r>:
 8005998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800599a:	2900      	cmp	r1, #0
 800599c:	d044      	beq.n	8005a28 <_free_r+0x90>
 800599e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a2:	9001      	str	r0, [sp, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f1a1 0404 	sub.w	r4, r1, #4
 80059aa:	bfb8      	it	lt
 80059ac:	18e4      	addlt	r4, r4, r3
 80059ae:	f000 f8e7 	bl	8005b80 <__malloc_lock>
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <_free_r+0x94>)
 80059b4:	9801      	ldr	r0, [sp, #4]
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	b933      	cbnz	r3, 80059c8 <_free_r+0x30>
 80059ba:	6063      	str	r3, [r4, #4]
 80059bc:	6014      	str	r4, [r2, #0]
 80059be:	b003      	add	sp, #12
 80059c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059c4:	f000 b8e2 	b.w	8005b8c <__malloc_unlock>
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d908      	bls.n	80059de <_free_r+0x46>
 80059cc:	6825      	ldr	r5, [r4, #0]
 80059ce:	1961      	adds	r1, r4, r5
 80059d0:	428b      	cmp	r3, r1
 80059d2:	bf01      	itttt	eq
 80059d4:	6819      	ldreq	r1, [r3, #0]
 80059d6:	685b      	ldreq	r3, [r3, #4]
 80059d8:	1949      	addeq	r1, r1, r5
 80059da:	6021      	streq	r1, [r4, #0]
 80059dc:	e7ed      	b.n	80059ba <_free_r+0x22>
 80059de:	461a      	mov	r2, r3
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	b10b      	cbz	r3, 80059e8 <_free_r+0x50>
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	d9fa      	bls.n	80059de <_free_r+0x46>
 80059e8:	6811      	ldr	r1, [r2, #0]
 80059ea:	1855      	adds	r5, r2, r1
 80059ec:	42a5      	cmp	r5, r4
 80059ee:	d10b      	bne.n	8005a08 <_free_r+0x70>
 80059f0:	6824      	ldr	r4, [r4, #0]
 80059f2:	4421      	add	r1, r4
 80059f4:	1854      	adds	r4, r2, r1
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	6011      	str	r1, [r2, #0]
 80059fa:	d1e0      	bne.n	80059be <_free_r+0x26>
 80059fc:	681c      	ldr	r4, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	6053      	str	r3, [r2, #4]
 8005a02:	440c      	add	r4, r1
 8005a04:	6014      	str	r4, [r2, #0]
 8005a06:	e7da      	b.n	80059be <_free_r+0x26>
 8005a08:	d902      	bls.n	8005a10 <_free_r+0x78>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	6003      	str	r3, [r0, #0]
 8005a0e:	e7d6      	b.n	80059be <_free_r+0x26>
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	1961      	adds	r1, r4, r5
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf04      	itt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	6063      	str	r3, [r4, #4]
 8005a1e:	bf04      	itt	eq
 8005a20:	1949      	addeq	r1, r1, r5
 8005a22:	6021      	streq	r1, [r4, #0]
 8005a24:	6054      	str	r4, [r2, #4]
 8005a26:	e7ca      	b.n	80059be <_free_r+0x26>
 8005a28:	b003      	add	sp, #12
 8005a2a:	bd30      	pop	{r4, r5, pc}
 8005a2c:	2000424c 	.word	0x2000424c

08005a30 <malloc>:
 8005a30:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <malloc+0xc>)
 8005a32:	4601      	mov	r1, r0
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	f000 b823 	b.w	8005a80 <_malloc_r>
 8005a3a:	bf00      	nop
 8005a3c:	20000068 	.word	0x20000068

08005a40 <sbrk_aligned>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4e0e      	ldr	r6, [pc, #56]	; (8005a7c <sbrk_aligned+0x3c>)
 8005a44:	460c      	mov	r4, r1
 8005a46:	6831      	ldr	r1, [r6, #0]
 8005a48:	4605      	mov	r5, r0
 8005a4a:	b911      	cbnz	r1, 8005a52 <sbrk_aligned+0x12>
 8005a4c:	f000 f964 	bl	8005d18 <_sbrk_r>
 8005a50:	6030      	str	r0, [r6, #0]
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 f95f 	bl	8005d18 <_sbrk_r>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	d00a      	beq.n	8005a74 <sbrk_aligned+0x34>
 8005a5e:	1cc4      	adds	r4, r0, #3
 8005a60:	f024 0403 	bic.w	r4, r4, #3
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d007      	beq.n	8005a78 <sbrk_aligned+0x38>
 8005a68:	1a21      	subs	r1, r4, r0
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 f954 	bl	8005d18 <_sbrk_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d101      	bne.n	8005a78 <sbrk_aligned+0x38>
 8005a74:	f04f 34ff 	mov.w	r4, #4294967295
 8005a78:	4620      	mov	r0, r4
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	20004250 	.word	0x20004250

08005a80 <_malloc_r>:
 8005a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a84:	1ccd      	adds	r5, r1, #3
 8005a86:	f025 0503 	bic.w	r5, r5, #3
 8005a8a:	3508      	adds	r5, #8
 8005a8c:	2d0c      	cmp	r5, #12
 8005a8e:	bf38      	it	cc
 8005a90:	250c      	movcc	r5, #12
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	4607      	mov	r7, r0
 8005a96:	db01      	blt.n	8005a9c <_malloc_r+0x1c>
 8005a98:	42a9      	cmp	r1, r5
 8005a9a:	d905      	bls.n	8005aa8 <_malloc_r+0x28>
 8005a9c:	230c      	movs	r3, #12
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b7c <_malloc_r+0xfc>
 8005aac:	f000 f868 	bl	8005b80 <__malloc_lock>
 8005ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab4:	461c      	mov	r4, r3
 8005ab6:	bb5c      	cbnz	r4, 8005b10 <_malloc_r+0x90>
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4638      	mov	r0, r7
 8005abc:	f7ff ffc0 	bl	8005a40 <sbrk_aligned>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	d155      	bne.n	8005b72 <_malloc_r+0xf2>
 8005ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8005aca:	4626      	mov	r6, r4
 8005acc:	2e00      	cmp	r6, #0
 8005ace:	d145      	bne.n	8005b5c <_malloc_r+0xdc>
 8005ad0:	2c00      	cmp	r4, #0
 8005ad2:	d048      	beq.n	8005b66 <_malloc_r+0xe6>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4638      	mov	r0, r7
 8005ada:	eb04 0903 	add.w	r9, r4, r3
 8005ade:	f000 f91b 	bl	8005d18 <_sbrk_r>
 8005ae2:	4581      	cmp	r9, r0
 8005ae4:	d13f      	bne.n	8005b66 <_malloc_r+0xe6>
 8005ae6:	6821      	ldr	r1, [r4, #0]
 8005ae8:	1a6d      	subs	r5, r5, r1
 8005aea:	4629      	mov	r1, r5
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff ffa7 	bl	8005a40 <sbrk_aligned>
 8005af2:	3001      	adds	r0, #1
 8005af4:	d037      	beq.n	8005b66 <_malloc_r+0xe6>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	442b      	add	r3, r5
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	f8d8 3000 	ldr.w	r3, [r8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d038      	beq.n	8005b76 <_malloc_r+0xf6>
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	42a2      	cmp	r2, r4
 8005b08:	d12b      	bne.n	8005b62 <_malloc_r+0xe2>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	e00f      	b.n	8005b30 <_malloc_r+0xb0>
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	1b52      	subs	r2, r2, r5
 8005b14:	d41f      	bmi.n	8005b56 <_malloc_r+0xd6>
 8005b16:	2a0b      	cmp	r2, #11
 8005b18:	d917      	bls.n	8005b4a <_malloc_r+0xca>
 8005b1a:	1961      	adds	r1, r4, r5
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	6025      	str	r5, [r4, #0]
 8005b20:	bf18      	it	ne
 8005b22:	6059      	strne	r1, [r3, #4]
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	bf08      	it	eq
 8005b28:	f8c8 1000 	streq.w	r1, [r8]
 8005b2c:	5162      	str	r2, [r4, r5]
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	4638      	mov	r0, r7
 8005b32:	f104 060b 	add.w	r6, r4, #11
 8005b36:	f000 f829 	bl	8005b8c <__malloc_unlock>
 8005b3a:	f026 0607 	bic.w	r6, r6, #7
 8005b3e:	1d23      	adds	r3, r4, #4
 8005b40:	1af2      	subs	r2, r6, r3
 8005b42:	d0ae      	beq.n	8005aa2 <_malloc_r+0x22>
 8005b44:	1b9b      	subs	r3, r3, r6
 8005b46:	50a3      	str	r3, [r4, r2]
 8005b48:	e7ab      	b.n	8005aa2 <_malloc_r+0x22>
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	6862      	ldr	r2, [r4, #4]
 8005b4e:	d1dd      	bne.n	8005b0c <_malloc_r+0x8c>
 8005b50:	f8c8 2000 	str.w	r2, [r8]
 8005b54:	e7ec      	b.n	8005b30 <_malloc_r+0xb0>
 8005b56:	4623      	mov	r3, r4
 8005b58:	6864      	ldr	r4, [r4, #4]
 8005b5a:	e7ac      	b.n	8005ab6 <_malloc_r+0x36>
 8005b5c:	4634      	mov	r4, r6
 8005b5e:	6876      	ldr	r6, [r6, #4]
 8005b60:	e7b4      	b.n	8005acc <_malloc_r+0x4c>
 8005b62:	4613      	mov	r3, r2
 8005b64:	e7cc      	b.n	8005b00 <_malloc_r+0x80>
 8005b66:	230c      	movs	r3, #12
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f000 f80e 	bl	8005b8c <__malloc_unlock>
 8005b70:	e797      	b.n	8005aa2 <_malloc_r+0x22>
 8005b72:	6025      	str	r5, [r4, #0]
 8005b74:	e7dc      	b.n	8005b30 <_malloc_r+0xb0>
 8005b76:	605b      	str	r3, [r3, #4]
 8005b78:	deff      	udf	#255	; 0xff
 8005b7a:	bf00      	nop
 8005b7c:	2000424c 	.word	0x2000424c

08005b80 <__malloc_lock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__malloc_lock+0x8>)
 8005b82:	f7ff beda 	b.w	800593a <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	20004248 	.word	0x20004248

08005b8c <__malloc_unlock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_unlock+0x8>)
 8005b8e:	f7ff bed5 	b.w	800593c <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	20004248 	.word	0x20004248

08005b98 <__sflush_r>:
 8005b98:	898a      	ldrh	r2, [r1, #12]
 8005b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	0710      	lsls	r0, r2, #28
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	d458      	bmi.n	8005c58 <__sflush_r+0xc0>
 8005ba6:	684b      	ldr	r3, [r1, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc05      	bgt.n	8005bb8 <__sflush_r+0x20>
 8005bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dc02      	bgt.n	8005bb8 <__sflush_r+0x20>
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	d0f9      	beq.n	8005bb2 <__sflush_r+0x1a>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bc4:	682f      	ldr	r7, [r5, #0]
 8005bc6:	6a21      	ldr	r1, [r4, #32]
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	d032      	beq.n	8005c32 <__sflush_r+0x9a>
 8005bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	075a      	lsls	r2, r3, #29
 8005bd2:	d505      	bpl.n	8005be0 <__sflush_r+0x48>
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	1ac0      	subs	r0, r0, r3
 8005bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bda:	b10b      	cbz	r3, 8005be0 <__sflush_r+0x48>
 8005bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bde:	1ac0      	subs	r0, r0, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	4602      	mov	r2, r0
 8005be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be6:	6a21      	ldr	r1, [r4, #32]
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b0      	blx	r6
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	d106      	bne.n	8005c00 <__sflush_r+0x68>
 8005bf2:	6829      	ldr	r1, [r5, #0]
 8005bf4:	291d      	cmp	r1, #29
 8005bf6:	d82b      	bhi.n	8005c50 <__sflush_r+0xb8>
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <__sflush_r+0x108>)
 8005bfa:	410a      	asrs	r2, r1
 8005bfc:	07d6      	lsls	r6, r2, #31
 8005bfe:	d427      	bmi.n	8005c50 <__sflush_r+0xb8>
 8005c00:	2200      	movs	r2, #0
 8005c02:	6062      	str	r2, [r4, #4]
 8005c04:	04d9      	lsls	r1, r3, #19
 8005c06:	6922      	ldr	r2, [r4, #16]
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	d504      	bpl.n	8005c16 <__sflush_r+0x7e>
 8005c0c:	1c42      	adds	r2, r0, #1
 8005c0e:	d101      	bne.n	8005c14 <__sflush_r+0x7c>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b903      	cbnz	r3, 8005c16 <__sflush_r+0x7e>
 8005c14:	6560      	str	r0, [r4, #84]	; 0x54
 8005c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c18:	602f      	str	r7, [r5, #0]
 8005c1a:	2900      	cmp	r1, #0
 8005c1c:	d0c9      	beq.n	8005bb2 <__sflush_r+0x1a>
 8005c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c22:	4299      	cmp	r1, r3
 8005c24:	d002      	beq.n	8005c2c <__sflush_r+0x94>
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7ff feb6 	bl	8005998 <_free_r>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8005c30:	e7c0      	b.n	8005bb4 <__sflush_r+0x1c>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b0      	blx	r6
 8005c38:	1c41      	adds	r1, r0, #1
 8005c3a:	d1c8      	bne.n	8005bce <__sflush_r+0x36>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0c5      	beq.n	8005bce <__sflush_r+0x36>
 8005c42:	2b1d      	cmp	r3, #29
 8005c44:	d001      	beq.n	8005c4a <__sflush_r+0xb2>
 8005c46:	2b16      	cmp	r3, #22
 8005c48:	d101      	bne.n	8005c4e <__sflush_r+0xb6>
 8005c4a:	602f      	str	r7, [r5, #0]
 8005c4c:	e7b1      	b.n	8005bb2 <__sflush_r+0x1a>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	e7ad      	b.n	8005bb4 <__sflush_r+0x1c>
 8005c58:	690f      	ldr	r7, [r1, #16]
 8005c5a:	2f00      	cmp	r7, #0
 8005c5c:	d0a9      	beq.n	8005bb2 <__sflush_r+0x1a>
 8005c5e:	0793      	lsls	r3, r2, #30
 8005c60:	680e      	ldr	r6, [r1, #0]
 8005c62:	bf08      	it	eq
 8005c64:	694b      	ldreq	r3, [r1, #20]
 8005c66:	600f      	str	r7, [r1, #0]
 8005c68:	bf18      	it	ne
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	eba6 0807 	sub.w	r8, r6, r7
 8005c70:	608b      	str	r3, [r1, #8]
 8005c72:	f1b8 0f00 	cmp.w	r8, #0
 8005c76:	dd9c      	ble.n	8005bb2 <__sflush_r+0x1a>
 8005c78:	6a21      	ldr	r1, [r4, #32]
 8005c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c7c:	4643      	mov	r3, r8
 8005c7e:	463a      	mov	r2, r7
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b0      	blx	r6
 8005c84:	2800      	cmp	r0, #0
 8005c86:	dc06      	bgt.n	8005c96 <__sflush_r+0xfe>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e78e      	b.n	8005bb4 <__sflush_r+0x1c>
 8005c96:	4407      	add	r7, r0
 8005c98:	eba8 0800 	sub.w	r8, r8, r0
 8005c9c:	e7e9      	b.n	8005c72 <__sflush_r+0xda>
 8005c9e:	bf00      	nop
 8005ca0:	dfbffffe 	.word	0xdfbffffe

08005ca4 <_fflush_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	690b      	ldr	r3, [r1, #16]
 8005ca8:	4605      	mov	r5, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b913      	cbnz	r3, 8005cb4 <_fflush_r+0x10>
 8005cae:	2500      	movs	r5, #0
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	b118      	cbz	r0, 8005cbe <_fflush_r+0x1a>
 8005cb6:	6a03      	ldr	r3, [r0, #32]
 8005cb8:	b90b      	cbnz	r3, 8005cbe <_fflush_r+0x1a>
 8005cba:	f7ff fd1f 	bl	80056fc <__sinit>
 8005cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f3      	beq.n	8005cae <_fflush_r+0xa>
 8005cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cc8:	07d0      	lsls	r0, r2, #31
 8005cca:	d404      	bmi.n	8005cd6 <_fflush_r+0x32>
 8005ccc:	0599      	lsls	r1, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_fflush_r+0x32>
 8005cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cd2:	f7ff fe32 	bl	800593a <__retarget_lock_acquire_recursive>
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4621      	mov	r1, r4
 8005cda:	f7ff ff5d 	bl	8005b98 <__sflush_r>
 8005cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ce0:	07da      	lsls	r2, r3, #31
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	d4e4      	bmi.n	8005cb0 <_fflush_r+0xc>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	059b      	lsls	r3, r3, #22
 8005cea:	d4e1      	bmi.n	8005cb0 <_fflush_r+0xc>
 8005cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cee:	f7ff fe25 	bl	800593c <__retarget_lock_release_recursive>
 8005cf2:	e7dd      	b.n	8005cb0 <_fflush_r+0xc>

08005cf4 <fiprintf>:
 8005cf4:	b40e      	push	{r1, r2, r3}
 8005cf6:	b503      	push	{r0, r1, lr}
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	ab03      	add	r3, sp, #12
 8005cfc:	4805      	ldr	r0, [pc, #20]	; (8005d14 <fiprintf+0x20>)
 8005cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d02:	6800      	ldr	r0, [r0, #0]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	f000 f847 	bl	8005d98 <_vfiprintf_r>
 8005d0a:	b002      	add	sp, #8
 8005d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d10:	b003      	add	sp, #12
 8005d12:	4770      	bx	lr
 8005d14:	20000068 	.word	0x20000068

08005d18 <_sbrk_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d06      	ldr	r5, [pc, #24]	; (8005d34 <_sbrk_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	f7fb fa14 	bl	8001150 <_sbrk>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_sbrk_r+0x1a>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_sbrk_r+0x1a>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	20004244 	.word	0x20004244

08005d38 <abort>:
 8005d38:	b508      	push	{r3, lr}
 8005d3a:	2006      	movs	r0, #6
 8005d3c:	f000 fb94 	bl	8006468 <raise>
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7fb f98e 	bl	8001062 <_exit>

08005d46 <__sfputc_r>:
 8005d46:	6893      	ldr	r3, [r2, #8]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	b410      	push	{r4}
 8005d4e:	6093      	str	r3, [r2, #8]
 8005d50:	da08      	bge.n	8005d64 <__sfputc_r+0x1e>
 8005d52:	6994      	ldr	r4, [r2, #24]
 8005d54:	42a3      	cmp	r3, r4
 8005d56:	db01      	blt.n	8005d5c <__sfputc_r+0x16>
 8005d58:	290a      	cmp	r1, #10
 8005d5a:	d103      	bne.n	8005d64 <__sfputc_r+0x1e>
 8005d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d60:	f000 bac4 	b.w	80062ec <__swbuf_r>
 8005d64:	6813      	ldr	r3, [r2, #0]
 8005d66:	1c58      	adds	r0, r3, #1
 8005d68:	6010      	str	r0, [r2, #0]
 8005d6a:	7019      	strb	r1, [r3, #0]
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <__sfputs_r>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	4614      	mov	r4, r2
 8005d7c:	18d5      	adds	r5, r2, r3
 8005d7e:	42ac      	cmp	r4, r5
 8005d80:	d101      	bne.n	8005d86 <__sfputs_r+0x12>
 8005d82:	2000      	movs	r0, #0
 8005d84:	e007      	b.n	8005d96 <__sfputs_r+0x22>
 8005d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8a:	463a      	mov	r2, r7
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f7ff ffda 	bl	8005d46 <__sfputc_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d1f3      	bne.n	8005d7e <__sfputs_r+0xa>
 8005d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d98 <_vfiprintf_r>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	b09d      	sub	sp, #116	; 0x74
 8005da0:	4614      	mov	r4, r2
 8005da2:	4698      	mov	r8, r3
 8005da4:	4606      	mov	r6, r0
 8005da6:	b118      	cbz	r0, 8005db0 <_vfiprintf_r+0x18>
 8005da8:	6a03      	ldr	r3, [r0, #32]
 8005daa:	b90b      	cbnz	r3, 8005db0 <_vfiprintf_r+0x18>
 8005dac:	f7ff fca6 	bl	80056fc <__sinit>
 8005db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005db2:	07d9      	lsls	r1, r3, #31
 8005db4:	d405      	bmi.n	8005dc2 <_vfiprintf_r+0x2a>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	059a      	lsls	r2, r3, #22
 8005dba:	d402      	bmi.n	8005dc2 <_vfiprintf_r+0x2a>
 8005dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dbe:	f7ff fdbc 	bl	800593a <__retarget_lock_acquire_recursive>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	071b      	lsls	r3, r3, #28
 8005dc6:	d501      	bpl.n	8005dcc <_vfiprintf_r+0x34>
 8005dc8:	692b      	ldr	r3, [r5, #16]
 8005dca:	b99b      	cbnz	r3, 8005df4 <_vfiprintf_r+0x5c>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f000 faca 	bl	8006368 <__swsetup_r>
 8005dd4:	b170      	cbz	r0, 8005df4 <_vfiprintf_r+0x5c>
 8005dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd8:	07dc      	lsls	r4, r3, #31
 8005dda:	d504      	bpl.n	8005de6 <_vfiprintf_r+0x4e>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	b01d      	add	sp, #116	; 0x74
 8005de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	0598      	lsls	r0, r3, #22
 8005dea:	d4f7      	bmi.n	8005ddc <_vfiprintf_r+0x44>
 8005dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dee:	f7ff fda5 	bl	800593c <__retarget_lock_release_recursive>
 8005df2:	e7f3      	b.n	8005ddc <_vfiprintf_r+0x44>
 8005df4:	2300      	movs	r3, #0
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e02:	2330      	movs	r3, #48	; 0x30
 8005e04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005fb8 <_vfiprintf_r+0x220>
 8005e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e0c:	f04f 0901 	mov.w	r9, #1
 8005e10:	4623      	mov	r3, r4
 8005e12:	469a      	mov	sl, r3
 8005e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e18:	b10a      	cbz	r2, 8005e1e <_vfiprintf_r+0x86>
 8005e1a:	2a25      	cmp	r2, #37	; 0x25
 8005e1c:	d1f9      	bne.n	8005e12 <_vfiprintf_r+0x7a>
 8005e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e22:	d00b      	beq.n	8005e3c <_vfiprintf_r+0xa4>
 8005e24:	465b      	mov	r3, fp
 8005e26:	4622      	mov	r2, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ffa2 	bl	8005d74 <__sfputs_r>
 8005e30:	3001      	adds	r0, #1
 8005e32:	f000 80a9 	beq.w	8005f88 <_vfiprintf_r+0x1f0>
 8005e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e38:	445a      	add	r2, fp
 8005e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80a1 	beq.w	8005f88 <_vfiprintf_r+0x1f0>
 8005e46:	2300      	movs	r3, #0
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e50:	f10a 0a01 	add.w	sl, sl, #1
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e5e:	4654      	mov	r4, sl
 8005e60:	2205      	movs	r2, #5
 8005e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e66:	4854      	ldr	r0, [pc, #336]	; (8005fb8 <_vfiprintf_r+0x220>)
 8005e68:	f7fa f9b2 	bl	80001d0 <memchr>
 8005e6c:	9a04      	ldr	r2, [sp, #16]
 8005e6e:	b9d8      	cbnz	r0, 8005ea8 <_vfiprintf_r+0x110>
 8005e70:	06d1      	lsls	r1, r2, #27
 8005e72:	bf44      	itt	mi
 8005e74:	2320      	movmi	r3, #32
 8005e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7a:	0713      	lsls	r3, r2, #28
 8005e7c:	bf44      	itt	mi
 8005e7e:	232b      	movmi	r3, #43	; 0x2b
 8005e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e84:	f89a 3000 	ldrb.w	r3, [sl]
 8005e88:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8a:	d015      	beq.n	8005eb8 <_vfiprintf_r+0x120>
 8005e8c:	9a07      	ldr	r2, [sp, #28]
 8005e8e:	4654      	mov	r4, sl
 8005e90:	2000      	movs	r0, #0
 8005e92:	f04f 0c0a 	mov.w	ip, #10
 8005e96:	4621      	mov	r1, r4
 8005e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9c:	3b30      	subs	r3, #48	; 0x30
 8005e9e:	2b09      	cmp	r3, #9
 8005ea0:	d94d      	bls.n	8005f3e <_vfiprintf_r+0x1a6>
 8005ea2:	b1b0      	cbz	r0, 8005ed2 <_vfiprintf_r+0x13a>
 8005ea4:	9207      	str	r2, [sp, #28]
 8005ea6:	e014      	b.n	8005ed2 <_vfiprintf_r+0x13a>
 8005ea8:	eba0 0308 	sub.w	r3, r0, r8
 8005eac:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	46a2      	mov	sl, r4
 8005eb6:	e7d2      	b.n	8005e5e <_vfiprintf_r+0xc6>
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	1d19      	adds	r1, r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	9103      	str	r1, [sp, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfbb      	ittet	lt
 8005ec4:	425b      	neglt	r3, r3
 8005ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eca:	9307      	strge	r3, [sp, #28]
 8005ecc:	9307      	strlt	r3, [sp, #28]
 8005ece:	bfb8      	it	lt
 8005ed0:	9204      	strlt	r2, [sp, #16]
 8005ed2:	7823      	ldrb	r3, [r4, #0]
 8005ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ed6:	d10c      	bne.n	8005ef2 <_vfiprintf_r+0x15a>
 8005ed8:	7863      	ldrb	r3, [r4, #1]
 8005eda:	2b2a      	cmp	r3, #42	; 0x2a
 8005edc:	d134      	bne.n	8005f48 <_vfiprintf_r+0x1b0>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	9203      	str	r2, [sp, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb8      	it	lt
 8005eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eee:	3402      	adds	r4, #2
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005fc8 <_vfiprintf_r+0x230>
 8005ef6:	7821      	ldrb	r1, [r4, #0]
 8005ef8:	2203      	movs	r2, #3
 8005efa:	4650      	mov	r0, sl
 8005efc:	f7fa f968 	bl	80001d0 <memchr>
 8005f00:	b138      	cbz	r0, 8005f12 <_vfiprintf_r+0x17a>
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	eba0 000a 	sub.w	r0, r0, sl
 8005f08:	2240      	movs	r2, #64	; 0x40
 8005f0a:	4082      	lsls	r2, r0
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	3401      	adds	r4, #1
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f16:	4829      	ldr	r0, [pc, #164]	; (8005fbc <_vfiprintf_r+0x224>)
 8005f18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	f7fa f957 	bl	80001d0 <memchr>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d03f      	beq.n	8005fa6 <_vfiprintf_r+0x20e>
 8005f26:	4b26      	ldr	r3, [pc, #152]	; (8005fc0 <_vfiprintf_r+0x228>)
 8005f28:	bb1b      	cbnz	r3, 8005f72 <_vfiprintf_r+0x1da>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	3307      	adds	r3, #7
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	3308      	adds	r3, #8
 8005f34:	9303      	str	r3, [sp, #12]
 8005f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f38:	443b      	add	r3, r7
 8005f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3c:	e768      	b.n	8005e10 <_vfiprintf_r+0x78>
 8005f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f42:	460c      	mov	r4, r1
 8005f44:	2001      	movs	r0, #1
 8005f46:	e7a6      	b.n	8005e96 <_vfiprintf_r+0xfe>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	3401      	adds	r4, #1
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4620      	mov	r0, r4
 8005f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f5a:	3a30      	subs	r2, #48	; 0x30
 8005f5c:	2a09      	cmp	r2, #9
 8005f5e:	d903      	bls.n	8005f68 <_vfiprintf_r+0x1d0>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0c6      	beq.n	8005ef2 <_vfiprintf_r+0x15a>
 8005f64:	9105      	str	r1, [sp, #20]
 8005f66:	e7c4      	b.n	8005ef2 <_vfiprintf_r+0x15a>
 8005f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7f0      	b.n	8005f54 <_vfiprintf_r+0x1bc>
 8005f72:	ab03      	add	r3, sp, #12
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	462a      	mov	r2, r5
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <_vfiprintf_r+0x22c>)
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f3af 8000 	nop.w
 8005f82:	4607      	mov	r7, r0
 8005f84:	1c78      	adds	r0, r7, #1
 8005f86:	d1d6      	bne.n	8005f36 <_vfiprintf_r+0x19e>
 8005f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	d405      	bmi.n	8005f9a <_vfiprintf_r+0x202>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d402      	bmi.n	8005f9a <_vfiprintf_r+0x202>
 8005f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f96:	f7ff fcd1 	bl	800593c <__retarget_lock_release_recursive>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	065b      	lsls	r3, r3, #25
 8005f9e:	f53f af1d 	bmi.w	8005ddc <_vfiprintf_r+0x44>
 8005fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fa4:	e71c      	b.n	8005de0 <_vfiprintf_r+0x48>
 8005fa6:	ab03      	add	r3, sp, #12
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	462a      	mov	r2, r5
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <_vfiprintf_r+0x22c>)
 8005fae:	a904      	add	r1, sp, #16
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f000 f879 	bl	80060a8 <_printf_i>
 8005fb6:	e7e4      	b.n	8005f82 <_vfiprintf_r+0x1ea>
 8005fb8:	0800676f 	.word	0x0800676f
 8005fbc:	08006779 	.word	0x08006779
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	08005d75 	.word	0x08005d75
 8005fc8:	08006775 	.word	0x08006775

08005fcc <_printf_common>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	4616      	mov	r6, r2
 8005fd2:	4699      	mov	r9, r3
 8005fd4:	688a      	ldr	r2, [r1, #8]
 8005fd6:	690b      	ldr	r3, [r1, #16]
 8005fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bfb8      	it	lt
 8005fe0:	4613      	movlt	r3, r2
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	b10a      	cbz	r2, 8005ff2 <_printf_common+0x26>
 8005fee:	3301      	adds	r3, #1
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	0699      	lsls	r1, r3, #26
 8005ff6:	bf42      	ittt	mi
 8005ff8:	6833      	ldrmi	r3, [r6, #0]
 8005ffa:	3302      	addmi	r3, #2
 8005ffc:	6033      	strmi	r3, [r6, #0]
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	f015 0506 	ands.w	r5, r5, #6
 8006004:	d106      	bne.n	8006014 <_printf_common+0x48>
 8006006:	f104 0a19 	add.w	sl, r4, #25
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	6832      	ldr	r2, [r6, #0]
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	42ab      	cmp	r3, r5
 8006012:	dc26      	bgt.n	8006062 <_printf_common+0x96>
 8006014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006018:	1e13      	subs	r3, r2, #0
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	bf18      	it	ne
 800601e:	2301      	movne	r3, #1
 8006020:	0692      	lsls	r2, r2, #26
 8006022:	d42b      	bmi.n	800607c <_printf_common+0xb0>
 8006024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006028:	4649      	mov	r1, r9
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d01e      	beq.n	8006070 <_printf_common+0xa4>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	f003 0306 	and.w	r3, r3, #6
 800603a:	2b04      	cmp	r3, #4
 800603c:	bf02      	ittt	eq
 800603e:	68e5      	ldreq	r5, [r4, #12]
 8006040:	6833      	ldreq	r3, [r6, #0]
 8006042:	1aed      	subeq	r5, r5, r3
 8006044:	68a3      	ldr	r3, [r4, #8]
 8006046:	bf0c      	ite	eq
 8006048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800604c:	2500      	movne	r5, #0
 800604e:	4293      	cmp	r3, r2
 8006050:	bfc4      	itt	gt
 8006052:	1a9b      	subgt	r3, r3, r2
 8006054:	18ed      	addgt	r5, r5, r3
 8006056:	2600      	movs	r6, #0
 8006058:	341a      	adds	r4, #26
 800605a:	42b5      	cmp	r5, r6
 800605c:	d11a      	bne.n	8006094 <_printf_common+0xc8>
 800605e:	2000      	movs	r0, #0
 8006060:	e008      	b.n	8006074 <_printf_common+0xa8>
 8006062:	2301      	movs	r3, #1
 8006064:	4652      	mov	r2, sl
 8006066:	4649      	mov	r1, r9
 8006068:	4638      	mov	r0, r7
 800606a:	47c0      	blx	r8
 800606c:	3001      	adds	r0, #1
 800606e:	d103      	bne.n	8006078 <_printf_common+0xac>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	3501      	adds	r5, #1
 800607a:	e7c6      	b.n	800600a <_printf_common+0x3e>
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	2030      	movs	r0, #48	; 0x30
 8006082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006086:	4422      	add	r2, r4
 8006088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800608c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006090:	3302      	adds	r3, #2
 8006092:	e7c7      	b.n	8006024 <_printf_common+0x58>
 8006094:	2301      	movs	r3, #1
 8006096:	4622      	mov	r2, r4
 8006098:	4649      	mov	r1, r9
 800609a:	4638      	mov	r0, r7
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d0e6      	beq.n	8006070 <_printf_common+0xa4>
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7d9      	b.n	800605a <_printf_common+0x8e>
	...

080060a8 <_printf_i>:
 80060a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	7e0f      	ldrb	r7, [r1, #24]
 80060ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060b0:	2f78      	cmp	r7, #120	; 0x78
 80060b2:	4691      	mov	r9, r2
 80060b4:	4680      	mov	r8, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	469a      	mov	sl, r3
 80060ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060be:	d807      	bhi.n	80060d0 <_printf_i+0x28>
 80060c0:	2f62      	cmp	r7, #98	; 0x62
 80060c2:	d80a      	bhi.n	80060da <_printf_i+0x32>
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	f000 80d4 	beq.w	8006272 <_printf_i+0x1ca>
 80060ca:	2f58      	cmp	r7, #88	; 0x58
 80060cc:	f000 80c0 	beq.w	8006250 <_printf_i+0x1a8>
 80060d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d8:	e03a      	b.n	8006150 <_printf_i+0xa8>
 80060da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060de:	2b15      	cmp	r3, #21
 80060e0:	d8f6      	bhi.n	80060d0 <_printf_i+0x28>
 80060e2:	a101      	add	r1, pc, #4	; (adr r1, 80060e8 <_printf_i+0x40>)
 80060e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006155 	.word	0x08006155
 80060f0:	080060d1 	.word	0x080060d1
 80060f4:	080060d1 	.word	0x080060d1
 80060f8:	080060d1 	.word	0x080060d1
 80060fc:	080060d1 	.word	0x080060d1
 8006100:	08006155 	.word	0x08006155
 8006104:	080060d1 	.word	0x080060d1
 8006108:	080060d1 	.word	0x080060d1
 800610c:	080060d1 	.word	0x080060d1
 8006110:	080060d1 	.word	0x080060d1
 8006114:	08006259 	.word	0x08006259
 8006118:	08006181 	.word	0x08006181
 800611c:	08006213 	.word	0x08006213
 8006120:	080060d1 	.word	0x080060d1
 8006124:	080060d1 	.word	0x080060d1
 8006128:	0800627b 	.word	0x0800627b
 800612c:	080060d1 	.word	0x080060d1
 8006130:	08006181 	.word	0x08006181
 8006134:	080060d1 	.word	0x080060d1
 8006138:	080060d1 	.word	0x080060d1
 800613c:	0800621b 	.word	0x0800621b
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	602a      	str	r2, [r5, #0]
 8006148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800614c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006150:	2301      	movs	r3, #1
 8006152:	e09f      	b.n	8006294 <_printf_i+0x1ec>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	0607      	lsls	r7, r0, #24
 800615a:	f103 0104 	add.w	r1, r3, #4
 800615e:	6029      	str	r1, [r5, #0]
 8006160:	d501      	bpl.n	8006166 <_printf_i+0xbe>
 8006162:	681e      	ldr	r6, [r3, #0]
 8006164:	e003      	b.n	800616e <_printf_i+0xc6>
 8006166:	0646      	lsls	r6, r0, #25
 8006168:	d5fb      	bpl.n	8006162 <_printf_i+0xba>
 800616a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800616e:	2e00      	cmp	r6, #0
 8006170:	da03      	bge.n	800617a <_printf_i+0xd2>
 8006172:	232d      	movs	r3, #45	; 0x2d
 8006174:	4276      	negs	r6, r6
 8006176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617a:	485a      	ldr	r0, [pc, #360]	; (80062e4 <_printf_i+0x23c>)
 800617c:	230a      	movs	r3, #10
 800617e:	e012      	b.n	80061a6 <_printf_i+0xfe>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6029      	str	r1, [r5, #0]
 8006188:	0605      	lsls	r5, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xe8>
 800618c:	681e      	ldr	r6, [r3, #0]
 800618e:	e002      	b.n	8006196 <_printf_i+0xee>
 8006190:	0641      	lsls	r1, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xe4>
 8006194:	881e      	ldrh	r6, [r3, #0]
 8006196:	4853      	ldr	r0, [pc, #332]	; (80062e4 <_printf_i+0x23c>)
 8006198:	2f6f      	cmp	r7, #111	; 0x6f
 800619a:	bf0c      	ite	eq
 800619c:	2308      	moveq	r3, #8
 800619e:	230a      	movne	r3, #10
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061a6:	6865      	ldr	r5, [r4, #4]
 80061a8:	60a5      	str	r5, [r4, #8]
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	bfa2      	ittt	ge
 80061ae:	6821      	ldrge	r1, [r4, #0]
 80061b0:	f021 0104 	bicge.w	r1, r1, #4
 80061b4:	6021      	strge	r1, [r4, #0]
 80061b6:	b90e      	cbnz	r6, 80061bc <_printf_i+0x114>
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	d04b      	beq.n	8006254 <_printf_i+0x1ac>
 80061bc:	4615      	mov	r5, r2
 80061be:	fbb6 f1f3 	udiv	r1, r6, r3
 80061c2:	fb03 6711 	mls	r7, r3, r1, r6
 80061c6:	5dc7      	ldrb	r7, [r0, r7]
 80061c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061cc:	4637      	mov	r7, r6
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	460e      	mov	r6, r1
 80061d2:	d9f4      	bls.n	80061be <_printf_i+0x116>
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d10b      	bne.n	80061f0 <_printf_i+0x148>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07de      	lsls	r6, r3, #31
 80061dc:	d508      	bpl.n	80061f0 <_printf_i+0x148>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	6861      	ldr	r1, [r4, #4]
 80061e2:	4299      	cmp	r1, r3
 80061e4:	bfde      	ittt	le
 80061e6:	2330      	movle	r3, #48	; 0x30
 80061e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061f0:	1b52      	subs	r2, r2, r5
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	464b      	mov	r3, r9
 80061fa:	aa03      	add	r2, sp, #12
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fee4 	bl	8005fcc <_printf_common>
 8006204:	3001      	adds	r0, #1
 8006206:	d14a      	bne.n	800629e <_printf_i+0x1f6>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	b004      	add	sp, #16
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	4833      	ldr	r0, [pc, #204]	; (80062e8 <_printf_i+0x240>)
 800621c:	2778      	movs	r7, #120	; 0x78
 800621e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6829      	ldr	r1, [r5, #0]
 8006226:	061f      	lsls	r7, r3, #24
 8006228:	f851 6b04 	ldr.w	r6, [r1], #4
 800622c:	d402      	bmi.n	8006234 <_printf_i+0x18c>
 800622e:	065f      	lsls	r7, r3, #25
 8006230:	bf48      	it	mi
 8006232:	b2b6      	uxthmi	r6, r6
 8006234:	07df      	lsls	r7, r3, #31
 8006236:	bf48      	it	mi
 8006238:	f043 0320 	orrmi.w	r3, r3, #32
 800623c:	6029      	str	r1, [r5, #0]
 800623e:	bf48      	it	mi
 8006240:	6023      	strmi	r3, [r4, #0]
 8006242:	b91e      	cbnz	r6, 800624c <_printf_i+0x1a4>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f023 0320 	bic.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	2310      	movs	r3, #16
 800624e:	e7a7      	b.n	80061a0 <_printf_i+0xf8>
 8006250:	4824      	ldr	r0, [pc, #144]	; (80062e4 <_printf_i+0x23c>)
 8006252:	e7e4      	b.n	800621e <_printf_i+0x176>
 8006254:	4615      	mov	r5, r2
 8006256:	e7bd      	b.n	80061d4 <_printf_i+0x12c>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6826      	ldr	r6, [r4, #0]
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	1d18      	adds	r0, r3, #4
 8006260:	6028      	str	r0, [r5, #0]
 8006262:	0635      	lsls	r5, r6, #24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	d501      	bpl.n	800626c <_printf_i+0x1c4>
 8006268:	6019      	str	r1, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0x1ca>
 800626c:	0670      	lsls	r0, r6, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0x1c0>
 8006270:	8019      	strh	r1, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	4615      	mov	r5, r2
 8006278:	e7bc      	b.n	80061f4 <_printf_i+0x14c>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	681d      	ldr	r5, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	4628      	mov	r0, r5
 8006288:	f7f9 ffa2 	bl	80001d0 <memchr>
 800628c:	b108      	cbz	r0, 8006292 <_printf_i+0x1ea>
 800628e:	1b40      	subs	r0, r0, r5
 8006290:	6060      	str	r0, [r4, #4]
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629c:	e7aa      	b.n	80061f4 <_printf_i+0x14c>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	462a      	mov	r2, r5
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0ad      	beq.n	8006208 <_printf_i+0x160>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d413      	bmi.n	80062da <_printf_i+0x232>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bfb8      	it	lt
 80062ba:	4618      	movlt	r0, r3
 80062bc:	e7a6      	b.n	800620c <_printf_i+0x164>
 80062be:	2301      	movs	r3, #1
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d09d      	beq.n	8006208 <_printf_i+0x160>
 80062cc:	3501      	adds	r5, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dcf2      	bgt.n	80062be <_printf_i+0x216>
 80062d8:	e7eb      	b.n	80062b2 <_printf_i+0x20a>
 80062da:	2500      	movs	r5, #0
 80062dc:	f104 0619 	add.w	r6, r4, #25
 80062e0:	e7f5      	b.n	80062ce <_printf_i+0x226>
 80062e2:	bf00      	nop
 80062e4:	08006780 	.word	0x08006780
 80062e8:	08006791 	.word	0x08006791

080062ec <__swbuf_r>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	460e      	mov	r6, r1
 80062f0:	4614      	mov	r4, r2
 80062f2:	4605      	mov	r5, r0
 80062f4:	b118      	cbz	r0, 80062fe <__swbuf_r+0x12>
 80062f6:	6a03      	ldr	r3, [r0, #32]
 80062f8:	b90b      	cbnz	r3, 80062fe <__swbuf_r+0x12>
 80062fa:	f7ff f9ff 	bl	80056fc <__sinit>
 80062fe:	69a3      	ldr	r3, [r4, #24]
 8006300:	60a3      	str	r3, [r4, #8]
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	071a      	lsls	r2, r3, #28
 8006306:	d525      	bpl.n	8006354 <__swbuf_r+0x68>
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	b31b      	cbz	r3, 8006354 <__swbuf_r+0x68>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	6922      	ldr	r2, [r4, #16]
 8006310:	1a98      	subs	r0, r3, r2
 8006312:	6963      	ldr	r3, [r4, #20]
 8006314:	b2f6      	uxtb	r6, r6
 8006316:	4283      	cmp	r3, r0
 8006318:	4637      	mov	r7, r6
 800631a:	dc04      	bgt.n	8006326 <__swbuf_r+0x3a>
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f7ff fcc0 	bl	8005ca4 <_fflush_r>
 8006324:	b9e0      	cbnz	r0, 8006360 <__swbuf_r+0x74>
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	3b01      	subs	r3, #1
 800632a:	60a3      	str	r3, [r4, #8]
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	6022      	str	r2, [r4, #0]
 8006332:	701e      	strb	r6, [r3, #0]
 8006334:	6962      	ldr	r2, [r4, #20]
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	429a      	cmp	r2, r3
 800633a:	d004      	beq.n	8006346 <__swbuf_r+0x5a>
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	07db      	lsls	r3, r3, #31
 8006340:	d506      	bpl.n	8006350 <__swbuf_r+0x64>
 8006342:	2e0a      	cmp	r6, #10
 8006344:	d104      	bne.n	8006350 <__swbuf_r+0x64>
 8006346:	4621      	mov	r1, r4
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff fcab 	bl	8005ca4 <_fflush_r>
 800634e:	b938      	cbnz	r0, 8006360 <__swbuf_r+0x74>
 8006350:	4638      	mov	r0, r7
 8006352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f000 f806 	bl	8006368 <__swsetup_r>
 800635c:	2800      	cmp	r0, #0
 800635e:	d0d5      	beq.n	800630c <__swbuf_r+0x20>
 8006360:	f04f 37ff 	mov.w	r7, #4294967295
 8006364:	e7f4      	b.n	8006350 <__swbuf_r+0x64>
	...

08006368 <__swsetup_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <__swsetup_r+0xac>)
 800636c:	4605      	mov	r5, r0
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	460c      	mov	r4, r1
 8006372:	b118      	cbz	r0, 800637c <__swsetup_r+0x14>
 8006374:	6a03      	ldr	r3, [r0, #32]
 8006376:	b90b      	cbnz	r3, 800637c <__swsetup_r+0x14>
 8006378:	f7ff f9c0 	bl	80056fc <__sinit>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006382:	0718      	lsls	r0, r3, #28
 8006384:	d422      	bmi.n	80063cc <__swsetup_r+0x64>
 8006386:	06d9      	lsls	r1, r3, #27
 8006388:	d407      	bmi.n	800639a <__swsetup_r+0x32>
 800638a:	2309      	movs	r3, #9
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	e034      	b.n	8006404 <__swsetup_r+0x9c>
 800639a:	0758      	lsls	r0, r3, #29
 800639c:	d512      	bpl.n	80063c4 <__swsetup_r+0x5c>
 800639e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a0:	b141      	cbz	r1, 80063b4 <__swsetup_r+0x4c>
 80063a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063a6:	4299      	cmp	r1, r3
 80063a8:	d002      	beq.n	80063b0 <__swsetup_r+0x48>
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7ff faf4 	bl	8005998 <_free_r>
 80063b0:	2300      	movs	r3, #0
 80063b2:	6363      	str	r3, [r4, #52]	; 0x34
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	2300      	movs	r3, #0
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	f043 0308 	orr.w	r3, r3, #8
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	b94b      	cbnz	r3, 80063e4 <__swsetup_r+0x7c>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063da:	d003      	beq.n	80063e4 <__swsetup_r+0x7c>
 80063dc:	4621      	mov	r1, r4
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f884 	bl	80064ec <__smakebuf_r>
 80063e4:	89a0      	ldrh	r0, [r4, #12]
 80063e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ea:	f010 0301 	ands.w	r3, r0, #1
 80063ee:	d00a      	beq.n	8006406 <__swsetup_r+0x9e>
 80063f0:	2300      	movs	r3, #0
 80063f2:	60a3      	str	r3, [r4, #8]
 80063f4:	6963      	ldr	r3, [r4, #20]
 80063f6:	425b      	negs	r3, r3
 80063f8:	61a3      	str	r3, [r4, #24]
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	b943      	cbnz	r3, 8006410 <__swsetup_r+0xa8>
 80063fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006402:	d1c4      	bne.n	800638e <__swsetup_r+0x26>
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	0781      	lsls	r1, r0, #30
 8006408:	bf58      	it	pl
 800640a:	6963      	ldrpl	r3, [r4, #20]
 800640c:	60a3      	str	r3, [r4, #8]
 800640e:	e7f4      	b.n	80063fa <__swsetup_r+0x92>
 8006410:	2000      	movs	r0, #0
 8006412:	e7f7      	b.n	8006404 <__swsetup_r+0x9c>
 8006414:	20000068 	.word	0x20000068

08006418 <_raise_r>:
 8006418:	291f      	cmp	r1, #31
 800641a:	b538      	push	{r3, r4, r5, lr}
 800641c:	4604      	mov	r4, r0
 800641e:	460d      	mov	r5, r1
 8006420:	d904      	bls.n	800642c <_raise_r+0x14>
 8006422:	2316      	movs	r3, #22
 8006424:	6003      	str	r3, [r0, #0]
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800642e:	b112      	cbz	r2, 8006436 <_raise_r+0x1e>
 8006430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006434:	b94b      	cbnz	r3, 800644a <_raise_r+0x32>
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f830 	bl	800649c <_getpid_r>
 800643c:	462a      	mov	r2, r5
 800643e:	4601      	mov	r1, r0
 8006440:	4620      	mov	r0, r4
 8006442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006446:	f000 b817 	b.w	8006478 <_kill_r>
 800644a:	2b01      	cmp	r3, #1
 800644c:	d00a      	beq.n	8006464 <_raise_r+0x4c>
 800644e:	1c59      	adds	r1, r3, #1
 8006450:	d103      	bne.n	800645a <_raise_r+0x42>
 8006452:	2316      	movs	r3, #22
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	2001      	movs	r0, #1
 8006458:	e7e7      	b.n	800642a <_raise_r+0x12>
 800645a:	2400      	movs	r4, #0
 800645c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006460:	4628      	mov	r0, r5
 8006462:	4798      	blx	r3
 8006464:	2000      	movs	r0, #0
 8006466:	e7e0      	b.n	800642a <_raise_r+0x12>

08006468 <raise>:
 8006468:	4b02      	ldr	r3, [pc, #8]	; (8006474 <raise+0xc>)
 800646a:	4601      	mov	r1, r0
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f7ff bfd3 	b.w	8006418 <_raise_r>
 8006472:	bf00      	nop
 8006474:	20000068 	.word	0x20000068

08006478 <_kill_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_kill_r+0x20>)
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	f7fa fddc 	bl	8001042 <_kill>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d102      	bne.n	8006494 <_kill_r+0x1c>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	b103      	cbz	r3, 8006494 <_kill_r+0x1c>
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	20004244 	.word	0x20004244

0800649c <_getpid_r>:
 800649c:	f7fa bdc9 	b.w	8001032 <_getpid>

080064a0 <__swhatbuf_r>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	460c      	mov	r4, r1
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	2900      	cmp	r1, #0
 80064aa:	b096      	sub	sp, #88	; 0x58
 80064ac:	4615      	mov	r5, r2
 80064ae:	461e      	mov	r6, r3
 80064b0:	da0d      	bge.n	80064ce <__swhatbuf_r+0x2e>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064b8:	f04f 0100 	mov.w	r1, #0
 80064bc:	bf0c      	ite	eq
 80064be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064c2:	2340      	movne	r3, #64	; 0x40
 80064c4:	2000      	movs	r0, #0
 80064c6:	6031      	str	r1, [r6, #0]
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	b016      	add	sp, #88	; 0x58
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	466a      	mov	r2, sp
 80064d0:	f000 f848 	bl	8006564 <_fstat_r>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	dbec      	blt.n	80064b2 <__swhatbuf_r+0x12>
 80064d8:	9901      	ldr	r1, [sp, #4]
 80064da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80064de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80064e2:	4259      	negs	r1, r3
 80064e4:	4159      	adcs	r1, r3
 80064e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ea:	e7eb      	b.n	80064c4 <__swhatbuf_r+0x24>

080064ec <__smakebuf_r>:
 80064ec:	898b      	ldrh	r3, [r1, #12]
 80064ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064f0:	079d      	lsls	r5, r3, #30
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	d507      	bpl.n	8006508 <__smakebuf_r+0x1c>
 80064f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	2301      	movs	r3, #1
 8006502:	6163      	str	r3, [r4, #20]
 8006504:	b002      	add	sp, #8
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	ab01      	add	r3, sp, #4
 800650a:	466a      	mov	r2, sp
 800650c:	f7ff ffc8 	bl	80064a0 <__swhatbuf_r>
 8006510:	9900      	ldr	r1, [sp, #0]
 8006512:	4605      	mov	r5, r0
 8006514:	4630      	mov	r0, r6
 8006516:	f7ff fab3 	bl	8005a80 <_malloc_r>
 800651a:	b948      	cbnz	r0, 8006530 <__smakebuf_r+0x44>
 800651c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006520:	059a      	lsls	r2, r3, #22
 8006522:	d4ef      	bmi.n	8006504 <__smakebuf_r+0x18>
 8006524:	f023 0303 	bic.w	r3, r3, #3
 8006528:	f043 0302 	orr.w	r3, r3, #2
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	e7e3      	b.n	80064f8 <__smakebuf_r+0xc>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	6020      	str	r0, [r4, #0]
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	6163      	str	r3, [r4, #20]
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	6120      	str	r0, [r4, #16]
 8006542:	b15b      	cbz	r3, 800655c <__smakebuf_r+0x70>
 8006544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006548:	4630      	mov	r0, r6
 800654a:	f000 f81d 	bl	8006588 <_isatty_r>
 800654e:	b128      	cbz	r0, 800655c <__smakebuf_r+0x70>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	431d      	orrs	r5, r3
 8006560:	81a5      	strh	r5, [r4, #12]
 8006562:	e7cf      	b.n	8006504 <__smakebuf_r+0x18>

08006564 <_fstat_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	; (8006584 <_fstat_r+0x20>)
 8006568:	2300      	movs	r3, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	f7fa fdc5 	bl	8001100 <_fstat>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d102      	bne.n	8006580 <_fstat_r+0x1c>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	b103      	cbz	r3, 8006580 <_fstat_r+0x1c>
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	bd38      	pop	{r3, r4, r5, pc}
 8006582:	bf00      	nop
 8006584:	20004244 	.word	0x20004244

08006588 <_isatty_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	; (80065a4 <_isatty_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa fdc4 	bl	8001120 <_isatty>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_isatty_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_isatty_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20004244 	.word	0x20004244

080065a8 <_gettimeofday>:
 80065a8:	4b02      	ldr	r3, [pc, #8]	; (80065b4 <_gettimeofday+0xc>)
 80065aa:	2258      	movs	r2, #88	; 0x58
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f04f 30ff 	mov.w	r0, #4294967295
 80065b2:	4770      	bx	lr
 80065b4:	20004244 	.word	0x20004244

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
