
ECE 455 Project 1 Functional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007264  08007264  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800726c  0800726c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041ec  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004258  20004258  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000debc  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028d4  00000000  00000000  0002df9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  00030870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a3f  00000000  00000000  00031608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002402e  00000000  00000000  00032047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fa02  00000000  00000000  00056075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9a00  00000000  00000000  00065a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004190  00000000  00000000  0013f478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00143608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007068 	.word	0x08007068

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007068 	.word	0x08007068

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000088 	.word	0x20000088
 8000dd8:	200000dc 	.word	0x200000dc

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b0bc      	sub	sp, #240	; 0xf0
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f000 ff07 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f903 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 f9f3 	bl	80011d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dee:	f000 f9bb 	bl	8001168 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000df2:	f000 f967 	bl	80010c4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of cars_array_mutex */
  osMutexDef(cars_array_mutex);
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  cars_array_mutexHandle = osMutexCreate(osMutex(cars_array_mutex));
 8000e02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fb4c 	bl	80034a4 <osMutexCreate>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a64      	ldr	r2, [pc, #400]	; (8000fa0 <main+0x1c4>)
 8000e10:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_2_mutex */
  osMutexDef(traffic_rate_2_mutex);
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  traffic_rate_2_mutexHandle = osMutexCreate(osMutex(traffic_rate_2_mutex));
 8000e1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fb3e 	bl	80034a4 <osMutexCreate>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a5e      	ldr	r2, [pc, #376]	; (8000fa4 <main+0x1c8>)
 8000e2c:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_mutex */
  osMutexDef(light_status_mutex);
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  light_status_mutexHandle = osMutexCreate(osMutex(light_status_mutex));
 8000e3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fb30 	bl	80034a4 <osMutexCreate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <main+0x1cc>)
 8000e48:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_1_mutex */
  osMutexDef(traffic_rate_1_mutex);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  traffic_rate_1_mutexHandle = osMutexCreate(osMutex(traffic_rate_1_mutex));
 8000e56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fb22 	bl	80034a4 <osMutexCreate>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a52      	ldr	r2, [pc, #328]	; (8000fac <main+0x1d0>)
 8000e64:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of traffic_queue_1 */
  osMessageQDef(traffic_queue_1, 16, float);
 8000e66:	4b52      	ldr	r3, [pc, #328]	; (8000fb0 <main+0x1d4>)
 8000e68:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_1Handle = osMessageCreate(osMessageQ(traffic_queue_1), NULL);
 8000e72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fbaf 	bl	80035dc <osMessageCreate>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <main+0x1d8>)
 8000e82:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_queue_2 */
  osMessageQDef(traffic_queue_2, 16, float);
 8000e84:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <main+0x1d4>)
 8000e86:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_2Handle = osMessageCreate(osMessageQ(traffic_queue_2), NULL);
 8000e90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fba0 	bl	80035dc <osMessageCreate>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <main+0x1dc>)
 8000ea0:	6013      	str	r3, [r2, #0]

  /* definition and creation of cars_array_queue */
  osMessageQDef(cars_array_queue, 16, uint32_t);
 8000ea2:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <main+0x1d4>)
 8000ea4:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cars_array_queueHandle = osMessageCreate(osMessageQ(cars_array_queue), NULL);
 8000eae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fb91 	bl	80035dc <osMessageCreate>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a3f      	ldr	r2, [pc, #252]	; (8000fbc <main+0x1e0>)
 8000ebe:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_queue */
  osMessageQDef(light_status_queue, 16, uint16_t);
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <main+0x1e4>)
 8000ec2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_status_queueHandle = osMessageCreate(osMessageQ(light_status_queue), NULL);
 8000ecc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fb82 	bl	80035dc <osMessageCreate>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <main+0x1e8>)
 8000edc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ede:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <main+0x1ec>)
 8000ee0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ef2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fa73 	bl	80033e4 <osThreadCreate>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <main+0x1f0>)
 8000f02:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_generat */
  osThreadDef(traffic_generat, TrafficGeneration, osPriorityIdle, 0, 128);
 8000f04:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <main+0x1f4>)
 8000f06:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  traffic_generatHandle = osThreadCreate(osThread(traffic_generat), NULL);
 8000f18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fa60 	bl	80033e4 <osThreadCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a2b      	ldr	r2, [pc, #172]	; (8000fd4 <main+0x1f8>)
 8000f28:	6013      	str	r3, [r2, #0]

  /* definition and creation of adjust_flow */
  osThreadDef(adjust_flow, AdjustFlow, osPriorityIdle, 0, 128);
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <main+0x1fc>)
 8000f2c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f30:	461d      	mov	r5, r3
 8000f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adjust_flowHandle = osThreadCreate(osThread(adjust_flow), NULL);
 8000f3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fa4d 	bl	80033e4 <osThreadCreate>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <main+0x200>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_state */
  osThreadDef(light_state, LightState, osPriorityIdle, 0, 128);
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <main+0x204>)
 8000f52:	f107 0420 	add.w	r4, r7, #32
 8000f56:	461d      	mov	r5, r3
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  light_stateHandle = osThreadCreate(osThread(light_state), NULL);
 8000f64:	f107 0320 	add.w	r3, r7, #32
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fa3a 	bl	80033e4 <osThreadCreate>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <main+0x208>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* definition and creation of sys_manage */
  osThreadDef(sys_manage, SysManage, osPriorityIdle, 0, 128);
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <main+0x20c>)
 8000f78:	1d3c      	adds	r4, r7, #4
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sys_manageHandle = osThreadCreate(osThread(sys_manage), NULL);
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fa29 	bl	80033e4 <osThreadCreate>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <main+0x210>)
 8000f96:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f98:	f002 fa1d 	bl	80033d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000f9c:	e7fe      	b.n	8000f9c <main+0x1c0>
 8000f9e:	bf00      	nop
 8000fa0:	200003a0 	.word	0x200003a0
 8000fa4:	200003a4 	.word	0x200003a4
 8000fa8:	200003a8 	.word	0x200003a8
 8000fac:	200003ac 	.word	0x200003ac
 8000fb0:	08007080 	.word	0x08007080
 8000fb4:	20000390 	.word	0x20000390
 8000fb8:	20000394 	.word	0x20000394
 8000fbc:	20000398 	.word	0x20000398
 8000fc0:	08007090 	.word	0x08007090
 8000fc4:	2000039c 	.word	0x2000039c
 8000fc8:	080070ac 	.word	0x080070ac
 8000fcc:	2000037c 	.word	0x2000037c
 8000fd0:	080070d8 	.word	0x080070d8
 8000fd4:	20000380 	.word	0x20000380
 8000fd8:	08007100 	.word	0x08007100
 8000fdc:	20000384 	.word	0x20000384
 8000fe0:	08007128 	.word	0x08007128
 8000fe4:	20000388 	.word	0x20000388
 8000fe8:	08007150 	.word	0x08007150
 8000fec:	2000038c 	.word	0x2000038c

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 f94d 	bl	800629e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <SystemClock_Config+0xcc>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <SystemClock_Config+0xd0>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001064:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106a:	2302      	movs	r3, #2
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800106e:	2307      	movs	r3, #7
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fc96 	bl	80029a8 <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001082:	f000 fbd5 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	2302      	movs	r3, #2
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001092:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2105      	movs	r1, #5
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fef7 	bl	8002e98 <HAL_RCC_ClockConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b0:	f000 fbbe 	bl	8001830 <Error_Handler>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3750      	adds	r7, #80	; 0x50
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_ADC1_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <MX_ADC1_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_ADC1_Init+0x98>)
 80010de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_ADC1_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <MX_ADC1_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_ADC1_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_ADC1_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_ADC1_Init+0x98>)
 8001126:	f000 fdd7 	bl	8001cd8 <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001130:	f000 fb7e 	bl	8001830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001134:	230d      	movs	r3, #13
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_ADC1_Init+0x98>)
 8001146:	f000 ff75 	bl	8002034 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001150:	f000 fb6e 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002dc 	.word	0x200002dc
 8001160:	40012000 	.word	0x40012000
 8001164:	0f000001 	.word	0x0f000001

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_SPI1_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI1_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI1_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI1_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ba:	f002 f859 	bl	8003270 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c4:	f000 fb34 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000324 	.word	0x20000324
 80011d0:	40013000 	.word	0x40013000

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <MX_GPIO_Init+0x134>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a45      	ldr	r2, [pc, #276]	; (8001308 <MX_GPIO_Init+0x134>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <MX_GPIO_Init+0x134>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <MX_GPIO_Init+0x134>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a3e      	ldr	r2, [pc, #248]	; (8001308 <MX_GPIO_Init+0x134>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <MX_GPIO_Init+0x134>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <MX_GPIO_Init+0x134>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a37      	ldr	r2, [pc, #220]	; (8001308 <MX_GPIO_Init+0x134>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <MX_GPIO_Init+0x134>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <MX_GPIO_Init+0x134>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <MX_GPIO_Init+0x134>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <MX_GPIO_Init+0x134>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <MX_GPIO_Init+0x134>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <MX_GPIO_Init+0x134>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <MX_GPIO_Init+0x134>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 8001276:	2200      	movs	r2, #0
 8001278:	f240 11c7 	movw	r1, #455	; 0x1c7
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_GPIO_Init+0x138>)
 800127e:	f001 fb79 	bl	8002974 <HAL_GPIO_WritePin>
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <MX_GPIO_Init+0x13c>)
 800128a:	f001 fb73 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Red_Light_Pin Amber_Light_Pin Green_Light_Pin Shift_Reg_Data_Pin
                           Shift_Reg_Clock_Pin Shift_Reg_Reset_Pin */
  GPIO_InitStruct.Pin = Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 800128e:	f240 13c7 	movw	r3, #455	; 0x1c7
 8001292:	617b      	str	r3, [r7, #20]
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4819      	ldr	r0, [pc, #100]	; (800130c <MX_GPIO_Init+0x138>)
 80012a8:	f001 f9c8 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012ac:	2304      	movs	r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4815      	ldr	r0, [pc, #84]	; (8001314 <MX_GPIO_Init+0x140>)
 80012c0:	f001 f9bc 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80012c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_GPIO_Init+0x13c>)
 80012de:	f001 f9ad 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_GPIO_Init+0x138>)
 80012fa:	f001 f99f 	bl	800263c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40020400 	.word	0x40020400

08001318 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f002 f8ab 	bl	800347c <osDelay>
 8001326:	e7fb      	b.n	8001320 <StartDefaultTask+0x8>

08001328 <TrafficGeneration>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TrafficGeneration */
void TrafficGeneration(void const * argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TrafficGeneration */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f002 f8a3 	bl	800347c <osDelay>
 8001336:	e7fb      	b.n	8001330 <TrafficGeneration+0x8>

08001338 <AdjustFlow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AdjustFlow */
void AdjustFlow(void const * argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AdjustFlow */
	int raw = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
	float scaled = 0;
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		HAL_ADC_Start(&hadc1);
 800134a:	482d      	ldr	r0, [pc, #180]	; (8001400 <AdjustFlow+0xc8>)
 800134c:	f000 fd08 	bl	8001d60 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	482a      	ldr	r0, [pc, #168]	; (8001400 <AdjustFlow+0xc8>)
 8001356:	f000 fdd5 	bl	8001f04 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 800135a:	4829      	ldr	r0, [pc, #164]	; (8001400 <AdjustFlow+0xc8>)
 800135c:	f000 fe5d 	bl	800201a <HAL_ADC_GetValue>
 8001360:	4603      	mov	r3, r0
 8001362:	60bb      	str	r3, [r7, #8]
		if(raw > 2400){
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800136a:	dd03      	ble.n	8001374 <AdjustFlow+0x3c>
			scaled = 1;
 800136c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e00f      	b.n	8001394 <AdjustFlow+0x5c>
		} else {
			scaled = raw / 2400.0;
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff f8cd 	bl	8000514 <__aeabi_i2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <AdjustFlow+0xcc>)
 8001380:	f7ff fa5c 	bl	800083c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb3e 	bl	8000a0c <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]
		}
		osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <AdjustFlow+0xd0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	4618      	mov	r0, r3
 800139e:	f002 f899 	bl	80034d4 <osMutexWait>
		osMessagePut(traffic_queue_1Handle, scaled, osWaitForever);
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <AdjustFlow+0xd4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	ee17 1a90 	vmov	r1, s15
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 f938 	bl	800362c <osMessagePut>
		osMutexRelease(traffic_rate_1_mutexHandle);
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <AdjustFlow+0xd0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 f8d5 	bl	8003570 <osMutexRelease>
		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <AdjustFlow+0xd8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f04f 31ff 	mov.w	r1, #4294967295
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 f880 	bl	80034d4 <osMutexWait>
		osMessagePut(traffic_queue_2Handle, scaled, osWaitForever);
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <AdjustFlow+0xdc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	ee17 1a90 	vmov	r1, s15
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f91f 	bl	800362c <osMessagePut>
		osMutexRelease(traffic_rate_2_mutexHandle);
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <AdjustFlow+0xd8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f8bc 	bl	8003570 <osMutexRelease>
		osDelay(1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f002 f83f 	bl	800347c <osDelay>
		HAL_ADC_Start(&hadc1);
 80013fe:	e7a4      	b.n	800134a <AdjustFlow+0x12>
 8001400:	200002dc 	.word	0x200002dc
 8001404:	40a2c000 	.word	0x40a2c000
 8001408:	200003ac 	.word	0x200003ac
 800140c:	20000390 	.word	0x20000390
 8001410:	200003a4 	.word	0x200003a4
 8001414:	20000394 	.word	0x20000394

08001418 <trafficGenerated>:
 * @brief Function implementing the light_state thread.
 * @param argument: Not used
 * @retval None
 */

int trafficGenerated(){
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
	float traffic = 0;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
	osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <trafficGenerated+0xa4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f851 	bl	80034d4 <osMutexWait>
	//int traffic = traffic_rate; //TODO: traffic_queue_0
	osEvent event = osMessageGet(traffic_queue_1Handle, 0);
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <trafficGenerated+0xa8>)
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f002 f936 	bl	80036ac <osMessageGet>
	if(event.status == 1){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d106      	bne.n	8001454 <trafficGenerated+0x3c>
		traffic = event.value.v;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001450:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	osMutexRelease(traffic_rate_1_mutexHandle);
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <trafficGenerated+0xa4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f002 f889 	bl	8003570 <osMutexRelease>
	// modulate traffic rate from 1 to 10

	srand(time(NULL));
 800145e:	2000      	movs	r0, #0
 8001460:	f004 ff26 	bl	80062b0 <time>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4613      	mov	r3, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fda6 	bl	8005fbc <srand>
	int random = rand() % 10;
 8001470:	f004 fdd2 	bl	8006018 <rand>
 8001474:	4602      	mov	r2, r0
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <trafficGenerated+0xac>)
 8001478:	fb83 1302 	smull	r1, r3, r3, r2
 800147c:	1099      	asrs	r1, r3, #2
 800147e:	17d3      	asrs	r3, r2, #31
 8001480:	1ac9      	subs	r1, r1, r3
 8001482:	460b      	mov	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	613b      	str	r3, [r7, #16]
	if (random < traffic*10) {
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001498:	edd7 7a05 	vldr	s15, [r7, #20]
 800149c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	d501      	bpl.n	80014b2 <trafficGenerated+0x9a>
		return 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <trafficGenerated+0x9c>
	}
	return 0;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200003ac 	.word	0x200003ac
 80014c0:	20000390 	.word	0x20000390
 80014c4:	66666667 	.word	0x66666667

080014c8 <LightState>:
/* USER CODE END Header_LightState */
void LightState(void const * argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN LightState */
	float rate = 0;
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <LightState+0x1a4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f04f 31ff 	mov.w	r1, #4294967295
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fff8 	bl	80034d4 <osMutexWait>
		// int rate = traffic_rate; // TODO: traffic_queue_1
		osEvent event = osMessageGet(traffic_queue_2Handle, 0);
 80014e4:	4b62      	ldr	r3, [pc, #392]	; (8001670 <LightState+0x1a8>)
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	2200      	movs	r2, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f8dc 	bl	80036ac <osMessageGet>
		if(event.status == 1){
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <LightState+0x40>
			rate = event.value.v;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001504:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
 8001508:	4b58      	ldr	r3, [pc, #352]	; (800166c <LightState+0x1a4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f82f 	bl	8003570 <osMutexRelease>
		// turn green LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2101      	movs	r1, #1
 8001516:	4857      	ldr	r0, [pc, #348]	; (8001674 <LightState+0x1ac>)
 8001518:	f001 fa2c 	bl	8002974 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2102      	movs	r1, #2
 8001520:	4854      	ldr	r0, [pc, #336]	; (8001674 <LightState+0x1ac>)
 8001522:	f001 fa27 	bl	8002974 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2104      	movs	r1, #4
 800152a:	4852      	ldr	r0, [pc, #328]	; (8001674 <LightState+0x1ac>)
 800152c:	f001 fa22 	bl	8002974 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <LightState+0x1b0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	4618      	mov	r0, r3
 800153a:	f001 ffcb 	bl	80034d4 <osMutexWait>
		osMessagePut(light_status_queueHandle, 2, osWaitForever);
 800153e:	4b4f      	ldr	r3, [pc, #316]	; (800167c <LightState+0x1b4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f04f 32ff 	mov.w	r2, #4294967295
 8001546:	2102      	movs	r1, #2
 8001548:	4618      	mov	r0, r3
 800154a:	f002 f86f 	bl	800362c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 800154e:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <LightState+0x1b0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 f80c 	bl	8003570 <osMutexRelease>
		// light_status = 2; //TODO: light_queue_0
		// modulate traffic rate to 1
		osDelay(3000 * rate);
 8001558:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800155c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001680 <LightState+0x1b8>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001568:	ee17 0a90 	vmov	r0, s15
 800156c:	f001 ff86 	bl	800347c <osDelay>

		// turn yellow LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	483f      	ldr	r0, [pc, #252]	; (8001674 <LightState+0x1ac>)
 8001576:	f001 f9fd 	bl	8002974 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2102      	movs	r1, #2
 800157e:	483d      	ldr	r0, [pc, #244]	; (8001674 <LightState+0x1ac>)
 8001580:	f001 f9f8 	bl	8002974 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2104      	movs	r1, #4
 8001588:	483a      	ldr	r0, [pc, #232]	; (8001674 <LightState+0x1ac>)
 800158a:	f001 f9f3 	bl	8002974 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <LightState+0x1b0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f04f 31ff 	mov.w	r1, #4294967295
 8001596:	4618      	mov	r0, r3
 8001598:	f001 ff9c 	bl	80034d4 <osMutexWait>
		osMessagePut(light_status_queueHandle, 1, osWaitForever);
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <LightState+0x1b4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	2101      	movs	r1, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 f840 	bl	800362c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <LightState+0x1b0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 ffdd 	bl	8003570 <osMutexRelease>
		// light_status = 1;
		osDelay(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ba:	f001 ff5f 	bl	800347c <osDelay>

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <LightState+0x1a4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 31ff 	mov.w	r1, #4294967295
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 ff84 	bl	80034d4 <osMutexWait>
		event = osMessageGet(traffic_queue_2Handle, 0); //TODO: traffic_queue_1
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <LightState+0x1a8>)
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 f869 	bl	80036ac <osMessageGet>
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	463a      	mov	r2, r7
 80015e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == 1){
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <LightState+0x132>
			rate = event.value.v;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <LightState+0x1a4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 ffb6 	bl	8003570 <osMutexRelease>
		// turn red LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2101      	movs	r1, #1
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <LightState+0x1ac>)
 800160a:	f001 f9b3 	bl	8002974 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <LightState+0x1ac>)
 8001614:	f001 f9ae 	bl	8002974 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2104      	movs	r1, #4
 800161c:	4815      	ldr	r0, [pc, #84]	; (8001674 <LightState+0x1ac>)
 800161e:	f001 f9a9 	bl	8002974 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <LightState+0x1b0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f04f 31ff 	mov.w	r1, #4294967295
 800162a:	4618      	mov	r0, r3
 800162c:	f001 ff52 	bl	80034d4 <osMutexWait>
		osMessagePut(light_status_queueHandle, 0, osWaitForever);
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <LightState+0x1b4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fff6 	bl	800362c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <LightState+0x1b0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f001 ff93 	bl	8003570 <osMutexRelease>
		// light_status = 0;
		// modulate traffic rate to 1
		osDelay(3000 * (1-rate));
 800164a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800164e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001680 <LightState+0x1b8>
 800165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001662:	ee17 0a90 	vmov	r0, s15
 8001666:	f001 ff09 	bl	800347c <osDelay>
	{
 800166a:	e734      	b.n	80014d6 <LightState+0xe>
 800166c:	200003a4 	.word	0x200003a4
 8001670:	20000394 	.word	0x20000394
 8001674:	40020800 	.word	0x40020800
 8001678:	200003a8 	.word	0x200003a8
 800167c:	2000039c 	.word	0x2000039c
 8001680:	453b8000 	.word	0x453b8000

08001684 <SysManage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SysManage */
void SysManage(void const * argument)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b098      	sub	sp, #96	; 0x60
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SysManage */
	/* Infinite loop */
	int i;
	int cars[16];
	int light_colour = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	65bb      	str	r3, [r7, #88]	; 0x58
	for(;;)
	{
		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001690:	4b64      	ldr	r3, [pc, #400]	; (8001824 <SysManage+0x1a0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	4618      	mov	r0, r3
 800169a:	f001 ff1b 	bl	80034d4 <osMutexWait>
		osEvent event = osMessageGet(light_status_queueHandle, 0); //TODO: light_queue_0
 800169e:	4b62      	ldr	r3, [pc, #392]	; (8001828 <SysManage+0x1a4>)
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2200      	movs	r2, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 ffff 	bl	80036ac <osMessageGet>
		if(event.status == 1){
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <SysManage+0x34>
			light_colour = event.value.v;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		osMutexRelease(light_status_mutexHandle);
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <SysManage+0x1a0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 ff57 	bl	8003570 <osMutexRelease>

		// osMutexWait(cars_array_mutexHandle); //TODO: cars_queue_0
		for (i = 15; i>0; i--){
 80016c2:	230f      	movs	r3, #15
 80016c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016c6:	e08e      	b.n	80017e6 <SysManage+0x162>
			if (light_colour == 2) { //green
 80016c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d115      	bne.n	80016fa <SysManage+0x76>
				cars[i] = cars[i-1];
 80016ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d0:	3b01      	subs	r3, #1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	3360      	adds	r3, #96	; 0x60
 80016d6:	443b      	add	r3, r7
 80016d8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80016dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	3360      	adds	r3, #96	; 0x60
 80016e2:	443b      	add	r3, r7
 80016e4:	f843 2c48 	str.w	r2, [r3, #-72]
				cars[i - 1] = 0;
 80016e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ea:	3b01      	subs	r3, #1
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	3360      	adds	r3, #96	; 0x60
 80016f0:	443b      	add	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	f843 2c48 	str.w	r2, [r3, #-72]
 80016f8:	e072      	b.n	80017e0 <SysManage+0x15c>
			}
			else if (light_colour == 1) { //yellow
 80016fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d136      	bne.n	800176e <SysManage+0xea>
				if (i > 8) {
 8001700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001702:	2b08      	cmp	r3, #8
 8001704:	dd15      	ble.n	8001732 <SysManage+0xae>
					cars[i] = cars[i-1];
 8001706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001708:	3b01      	subs	r3, #1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	3360      	adds	r3, #96	; 0x60
 800170e:	443b      	add	r3, r7
 8001710:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3360      	adds	r3, #96	; 0x60
 800171a:	443b      	add	r3, r7
 800171c:	f843 2c48 	str.w	r2, [r3, #-72]
					cars[i-1] = 0;
 8001720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001722:	3b01      	subs	r3, #1
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	3360      	adds	r3, #96	; 0x60
 8001728:	443b      	add	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	f843 2c48 	str.w	r2, [r3, #-72]
 8001730:	e056      	b.n	80017e0 <SysManage+0x15c>
				}
				else {
					if (!cars[i]){
 8001732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	3360      	adds	r3, #96	; 0x60
 8001738:	443b      	add	r3, r7
 800173a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d14e      	bne.n	80017e0 <SysManage+0x15c>
						cars[i] = cars[i-1];
 8001742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001744:	3b01      	subs	r3, #1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	3360      	adds	r3, #96	; 0x60
 800174a:	443b      	add	r3, r7
 800174c:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	3360      	adds	r3, #96	; 0x60
 8001756:	443b      	add	r3, r7
 8001758:	f843 2c48 	str.w	r2, [r3, #-72]
						cars[i-1] = 0;
 800175c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175e:	3b01      	subs	r3, #1
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	3360      	adds	r3, #96	; 0x60
 8001764:	443b      	add	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	f843 2c48 	str.w	r2, [r3, #-72]
 800176c:	e038      	b.n	80017e0 <SysManage+0x15c>
					}
				}
			}
			else { //red
				if (i > 11){
 800176e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001770:	2b0b      	cmp	r3, #11
 8001772:	dd15      	ble.n	80017a0 <SysManage+0x11c>
					cars[i] = cars[i-1];
 8001774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001776:	3b01      	subs	r3, #1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	3360      	adds	r3, #96	; 0x60
 800177c:	443b      	add	r3, r7
 800177e:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	3360      	adds	r3, #96	; 0x60
 8001788:	443b      	add	r3, r7
 800178a:	f843 2c48 	str.w	r2, [r3, #-72]
					cars[i-1] = 0;
 800178e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001790:	3b01      	subs	r3, #1
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	3360      	adds	r3, #96	; 0x60
 8001796:	443b      	add	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	f843 2c48 	str.w	r2, [r3, #-72]
 800179e:	e01f      	b.n	80017e0 <SysManage+0x15c>
				}
				else if (i < 8){
 80017a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	dc1c      	bgt.n	80017e0 <SysManage+0x15c>
					if (!cars[i]) {
 80017a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	3360      	adds	r3, #96	; 0x60
 80017ac:	443b      	add	r3, r7
 80017ae:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d114      	bne.n	80017e0 <SysManage+0x15c>
						cars[i] = cars[i-1];
 80017b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b8:	3b01      	subs	r3, #1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	3360      	adds	r3, #96	; 0x60
 80017be:	443b      	add	r3, r7
 80017c0:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80017c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	3360      	adds	r3, #96	; 0x60
 80017ca:	443b      	add	r3, r7
 80017cc:	f843 2c48 	str.w	r2, [r3, #-72]
						cars[i-1] = 0;
 80017d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d2:	3b01      	subs	r3, #1
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	3360      	adds	r3, #96	; 0x60
 80017d8:	443b      	add	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	f843 2c48 	str.w	r2, [r3, #-72]
		for (i = 15; i>0; i--){
 80017e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e2:	3b01      	subs	r3, #1
 80017e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f73f af6d 	bgt.w	80016c8 <SysManage+0x44>
					}
				}
			}
		}
		if (trafficGenerated()){
 80017ee:	f7ff fe13 	bl	8001418 <trafficGenerated>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <SysManage+0x17a>
			cars[0] = 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	e001      	b.n	8001802 <SysManage+0x17e>
		}
		else {
			cars[0] = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
		}
		// osMutexRelease(cars_array_mutexHandle);
		osMutexWait(cars_array_mutexHandle, osWaitForever);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <SysManage+0x1a8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f04f 31ff 	mov.w	r1, #4294967295
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fe62 	bl	80034d4 <osMutexWait>
		// int* mail = (int *)osMailAlloc(cars_array_queueHandle, osWaitForever);
		//osMailPut(cars_array_queueHandle, cars);
		osMutexRelease(cars_array_mutexHandle);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SysManage+0x1a8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f001 feab 	bl	8003570 <osMutexRelease>
		osDelay(500);
 800181a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800181e:	f001 fe2d 	bl	800347c <osDelay>
	{
 8001822:	e735      	b.n	8001690 <SysManage+0xc>
 8001824:	200003a8 	.word	0x200003a8
 8001828:	2000039c 	.word	0x2000039c
 800182c:	200003a0 	.word	0x200003a0

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001838:	e7fe      	b.n	8001838 <Error_Handler+0x8>
	...

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_MspInit+0x54>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_MspInit+0x54>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x54>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_MspInit+0x54>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_MspInit+0x54>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_MspInit+0x54>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	210f      	movs	r1, #15
 800187e:	f06f 0001 	mvn.w	r0, #1
 8001882:	f000 feb2 	bl	80025ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_ADC_MspInit+0x7c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d127      	bne.n	8001906 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_ADC_MspInit+0x80>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <HAL_ADC_MspInit+0x80>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_ADC_MspInit+0x80>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_ADC_MspInit+0x80>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_ADC_MspInit+0x80>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_ADC_MspInit+0x80>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Pot_In_Pin;
 80018ee:	2308      	movs	r3, #8
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f2:	2303      	movs	r3, #3
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_In_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <HAL_ADC_MspInit+0x84>)
 8001902:	f000 fe9b 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40012000 	.word	0x40012000
 8001914:	40023800 	.word	0x40023800
 8001918:	40020800 	.word	0x40020800

0800191c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_SPI_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001976:	23e0      	movs	r3, #224	; 0xe0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001986:	2305      	movs	r3, #5
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_SPI_MspInit+0x8c>)
 8001992:	f000 fe53 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019dc:	f000 f95c 	bl	8001c98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019e0:	f003 fc92 	bl	8005308 <xTaskGetSchedulerState>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80019ea:	f004 f86d 	bl	8005ac8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  return 1;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_kill>:

int _kill(int pid, int sig)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0c:	f004 fcc2 	bl	8006394 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2216      	movs	r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_exit>:

void _exit (int status)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffe7 	bl	8001a02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a34:	e7fe      	b.n	8001a34 <_exit+0x12>

08001a36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e00a      	b.n	8001a5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a48:	f3af 8000 	nop.w
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60ba      	str	r2, [r7, #8]
 8001a54:	b2ca      	uxtb	r2, r1
 8001a56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbf0      	blt.n	8001a48 <_read+0x12>
  }

  return len;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e009      	b.n	8001a96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbf1      	blt.n	8001a82 <_write+0x12>
  }
  return len;
 8001a9e:	687b      	ldr	r3, [r7, #4]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_close>:

int _close(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_isatty>:

int _isatty(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f004 fc28 	bl	8006394 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20020000 	.word	0x20020000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	200003b0 	.word	0x200003b0
 8001b78:	20004258 	.word	0x20004258

08001b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <SystemInit+0x20>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <SystemInit+0x20>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ba4:	f7ff ffea 	bl	8001b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bce:	f004 fbe7 	bl	80063a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7ff f903 	bl	8000ddc <main>
  bx  lr    
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001be4:	08007274 	.word	0x08007274
  ldr r2, =_sbss
 8001be8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bec:	20004258 	.word	0x20004258

08001bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 fcd9 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fe08 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fce3 	bl	8002622 <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 fcb9 	bl	80025ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	200003b4 	.word	0x200003b4

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200003b4 	.word	0x200003b4

08001cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e033      	b.n	8001d56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fdcc 	bl	8001894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d1e:	f023 0302 	bic.w	r3, r3, #2
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 faa4 	bl	8002278 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
 8001d46:	e001      	b.n	8001d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Start+0x1a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0b2      	b.n	8001ee0 <HAL_ADC_Start+0x180>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d018      	beq.n	8001dc2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da0:	4b52      	ldr	r3, [pc, #328]	; (8001eec <HAL_ADC_Start+0x18c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_ADC_Start+0x190>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9a      	lsrs	r2, r3, #18
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d17a      	bne.n	8001ec6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0e:	d106      	bne.n	8001e1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	f023 0206 	bic.w	r2, r3, #6
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e1c:	e002      	b.n	8001e24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_ADC_Start+0x194>)
 8001e2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e38:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d12a      	bne.n	8001e9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_ADC_Start+0x198>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d015      	beq.n	8001e7c <HAL_ADC_Start+0x11c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a29      	ldr	r2, [pc, #164]	; (8001efc <HAL_ADC_Start+0x19c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d105      	bne.n	8001e66 <HAL_ADC_Start+0x106>
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_ADC_Start+0x194>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <HAL_ADC_Start+0x1a0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d136      	bne.n	8001ede <HAL_ADC_Start+0x17e>
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_ADC_Start+0x194>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d130      	bne.n	8001ede <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d129      	bne.n	8001ede <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	e020      	b.n	8001ede <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <HAL_ADC_Start+0x198>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d11b      	bne.n	8001ede <HAL_ADC_Start+0x17e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d114      	bne.n	8001ede <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e00b      	b.n	8001ede <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	431bde83 	.word	0x431bde83
 8001ef4:	40012300 	.word	0x40012300
 8001ef8:	40012000 	.word	0x40012000
 8001efc:	40012100 	.word	0x40012100
 8001f00:	40012200 	.word	0x40012200

08001f04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f20:	d113      	bne.n	8001f4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f30:	d10b      	bne.n	8001f4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e063      	b.n	8002012 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f4a:	f7ff feb9 	bl	8001cc0 <HAL_GetTick>
 8001f4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f50:	e021      	b.n	8001f96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d01d      	beq.n	8001f96 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_ADC_PollForConversion+0x6c>
 8001f60:	f7ff feae 	bl	8001cc0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d212      	bcs.n	8001f96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d00b      	beq.n	8001f96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f043 0204 	orr.w	r2, r3, #4
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e03d      	b.n	8002012 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d1d6      	bne.n	8001f52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0212 	mvn.w	r2, #18
 8001fac:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d123      	bne.n	8002010 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d11f      	bne.n	8002010 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1c>
 800204c:	2302      	movs	r3, #2
 800204e:	e105      	b.n	800225c <HAL_ADC_ConfigChannel+0x228>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b09      	cmp	r3, #9
 800205e:	d925      	bls.n	80020ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68d9      	ldr	r1, [r3, #12]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	3b1e      	subs	r3, #30
 8002076:	2207      	movs	r2, #7
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43da      	mvns	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	400a      	ands	r2, r1
 8002084:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	4603      	mov	r3, r0
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4403      	add	r3, r0
 800209e:	3b1e      	subs	r3, #30
 80020a0:	409a      	lsls	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	e022      	b.n	80020f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6919      	ldr	r1, [r3, #16]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	2207      	movs	r2, #7
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6919      	ldr	r1, [r3, #16]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4403      	add	r3, r0
 80020e8:	409a      	lsls	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d824      	bhi.n	8002144 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b05      	subs	r3, #5
 800210c:	221f      	movs	r2, #31
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b05      	subs	r3, #5
 8002136:	fa00 f203 	lsl.w	r2, r0, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
 8002142:	e04c      	b.n	80021de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d824      	bhi.n	8002196 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b23      	subs	r3, #35	; 0x23
 800215e:	221f      	movs	r2, #31
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43da      	mvns	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	400a      	ands	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	4618      	mov	r0, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b23      	subs	r3, #35	; 0x23
 8002188:	fa00 f203 	lsl.w	r2, r0, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
 8002194:	e023      	b.n	80021de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b41      	subs	r3, #65	; 0x41
 80021a8:	221f      	movs	r2, #31
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	400a      	ands	r2, r1
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3b41      	subs	r3, #65	; 0x41
 80021d2:	fa00 f203 	lsl.w	r2, r0, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <HAL_ADC_ConfigChannel+0x234>)
 80021e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a21      	ldr	r2, [pc, #132]	; (800226c <HAL_ADC_ConfigChannel+0x238>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d109      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1cc>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b12      	cmp	r3, #18
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_ADC_ConfigChannel+0x238>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d123      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x21e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d003      	beq.n	800221a <HAL_ADC_ConfigChannel+0x1e6>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b11      	cmp	r3, #17
 8002218:	d11b      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b10      	cmp	r3, #16
 800222c:	d111      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_ADC_ConfigChannel+0x23c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_ADC_ConfigChannel+0x240>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	0c9a      	lsrs	r2, r3, #18
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002244:	e002      	b.n	800224c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40012300 	.word	0x40012300
 800226c:	40012000 	.word	0x40012000
 8002270:	20000000 	.word	0x20000000
 8002274:	431bde83 	.word	0x431bde83

08002278 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002280:	4b79      	ldr	r3, [pc, #484]	; (8002468 <ADC_Init+0x1f0>)
 8002282:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	021a      	lsls	r2, r3, #8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	4a58      	ldr	r2, [pc, #352]	; (800246c <ADC_Init+0x1f4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d022      	beq.n	8002356 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800231e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e00f      	b.n	8002376 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002374:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0202 	bic.w	r2, r2, #2
 8002384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e1b      	ldrb	r3, [r3, #24]
 8002390:	005a      	lsls	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01b      	beq.n	80023dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6859      	ldr	r1, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	3b01      	subs	r3, #1
 80023d0:	035a      	lsls	r2, r3, #13
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	e007      	b.n	80023ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	3b01      	subs	r3, #1
 8002408:	051a      	lsls	r2, r3, #20
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800242e:	025a      	lsls	r2, r3, #9
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	029a      	lsls	r2, r3, #10
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40012300 	.word	0x40012300
 800246c:	0f000001 	.word	0x0f000001

08002470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800248c:	4013      	ands	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	60d3      	str	r3, [r2, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <__NVIC_GetPriorityGrouping+0x18>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 0307 	and.w	r3, r3, #7
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	; (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	; (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff47 	bl	8002470 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff5c 	bl	80024b8 <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff8e 	bl	8002528 <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5d 	bl	80024d4 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffb0 	bl	8002590 <SysTick_Config>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e16b      	b.n	8002930 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	429a      	cmp	r2, r3
 8002672:	f040 815a 	bne.w	800292a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d005      	beq.n	800268e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	2b02      	cmp	r3, #2
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d017      	beq.n	800272c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80b4 	beq.w	800292a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b60      	ldr	r3, [pc, #384]	; (8002948 <HAL_GPIO_Init+0x30c>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a5f      	ldr	r2, [pc, #380]	; (8002948 <HAL_GPIO_Init+0x30c>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_GPIO_Init+0x30c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027de:	4a5b      	ldr	r2, [pc, #364]	; (800294c <HAL_GPIO_Init+0x310>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x314>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d02b      	beq.n	8002862 <HAL_GPIO_Init+0x226>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a51      	ldr	r2, [pc, #324]	; (8002954 <HAL_GPIO_Init+0x318>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d025      	beq.n	800285e <HAL_GPIO_Init+0x222>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a50      	ldr	r2, [pc, #320]	; (8002958 <HAL_GPIO_Init+0x31c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01f      	beq.n	800285a <HAL_GPIO_Init+0x21e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x320>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_GPIO_Init+0x21a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_GPIO_Init+0x324>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0x216>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x328>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00d      	beq.n	800284e <HAL_GPIO_Init+0x212>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_GPIO_Init+0x32c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_GPIO_Init+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4b      	ldr	r2, [pc, #300]	; (800296c <HAL_GPIO_Init+0x330>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_GPIO_Init+0x20a>
 8002842:	2307      	movs	r3, #7
 8002844:	e00e      	b.n	8002864 <HAL_GPIO_Init+0x228>
 8002846:	2308      	movs	r3, #8
 8002848:	e00c      	b.n	8002864 <HAL_GPIO_Init+0x228>
 800284a:	2306      	movs	r3, #6
 800284c:	e00a      	b.n	8002864 <HAL_GPIO_Init+0x228>
 800284e:	2305      	movs	r3, #5
 8002850:	e008      	b.n	8002864 <HAL_GPIO_Init+0x228>
 8002852:	2304      	movs	r3, #4
 8002854:	e006      	b.n	8002864 <HAL_GPIO_Init+0x228>
 8002856:	2303      	movs	r3, #3
 8002858:	e004      	b.n	8002864 <HAL_GPIO_Init+0x228>
 800285a:	2302      	movs	r3, #2
 800285c:	e002      	b.n	8002864 <HAL_GPIO_Init+0x228>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_GPIO_Init+0x228>
 8002862:	2300      	movs	r3, #0
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f002 0203 	and.w	r2, r2, #3
 800286a:	0092      	lsls	r2, r2, #2
 800286c:	4093      	lsls	r3, r2
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002874:	4935      	ldr	r1, [pc, #212]	; (800294c <HAL_GPIO_Init+0x310>)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	089b      	lsrs	r3, r3, #2
 800287a:	3302      	adds	r3, #2
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002882:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_GPIO_Init+0x334>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028a6:	4a32      	ldr	r2, [pc, #200]	; (8002970 <HAL_GPIO_Init+0x334>)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_GPIO_Init+0x334>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_GPIO_Init+0x334>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_GPIO_Init+0x334>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028fa:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_GPIO_Init+0x334>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_GPIO_Init+0x334>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002924:	4a12      	ldr	r2, [pc, #72]	; (8002970 <HAL_GPIO_Init+0x334>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3301      	adds	r3, #1
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b0f      	cmp	r3, #15
 8002934:	f67f ae90 	bls.w	8002658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	40013800 	.word	0x40013800
 8002950:	40020000 	.word	0x40020000
 8002954:	40020400 	.word	0x40020400
 8002958:	40020800 	.word	0x40020800
 800295c:	40020c00 	.word	0x40020c00
 8002960:	40021000 	.word	0x40021000
 8002964:	40021400 	.word	0x40021400
 8002968:	40021800 	.word	0x40021800
 800296c:	40021c00 	.word	0x40021c00
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e267      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c6:	4b88      	ldr	r3, [pc, #544]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d2:	4b85      	ldr	r3, [pc, #532]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d112      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b82      	ldr	r3, [pc, #520]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	4b7e      	ldr	r3, [pc, #504]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05b      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d157      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e242      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x74>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b70      	ldr	r3, [pc, #448]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6c      	ldr	r2, [pc, #432]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a40:	4b69      	ldr	r3, [pc, #420]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a68      	ldr	r2, [pc, #416]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a65      	ldr	r2, [pc, #404]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff f92e 	bl	8001cc0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7ff f92a 	bl	8001cc0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e207      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff f91a 	bl	8001cc0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f916 	bl	8001cc0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1f3      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1c7      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4937      	ldr	r1, [pc, #220]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7ff f8cf 	bl	8001cc0 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b26:	f7ff f8cb 	bl	8001cc0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1a8      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4925      	ldr	r1, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7ff f8ae 	bl	8001cc0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b68:	f7ff f8aa 	bl	8001cc0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e187      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d036      	beq.n	8002c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff f88e 	bl	8001cc0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff f88a 	bl	8001cc0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e167      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x200>
 8002bc6:	e01b      	b.n	8002c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7ff f877 	bl	8001cc0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e00e      	b.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7ff f873 	bl	8001cc0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d907      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e150      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470000 	.word	0x42470000
 8002bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ea      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8097 	beq.w	8002d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b81      	ldr	r3, [pc, #516]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b7d      	ldr	r3, [pc, #500]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a7c      	ldr	r2, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b7a      	ldr	r3, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b77      	ldr	r3, [pc, #476]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b74      	ldr	r3, [pc, #464]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a73      	ldr	r2, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7ff f833 	bl	8001cc0 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7ff f82f 	bl	8001cc0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e10c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2ea>
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x30c>
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a5e      	ldr	r2, [pc, #376]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a5b      	ldr	r2, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002cb4:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a54      	ldr	r2, [pc, #336]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fff4 	bl	8001cc0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fff0 	bl	8001cc0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0cb      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <HAL_RCC_OscConfig+0x334>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7fe ffde 	bl	8001cc0 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe ffda 	bl	8001cc0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0b5      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a1 	beq.w	8002e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d05c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d141      	bne.n	8002dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe ffae 	bl	8001cc0 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe ffaa 	bl	8001cc0 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e087      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	491b      	ldr	r1, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe ff83 	bl	8001cc0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe ff7f 	bl	8001cc0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e05c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x416>
 8002ddc:	e054      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe ff6c 	bl	8001cc0 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe ff68 	bl	8001cc0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e045      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x444>
 8002e0a:	e03d      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e038      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4ec>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d028      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d121      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d11a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cc      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e067      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4934      	ldr	r1, [pc, #208]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fe9a 	bl	8001cc0 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe fe96 	bl	8001cc0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d20c      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fdfa 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00
 8003054:	40023800 	.word	0x40023800
 8003058:	08007174 	.word	0x08007174
 800305c:	20000000 	.word	0x20000000
 8003060:	20000004 	.word	0x20000004

08003064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b094      	sub	sp, #80	; 0x50
 800306a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	647b      	str	r3, [r7, #68]	; 0x44
 8003070:	2300      	movs	r3, #0
 8003072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003074:	2300      	movs	r3, #0
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800307c:	4b79      	ldr	r3, [pc, #484]	; (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d00d      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003088:	2b08      	cmp	r3, #8
 800308a:	f200 80e1 	bhi.w	8003250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x34>
 8003092:	2b04      	cmp	r3, #4
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x3a>
 8003096:	e0db      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b73      	ldr	r3, [pc, #460]	; (8003268 <HAL_RCC_GetSysClockFreq+0x204>)
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800309c:	e0db      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309e:	4b73      	ldr	r3, [pc, #460]	; (800326c <HAL_RCC_GetSysClockFreq+0x208>)
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a2:	e0d8      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a4:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ae:	4b6d      	ldr	r3, [pc, #436]	; (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	2200      	movs	r2, #0
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
 80030ce:	2300      	movs	r3, #0
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
 80030d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030d6:	4622      	mov	r2, r4
 80030d8:	462b      	mov	r3, r5
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e8:	0150      	lsls	r0, r2, #5
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4621      	mov	r1, r4
 80030f0:	1a51      	subs	r1, r2, r1
 80030f2:	6139      	str	r1, [r7, #16]
 80030f4:	4629      	mov	r1, r5
 80030f6:	eb63 0301 	sbc.w	r3, r3, r1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003108:	4659      	mov	r1, fp
 800310a:	018b      	lsls	r3, r1, #6
 800310c:	4651      	mov	r1, sl
 800310e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003112:	4651      	mov	r1, sl
 8003114:	018a      	lsls	r2, r1, #6
 8003116:	4651      	mov	r1, sl
 8003118:	ebb2 0801 	subs.w	r8, r2, r1
 800311c:	4659      	mov	r1, fp
 800311e:	eb63 0901 	sbc.w	r9, r3, r1
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003136:	4690      	mov	r8, r2
 8003138:	4699      	mov	r9, r3
 800313a:	4623      	mov	r3, r4
 800313c:	eb18 0303 	adds.w	r3, r8, r3
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	462b      	mov	r3, r5
 8003144:	eb49 0303 	adc.w	r3, r9, r3
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003156:	4629      	mov	r1, r5
 8003158:	024b      	lsls	r3, r1, #9
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003160:	4621      	mov	r1, r4
 8003162:	024a      	lsls	r2, r1, #9
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
 800316e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003174:	f7fd fc9a 	bl	8000aac <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003180:	e058      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	099b      	lsrs	r3, r3, #6
 8003188:	2200      	movs	r2, #0
 800318a:	4618      	mov	r0, r3
 800318c:	4611      	mov	r1, r2
 800318e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
 80031a0:	f04f 0000 	mov.w	r0, #0
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	0159      	lsls	r1, r3, #5
 80031aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ae:	0150      	lsls	r0, r2, #5
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4641      	mov	r1, r8
 80031b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ba:	4649      	mov	r1, r9
 80031bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d4:	ebb2 040a 	subs.w	r4, r2, sl
 80031d8:	eb63 050b 	sbc.w	r5, r3, fp
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	00eb      	lsls	r3, r5, #3
 80031e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ea:	00e2      	lsls	r2, r4, #3
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	18e3      	adds	r3, r4, r3
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	464b      	mov	r3, r9
 80031f8:	eb45 0303 	adc.w	r3, r5, r3
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320a:	4629      	mov	r1, r5
 800320c:	028b      	lsls	r3, r1, #10
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003214:	4621      	mov	r1, r4
 8003216:	028a      	lsls	r2, r1, #10
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321e:	2200      	movs	r2, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	61fa      	str	r2, [r7, #28]
 8003224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003228:	f7fd fc40 	bl	8000aac <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_GetSysClockFreq+0x200>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	3301      	adds	r3, #1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800324e:	e002      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetSysClockFreq+0x204>)
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003258:	4618      	mov	r0, r3
 800325a:	3750      	adds	r7, #80	; 0x50
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	00f42400 	.word	0x00f42400
 800326c:	007a1200 	.word	0x007a1200

08003270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07b      	b.n	800337a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003292:	d009      	beq.n	80032a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
 800329a:	e005      	b.n	80032a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe fb2a 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332c:	ea42 0103 	orr.w	r1, r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	f003 0104 	and.w	r1, r3, #4
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f003 0210 	and.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003394:	2b84      	cmp	r3, #132	; 0x84
 8003396:	d005      	beq.n	80033a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003398:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	3303      	adds	r3, #3
 80033a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033a4:	68fb      	ldr	r3, [r7, #12]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b8:	f3ef 8305 	mrs	r3, IPSR
 80033bc:	607b      	str	r3, [r7, #4]
  return(result);
 80033be:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033da:	f001 fb97 	bl	8004b0c <vTaskStartScheduler>
  
  return osOK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af04      	add	r7, sp, #16
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <osThreadCreate+0x54>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01c      	beq.n	8003438 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685c      	ldr	r4, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691e      	ldr	r6, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ffb6 	bl	8003382 <makeFreeRtosPriority>
 8003416:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003420:	9202      	str	r2, [sp, #8]
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	9100      	str	r1, [sp, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4632      	mov	r2, r6
 800342a:	4629      	mov	r1, r5
 800342c:	4620      	mov	r0, r4
 800342e:	f001 f9a5 	bl	800477c <xTaskCreateStatic>
 8003432:	4603      	mov	r3, r0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e01c      	b.n	8003472 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685c      	ldr	r4, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003444:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff98 	bl	8003382 <makeFreeRtosPriority>
 8003452:	4602      	mov	r2, r0
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	9200      	str	r2, [sp, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4632      	mov	r2, r6
 8003460:	4629      	mov	r1, r5
 8003462:	4620      	mov	r0, r4
 8003464:	f001 f9e7 	bl	8004836 <xTaskCreate>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800347c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <osDelay+0x16>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	e000      	b.n	8003494 <osDelay+0x18>
 8003492:	2301      	movs	r3, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fb05 	bl	8004aa4 <vTaskDelay>
  
  return osOK;
 800349a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4619      	mov	r1, r3
 80034ba:	2001      	movs	r0, #1
 80034bc:	f000 fb89 	bl	8003bd2 <xQueueCreateMutexStatic>
 80034c0:	4603      	mov	r3, r0
 80034c2:	e003      	b.n	80034cc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80034c4:	2001      	movs	r0, #1
 80034c6:	f000 fb6c 	bl	8003ba2 <xQueueCreateMutex>
 80034ca:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <osMutexWait+0x18>
    return osErrorParameter;
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	e03a      	b.n	8003562 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e009      	b.n	8003514 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <osMutexWait+0x40>
      ticks = 1;
 8003510:	2301      	movs	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003514:	f7ff ff4d 	bl	80033b2 <inHandlerMode>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	461a      	mov	r2, r3
 8003524:	2100      	movs	r1, #0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 ff80 	bl	800442c <xQueueReceiveFromISR>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <osMutexWait+0x62>
      return osErrorOS;
 8003532:	23ff      	movs	r3, #255	; 0xff
 8003534:	e015      	b.n	8003562 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d011      	beq.n	8003560 <osMutexWait+0x8c>
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <osMutexWait+0x98>)
 800353e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	e008      	b.n	8003560 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fe5f 	bl	8004214 <xQueueSemaphoreTake>
 8003556:	4603      	mov	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d001      	beq.n	8003560 <osMutexWait+0x8c>
    return osErrorOS;
 800355c:	23ff      	movs	r3, #255	; 0xff
 800355e:	e000      	b.n	8003562 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003580:	f7ff ff17 	bl	80033b2 <inHandlerMode>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800358a:	f107 0308 	add.w	r3, r7, #8
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fcd2 	bl	8003f3a <xQueueGiveFromISR>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d001      	beq.n	80035a0 <osMutexRelease+0x30>
      return osErrorOS;
 800359c:	23ff      	movs	r3, #255	; 0xff
 800359e:	e017      	b.n	80035d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <osMutexRelease+0x5e>
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <osMutexRelease+0x68>)
 80035a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	e00a      	b.n	80035ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80035b8:	2300      	movs	r3, #0
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fb22 	bl	8003c08 <xQueueGenericSend>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80035ca:	23ff      	movs	r3, #255	; 0xff
 80035cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b085      	sub	sp, #20
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d011      	beq.n	8003612 <osMessageCreate+0x36>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2400      	movs	r4, #0
 8003608:	9400      	str	r4, [sp, #0]
 800360a:	f000 f9df 	bl	80039cc <xQueueGenericCreateStatic>
 800360e:	4603      	mov	r3, r0
 8003610:	e008      	b.n	8003624 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	4619      	mov	r1, r3
 800361e:	f000 fa4d 	bl	8003abc <xQueueGenericCreate>
 8003622:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bd90      	pop	{r4, r7, pc}

0800362c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <osMessagePut+0x1e>
    ticks = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800364a:	f7ff feb2 	bl	80033b2 <inHandlerMode>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d018      	beq.n	8003686 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003654:	f107 0210 	add.w	r2, r7, #16
 8003658:	f107 0108 	add.w	r1, r7, #8
 800365c:	2300      	movs	r3, #0
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fbd0 	bl	8003e04 <xQueueGenericSendFromISR>
 8003664:	4603      	mov	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <osMessagePut+0x42>
      return osErrorOS;
 800366a:	23ff      	movs	r3, #255	; 0xff
 800366c:	e018      	b.n	80036a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d014      	beq.n	800369e <osMessagePut+0x72>
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <osMessagePut+0x7c>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	e00b      	b.n	800369e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003686:	f107 0108 	add.w	r1, r7, #8
 800368a:	2300      	movs	r3, #0
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 faba 	bl	8003c08 <xQueueGenericSend>
 8003694:	4603      	mov	r3, r0
 8003696:	2b01      	cmp	r3, #1
 8003698:	d001      	beq.n	800369e <osMessagePut+0x72>
      return osErrorOS;
 800369a:	23ff      	movs	r3, #255	; 0xff
 800369c:	e000      	b.n	80036a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b08b      	sub	sp, #44	; 0x2c
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	617b      	str	r3, [r7, #20]
    return event;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	461c      	mov	r4, r3
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036da:	e054      	b.n	8003786 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d103      	bne.n	80036f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	e009      	b.n	8003708 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <osMessageGet+0x5c>
      ticks = 1;
 8003704:	2301      	movs	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003708:	f7ff fe53 	bl	80033b2 <inHandlerMode>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01c      	beq.n	800374c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003712:	f107 0220 	add.w	r2, r7, #32
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	68b8      	ldr	r0, [r7, #8]
 8003720:	f000 fe84 	bl	800442c <xQueueReceiveFromISR>
 8003724:	4603      	mov	r3, r0
 8003726:	2b01      	cmp	r3, #1
 8003728:	d102      	bne.n	8003730 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800372a:	2310      	movs	r3, #16
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e001      	b.n	8003734 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01d      	beq.n	8003776 <osMessageGet+0xca>
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <osMessageGet+0xe4>)
 800373c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	e014      	b.n	8003776 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	3304      	adds	r3, #4
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	4619      	mov	r1, r3
 8003756:	68b8      	ldr	r0, [r7, #8]
 8003758:	f000 fc7c 	bl	8004054 <xQueueReceive>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003762:	2310      	movs	r3, #16
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e006      	b.n	8003776 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <osMessageGet+0xc6>
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <osMessageGet+0xc8>
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	461c      	mov	r4, r3
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	372c      	adds	r7, #44	; 0x2c
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
 800378e:	bf00      	nop
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f103 0208 	add.w	r2, r3, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f103 0208 	add.w	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f103 0208 	add.w	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d103      	bne.n	8003856 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e00c      	b.n	8003870 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3308      	adds	r3, #8
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e002      	b.n	8003864 <vListInsert+0x2e>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d2f6      	bcs.n	800385e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	601a      	str	r2, [r3, #0]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6892      	ldr	r2, [r2, #8]
 80038be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6852      	ldr	r2, [r2, #4]
 80038c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d103      	bne.n	80038dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003926:	f002 f83d 	bl	80059a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	3b01      	subs	r3, #1
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d114      	bne.n	80039a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01a      	beq.n	80039ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3310      	adds	r3, #16
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fb01 	bl	8004f90 <xTaskRemoveFromEventList>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <xQueueGenericReset+0xcc>)
 8003996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	e009      	b.n	80039ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3310      	adds	r3, #16
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fef2 	bl	8003794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3324      	adds	r3, #36	; 0x24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff feed 	bl	8003794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039ba:	f002 f823 	bl	8005a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039be:	2301      	movs	r3, #1
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08e      	sub	sp, #56	; 0x38
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <xQueueGenericCreateStatic+0x52>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <xQueueGenericCreateStatic+0x56>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueGenericCreateStatic+0x58>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	623b      	str	r3, [r7, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <xQueueGenericCreateStatic+0x7e>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericCreateStatic+0x82>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericCreateStatic+0x84>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61fb      	str	r3, [r7, #28]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a6a:	2348      	movs	r3, #72	; 0x48
 8003a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b48      	cmp	r3, #72	; 0x48
 8003a72:	d00a      	beq.n	8003a8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61bb      	str	r3, [r7, #24]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f83f 	bl	8003b30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3730      	adds	r7, #48	; 0x30
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	613b      	str	r3, [r7, #16]
}
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3348      	adds	r3, #72	; 0x48
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 f877 	bl	8005be8 <pvPortMalloc>
 8003afa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d011      	beq.n	8003b26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3348      	adds	r3, #72	; 0x48
 8003b0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f805 	bl	8003b30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b26:	69bb      	ldr	r3, [r7, #24]
	}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e002      	b.n	8003b52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b5e:	2101      	movs	r1, #1
 8003b60:	69b8      	ldr	r0, [r7, #24]
 8003b62:	f7ff fecb 	bl	80038fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2200      	movs	r2, #0
 8003b92:	2100      	movs	r1, #0
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f837 	bl	8003c08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6939      	ldr	r1, [r7, #16]
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f7ff ff7e 	bl	8003abc <xQueueGenericCreate>
 8003bc0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff ffd3 	bl	8003b6e <prvInitialiseMutex>

		return xNewQueue;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
	}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b088      	sub	sp, #32
 8003bd6:	af02      	add	r7, sp, #8
 8003bd8:	4603      	mov	r3, r0
 8003bda:	6039      	str	r1, [r7, #0]
 8003bdc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bde:	2301      	movs	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	6939      	ldr	r1, [r7, #16]
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff feeb 	bl	80039cc <xQueueGenericCreateStatic>
 8003bf6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff ffb8 	bl	8003b6e <prvInitialiseMutex>

		return xNewQueue;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
	}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08e      	sub	sp, #56	; 0x38
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c16:	2300      	movs	r3, #0
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueGenericSend+0x32>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <xQueueGenericSend+0x40>
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <xQueueGenericSend+0x44>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <xQueueGenericSend+0x46>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <xQueueGenericSend+0x60>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d103      	bne.n	8003c76 <xQueueGenericSend+0x6e>
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericSend+0x72>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueGenericSend+0x74>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xQueueGenericSend+0x8e>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	623b      	str	r3, [r7, #32]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c96:	f001 fb37 	bl	8005308 <xTaskGetSchedulerState>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <xQueueGenericSend+0x9e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <xQueueGenericSend+0xa2>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <xQueueGenericSend+0xa4>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	61fb      	str	r3, [r7, #28]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cc6:	f001 fe6d 	bl	80059a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <xQueueGenericSend+0xd4>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d129      	bne.n	8003d30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce2:	f000 fc3b 	bl	800455c <prvCopyDataToQueue>
 8003ce6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	3324      	adds	r3, #36	; 0x24
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 f94b 	bl	8004f90 <xTaskRemoveFromEventList>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d00:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <xQueueGenericSend+0x1f8>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	e00a      	b.n	8003d28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <xQueueGenericSend+0x1f8>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d28:	f001 fe6c 	bl	8005a04 <vPortExitCritical>
				return pdPASS;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e063      	b.n	8003df8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d36:	f001 fe65 	bl	8005a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e05c      	b.n	8003df8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 f983 	bl	8005054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d52:	f001 fe57 	bl	8005a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d56:	f000 ff39 	bl	8004bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d5a:	f001 fe23 	bl	80059a4 <vPortEnterCritical>
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d64:	b25b      	sxtb	r3, r3
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d103      	bne.n	8003d74 <xQueueGenericSend+0x16c>
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d7a:	b25b      	sxtb	r3, r3
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d103      	bne.n	8003d8a <xQueueGenericSend+0x182>
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d8a:	f001 fe3b 	bl	8005a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d8e:	1d3a      	adds	r2, r7, #4
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f972 	bl	8005080 <xTaskCheckForTimeOut>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d124      	bne.n	8003dec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da4:	f000 fcd2 	bl	800474c <prvIsQueueFull>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d018      	beq.n	8003de0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	3310      	adds	r3, #16
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f8c6 	bl	8004f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dbe:	f000 fc5d 	bl	800467c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dc2:	f000 ff11 	bl	8004be8 <xTaskResumeAll>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f af7c 	bne.w	8003cc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <xQueueGenericSend+0x1f8>)
 8003dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	e772      	b.n	8003cc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de2:	f000 fc4b 	bl	800467c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003de6:	f000 feff 	bl	8004be8 <xTaskResumeAll>
 8003dea:	e76c      	b.n	8003cc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dee:	f000 fc45 	bl	800467c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003df2:	f000 fef9 	bl	8004be8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003df6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3738      	adds	r7, #56	; 0x38
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b090      	sub	sp, #64	; 0x40
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <xQueueGenericSendFromISR+0x3c>
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <xQueueGenericSendFromISR+0x40>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <xQueueGenericSendFromISR+0x42>
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d103      	bne.n	8003e6e <xQueueGenericSendFromISR+0x6a>
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <xQueueGenericSendFromISR+0x6e>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <xQueueGenericSendFromISR+0x70>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	623b      	str	r3, [r7, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e8e:	f001 fe6b 	bl	8005b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e92:	f3ef 8211 	mrs	r2, BASEPRI
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	61fa      	str	r2, [r7, #28]
 8003ea8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <xQueueGenericSendFromISR+0xbc>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d12f      	bne.n	8003f20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ed6:	f000 fb41 	bl	800455c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003eda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d112      	bne.n	8003f0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d016      	beq.n	8003f1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	3324      	adds	r3, #36	; 0x24
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f84d 	bl	8004f90 <xTaskRemoveFromEventList>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00e      	beq.n	8003f1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e007      	b.n	8003f1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	b25a      	sxtb	r2, r3
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f1e:	e001      	b.n	8003f24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3740      	adds	r7, #64	; 0x40
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b08e      	sub	sp, #56	; 0x38
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	623b      	str	r3, [r7, #32]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	61fb      	str	r3, [r7, #28]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <xQueueGiveFromISR+0x58>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <xQueueGiveFromISR+0x5c>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <xQueueGiveFromISR+0x5e>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	61bb      	str	r3, [r7, #24]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fb2:	f001 fdd9 	bl	8005b68 <vPortValidateInterruptPriority>
	__asm volatile
 8003fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	617a      	str	r2, [r7, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003fce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d22b      	bcs.n	800403a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d112      	bne.n	8004024 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	3324      	adds	r3, #36	; 0x24
 800400a:	4618      	mov	r0, r3
 800400c:	f000 ffc0 	bl	8004f90 <xTaskRemoveFromEventList>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00e      	beq.n	8004034 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e007      	b.n	8004034 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004028:	3301      	adds	r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	b25a      	sxtb	r2, r3
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004034:	2301      	movs	r3, #1
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
 8004038:	e001      	b.n	800403e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800403a:	2300      	movs	r3, #0
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f383 8811 	msr	BASEPRI, r3
}
 8004048:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800404c:	4618      	mov	r0, r3
 800404e:	3738      	adds	r7, #56	; 0x38
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08c      	sub	sp, #48	; 0x30
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004060:	2300      	movs	r3, #0
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <xQueueReceive+0x30>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	623b      	str	r3, [r7, #32]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <xQueueReceive+0x3e>
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <xQueueReceive+0x42>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <xQueueReceive+0x44>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xQueueReceive+0x5e>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	61fb      	str	r3, [r7, #28]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b2:	f001 f929 	bl	8005308 <xTaskGetSchedulerState>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <xQueueReceive+0x6e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <xQueueReceive+0x72>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueReceive+0x74>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xQueueReceive+0x8e>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	61bb      	str	r3, [r7, #24]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e2:	f001 fc5f 	bl	80059a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01f      	beq.n	8004132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f6:	f000 fa9b 	bl	8004630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	1e5a      	subs	r2, r3, #1
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00f      	beq.n	800412a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	3310      	adds	r3, #16
 800410e:	4618      	mov	r0, r3
 8004110:	f000 ff3e 	bl	8004f90 <xTaskRemoveFromEventList>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800411a:	4b3d      	ldr	r3, [pc, #244]	; (8004210 <xQueueReceive+0x1bc>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800412a:	f001 fc6b 	bl	8005a04 <vPortExitCritical>
				return pdPASS;
 800412e:	2301      	movs	r3, #1
 8004130:	e069      	b.n	8004206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004138:	f001 fc64 	bl	8005a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800413c:	2300      	movs	r3, #0
 800413e:	e062      	b.n	8004206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004146:	f107 0310 	add.w	r3, r7, #16
 800414a:	4618      	mov	r0, r3
 800414c:	f000 ff82 	bl	8005054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004154:	f001 fc56 	bl	8005a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004158:	f000 fd38 	bl	8004bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800415c:	f001 fc22 	bl	80059a4 <vPortEnterCritical>
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004166:	b25b      	sxtb	r3, r3
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d103      	bne.n	8004176 <xQueueReceive+0x122>
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800417c:	b25b      	sxtb	r3, r3
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d103      	bne.n	800418c <xQueueReceive+0x138>
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800418c:	f001 fc3a 	bl	8005a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004190:	1d3a      	adds	r2, r7, #4
 8004192:	f107 0310 	add.w	r3, r7, #16
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f000 ff71 	bl	8005080 <xTaskCheckForTimeOut>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d123      	bne.n	80041ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a6:	f000 fabb 	bl	8004720 <prvIsQueueEmpty>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	3324      	adds	r3, #36	; 0x24
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fec5 	bl	8004f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c0:	f000 fa5c 	bl	800467c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041c4:	f000 fd10 	bl	8004be8 <xTaskResumeAll>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d189      	bne.n	80040e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <xQueueReceive+0x1bc>)
 80041d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	e780      	b.n	80040e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e2:	f000 fa4b 	bl	800467c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041e6:	f000 fcff 	bl	8004be8 <xTaskResumeAll>
 80041ea:	e77a      	b.n	80040e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ee:	f000 fa45 	bl	800467c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041f2:	f000 fcf9 	bl	8004be8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f8:	f000 fa92 	bl	8004720 <prvIsQueueEmpty>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f43f af6f 	beq.w	80040e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004206:	4618      	mov	r0, r3
 8004208:	3730      	adds	r7, #48	; 0x30
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	e000ed04 	.word	0xe000ed04

08004214 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	; 0x38
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	623b      	str	r3, [r7, #32]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	61fb      	str	r3, [r7, #28]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004264:	f001 f850 	bl	8005308 <xTaskGetSchedulerState>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <xQueueSemaphoreTake+0x60>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <xQueueSemaphoreTake+0x64>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <xQueueSemaphoreTake+0x66>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	61bb      	str	r3, [r7, #24]
}
 8004290:	bf00      	nop
 8004292:	e7fe      	b.n	8004292 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004294:	f001 fb86 	bl	80059a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d024      	beq.n	80042ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	1e5a      	subs	r2, r3, #1
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042b4:	f001 f9d0 	bl	8005658 <pvTaskIncrementMutexHeldCount>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00f      	beq.n	80042e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	3310      	adds	r3, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fe60 	bl	8004f90 <xTaskRemoveFromEventList>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042d6:	4b54      	ldr	r3, [pc, #336]	; (8004428 <xQueueSemaphoreTake+0x214>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042e6:	f001 fb8d 	bl	8005a04 <vPortExitCritical>
				return pdPASS;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e097      	b.n	800441e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d111      	bne.n	8004318 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	617b      	str	r3, [r7, #20]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004310:	f001 fb78 	bl	8005a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004314:	2300      	movs	r3, #0
 8004316:	e082      	b.n	800441e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fe96 	bl	8005054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800432c:	f001 fb6a 	bl	8005a04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004330:	f000 fc4c 	bl	8004bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004334:	f001 fb36 	bl	80059a4 <vPortEnterCritical>
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800433e:	b25b      	sxtb	r3, r3
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d103      	bne.n	800434e <xQueueSemaphoreTake+0x13a>
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004354:	b25b      	sxtb	r3, r3
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d103      	bne.n	8004364 <xQueueSemaphoreTake+0x150>
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	f001 fb4e 	bl	8005a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004368:	463a      	mov	r2, r7
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fe85 	bl	8005080 <xTaskCheckForTimeOut>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d132      	bne.n	80043e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800437c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800437e:	f000 f9cf 	bl	8004720 <prvIsQueueEmpty>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d026      	beq.n	80043d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004390:	f001 fb08 	bl	80059a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 ffd3 	bl	8005344 <xTaskPriorityInherit>
 800439e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80043a0:	f001 fb30 	bl	8005a04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	3324      	adds	r3, #36	; 0x24
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fdcb 	bl	8004f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043b4:	f000 f962 	bl	800467c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043b8:	f000 fc16 	bl	8004be8 <xTaskResumeAll>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f47f af68 	bne.w	8004294 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <xQueueSemaphoreTake+0x214>)
 80043c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	e75e      	b.n	8004294 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043d8:	f000 f950 	bl	800467c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043dc:	f000 fc04 	bl	8004be8 <xTaskResumeAll>
 80043e0:	e758      	b.n	8004294 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043e4:	f000 f94a 	bl	800467c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043e8:	f000 fbfe 	bl	8004be8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043ee:	f000 f997 	bl	8004720 <prvIsQueueEmpty>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f43f af4d 	beq.w	8004294 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004400:	f001 fad0 	bl	80059a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004406:	f000 f891 	bl	800452c <prvGetDisinheritPriorityAfterTimeout>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004412:	4618      	mov	r0, r3
 8004414:	f001 f892 	bl	800553c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004418:	f001 faf4 	bl	8005a04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800441c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800441e:	4618      	mov	r0, r3
 8004420:	3738      	adds	r7, #56	; 0x38
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	; 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	623b      	str	r3, [r7, #32]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <xQueueReceiveFromISR+0x3a>
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <xQueueReceiveFromISR+0x3e>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <xQueueReceiveFromISR+0x40>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	61fb      	str	r3, [r7, #28]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004486:	f001 fb6f 	bl	8005b68 <vPortValidateInterruptPriority>
	__asm volatile
 800448a:	f3ef 8211 	mrs	r2, BASEPRI
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	61ba      	str	r2, [r7, #24]
 80044a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80044a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02f      	beq.n	8004512 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c0:	f000 f8b6 	bl	8004630 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	1e5a      	subs	r2, r3, #1
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d112      	bne.n	80044fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	3310      	adds	r3, #16
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fd54 	bl	8004f90 <xTaskRemoveFromEventList>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e007      	b.n	800450c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80044fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004500:	3301      	adds	r3, #1
 8004502:	b2db      	uxtb	r3, r3
 8004504:	b25a      	sxtb	r2, r3
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800450c:	2301      	movs	r3, #1
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
 8004510:	e001      	b.n	8004516 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004512:	2300      	movs	r3, #0
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	613b      	str	r3, [r7, #16]
	__asm volatile
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f383 8811 	msr	BASEPRI, r3
}
 8004520:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004524:	4618      	mov	r0, r3
 8004526:	3738      	adds	r7, #56	; 0x38
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1c3 0307 	rsb	r3, r3, #7
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e001      	b.n	800454e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800454e:	68fb      	ldr	r3, [r7, #12]
	}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d14d      	bne.n	800461e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 ff52 	bl	8005430 <xTaskPriorityDisinherit>
 800458c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	e043      	b.n	800461e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d119      	bne.n	80045d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6858      	ldr	r0, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	461a      	mov	r2, r3
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	f001 ff21 	bl	80063ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	441a      	add	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d32b      	bcc.n	800461e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	e026      	b.n	800461e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	68d8      	ldr	r0, [r3, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	461a      	mov	r2, r3
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	f001 ff07 	bl	80063ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	425b      	negs	r3, r3
 80045ea:	441a      	add	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d207      	bcs.n	800460c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	425b      	negs	r3, r3
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d105      	bne.n	800461e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	3b01      	subs	r3, #1
 800461c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004626:	697b      	ldr	r3, [r7, #20]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	441a      	add	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	429a      	cmp	r2, r3
 800465a:	d303      	bcc.n	8004664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68d9      	ldr	r1, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	461a      	mov	r2, r3
 800466e:	6838      	ldr	r0, [r7, #0]
 8004670:	f001 febd 	bl	80063ee <memcpy>
	}
}
 8004674:	bf00      	nop
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004684:	f001 f98e 	bl	80059a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800468e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004690:	e011      	b.n	80046b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d012      	beq.n	80046c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3324      	adds	r3, #36	; 0x24
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fc76 	bl	8004f90 <xTaskRemoveFromEventList>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046aa:	f000 fd4b 	bl	8005144 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	dce9      	bgt.n	8004692 <prvUnlockQueue+0x16>
 80046be:	e000      	b.n	80046c2 <prvUnlockQueue+0x46>
					break;
 80046c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	22ff      	movs	r2, #255	; 0xff
 80046c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046ca:	f001 f99b 	bl	8005a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046ce:	f001 f969 	bl	80059a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046da:	e011      	b.n	8004700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d012      	beq.n	800470a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3310      	adds	r3, #16
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fc51 	bl	8004f90 <xTaskRemoveFromEventList>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046f4:	f000 fd26 	bl	8005144 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046f8:	7bbb      	ldrb	r3, [r7, #14]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004704:	2b00      	cmp	r3, #0
 8004706:	dce9      	bgt.n	80046dc <prvUnlockQueue+0x60>
 8004708:	e000      	b.n	800470c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800470a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	22ff      	movs	r2, #255	; 0xff
 8004710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004714:	f001 f976 	bl	8005a04 <vPortExitCritical>
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004728:	f001 f93c 	bl	80059a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e001      	b.n	800473e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800473e:	f001 f961 	bl	8005a04 <vPortExitCritical>

	return xReturn;
 8004742:	68fb      	ldr	r3, [r7, #12]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004754:	f001 f926 	bl	80059a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	429a      	cmp	r2, r3
 8004762:	d102      	bne.n	800476a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e001      	b.n	800476e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800476e:	f001 f949 	bl	8005a04 <vPortExitCritical>

	return xReturn;
 8004772:	68fb      	ldr	r3, [r7, #12]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	; 0x38
 8004780:	af04      	add	r7, sp, #16
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	623b      	str	r3, [r7, #32]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	61fb      	str	r3, [r7, #28]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047c2:	2354      	movs	r3, #84	; 0x54
 80047c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b54      	cmp	r3, #84	; 0x54
 80047ca:	d00a      	beq.n	80047e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	61bb      	str	r3, [r7, #24]
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01e      	beq.n	8004828 <xTaskCreateStatic+0xac>
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01b      	beq.n	8004828 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004802:	2300      	movs	r3, #0
 8004804:	9303      	str	r3, [sp, #12]
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	9302      	str	r3, [sp, #8]
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f850 	bl	80048c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004822:	f000 f8d5 	bl	80049d0 <prvAddNewTaskToReadyList>
 8004826:	e001      	b.n	800482c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800482c:	697b      	ldr	r3, [r7, #20]
	}
 800482e:	4618      	mov	r0, r3
 8004830:	3728      	adds	r7, #40	; 0x28
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004836:	b580      	push	{r7, lr}
 8004838:	b08c      	sub	sp, #48	; 0x30
 800483a:	af04      	add	r7, sp, #16
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4618      	mov	r0, r3
 800484c:	f001 f9cc 	bl	8005be8 <pvPortMalloc>
 8004850:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004858:	2054      	movs	r0, #84	; 0x54
 800485a:	f001 f9c5 	bl	8005be8 <pvPortMalloc>
 800485e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
 800486c:	e005      	b.n	800487a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800486e:	6978      	ldr	r0, [r7, #20]
 8004870:	f001 fa86 	bl	8005d80 <vPortFree>
 8004874:	e001      	b.n	800487a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d017      	beq.n	80048b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	2300      	movs	r3, #0
 800488c:	9303      	str	r3, [sp, #12]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	9302      	str	r3, [sp, #8]
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	9301      	str	r3, [sp, #4]
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f80e 	bl	80048c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048a4:	69f8      	ldr	r0, [r7, #28]
 80048a6:	f000 f893 	bl	80049d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e002      	b.n	80048b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048b0:	f04f 33ff 	mov.w	r3, #4294967295
 80048b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048b6:	69bb      	ldr	r3, [r7, #24]
	}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048d8:	3b01      	subs	r3, #1
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f023 0307 	bic.w	r3, r3, #7
 80048e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <prvInitialiseNewTask+0x48>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	617b      	str	r3, [r7, #20]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01f      	beq.n	800494e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e012      	b.n	800493a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	7819      	ldrb	r1, [r3, #0]
 800491c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	3334      	adds	r3, #52	; 0x34
 8004924:	460a      	mov	r2, r1
 8004926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d006      	beq.n	8004942 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d9e9      	bls.n	8004914 <prvInitialiseNewTask+0x54>
 8004940:	e000      	b.n	8004944 <prvInitialiseNewTask+0x84>
			{
				break;
 8004942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800494c:	e003      	b.n	8004956 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	2b06      	cmp	r3, #6
 800495a:	d901      	bls.n	8004960 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800495c:	2306      	movs	r3, #6
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	2200      	movs	r2, #0
 8004970:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	3304      	adds	r3, #4
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe ff2c 	bl	80037d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	3318      	adds	r3, #24
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe ff27 	bl	80037d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	f1c3 0207 	rsb	r2, r3, #7
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	2200      	movs	r2, #0
 80049a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	69b8      	ldr	r0, [r7, #24]
 80049b0:	f000 fecc 	bl	800574c <pxPortInitialiseStack>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049c6:	bf00      	nop
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049d8:	f000 ffe4 	bl	80059a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049dc:	4b2a      	ldr	r3, [pc, #168]	; (8004a88 <prvAddNewTaskToReadyList+0xb8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <prvAddNewTaskToReadyList+0xb8>)
 80049e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049e6:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <prvAddNewTaskToReadyList+0xbc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049ee:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <prvAddNewTaskToReadyList+0xbc>)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <prvAddNewTaskToReadyList+0xb8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d110      	bne.n	8004a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049fc:	f000 fbc6 	bl	800518c <prvInitialiseTaskLists>
 8004a00:	e00d      	b.n	8004a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a02:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <prvAddNewTaskToReadyList+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <prvAddNewTaskToReadyList+0xbc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d802      	bhi.n	8004a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <prvAddNewTaskToReadyList+0xbc>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <prvAddNewTaskToReadyList+0xc4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3301      	adds	r3, #1
 8004a24:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <prvAddNewTaskToReadyList+0xc4>)
 8004a26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <prvAddNewTaskToReadyList+0xc8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <prvAddNewTaskToReadyList+0xc8>)
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <prvAddNewTaskToReadyList+0xcc>)
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fe fecc 	bl	80037ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a56:	f000 ffd5 	bl	8005a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <prvAddNewTaskToReadyList+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00e      	beq.n	8004a80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <prvAddNewTaskToReadyList+0xbc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d207      	bcs.n	8004a80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <prvAddNewTaskToReadyList+0xd0>)
 8004a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200004b8 	.word	0x200004b8
 8004a8c:	200003b8 	.word	0x200003b8
 8004a90:	200004c4 	.word	0x200004c4
 8004a94:	200004d4 	.word	0x200004d4
 8004a98:	200004c0 	.word	0x200004c0
 8004a9c:	200003bc 	.word	0x200003bc
 8004aa0:	e000ed04 	.word	0xe000ed04

08004aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d017      	beq.n	8004ae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <vTaskDelay+0x60>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <vTaskDelay+0x30>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	60bb      	str	r3, [r7, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ad4:	f000 f87a 	bl	8004bcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ad8:	2100      	movs	r1, #0
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fdd0 	bl	8005680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ae0:	f000 f882 	bl	8004be8 <xTaskResumeAll>
 8004ae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d107      	bne.n	8004afc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <vTaskDelay+0x64>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200004e0 	.word	0x200004e0
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b1a:	463a      	mov	r2, r7
 8004b1c:	1d39      	adds	r1, r7, #4
 8004b1e:	f107 0308 	add.w	r3, r7, #8
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fc f940 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	9202      	str	r2, [sp, #8]
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	2300      	movs	r3, #0
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2300      	movs	r3, #0
 8004b38:	460a      	mov	r2, r1
 8004b3a:	491e      	ldr	r1, [pc, #120]	; (8004bb4 <vTaskStartScheduler+0xa8>)
 8004b3c:	481e      	ldr	r0, [pc, #120]	; (8004bb8 <vTaskStartScheduler+0xac>)
 8004b3e:	f7ff fe1d 	bl	800477c <xTaskCreateStatic>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <vTaskStartScheduler+0xb0>)
 8004b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b48:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <vTaskStartScheduler+0xb0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b50:	2301      	movs	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e001      	b.n	8004b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d116      	bne.n	8004b8e <vTaskStartScheduler+0x82>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
}
 8004b72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <vTaskStartScheduler+0xb4>)
 8004b76:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b7c:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <vTaskStartScheduler+0xb8>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <vTaskStartScheduler+0xbc>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b88:	f000 fe6a 	bl	8005860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b8c:	e00e      	b.n	8004bac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d10a      	bne.n	8004bac <vTaskStartScheduler+0xa0>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60fb      	str	r3, [r7, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <vTaskStartScheduler+0x9e>
}
 8004bac:	bf00      	nop
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	0800716c 	.word	0x0800716c
 8004bb8:	0800515d 	.word	0x0800515d
 8004bbc:	200004dc 	.word	0x200004dc
 8004bc0:	200004d8 	.word	0x200004d8
 8004bc4:	200004c4 	.word	0x200004c4
 8004bc8:	200004bc 	.word	0x200004bc

08004bcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <vTaskSuspendAll+0x18>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	4a03      	ldr	r2, [pc, #12]	; (8004be4 <vTaskSuspendAll+0x18>)
 8004bd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bda:	bf00      	nop
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	200004e0 	.word	0x200004e0

08004be8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bf6:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <xTaskResumeAll+0x114>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	603b      	str	r3, [r7, #0]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c14:	f000 fec6 	bl	80059a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c18:	4b38      	ldr	r3, [pc, #224]	; (8004cfc <xTaskResumeAll+0x114>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4a37      	ldr	r2, [pc, #220]	; (8004cfc <xTaskResumeAll+0x114>)
 8004c20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <xTaskResumeAll+0x114>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d161      	bne.n	8004cee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c2a:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <xTaskResumeAll+0x118>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05d      	beq.n	8004cee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c32:	e02e      	b.n	8004c92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c34:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <xTaskResumeAll+0x11c>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fe31 	bl	80038a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fe2c 	bl	80038a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <xTaskResumeAll+0x120>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <xTaskResumeAll+0x120>)
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <xTaskResumeAll+0x124>)
 8004c70:	441a      	add	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7fe fdb8 	bl	80037ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <xTaskResumeAll+0x128>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c8c:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <xTaskResumeAll+0x12c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <xTaskResumeAll+0x11c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1cc      	bne.n	8004c34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ca0:	f000 fb12 	bl	80052c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <xTaskResumeAll+0x130>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d010      	beq.n	8004cd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cb0:	f000 f836 	bl	8004d20 <xTaskIncrementTick>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004cba:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <xTaskResumeAll+0x12c>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f1      	bne.n	8004cb0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <xTaskResumeAll+0x130>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <xTaskResumeAll+0x12c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <xTaskResumeAll+0x134>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cee:	f000 fe89 	bl	8005a04 <vPortExitCritical>

	return xAlreadyYielded;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	200004e0 	.word	0x200004e0
 8004d00:	200004b8 	.word	0x200004b8
 8004d04:	20000478 	.word	0x20000478
 8004d08:	200004c0 	.word	0x200004c0
 8004d0c:	200003bc 	.word	0x200003bc
 8004d10:	200003b8 	.word	0x200003b8
 8004d14:	200004cc 	.word	0x200004cc
 8004d18:	200004c8 	.word	0x200004c8
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2a:	4b4e      	ldr	r3, [pc, #312]	; (8004e64 <xTaskIncrementTick+0x144>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 808e 	bne.w	8004e50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d34:	4b4c      	ldr	r3, [pc, #304]	; (8004e68 <xTaskIncrementTick+0x148>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d3c:	4a4a      	ldr	r2, [pc, #296]	; (8004e68 <xTaskIncrementTick+0x148>)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d120      	bne.n	8004d8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d48:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	603b      	str	r3, [r7, #0]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xTaskIncrementTick+0x46>
 8004d68:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b40      	ldr	r3, [pc, #256]	; (8004e70 <xTaskIncrementTick+0x150>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a3e      	ldr	r2, [pc, #248]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4a3e      	ldr	r2, [pc, #248]	; (8004e70 <xTaskIncrementTick+0x150>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4b3d      	ldr	r3, [pc, #244]	; (8004e74 <xTaskIncrementTick+0x154>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	4a3c      	ldr	r2, [pc, #240]	; (8004e74 <xTaskIncrementTick+0x154>)
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	f000 fa9f 	bl	80052c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d8a:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d348      	bcc.n	8004e26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004da0:	f04f 32ff 	mov.w	r2, #4294967295
 8004da4:	601a      	str	r2, [r3, #0]
					break;
 8004da6:	e03e      	b.n	8004e26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d203      	bcs.n	8004dc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dc6:	e02e      	b.n	8004e26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fd6b 	bl	80038a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3318      	adds	r3, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fd62 	bl	80038a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	2201      	movs	r2, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <xTaskIncrementTick+0x15c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <xTaskIncrementTick+0x15c>)
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <xTaskIncrementTick+0x160>)
 8004e04:	441a      	add	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f7fe fcee 	bl	80037ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <xTaskIncrementTick+0x164>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3b9      	bcc.n	8004d94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e24:	e7b6      	b.n	8004d94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e26:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <xTaskIncrementTick+0x164>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2c:	4914      	ldr	r1, [pc, #80]	; (8004e80 <xTaskIncrementTick+0x160>)
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d901      	bls.n	8004e42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <xTaskIncrementTick+0x168>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e004      	b.n	8004e5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <xTaskIncrementTick+0x16c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3301      	adds	r3, #1
 8004e56:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <xTaskIncrementTick+0x16c>)
 8004e58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e5a:	697b      	ldr	r3, [r7, #20]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200004e0 	.word	0x200004e0
 8004e68:	200004bc 	.word	0x200004bc
 8004e6c:	20000470 	.word	0x20000470
 8004e70:	20000474 	.word	0x20000474
 8004e74:	200004d0 	.word	0x200004d0
 8004e78:	200004d8 	.word	0x200004d8
 8004e7c:	200004c0 	.word	0x200004c0
 8004e80:	200003bc 	.word	0x200003bc
 8004e84:	200003b8 	.word	0x200003b8
 8004e88:	200004cc 	.word	0x200004cc
 8004e8c:	200004c8 	.word	0x200004c8

08004e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <vTaskSwitchContext+0xa4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e9e:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <vTaskSwitchContext+0xa8>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ea4:	e03f      	b.n	8004f26 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004ea6:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <vTaskSwitchContext+0xa8>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eac:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <vTaskSwitchContext+0xac>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004eba:	7afb      	ldrb	r3, [r7, #11]
 8004ebc:	f1c3 031f 	rsb	r3, r3, #31
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	491f      	ldr	r1, [pc, #124]	; (8004f40 <vTaskSwitchContext+0xb0>)
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	607b      	str	r3, [r7, #4]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <vTaskSwitchContext+0x5a>
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <vTaskSwitchContext+0xb0>)
 8004ef8:	4413      	add	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d104      	bne.n	8004f1c <vTaskSwitchContext+0x8c>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <vTaskSwitchContext+0xb4>)
 8004f24:	6013      	str	r3, [r2, #0]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	200004e0 	.word	0x200004e0
 8004f38:	200004cc 	.word	0x200004cc
 8004f3c:	200004c0 	.word	0x200004c0
 8004f40:	200003bc 	.word	0x200003bc
 8004f44:	200003b8 	.word	0x200003b8

08004f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <vTaskPlaceOnEventList+0x44>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3318      	adds	r3, #24
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe fc5d 	bl	8003836 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6838      	ldr	r0, [r7, #0]
 8004f80:	f000 fb7e 	bl	8005680 <prvAddCurrentTaskToDelayedList>
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	200003b8 	.word	0x200003b8

08004f90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe fc71 	bl	80038a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	; (800503c <xTaskRemoveFromEventList+0xac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11c      	bne.n	8005008 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fc68 	bl	80038a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <xTaskRemoveFromEventList+0xb0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <xTaskRemoveFromEventList+0xb0>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <xTaskRemoveFromEventList+0xb4>)
 8004ff8:	441a      	add	r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7fe fbf4 	bl	80037ee <vListInsertEnd>
 8005006:	e005      	b.n	8005014 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	3318      	adds	r3, #24
 800500c:	4619      	mov	r1, r3
 800500e:	480e      	ldr	r0, [pc, #56]	; (8005048 <xTaskRemoveFromEventList+0xb8>)
 8005010:	f7fe fbed 	bl	80037ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <xTaskRemoveFromEventList+0xbc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	429a      	cmp	r2, r3
 8005020:	d905      	bls.n	800502e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <xTaskRemoveFromEventList+0xc0>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e001      	b.n	8005032 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005032:	697b      	ldr	r3, [r7, #20]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	200004e0 	.word	0x200004e0
 8005040:	200004c0 	.word	0x200004c0
 8005044:	200003bc 	.word	0x200003bc
 8005048:	20000478 	.word	0x20000478
 800504c:	200003b8 	.word	0x200003b8
 8005050:	200004cc 	.word	0x200004cc

08005054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <vTaskInternalSetTimeOutState+0x24>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <vTaskInternalSetTimeOutState+0x28>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	605a      	str	r2, [r3, #4]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	200004d0 	.word	0x200004d0
 800507c:	200004bc 	.word	0x200004bc

08005080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	613b      	str	r3, [r7, #16]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60fb      	str	r3, [r7, #12]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050c2:	f000 fc6f 	bl	80059a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <xTaskCheckForTimeOut+0xbc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d102      	bne.n	80050e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	e023      	b.n	800512e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <xTaskCheckForTimeOut+0xc0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d007      	beq.n	8005102 <xTaskCheckForTimeOut+0x82>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
 8005100:	e015      	b.n	800512e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d20b      	bcs.n	8005124 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ff9b 	bl	8005054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e004      	b.n	800512e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800512a:	2301      	movs	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800512e:	f000 fc69 	bl	8005a04 <vPortExitCritical>

	return xReturn;
 8005132:	69fb      	ldr	r3, [r7, #28]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	200004bc 	.word	0x200004bc
 8005140:	200004d0 	.word	0x200004d0

08005144 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <vTaskMissedYield+0x14>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
}
 800514e:	bf00      	nop
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	200004cc 	.word	0x200004cc

0800515c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005164:	f000 f852 	bl	800520c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <prvIdleTask+0x28>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d9f9      	bls.n	8005164 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <prvIdleTask+0x2c>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005180:	e7f0      	b.n	8005164 <prvIdleTask+0x8>
 8005182:	bf00      	nop
 8005184:	200003bc 	.word	0x200003bc
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	e00c      	b.n	80051b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4a12      	ldr	r2, [pc, #72]	; (80051ec <prvInitialiseTaskLists+0x60>)
 80051a4:	4413      	add	r3, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe faf4 	bl	8003794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3301      	adds	r3, #1
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d9ef      	bls.n	8005198 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051b8:	480d      	ldr	r0, [pc, #52]	; (80051f0 <prvInitialiseTaskLists+0x64>)
 80051ba:	f7fe faeb 	bl	8003794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051be:	480d      	ldr	r0, [pc, #52]	; (80051f4 <prvInitialiseTaskLists+0x68>)
 80051c0:	f7fe fae8 	bl	8003794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051c4:	480c      	ldr	r0, [pc, #48]	; (80051f8 <prvInitialiseTaskLists+0x6c>)
 80051c6:	f7fe fae5 	bl	8003794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051ca:	480c      	ldr	r0, [pc, #48]	; (80051fc <prvInitialiseTaskLists+0x70>)
 80051cc:	f7fe fae2 	bl	8003794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051d0:	480b      	ldr	r0, [pc, #44]	; (8005200 <prvInitialiseTaskLists+0x74>)
 80051d2:	f7fe fadf 	bl	8003794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <prvInitialiseTaskLists+0x78>)
 80051d8:	4a05      	ldr	r2, [pc, #20]	; (80051f0 <prvInitialiseTaskLists+0x64>)
 80051da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <prvInitialiseTaskLists+0x7c>)
 80051de:	4a05      	ldr	r2, [pc, #20]	; (80051f4 <prvInitialiseTaskLists+0x68>)
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	200003bc 	.word	0x200003bc
 80051f0:	20000448 	.word	0x20000448
 80051f4:	2000045c 	.word	0x2000045c
 80051f8:	20000478 	.word	0x20000478
 80051fc:	2000048c 	.word	0x2000048c
 8005200:	200004a4 	.word	0x200004a4
 8005204:	20000470 	.word	0x20000470
 8005208:	20000474 	.word	0x20000474

0800520c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005212:	e019      	b.n	8005248 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005214:	f000 fbc6 	bl	80059a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005218:	4b10      	ldr	r3, [pc, #64]	; (800525c <prvCheckTasksWaitingTermination+0x50>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe fb3f 	bl	80038a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800522a:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <prvCheckTasksWaitingTermination+0x54>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3b01      	subs	r3, #1
 8005230:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <prvCheckTasksWaitingTermination+0x54>)
 8005232:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <prvCheckTasksWaitingTermination+0x58>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3b01      	subs	r3, #1
 800523a:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <prvCheckTasksWaitingTermination+0x58>)
 800523c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800523e:	f000 fbe1 	bl	8005a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f810 	bl	8005268 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <prvCheckTasksWaitingTermination+0x58>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e1      	bne.n	8005214 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000048c 	.word	0x2000048c
 8005260:	200004b8 	.word	0x200004b8
 8005264:	200004a0 	.word	0x200004a0

08005268 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fd7e 	bl	8005d80 <vPortFree>
				vPortFree( pxTCB );
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fd7b 	bl	8005d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800528a:	e018      	b.n	80052be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005292:	2b01      	cmp	r3, #1
 8005294:	d103      	bne.n	800529e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fd72 	bl	8005d80 <vPortFree>
	}
 800529c:	e00f      	b.n	80052be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d00a      	beq.n	80052be <prvDeleteTCB+0x56>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60fb      	str	r3, [r7, #12]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <prvDeleteTCB+0x54>
	}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <prvResetNextTaskUnblockTime+0x38>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <prvResetNextTaskUnblockTime+0x3c>)
 80052da:	f04f 32ff 	mov.w	r2, #4294967295
 80052de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052e0:	e008      	b.n	80052f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <prvResetNextTaskUnblockTime+0x38>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <prvResetNextTaskUnblockTime+0x3c>)
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000470 	.word	0x20000470
 8005304:	200004d8 	.word	0x200004d8

08005308 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800530e:	4b0b      	ldr	r3, [pc, #44]	; (800533c <xTaskGetSchedulerState+0x34>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005316:	2301      	movs	r3, #1
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e008      	b.n	800532e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800531c:	4b08      	ldr	r3, [pc, #32]	; (8005340 <xTaskGetSchedulerState+0x38>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005324:	2302      	movs	r3, #2
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	e001      	b.n	800532e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800532e:	687b      	ldr	r3, [r7, #4]
	}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	200004c4 	.word	0x200004c4
 8005340:	200004e0 	.word	0x200004e0

08005344 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d05e      	beq.n	8005418 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535e:	4b31      	ldr	r3, [pc, #196]	; (8005424 <xTaskPriorityInherit+0xe0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d24e      	bcs.n	8005406 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	db06      	blt.n	800537e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <xTaskPriorityInherit+0xe0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f1c3 0207 	rsb	r2, r3, #7
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6959      	ldr	r1, [r3, #20]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4a26      	ldr	r2, [pc, #152]	; (8005428 <xTaskPriorityInherit+0xe4>)
 8005390:	4413      	add	r3, r2
 8005392:	4299      	cmp	r1, r3
 8005394:	d12f      	bne.n	80053f6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	3304      	adds	r3, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fa84 	bl	80038a8 <uxListRemove>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	2201      	movs	r2, #1
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	43da      	mvns	r2, r3
 80053b2:	4b1e      	ldr	r3, [pc, #120]	; (800542c <xTaskPriorityInherit+0xe8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4013      	ands	r3, r2
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <xTaskPriorityInherit+0xe8>)
 80053ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053bc:	4b19      	ldr	r3, [pc, #100]	; (8005424 <xTaskPriorityInherit+0xe0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	2201      	movs	r2, #1
 80053cc:	409a      	lsls	r2, r3
 80053ce:	4b17      	ldr	r3, [pc, #92]	; (800542c <xTaskPriorityInherit+0xe8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	4a15      	ldr	r2, [pc, #84]	; (800542c <xTaskPriorityInherit+0xe8>)
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4a10      	ldr	r2, [pc, #64]	; (8005428 <xTaskPriorityInherit+0xe4>)
 80053e6:	441a      	add	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f7fe f9fd 	bl	80037ee <vListInsertEnd>
 80053f4:	e004      	b.n	8005400 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <xTaskPriorityInherit+0xe0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005400:	2301      	movs	r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e008      	b.n	8005418 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <xTaskPriorityInherit+0xe0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	429a      	cmp	r2, r3
 8005412:	d201      	bcs.n	8005418 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005418:	68fb      	ldr	r3, [r7, #12]
	}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200003b8 	.word	0x200003b8
 8005428:	200003bc 	.word	0x200003bc
 800542c:	200004c0 	.word	0x200004c0

08005430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d06e      	beq.n	8005524 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005446:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <xTaskPriorityDisinherit+0x100>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	429a      	cmp	r2, r3
 800544e:	d00a      	beq.n	8005466 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60bb      	str	r3, [r7, #8]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005488:	1e5a      	subs	r2, r3, #1
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	429a      	cmp	r2, r3
 8005498:	d044      	beq.n	8005524 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d140      	bne.n	8005524 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe f9fe 	bl	80038a8 <uxListRemove>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d115      	bne.n	80054de <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	491f      	ldr	r1, [pc, #124]	; (8005534 <xTaskPriorityDisinherit+0x104>)
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <xTaskPriorityDisinherit+0xae>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	2201      	movs	r2, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43da      	mvns	r2, r3
 80054d4:	4b18      	ldr	r3, [pc, #96]	; (8005538 <xTaskPriorityDisinherit+0x108>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4013      	ands	r3, r2
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <xTaskPriorityDisinherit+0x108>)
 80054dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	f1c3 0207 	rsb	r2, r3, #7
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	2201      	movs	r2, #1
 80054f8:	409a      	lsls	r2, r3
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <xTaskPriorityDisinherit+0x108>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4313      	orrs	r3, r2
 8005500:	4a0d      	ldr	r2, [pc, #52]	; (8005538 <xTaskPriorityDisinherit+0x108>)
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a08      	ldr	r2, [pc, #32]	; (8005534 <xTaskPriorityDisinherit+0x104>)
 8005512:	441a      	add	r2, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7fe f967 	bl	80037ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005520:	2301      	movs	r3, #1
 8005522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005524:	697b      	ldr	r3, [r7, #20]
	}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200003b8 	.word	0x200003b8
 8005534:	200003bc 	.word	0x200003bc
 8005538:	200004c0 	.word	0x200004c0

0800553c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800554a:	2301      	movs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d077      	beq.n	8005644 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60fb      	str	r3, [r7, #12]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d902      	bls.n	8005582 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	e002      	b.n	8005588 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	429a      	cmp	r2, r3
 8005590:	d058      	beq.n	8005644 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	429a      	cmp	r2, r3
 800559a:	d153      	bne.n	8005644 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d10a      	bne.n	80055bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60bb      	str	r3, [r7, #8]
}
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	db04      	blt.n	80055da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f1c3 0207 	rsb	r2, r3, #7
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	6959      	ldr	r1, [r3, #20]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4a19      	ldr	r2, [pc, #100]	; (8005650 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80055ea:	4413      	add	r3, r2
 80055ec:	4299      	cmp	r1, r3
 80055ee:	d129      	bne.n	8005644 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe f957 	bl	80038a8 <uxListRemove>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	2201      	movs	r2, #1
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43da      	mvns	r2, r3
 800560c:	4b11      	ldr	r3, [pc, #68]	; (8005654 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4013      	ands	r3, r2
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005614:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	2201      	movs	r2, #1
 800561c:	409a      	lsls	r2, r3
 800561e:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4313      	orrs	r3, r2
 8005624:	4a0b      	ldr	r2, [pc, #44]	; (8005654 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4a06      	ldr	r2, [pc, #24]	; (8005650 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005636:	441a      	add	r2, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7fe f8d5 	bl	80037ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005644:	bf00      	nop
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200003b8 	.word	0x200003b8
 8005650:	200003bc 	.word	0x200003bc
 8005654:	200004c0 	.word	0x200004c0

08005658 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <pvTaskIncrementMutexHeldCount+0x24>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <pvTaskIncrementMutexHeldCount+0x24>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800566a:	3201      	adds	r2, #1
 800566c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800566e:	4b03      	ldr	r3, [pc, #12]	; (800567c <pvTaskIncrementMutexHeldCount+0x24>)
 8005670:	681b      	ldr	r3, [r3, #0]
	}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	200003b8 	.word	0x200003b8

08005680 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800568a:	4b29      	ldr	r3, [pc, #164]	; (8005730 <prvAddCurrentTaskToDelayedList+0xb0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005690:	4b28      	ldr	r3, [pc, #160]	; (8005734 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3304      	adds	r3, #4
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe f906 	bl	80038a8 <uxListRemove>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	2201      	movs	r2, #1
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43da      	mvns	r2, r3
 80056b0:	4b21      	ldr	r3, [pc, #132]	; (8005738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4013      	ands	r3, r2
 80056b6:	4a20      	ldr	r2, [pc, #128]	; (8005738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d10a      	bne.n	80056d8 <prvAddCurrentTaskToDelayedList+0x58>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056c8:	4b1a      	ldr	r3, [pc, #104]	; (8005734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4619      	mov	r1, r3
 80056d0:	481a      	ldr	r0, [pc, #104]	; (800573c <prvAddCurrentTaskToDelayedList+0xbc>)
 80056d2:	f7fe f88c 	bl	80037ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056d6:	e026      	b.n	8005726 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056e0:	4b14      	ldr	r3, [pc, #80]	; (8005734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d209      	bcs.n	8005704 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056f0:	4b13      	ldr	r3, [pc, #76]	; (8005740 <prvAddCurrentTaskToDelayedList+0xc0>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fe f89a 	bl	8003836 <vListInsert>
}
 8005702:	e010      	b.n	8005726 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <prvAddCurrentTaskToDelayedList+0xb4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3304      	adds	r3, #4
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f7fe f890 	bl	8003836 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d202      	bcs.n	8005726 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005720:	4a09      	ldr	r2, [pc, #36]	; (8005748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200004bc 	.word	0x200004bc
 8005734:	200003b8 	.word	0x200003b8
 8005738:	200004c0 	.word	0x200004c0
 800573c:	200004a4 	.word	0x200004a4
 8005740:	20000474 	.word	0x20000474
 8005744:	20000470 	.word	0x20000470
 8005748:	200004d8 	.word	0x200004d8

0800574c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b04      	subs	r3, #4
 800575c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3b04      	subs	r3, #4
 800576a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3b04      	subs	r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800577c:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <pxPortInitialiseStack+0x64>)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b14      	subs	r3, #20
 8005786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3b04      	subs	r3, #4
 8005792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f06f 0202 	mvn.w	r2, #2
 800579a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3b20      	subs	r3, #32
 80057a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057a2:	68fb      	ldr	r3, [r7, #12]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	080057b5 	.word	0x080057b5

080057b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <prvTaskExitError+0x54>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d00a      	beq.n	80057de <prvTaskExitError+0x2a>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	60fb      	str	r3, [r7, #12]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <prvTaskExitError+0x28>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60bb      	str	r3, [r7, #8]
}
 80057f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057f2:	bf00      	nop
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0fc      	beq.n	80057f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	2000000c 	.word	0x2000000c
 800580c:	00000000 	.word	0x00000000

08005810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <pxCurrentTCBConst2>)
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	6808      	ldr	r0, [r1, #0]
 8005816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581a:	f380 8809 	msr	PSP, r0
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f380 8811 	msr	BASEPRI, r0
 800582a:	4770      	bx	lr
 800582c:	f3af 8000 	nop.w

08005830 <pxCurrentTCBConst2>:
 8005830:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop

08005838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <prvPortStartFirstTask+0x24>)
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f380 8808 	msr	MSP, r0
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8814 	msr	CONTROL, r0
 800584a:	b662      	cpsie	i
 800584c:	b661      	cpsie	f
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	df00      	svc	0
 8005858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800585a:	bf00      	nop
 800585c:	e000ed08 	.word	0xe000ed08

08005860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005866:	4b46      	ldr	r3, [pc, #280]	; (8005980 <xPortStartScheduler+0x120>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a46      	ldr	r2, [pc, #280]	; (8005984 <xPortStartScheduler+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d10a      	bne.n	8005886 <xPortStartScheduler+0x26>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005886:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <xPortStartScheduler+0x120>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3f      	ldr	r2, [pc, #252]	; (8005988 <xPortStartScheduler+0x128>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d10a      	bne.n	80058a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058a6:	4b39      	ldr	r3, [pc, #228]	; (800598c <xPortStartScheduler+0x12c>)
 80058a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4b31      	ldr	r3, [pc, #196]	; (8005990 <xPortStartScheduler+0x130>)
 80058cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ce:	4b31      	ldr	r3, [pc, #196]	; (8005994 <xPortStartScheduler+0x134>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058d4:	e009      	b.n	80058ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80058d6:	4b2f      	ldr	r3, [pc, #188]	; (8005994 <xPortStartScheduler+0x134>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3b01      	subs	r3, #1
 80058dc:	4a2d      	ldr	r2, [pc, #180]	; (8005994 <xPortStartScheduler+0x134>)
 80058de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d0ef      	beq.n	80058d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058f6:	4b27      	ldr	r3, [pc, #156]	; (8005994 <xPortStartScheduler+0x134>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d00a      	beq.n	8005918 <xPortStartScheduler+0xb8>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60bb      	str	r3, [r7, #8]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <xPortStartScheduler+0x134>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <xPortStartScheduler+0x134>)
 8005920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005922:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <xPortStartScheduler+0x134>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800592a:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <xPortStartScheduler+0x134>)
 800592c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <xPortStartScheduler+0x138>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <xPortStartScheduler+0x138>)
 800593c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <xPortStartScheduler+0x138>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a14      	ldr	r2, [pc, #80]	; (8005998 <xPortStartScheduler+0x138>)
 8005948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800594c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800594e:	f000 f8dd 	bl	8005b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <xPortStartScheduler+0x13c>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005958:	f000 f8fc 	bl	8005b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800595c:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <xPortStartScheduler+0x140>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <xPortStartScheduler+0x140>)
 8005962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005968:	f7ff ff66 	bl	8005838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800596c:	f7ff fa90 	bl	8004e90 <vTaskSwitchContext>
	prvTaskExitError();
 8005970:	f7ff ff20 	bl	80057b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	e000ed00 	.word	0xe000ed00
 8005984:	410fc271 	.word	0x410fc271
 8005988:	410fc270 	.word	0x410fc270
 800598c:	e000e400 	.word	0xe000e400
 8005990:	200004e4 	.word	0x200004e4
 8005994:	200004e8 	.word	0x200004e8
 8005998:	e000ed20 	.word	0xe000ed20
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	e000ef34 	.word	0xe000ef34

080059a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <vPortEnterCritical+0x58>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a0d      	ldr	r2, [pc, #52]	; (80059fc <vPortEnterCritical+0x58>)
 80059c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <vPortEnterCritical+0x58>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10f      	bne.n	80059f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortEnterCritical+0x5c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	603b      	str	r3, [r7, #0]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <vPortEnterCritical+0x4a>
	}
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	2000000c 	.word	0x2000000c
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <vPortExitCritical+0x50>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <vPortExitCritical+0x24>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	607b      	str	r3, [r7, #4]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <vPortExitCritical+0x50>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <vPortExitCritical+0x50>)
 8005a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <vPortExitCritical+0x50>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <vPortExitCritical+0x42>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	f383 8811 	msr	BASEPRI, r3
}
 8005a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c
	...

08005a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a60:	f3ef 8009 	mrs	r0, PSP
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <pxCurrentTCBConst>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f01e 0f10 	tst.w	lr, #16
 8005a70:	bf08      	it	eq
 8005a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	6010      	str	r0, [r2, #0]
 8005a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a84:	f380 8811 	msr	BASEPRI, r0
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f7ff f9fe 	bl	8004e90 <vTaskSwitchContext>
 8005a94:	f04f 0000 	mov.w	r0, #0
 8005a98:	f380 8811 	msr	BASEPRI, r0
 8005a9c:	bc09      	pop	{r0, r3}
 8005a9e:	6819      	ldr	r1, [r3, #0]
 8005aa0:	6808      	ldr	r0, [r1, #0]
 8005aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa6:	f01e 0f10 	tst.w	lr, #16
 8005aaa:	bf08      	it	eq
 8005aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ab0:	f380 8809 	msr	PSP, r0
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	f3af 8000 	nop.w

08005ac0 <pxCurrentTCBConst>:
 8005ac0:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
}
 8005ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ae2:	f7ff f91d 	bl	8004d20 <xTaskIncrementTick>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <xPortSysTickHandler+0x40>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	2300      	movs	r3, #0
 8005af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f383 8811 	msr	BASEPRI, r3
}
 8005afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <vPortSetupTimerInterrupt+0x34>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <vPortSetupTimerInterrupt+0x38>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <vPortSetupTimerInterrupt+0x3c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <vPortSetupTimerInterrupt+0x40>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <vPortSetupTimerInterrupt+0x44>)
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b2e:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <vPortSetupTimerInterrupt+0x34>)
 8005b30:	2207      	movs	r2, #7
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000e010 	.word	0xe000e010
 8005b44:	e000e018 	.word	0xe000e018
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	10624dd3 	.word	0x10624dd3
 8005b50:	e000e014 	.word	0xe000e014

08005b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b64 <vPortEnableVFP+0x10>
 8005b58:	6801      	ldr	r1, [r0, #0]
 8005b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b5e:	6001      	str	r1, [r0, #0]
 8005b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b62:	bf00      	nop
 8005b64:	e000ed88 	.word	0xe000ed88

08005b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b6e:	f3ef 8305 	mrs	r3, IPSR
 8005b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b0f      	cmp	r3, #15
 8005b78:	d914      	bls.n	8005ba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <vPortValidateInterruptPriority+0x70>)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b84:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <vPortValidateInterruptPriority+0x74>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	7afa      	ldrb	r2, [r7, #11]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d20a      	bcs.n	8005ba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	607b      	str	r3, [r7, #4]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ba4:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <vPortValidateInterruptPriority+0x78>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bac:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <vPortValidateInterruptPriority+0x7c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d90a      	bls.n	8005bca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	603b      	str	r3, [r7, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <vPortValidateInterruptPriority+0x60>
	}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	e000e3f0 	.word	0xe000e3f0
 8005bdc:	200004e4 	.word	0x200004e4
 8005be0:	e000ed0c 	.word	0xe000ed0c
 8005be4:	200004e8 	.word	0x200004e8

08005be8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bf4:	f7fe ffea 	bl	8004bcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bf8:	4b5b      	ldr	r3, [pc, #364]	; (8005d68 <pvPortMalloc+0x180>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c00:	f000 f920 	bl	8005e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c04:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <pvPortMalloc+0x184>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f040 8093 	bne.w	8005d38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01d      	beq.n	8005c54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c18:	2208      	movs	r2, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f023 0307 	bic.w	r3, r3, #7
 8005c30:	3308      	adds	r3, #8
 8005c32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <pvPortMalloc+0x6c>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	617b      	str	r3, [r7, #20]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d06e      	beq.n	8005d38 <pvPortMalloc+0x150>
 8005c5a:	4b45      	ldr	r3, [pc, #276]	; (8005d70 <pvPortMalloc+0x188>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d869      	bhi.n	8005d38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c64:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <pvPortMalloc+0x18c>)
 8005c66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c68:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <pvPortMalloc+0x18c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c6e:	e004      	b.n	8005c7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d903      	bls.n	8005c8c <pvPortMalloc+0xa4>
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f1      	bne.n	8005c70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c8c:	4b36      	ldr	r3, [pc, #216]	; (8005d68 <pvPortMalloc+0x180>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d050      	beq.n	8005d38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d91f      	bls.n	8005cf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <pvPortMalloc+0xf8>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	613b      	str	r3, [r7, #16]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cf2:	69b8      	ldr	r0, [r7, #24]
 8005cf4:	f000 f908 	bl	8005f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <pvPortMalloc+0x188>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <pvPortMalloc+0x188>)
 8005d04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d06:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <pvPortMalloc+0x188>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <pvPortMalloc+0x190>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d203      	bcs.n	8005d1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d12:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <pvPortMalloc+0x188>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <pvPortMalloc+0x190>)
 8005d18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <pvPortMalloc+0x184>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <pvPortMalloc+0x194>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a11      	ldr	r2, [pc, #68]	; (8005d7c <pvPortMalloc+0x194>)
 8005d36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d38:	f7fe ff56 	bl	8004be8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <pvPortMalloc+0x174>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60fb      	str	r3, [r7, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <pvPortMalloc+0x172>
	return pvReturn;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3728      	adds	r7, #40	; 0x28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200040f4 	.word	0x200040f4
 8005d6c:	20004108 	.word	0x20004108
 8005d70:	200040f8 	.word	0x200040f8
 8005d74:	200040ec 	.word	0x200040ec
 8005d78:	200040fc 	.word	0x200040fc
 8005d7c:	20004100 	.word	0x20004100

08005d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d04d      	beq.n	8005e2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d92:	2308      	movs	r3, #8
 8005d94:	425b      	negs	r3, r3
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4413      	add	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <vPortFree+0xb8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <vPortFree+0x44>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <vPortFree+0x62>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60bb      	str	r3, [r7, #8]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <vPortFree+0xb8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01e      	beq.n	8005e2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11a      	bne.n	8005e2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <vPortFree+0xb8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	43db      	mvns	r3, r3
 8005e02:	401a      	ands	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e08:	f7fe fee0 	bl	8004bcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <vPortFree+0xbc>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <vPortFree+0xbc>)
 8005e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e1a:	6938      	ldr	r0, [r7, #16]
 8005e1c:	f000 f874 	bl	8005f08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <vPortFree+0xc0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <vPortFree+0xc0>)
 8005e28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e2a:	f7fe fedd 	bl	8004be8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20004108 	.word	0x20004108
 8005e3c:	200040f8 	.word	0x200040f8
 8005e40:	20004104 	.word	0x20004104

08005e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <prvHeapInit+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3307      	adds	r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0307 	bic.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <prvHeapInit+0xac>)
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <prvHeapInit+0xb0>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <prvHeapInit+0xb0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e90:	2208      	movs	r2, #8
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <prvHeapInit+0xb4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <prvHeapInit+0xb8>)
 8005ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <prvHeapInit+0xbc>)
 8005eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <prvHeapInit+0xc0>)
 8005ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ee2:	601a      	str	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	200004ec 	.word	0x200004ec
 8005ef4:	200040ec 	.word	0x200040ec
 8005ef8:	200040f4 	.word	0x200040f4
 8005efc:	200040fc 	.word	0x200040fc
 8005f00:	200040f8 	.word	0x200040f8
 8005f04:	20004108 	.word	0x20004108

08005f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f10:	4b28      	ldr	r3, [pc, #160]	; (8005fb4 <prvInsertBlockIntoFreeList+0xac>)
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e002      	b.n	8005f1c <prvInsertBlockIntoFreeList+0x14>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d8f7      	bhi.n	8005f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4413      	add	r3, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d108      	bne.n	8005f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	441a      	add	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d118      	bne.n	8005f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d00d      	beq.n	8005f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e008      	b.n	8005f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f86:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e003      	b.n	8005f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d002      	beq.n	8005fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	200040ec 	.word	0x200040ec
 8005fb8:	200040f4 	.word	0x200040f4

08005fbc <srand>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <srand+0x44>)
 8005fc0:	681d      	ldr	r5, [r3, #0]
 8005fc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	b9b3      	cbnz	r3, 8005ff6 <srand+0x3a>
 8005fc8:	2018      	movs	r0, #24
 8005fca:	f000 fa89 	bl	80064e0 <malloc>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6328      	str	r0, [r5, #48]	; 0x30
 8005fd2:	b920      	cbnz	r0, 8005fde <srand+0x22>
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <srand+0x48>)
 8005fd6:	480c      	ldr	r0, [pc, #48]	; (8006008 <srand+0x4c>)
 8005fd8:	2146      	movs	r1, #70	; 0x46
 8005fda:	f000 fa17 	bl	800640c <__assert_func>
 8005fde:	490b      	ldr	r1, [pc, #44]	; (800600c <srand+0x50>)
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <srand+0x54>)
 8005fe2:	e9c0 1300 	strd	r1, r3, [r0]
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <srand+0x58>)
 8005fe8:	6083      	str	r3, [r0, #8]
 8005fea:	230b      	movs	r3, #11
 8005fec:	8183      	strh	r3, [r0, #12]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005ff6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	611c      	str	r4, [r3, #16]
 8005ffc:	615a      	str	r2, [r3, #20]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000068 	.word	0x20000068
 8006004:	08007184 	.word	0x08007184
 8006008:	0800719b 	.word	0x0800719b
 800600c:	abcd330e 	.word	0xabcd330e
 8006010:	e66d1234 	.word	0xe66d1234
 8006014:	0005deec 	.word	0x0005deec

08006018 <rand>:
 8006018:	4b16      	ldr	r3, [pc, #88]	; (8006074 <rand+0x5c>)
 800601a:	b510      	push	{r4, lr}
 800601c:	681c      	ldr	r4, [r3, #0]
 800601e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006020:	b9b3      	cbnz	r3, 8006050 <rand+0x38>
 8006022:	2018      	movs	r0, #24
 8006024:	f000 fa5c 	bl	80064e0 <malloc>
 8006028:	4602      	mov	r2, r0
 800602a:	6320      	str	r0, [r4, #48]	; 0x30
 800602c:	b920      	cbnz	r0, 8006038 <rand+0x20>
 800602e:	4b12      	ldr	r3, [pc, #72]	; (8006078 <rand+0x60>)
 8006030:	4812      	ldr	r0, [pc, #72]	; (800607c <rand+0x64>)
 8006032:	2152      	movs	r1, #82	; 0x52
 8006034:	f000 f9ea 	bl	800640c <__assert_func>
 8006038:	4911      	ldr	r1, [pc, #68]	; (8006080 <rand+0x68>)
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <rand+0x6c>)
 800603c:	e9c0 1300 	strd	r1, r3, [r0]
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <rand+0x70>)
 8006042:	6083      	str	r3, [r0, #8]
 8006044:	230b      	movs	r3, #11
 8006046:	8183      	strh	r3, [r0, #12]
 8006048:	2100      	movs	r1, #0
 800604a:	2001      	movs	r0, #1
 800604c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006050:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006052:	480e      	ldr	r0, [pc, #56]	; (800608c <rand+0x74>)
 8006054:	690b      	ldr	r3, [r1, #16]
 8006056:	694c      	ldr	r4, [r1, #20]
 8006058:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <rand+0x78>)
 800605a:	4358      	muls	r0, r3
 800605c:	fb02 0004 	mla	r0, r2, r4, r0
 8006060:	fba3 3202 	umull	r3, r2, r3, r2
 8006064:	3301      	adds	r3, #1
 8006066:	eb40 0002 	adc.w	r0, r0, r2
 800606a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800606e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006072:	bd10      	pop	{r4, pc}
 8006074:	20000068 	.word	0x20000068
 8006078:	08007184 	.word	0x08007184
 800607c:	0800719b 	.word	0x0800719b
 8006080:	abcd330e 	.word	0xabcd330e
 8006084:	e66d1234 	.word	0xe66d1234
 8006088:	0005deec 	.word	0x0005deec
 800608c:	5851f42d 	.word	0x5851f42d
 8006090:	4c957f2d 	.word	0x4c957f2d

08006094 <std>:
 8006094:	2300      	movs	r3, #0
 8006096:	b510      	push	{r4, lr}
 8006098:	4604      	mov	r4, r0
 800609a:	e9c0 3300 	strd	r3, r3, [r0]
 800609e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060a2:	6083      	str	r3, [r0, #8]
 80060a4:	8181      	strh	r1, [r0, #12]
 80060a6:	6643      	str	r3, [r0, #100]	; 0x64
 80060a8:	81c2      	strh	r2, [r0, #14]
 80060aa:	6183      	str	r3, [r0, #24]
 80060ac:	4619      	mov	r1, r3
 80060ae:	2208      	movs	r2, #8
 80060b0:	305c      	adds	r0, #92	; 0x5c
 80060b2:	f000 f8f4 	bl	800629e <memset>
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <std+0x58>)
 80060b8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <std+0x5c>)
 80060bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <std+0x60>)
 80060c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <std+0x64>)
 80060c4:	6323      	str	r3, [r4, #48]	; 0x30
 80060c6:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <std+0x68>)
 80060c8:	6224      	str	r4, [r4, #32]
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d006      	beq.n	80060dc <std+0x48>
 80060ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060d2:	4294      	cmp	r4, r2
 80060d4:	d002      	beq.n	80060dc <std+0x48>
 80060d6:	33d0      	adds	r3, #208	; 0xd0
 80060d8:	429c      	cmp	r4, r3
 80060da:	d105      	bne.n	80060e8 <std+0x54>
 80060dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e4:	f000 b980 	b.w	80063e8 <__retarget_lock_init_recursive>
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	bf00      	nop
 80060ec:	08006219 	.word	0x08006219
 80060f0:	0800623b 	.word	0x0800623b
 80060f4:	08006273 	.word	0x08006273
 80060f8:	08006297 	.word	0x08006297
 80060fc:	2000410c 	.word	0x2000410c

08006100 <stdio_exit_handler>:
 8006100:	4a02      	ldr	r2, [pc, #8]	; (800610c <stdio_exit_handler+0xc>)
 8006102:	4903      	ldr	r1, [pc, #12]	; (8006110 <stdio_exit_handler+0x10>)
 8006104:	4803      	ldr	r0, [pc, #12]	; (8006114 <stdio_exit_handler+0x14>)
 8006106:	f000 b869 	b.w	80061dc <_fwalk_sglue>
 800610a:	bf00      	nop
 800610c:	20000010 	.word	0x20000010
 8006110:	08006755 	.word	0x08006755
 8006114:	2000001c 	.word	0x2000001c

08006118 <cleanup_stdio>:
 8006118:	6841      	ldr	r1, [r0, #4]
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <cleanup_stdio+0x34>)
 800611c:	4299      	cmp	r1, r3
 800611e:	b510      	push	{r4, lr}
 8006120:	4604      	mov	r4, r0
 8006122:	d001      	beq.n	8006128 <cleanup_stdio+0x10>
 8006124:	f000 fb16 	bl	8006754 <_fflush_r>
 8006128:	68a1      	ldr	r1, [r4, #8]
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <cleanup_stdio+0x38>)
 800612c:	4299      	cmp	r1, r3
 800612e:	d002      	beq.n	8006136 <cleanup_stdio+0x1e>
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fb0f 	bl	8006754 <_fflush_r>
 8006136:	68e1      	ldr	r1, [r4, #12]
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <cleanup_stdio+0x3c>)
 800613a:	4299      	cmp	r1, r3
 800613c:	d004      	beq.n	8006148 <cleanup_stdio+0x30>
 800613e:	4620      	mov	r0, r4
 8006140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006144:	f000 bb06 	b.w	8006754 <_fflush_r>
 8006148:	bd10      	pop	{r4, pc}
 800614a:	bf00      	nop
 800614c:	2000410c 	.word	0x2000410c
 8006150:	20004174 	.word	0x20004174
 8006154:	200041dc 	.word	0x200041dc

08006158 <global_stdio_init.part.0>:
 8006158:	b510      	push	{r4, lr}
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <global_stdio_init.part.0+0x30>)
 800615c:	4c0b      	ldr	r4, [pc, #44]	; (800618c <global_stdio_init.part.0+0x34>)
 800615e:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <global_stdio_init.part.0+0x38>)
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	4620      	mov	r0, r4
 8006164:	2200      	movs	r2, #0
 8006166:	2104      	movs	r1, #4
 8006168:	f7ff ff94 	bl	8006094 <std>
 800616c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006170:	2201      	movs	r2, #1
 8006172:	2109      	movs	r1, #9
 8006174:	f7ff ff8e 	bl	8006094 <std>
 8006178:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800617c:	2202      	movs	r2, #2
 800617e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006182:	2112      	movs	r1, #18
 8006184:	f7ff bf86 	b.w	8006094 <std>
 8006188:	20004244 	.word	0x20004244
 800618c:	2000410c 	.word	0x2000410c
 8006190:	08006101 	.word	0x08006101

08006194 <__sfp_lock_acquire>:
 8006194:	4801      	ldr	r0, [pc, #4]	; (800619c <__sfp_lock_acquire+0x8>)
 8006196:	f000 b928 	b.w	80063ea <__retarget_lock_acquire_recursive>
 800619a:	bf00      	nop
 800619c:	2000424d 	.word	0x2000424d

080061a0 <__sfp_lock_release>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__sfp_lock_release+0x8>)
 80061a2:	f000 b923 	b.w	80063ec <__retarget_lock_release_recursive>
 80061a6:	bf00      	nop
 80061a8:	2000424d 	.word	0x2000424d

080061ac <__sinit>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4604      	mov	r4, r0
 80061b0:	f7ff fff0 	bl	8006194 <__sfp_lock_acquire>
 80061b4:	6a23      	ldr	r3, [r4, #32]
 80061b6:	b11b      	cbz	r3, 80061c0 <__sinit+0x14>
 80061b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061bc:	f7ff bff0 	b.w	80061a0 <__sfp_lock_release>
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <__sinit+0x28>)
 80061c2:	6223      	str	r3, [r4, #32]
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <__sinit+0x2c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f5      	bne.n	80061b8 <__sinit+0xc>
 80061cc:	f7ff ffc4 	bl	8006158 <global_stdio_init.part.0>
 80061d0:	e7f2      	b.n	80061b8 <__sinit+0xc>
 80061d2:	bf00      	nop
 80061d4:	08006119 	.word	0x08006119
 80061d8:	20004244 	.word	0x20004244

080061dc <_fwalk_sglue>:
 80061dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e0:	4607      	mov	r7, r0
 80061e2:	4688      	mov	r8, r1
 80061e4:	4614      	mov	r4, r2
 80061e6:	2600      	movs	r6, #0
 80061e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ec:	f1b9 0901 	subs.w	r9, r9, #1
 80061f0:	d505      	bpl.n	80061fe <_fwalk_sglue+0x22>
 80061f2:	6824      	ldr	r4, [r4, #0]
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	d1f7      	bne.n	80061e8 <_fwalk_sglue+0xc>
 80061f8:	4630      	mov	r0, r6
 80061fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d907      	bls.n	8006214 <_fwalk_sglue+0x38>
 8006204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006208:	3301      	adds	r3, #1
 800620a:	d003      	beq.n	8006214 <_fwalk_sglue+0x38>
 800620c:	4629      	mov	r1, r5
 800620e:	4638      	mov	r0, r7
 8006210:	47c0      	blx	r8
 8006212:	4306      	orrs	r6, r0
 8006214:	3568      	adds	r5, #104	; 0x68
 8006216:	e7e9      	b.n	80061ec <_fwalk_sglue+0x10>

08006218 <__sread>:
 8006218:	b510      	push	{r4, lr}
 800621a:	460c      	mov	r4, r1
 800621c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006220:	f000 f894 	bl	800634c <_read_r>
 8006224:	2800      	cmp	r0, #0
 8006226:	bfab      	itete	ge
 8006228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800622a:	89a3      	ldrhlt	r3, [r4, #12]
 800622c:	181b      	addge	r3, r3, r0
 800622e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006232:	bfac      	ite	ge
 8006234:	6563      	strge	r3, [r4, #84]	; 0x54
 8006236:	81a3      	strhlt	r3, [r4, #12]
 8006238:	bd10      	pop	{r4, pc}

0800623a <__swrite>:
 800623a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800623e:	461f      	mov	r7, r3
 8006240:	898b      	ldrh	r3, [r1, #12]
 8006242:	05db      	lsls	r3, r3, #23
 8006244:	4605      	mov	r5, r0
 8006246:	460c      	mov	r4, r1
 8006248:	4616      	mov	r6, r2
 800624a:	d505      	bpl.n	8006258 <__swrite+0x1e>
 800624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006250:	2302      	movs	r3, #2
 8006252:	2200      	movs	r2, #0
 8006254:	f000 f868 	bl	8006328 <_lseek_r>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800625e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	4632      	mov	r2, r6
 8006266:	463b      	mov	r3, r7
 8006268:	4628      	mov	r0, r5
 800626a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	f000 b87f 	b.w	8006370 <_write_r>

08006272 <__sseek>:
 8006272:	b510      	push	{r4, lr}
 8006274:	460c      	mov	r4, r1
 8006276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627a:	f000 f855 	bl	8006328 <_lseek_r>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	bf15      	itete	ne
 8006284:	6560      	strne	r0, [r4, #84]	; 0x54
 8006286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800628a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800628e:	81a3      	strheq	r3, [r4, #12]
 8006290:	bf18      	it	ne
 8006292:	81a3      	strhne	r3, [r4, #12]
 8006294:	bd10      	pop	{r4, pc}

08006296 <__sclose>:
 8006296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629a:	f000 b823 	b.w	80062e4 <_close_r>

0800629e <memset>:
 800629e:	4402      	add	r2, r0
 80062a0:	4603      	mov	r3, r0
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d100      	bne.n	80062a8 <memset+0xa>
 80062a6:	4770      	bx	lr
 80062a8:	f803 1b01 	strb.w	r1, [r3], #1
 80062ac:	e7f9      	b.n	80062a2 <memset+0x4>
	...

080062b0 <time>:
 80062b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062b2:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <time+0x30>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	4669      	mov	r1, sp
 80062b8:	4604      	mov	r4, r0
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	f000 f822 	bl	8006304 <_gettimeofday_r>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	bfbe      	ittt	lt
 80062c4:	f04f 32ff 	movlt.w	r2, #4294967295
 80062c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80062cc:	e9cd 2300 	strdlt	r2, r3, [sp]
 80062d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062d4:	b10c      	cbz	r4, 80062da <time+0x2a>
 80062d6:	e9c4 0100 	strd	r0, r1, [r4]
 80062da:	b004      	add	sp, #16
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	20000068 	.word	0x20000068

080062e4 <_close_r>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	4d06      	ldr	r5, [pc, #24]	; (8006300 <_close_r+0x1c>)
 80062e8:	2300      	movs	r3, #0
 80062ea:	4604      	mov	r4, r0
 80062ec:	4608      	mov	r0, r1
 80062ee:	602b      	str	r3, [r5, #0]
 80062f0:	f7fb fbda 	bl	8001aa8 <_close>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_close_r+0x1a>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_close_r+0x1a>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	20004248 	.word	0x20004248

08006304 <_gettimeofday_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d07      	ldr	r5, [pc, #28]	; (8006324 <_gettimeofday_r+0x20>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	f000 fea1 	bl	8007058 <_gettimeofday>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d102      	bne.n	8006320 <_gettimeofday_r+0x1c>
 800631a:	682b      	ldr	r3, [r5, #0]
 800631c:	b103      	cbz	r3, 8006320 <_gettimeofday_r+0x1c>
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	20004248 	.word	0x20004248

08006328 <_lseek_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d07      	ldr	r5, [pc, #28]	; (8006348 <_lseek_r+0x20>)
 800632c:	4604      	mov	r4, r0
 800632e:	4608      	mov	r0, r1
 8006330:	4611      	mov	r1, r2
 8006332:	2200      	movs	r2, #0
 8006334:	602a      	str	r2, [r5, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	f7fb fbdd 	bl	8001af6 <_lseek>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_lseek_r+0x1e>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	b103      	cbz	r3, 8006346 <_lseek_r+0x1e>
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	20004248 	.word	0x20004248

0800634c <_read_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d07      	ldr	r5, [pc, #28]	; (800636c <_read_r+0x20>)
 8006350:	4604      	mov	r4, r0
 8006352:	4608      	mov	r0, r1
 8006354:	4611      	mov	r1, r2
 8006356:	2200      	movs	r2, #0
 8006358:	602a      	str	r2, [r5, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f7fb fb6b 	bl	8001a36 <_read>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_read_r+0x1e>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_read_r+0x1e>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	20004248 	.word	0x20004248

08006370 <_write_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d07      	ldr	r5, [pc, #28]	; (8006390 <_write_r+0x20>)
 8006374:	4604      	mov	r4, r0
 8006376:	4608      	mov	r0, r1
 8006378:	4611      	mov	r1, r2
 800637a:	2200      	movs	r2, #0
 800637c:	602a      	str	r2, [r5, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	f7fb fb76 	bl	8001a70 <_write>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_write_r+0x1e>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_write_r+0x1e>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	20004248 	.word	0x20004248

08006394 <__errno>:
 8006394:	4b01      	ldr	r3, [pc, #4]	; (800639c <__errno+0x8>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20000068 	.word	0x20000068

080063a0 <__libc_init_array>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	4d0d      	ldr	r5, [pc, #52]	; (80063d8 <__libc_init_array+0x38>)
 80063a4:	4c0d      	ldr	r4, [pc, #52]	; (80063dc <__libc_init_array+0x3c>)
 80063a6:	1b64      	subs	r4, r4, r5
 80063a8:	10a4      	asrs	r4, r4, #2
 80063aa:	2600      	movs	r6, #0
 80063ac:	42a6      	cmp	r6, r4
 80063ae:	d109      	bne.n	80063c4 <__libc_init_array+0x24>
 80063b0:	4d0b      	ldr	r5, [pc, #44]	; (80063e0 <__libc_init_array+0x40>)
 80063b2:	4c0c      	ldr	r4, [pc, #48]	; (80063e4 <__libc_init_array+0x44>)
 80063b4:	f000 fe58 	bl	8007068 <_init>
 80063b8:	1b64      	subs	r4, r4, r5
 80063ba:	10a4      	asrs	r4, r4, #2
 80063bc:	2600      	movs	r6, #0
 80063be:	42a6      	cmp	r6, r4
 80063c0:	d105      	bne.n	80063ce <__libc_init_array+0x2e>
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c8:	4798      	blx	r3
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7ee      	b.n	80063ac <__libc_init_array+0xc>
 80063ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d2:	4798      	blx	r3
 80063d4:	3601      	adds	r6, #1
 80063d6:	e7f2      	b.n	80063be <__libc_init_array+0x1e>
 80063d8:	0800726c 	.word	0x0800726c
 80063dc:	0800726c 	.word	0x0800726c
 80063e0:	0800726c 	.word	0x0800726c
 80063e4:	08007270 	.word	0x08007270

080063e8 <__retarget_lock_init_recursive>:
 80063e8:	4770      	bx	lr

080063ea <__retarget_lock_acquire_recursive>:
 80063ea:	4770      	bx	lr

080063ec <__retarget_lock_release_recursive>:
 80063ec:	4770      	bx	lr

080063ee <memcpy>:
 80063ee:	440a      	add	r2, r1
 80063f0:	4291      	cmp	r1, r2
 80063f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f6:	d100      	bne.n	80063fa <memcpy+0xc>
 80063f8:	4770      	bx	lr
 80063fa:	b510      	push	{r4, lr}
 80063fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006404:	4291      	cmp	r1, r2
 8006406:	d1f9      	bne.n	80063fc <memcpy+0xe>
 8006408:	bd10      	pop	{r4, pc}
	...

0800640c <__assert_func>:
 800640c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800640e:	4614      	mov	r4, r2
 8006410:	461a      	mov	r2, r3
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <__assert_func+0x2c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4605      	mov	r5, r0
 8006418:	68d8      	ldr	r0, [r3, #12]
 800641a:	b14c      	cbz	r4, 8006430 <__assert_func+0x24>
 800641c:	4b07      	ldr	r3, [pc, #28]	; (800643c <__assert_func+0x30>)
 800641e:	9100      	str	r1, [sp, #0]
 8006420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006424:	4906      	ldr	r1, [pc, #24]	; (8006440 <__assert_func+0x34>)
 8006426:	462b      	mov	r3, r5
 8006428:	f000 f9bc 	bl	80067a4 <fiprintf>
 800642c:	f000 f9dc 	bl	80067e8 <abort>
 8006430:	4b04      	ldr	r3, [pc, #16]	; (8006444 <__assert_func+0x38>)
 8006432:	461c      	mov	r4, r3
 8006434:	e7f3      	b.n	800641e <__assert_func+0x12>
 8006436:	bf00      	nop
 8006438:	20000068 	.word	0x20000068
 800643c:	080071f3 	.word	0x080071f3
 8006440:	08007200 	.word	0x08007200
 8006444:	0800722e 	.word	0x0800722e

08006448 <_free_r>:
 8006448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800644a:	2900      	cmp	r1, #0
 800644c:	d044      	beq.n	80064d8 <_free_r+0x90>
 800644e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006452:	9001      	str	r0, [sp, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f1a1 0404 	sub.w	r4, r1, #4
 800645a:	bfb8      	it	lt
 800645c:	18e4      	addlt	r4, r4, r3
 800645e:	f000 f8e7 	bl	8006630 <__malloc_lock>
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <_free_r+0x94>)
 8006464:	9801      	ldr	r0, [sp, #4]
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	b933      	cbnz	r3, 8006478 <_free_r+0x30>
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	6014      	str	r4, [r2, #0]
 800646e:	b003      	add	sp, #12
 8006470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006474:	f000 b8e2 	b.w	800663c <__malloc_unlock>
 8006478:	42a3      	cmp	r3, r4
 800647a:	d908      	bls.n	800648e <_free_r+0x46>
 800647c:	6825      	ldr	r5, [r4, #0]
 800647e:	1961      	adds	r1, r4, r5
 8006480:	428b      	cmp	r3, r1
 8006482:	bf01      	itttt	eq
 8006484:	6819      	ldreq	r1, [r3, #0]
 8006486:	685b      	ldreq	r3, [r3, #4]
 8006488:	1949      	addeq	r1, r1, r5
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	e7ed      	b.n	800646a <_free_r+0x22>
 800648e:	461a      	mov	r2, r3
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b10b      	cbz	r3, 8006498 <_free_r+0x50>
 8006494:	42a3      	cmp	r3, r4
 8006496:	d9fa      	bls.n	800648e <_free_r+0x46>
 8006498:	6811      	ldr	r1, [r2, #0]
 800649a:	1855      	adds	r5, r2, r1
 800649c:	42a5      	cmp	r5, r4
 800649e:	d10b      	bne.n	80064b8 <_free_r+0x70>
 80064a0:	6824      	ldr	r4, [r4, #0]
 80064a2:	4421      	add	r1, r4
 80064a4:	1854      	adds	r4, r2, r1
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	d1e0      	bne.n	800646e <_free_r+0x26>
 80064ac:	681c      	ldr	r4, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	6053      	str	r3, [r2, #4]
 80064b2:	440c      	add	r4, r1
 80064b4:	6014      	str	r4, [r2, #0]
 80064b6:	e7da      	b.n	800646e <_free_r+0x26>
 80064b8:	d902      	bls.n	80064c0 <_free_r+0x78>
 80064ba:	230c      	movs	r3, #12
 80064bc:	6003      	str	r3, [r0, #0]
 80064be:	e7d6      	b.n	800646e <_free_r+0x26>
 80064c0:	6825      	ldr	r5, [r4, #0]
 80064c2:	1961      	adds	r1, r4, r5
 80064c4:	428b      	cmp	r3, r1
 80064c6:	bf04      	itt	eq
 80064c8:	6819      	ldreq	r1, [r3, #0]
 80064ca:	685b      	ldreq	r3, [r3, #4]
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	bf04      	itt	eq
 80064d0:	1949      	addeq	r1, r1, r5
 80064d2:	6021      	streq	r1, [r4, #0]
 80064d4:	6054      	str	r4, [r2, #4]
 80064d6:	e7ca      	b.n	800646e <_free_r+0x26>
 80064d8:	b003      	add	sp, #12
 80064da:	bd30      	pop	{r4, r5, pc}
 80064dc:	20004250 	.word	0x20004250

080064e0 <malloc>:
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <malloc+0xc>)
 80064e2:	4601      	mov	r1, r0
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	f000 b823 	b.w	8006530 <_malloc_r>
 80064ea:	bf00      	nop
 80064ec:	20000068 	.word	0x20000068

080064f0 <sbrk_aligned>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4e0e      	ldr	r6, [pc, #56]	; (800652c <sbrk_aligned+0x3c>)
 80064f4:	460c      	mov	r4, r1
 80064f6:	6831      	ldr	r1, [r6, #0]
 80064f8:	4605      	mov	r5, r0
 80064fa:	b911      	cbnz	r1, 8006502 <sbrk_aligned+0x12>
 80064fc:	f000 f964 	bl	80067c8 <_sbrk_r>
 8006500:	6030      	str	r0, [r6, #0]
 8006502:	4621      	mov	r1, r4
 8006504:	4628      	mov	r0, r5
 8006506:	f000 f95f 	bl	80067c8 <_sbrk_r>
 800650a:	1c43      	adds	r3, r0, #1
 800650c:	d00a      	beq.n	8006524 <sbrk_aligned+0x34>
 800650e:	1cc4      	adds	r4, r0, #3
 8006510:	f024 0403 	bic.w	r4, r4, #3
 8006514:	42a0      	cmp	r0, r4
 8006516:	d007      	beq.n	8006528 <sbrk_aligned+0x38>
 8006518:	1a21      	subs	r1, r4, r0
 800651a:	4628      	mov	r0, r5
 800651c:	f000 f954 	bl	80067c8 <_sbrk_r>
 8006520:	3001      	adds	r0, #1
 8006522:	d101      	bne.n	8006528 <sbrk_aligned+0x38>
 8006524:	f04f 34ff 	mov.w	r4, #4294967295
 8006528:	4620      	mov	r0, r4
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	20004254 	.word	0x20004254

08006530 <_malloc_r>:
 8006530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006534:	1ccd      	adds	r5, r1, #3
 8006536:	f025 0503 	bic.w	r5, r5, #3
 800653a:	3508      	adds	r5, #8
 800653c:	2d0c      	cmp	r5, #12
 800653e:	bf38      	it	cc
 8006540:	250c      	movcc	r5, #12
 8006542:	2d00      	cmp	r5, #0
 8006544:	4607      	mov	r7, r0
 8006546:	db01      	blt.n	800654c <_malloc_r+0x1c>
 8006548:	42a9      	cmp	r1, r5
 800654a:	d905      	bls.n	8006558 <_malloc_r+0x28>
 800654c:	230c      	movs	r3, #12
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	2600      	movs	r6, #0
 8006552:	4630      	mov	r0, r6
 8006554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006558:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800662c <_malloc_r+0xfc>
 800655c:	f000 f868 	bl	8006630 <__malloc_lock>
 8006560:	f8d8 3000 	ldr.w	r3, [r8]
 8006564:	461c      	mov	r4, r3
 8006566:	bb5c      	cbnz	r4, 80065c0 <_malloc_r+0x90>
 8006568:	4629      	mov	r1, r5
 800656a:	4638      	mov	r0, r7
 800656c:	f7ff ffc0 	bl	80064f0 <sbrk_aligned>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	4604      	mov	r4, r0
 8006574:	d155      	bne.n	8006622 <_malloc_r+0xf2>
 8006576:	f8d8 4000 	ldr.w	r4, [r8]
 800657a:	4626      	mov	r6, r4
 800657c:	2e00      	cmp	r6, #0
 800657e:	d145      	bne.n	800660c <_malloc_r+0xdc>
 8006580:	2c00      	cmp	r4, #0
 8006582:	d048      	beq.n	8006616 <_malloc_r+0xe6>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	4631      	mov	r1, r6
 8006588:	4638      	mov	r0, r7
 800658a:	eb04 0903 	add.w	r9, r4, r3
 800658e:	f000 f91b 	bl	80067c8 <_sbrk_r>
 8006592:	4581      	cmp	r9, r0
 8006594:	d13f      	bne.n	8006616 <_malloc_r+0xe6>
 8006596:	6821      	ldr	r1, [r4, #0]
 8006598:	1a6d      	subs	r5, r5, r1
 800659a:	4629      	mov	r1, r5
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff ffa7 	bl	80064f0 <sbrk_aligned>
 80065a2:	3001      	adds	r0, #1
 80065a4:	d037      	beq.n	8006616 <_malloc_r+0xe6>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	442b      	add	r3, r5
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	f8d8 3000 	ldr.w	r3, [r8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d038      	beq.n	8006626 <_malloc_r+0xf6>
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	42a2      	cmp	r2, r4
 80065b8:	d12b      	bne.n	8006612 <_malloc_r+0xe2>
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
 80065be:	e00f      	b.n	80065e0 <_malloc_r+0xb0>
 80065c0:	6822      	ldr	r2, [r4, #0]
 80065c2:	1b52      	subs	r2, r2, r5
 80065c4:	d41f      	bmi.n	8006606 <_malloc_r+0xd6>
 80065c6:	2a0b      	cmp	r2, #11
 80065c8:	d917      	bls.n	80065fa <_malloc_r+0xca>
 80065ca:	1961      	adds	r1, r4, r5
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	6025      	str	r5, [r4, #0]
 80065d0:	bf18      	it	ne
 80065d2:	6059      	strne	r1, [r3, #4]
 80065d4:	6863      	ldr	r3, [r4, #4]
 80065d6:	bf08      	it	eq
 80065d8:	f8c8 1000 	streq.w	r1, [r8]
 80065dc:	5162      	str	r2, [r4, r5]
 80065de:	604b      	str	r3, [r1, #4]
 80065e0:	4638      	mov	r0, r7
 80065e2:	f104 060b 	add.w	r6, r4, #11
 80065e6:	f000 f829 	bl	800663c <__malloc_unlock>
 80065ea:	f026 0607 	bic.w	r6, r6, #7
 80065ee:	1d23      	adds	r3, r4, #4
 80065f0:	1af2      	subs	r2, r6, r3
 80065f2:	d0ae      	beq.n	8006552 <_malloc_r+0x22>
 80065f4:	1b9b      	subs	r3, r3, r6
 80065f6:	50a3      	str	r3, [r4, r2]
 80065f8:	e7ab      	b.n	8006552 <_malloc_r+0x22>
 80065fa:	42a3      	cmp	r3, r4
 80065fc:	6862      	ldr	r2, [r4, #4]
 80065fe:	d1dd      	bne.n	80065bc <_malloc_r+0x8c>
 8006600:	f8c8 2000 	str.w	r2, [r8]
 8006604:	e7ec      	b.n	80065e0 <_malloc_r+0xb0>
 8006606:	4623      	mov	r3, r4
 8006608:	6864      	ldr	r4, [r4, #4]
 800660a:	e7ac      	b.n	8006566 <_malloc_r+0x36>
 800660c:	4634      	mov	r4, r6
 800660e:	6876      	ldr	r6, [r6, #4]
 8006610:	e7b4      	b.n	800657c <_malloc_r+0x4c>
 8006612:	4613      	mov	r3, r2
 8006614:	e7cc      	b.n	80065b0 <_malloc_r+0x80>
 8006616:	230c      	movs	r3, #12
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4638      	mov	r0, r7
 800661c:	f000 f80e 	bl	800663c <__malloc_unlock>
 8006620:	e797      	b.n	8006552 <_malloc_r+0x22>
 8006622:	6025      	str	r5, [r4, #0]
 8006624:	e7dc      	b.n	80065e0 <_malloc_r+0xb0>
 8006626:	605b      	str	r3, [r3, #4]
 8006628:	deff      	udf	#255	; 0xff
 800662a:	bf00      	nop
 800662c:	20004250 	.word	0x20004250

08006630 <__malloc_lock>:
 8006630:	4801      	ldr	r0, [pc, #4]	; (8006638 <__malloc_lock+0x8>)
 8006632:	f7ff beda 	b.w	80063ea <__retarget_lock_acquire_recursive>
 8006636:	bf00      	nop
 8006638:	2000424c 	.word	0x2000424c

0800663c <__malloc_unlock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_unlock+0x8>)
 800663e:	f7ff bed5 	b.w	80063ec <__retarget_lock_release_recursive>
 8006642:	bf00      	nop
 8006644:	2000424c 	.word	0x2000424c

08006648 <__sflush_r>:
 8006648:	898a      	ldrh	r2, [r1, #12]
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	4605      	mov	r5, r0
 8006650:	0710      	lsls	r0, r2, #28
 8006652:	460c      	mov	r4, r1
 8006654:	d458      	bmi.n	8006708 <__sflush_r+0xc0>
 8006656:	684b      	ldr	r3, [r1, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dc05      	bgt.n	8006668 <__sflush_r+0x20>
 800665c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	dc02      	bgt.n	8006668 <__sflush_r+0x20>
 8006662:	2000      	movs	r0, #0
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800666a:	2e00      	cmp	r6, #0
 800666c:	d0f9      	beq.n	8006662 <__sflush_r+0x1a>
 800666e:	2300      	movs	r3, #0
 8006670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006674:	682f      	ldr	r7, [r5, #0]
 8006676:	6a21      	ldr	r1, [r4, #32]
 8006678:	602b      	str	r3, [r5, #0]
 800667a:	d032      	beq.n	80066e2 <__sflush_r+0x9a>
 800667c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	075a      	lsls	r2, r3, #29
 8006682:	d505      	bpl.n	8006690 <__sflush_r+0x48>
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	1ac0      	subs	r0, r0, r3
 8006688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800668a:	b10b      	cbz	r3, 8006690 <__sflush_r+0x48>
 800668c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800668e:	1ac0      	subs	r0, r0, r3
 8006690:	2300      	movs	r3, #0
 8006692:	4602      	mov	r2, r0
 8006694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006696:	6a21      	ldr	r1, [r4, #32]
 8006698:	4628      	mov	r0, r5
 800669a:	47b0      	blx	r6
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	d106      	bne.n	80066b0 <__sflush_r+0x68>
 80066a2:	6829      	ldr	r1, [r5, #0]
 80066a4:	291d      	cmp	r1, #29
 80066a6:	d82b      	bhi.n	8006700 <__sflush_r+0xb8>
 80066a8:	4a29      	ldr	r2, [pc, #164]	; (8006750 <__sflush_r+0x108>)
 80066aa:	410a      	asrs	r2, r1
 80066ac:	07d6      	lsls	r6, r2, #31
 80066ae:	d427      	bmi.n	8006700 <__sflush_r+0xb8>
 80066b0:	2200      	movs	r2, #0
 80066b2:	6062      	str	r2, [r4, #4]
 80066b4:	04d9      	lsls	r1, r3, #19
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	d504      	bpl.n	80066c6 <__sflush_r+0x7e>
 80066bc:	1c42      	adds	r2, r0, #1
 80066be:	d101      	bne.n	80066c4 <__sflush_r+0x7c>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b903      	cbnz	r3, 80066c6 <__sflush_r+0x7e>
 80066c4:	6560      	str	r0, [r4, #84]	; 0x54
 80066c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c8:	602f      	str	r7, [r5, #0]
 80066ca:	2900      	cmp	r1, #0
 80066cc:	d0c9      	beq.n	8006662 <__sflush_r+0x1a>
 80066ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066d2:	4299      	cmp	r1, r3
 80066d4:	d002      	beq.n	80066dc <__sflush_r+0x94>
 80066d6:	4628      	mov	r0, r5
 80066d8:	f7ff feb6 	bl	8006448 <_free_r>
 80066dc:	2000      	movs	r0, #0
 80066de:	6360      	str	r0, [r4, #52]	; 0x34
 80066e0:	e7c0      	b.n	8006664 <__sflush_r+0x1c>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b0      	blx	r6
 80066e8:	1c41      	adds	r1, r0, #1
 80066ea:	d1c8      	bne.n	800667e <__sflush_r+0x36>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c5      	beq.n	800667e <__sflush_r+0x36>
 80066f2:	2b1d      	cmp	r3, #29
 80066f4:	d001      	beq.n	80066fa <__sflush_r+0xb2>
 80066f6:	2b16      	cmp	r3, #22
 80066f8:	d101      	bne.n	80066fe <__sflush_r+0xb6>
 80066fa:	602f      	str	r7, [r5, #0]
 80066fc:	e7b1      	b.n	8006662 <__sflush_r+0x1a>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	e7ad      	b.n	8006664 <__sflush_r+0x1c>
 8006708:	690f      	ldr	r7, [r1, #16]
 800670a:	2f00      	cmp	r7, #0
 800670c:	d0a9      	beq.n	8006662 <__sflush_r+0x1a>
 800670e:	0793      	lsls	r3, r2, #30
 8006710:	680e      	ldr	r6, [r1, #0]
 8006712:	bf08      	it	eq
 8006714:	694b      	ldreq	r3, [r1, #20]
 8006716:	600f      	str	r7, [r1, #0]
 8006718:	bf18      	it	ne
 800671a:	2300      	movne	r3, #0
 800671c:	eba6 0807 	sub.w	r8, r6, r7
 8006720:	608b      	str	r3, [r1, #8]
 8006722:	f1b8 0f00 	cmp.w	r8, #0
 8006726:	dd9c      	ble.n	8006662 <__sflush_r+0x1a>
 8006728:	6a21      	ldr	r1, [r4, #32]
 800672a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800672c:	4643      	mov	r3, r8
 800672e:	463a      	mov	r2, r7
 8006730:	4628      	mov	r0, r5
 8006732:	47b0      	blx	r6
 8006734:	2800      	cmp	r0, #0
 8006736:	dc06      	bgt.n	8006746 <__sflush_r+0xfe>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	e78e      	b.n	8006664 <__sflush_r+0x1c>
 8006746:	4407      	add	r7, r0
 8006748:	eba8 0800 	sub.w	r8, r8, r0
 800674c:	e7e9      	b.n	8006722 <__sflush_r+0xda>
 800674e:	bf00      	nop
 8006750:	dfbffffe 	.word	0xdfbffffe

08006754 <_fflush_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	4605      	mov	r5, r0
 800675a:	460c      	mov	r4, r1
 800675c:	b913      	cbnz	r3, 8006764 <_fflush_r+0x10>
 800675e:	2500      	movs	r5, #0
 8006760:	4628      	mov	r0, r5
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	b118      	cbz	r0, 800676e <_fflush_r+0x1a>
 8006766:	6a03      	ldr	r3, [r0, #32]
 8006768:	b90b      	cbnz	r3, 800676e <_fflush_r+0x1a>
 800676a:	f7ff fd1f 	bl	80061ac <__sinit>
 800676e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0f3      	beq.n	800675e <_fflush_r+0xa>
 8006776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006778:	07d0      	lsls	r0, r2, #31
 800677a:	d404      	bmi.n	8006786 <_fflush_r+0x32>
 800677c:	0599      	lsls	r1, r3, #22
 800677e:	d402      	bmi.n	8006786 <_fflush_r+0x32>
 8006780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006782:	f7ff fe32 	bl	80063ea <__retarget_lock_acquire_recursive>
 8006786:	4628      	mov	r0, r5
 8006788:	4621      	mov	r1, r4
 800678a:	f7ff ff5d 	bl	8006648 <__sflush_r>
 800678e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006790:	07da      	lsls	r2, r3, #31
 8006792:	4605      	mov	r5, r0
 8006794:	d4e4      	bmi.n	8006760 <_fflush_r+0xc>
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	059b      	lsls	r3, r3, #22
 800679a:	d4e1      	bmi.n	8006760 <_fflush_r+0xc>
 800679c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800679e:	f7ff fe25 	bl	80063ec <__retarget_lock_release_recursive>
 80067a2:	e7dd      	b.n	8006760 <_fflush_r+0xc>

080067a4 <fiprintf>:
 80067a4:	b40e      	push	{r1, r2, r3}
 80067a6:	b503      	push	{r0, r1, lr}
 80067a8:	4601      	mov	r1, r0
 80067aa:	ab03      	add	r3, sp, #12
 80067ac:	4805      	ldr	r0, [pc, #20]	; (80067c4 <fiprintf+0x20>)
 80067ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b2:	6800      	ldr	r0, [r0, #0]
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	f000 f847 	bl	8006848 <_vfiprintf_r>
 80067ba:	b002      	add	sp, #8
 80067bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067c0:	b003      	add	sp, #12
 80067c2:	4770      	bx	lr
 80067c4:	20000068 	.word	0x20000068

080067c8 <_sbrk_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4d06      	ldr	r5, [pc, #24]	; (80067e4 <_sbrk_r+0x1c>)
 80067cc:	2300      	movs	r3, #0
 80067ce:	4604      	mov	r4, r0
 80067d0:	4608      	mov	r0, r1
 80067d2:	602b      	str	r3, [r5, #0]
 80067d4:	f7fb f99c 	bl	8001b10 <_sbrk>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_sbrk_r+0x1a>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_sbrk_r+0x1a>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	20004248 	.word	0x20004248

080067e8 <abort>:
 80067e8:	b508      	push	{r3, lr}
 80067ea:	2006      	movs	r0, #6
 80067ec:	f000 fb94 	bl	8006f18 <raise>
 80067f0:	2001      	movs	r0, #1
 80067f2:	f7fb f916 	bl	8001a22 <_exit>

080067f6 <__sfputc_r>:
 80067f6:	6893      	ldr	r3, [r2, #8]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	b410      	push	{r4}
 80067fe:	6093      	str	r3, [r2, #8]
 8006800:	da08      	bge.n	8006814 <__sfputc_r+0x1e>
 8006802:	6994      	ldr	r4, [r2, #24]
 8006804:	42a3      	cmp	r3, r4
 8006806:	db01      	blt.n	800680c <__sfputc_r+0x16>
 8006808:	290a      	cmp	r1, #10
 800680a:	d103      	bne.n	8006814 <__sfputc_r+0x1e>
 800680c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006810:	f000 bac4 	b.w	8006d9c <__swbuf_r>
 8006814:	6813      	ldr	r3, [r2, #0]
 8006816:	1c58      	adds	r0, r3, #1
 8006818:	6010      	str	r0, [r2, #0]
 800681a:	7019      	strb	r1, [r3, #0]
 800681c:	4608      	mov	r0, r1
 800681e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006822:	4770      	bx	lr

08006824 <__sfputs_r>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	4606      	mov	r6, r0
 8006828:	460f      	mov	r7, r1
 800682a:	4614      	mov	r4, r2
 800682c:	18d5      	adds	r5, r2, r3
 800682e:	42ac      	cmp	r4, r5
 8006830:	d101      	bne.n	8006836 <__sfputs_r+0x12>
 8006832:	2000      	movs	r0, #0
 8006834:	e007      	b.n	8006846 <__sfputs_r+0x22>
 8006836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683a:	463a      	mov	r2, r7
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff ffda 	bl	80067f6 <__sfputc_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d1f3      	bne.n	800682e <__sfputs_r+0xa>
 8006846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006848 <_vfiprintf_r>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	460d      	mov	r5, r1
 800684e:	b09d      	sub	sp, #116	; 0x74
 8006850:	4614      	mov	r4, r2
 8006852:	4698      	mov	r8, r3
 8006854:	4606      	mov	r6, r0
 8006856:	b118      	cbz	r0, 8006860 <_vfiprintf_r+0x18>
 8006858:	6a03      	ldr	r3, [r0, #32]
 800685a:	b90b      	cbnz	r3, 8006860 <_vfiprintf_r+0x18>
 800685c:	f7ff fca6 	bl	80061ac <__sinit>
 8006860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006862:	07d9      	lsls	r1, r3, #31
 8006864:	d405      	bmi.n	8006872 <_vfiprintf_r+0x2a>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	059a      	lsls	r2, r3, #22
 800686a:	d402      	bmi.n	8006872 <_vfiprintf_r+0x2a>
 800686c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800686e:	f7ff fdbc 	bl	80063ea <__retarget_lock_acquire_recursive>
 8006872:	89ab      	ldrh	r3, [r5, #12]
 8006874:	071b      	lsls	r3, r3, #28
 8006876:	d501      	bpl.n	800687c <_vfiprintf_r+0x34>
 8006878:	692b      	ldr	r3, [r5, #16]
 800687a:	b99b      	cbnz	r3, 80068a4 <_vfiprintf_r+0x5c>
 800687c:	4629      	mov	r1, r5
 800687e:	4630      	mov	r0, r6
 8006880:	f000 faca 	bl	8006e18 <__swsetup_r>
 8006884:	b170      	cbz	r0, 80068a4 <_vfiprintf_r+0x5c>
 8006886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006888:	07dc      	lsls	r4, r3, #31
 800688a:	d504      	bpl.n	8006896 <_vfiprintf_r+0x4e>
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	b01d      	add	sp, #116	; 0x74
 8006892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006896:	89ab      	ldrh	r3, [r5, #12]
 8006898:	0598      	lsls	r0, r3, #22
 800689a:	d4f7      	bmi.n	800688c <_vfiprintf_r+0x44>
 800689c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800689e:	f7ff fda5 	bl	80063ec <__retarget_lock_release_recursive>
 80068a2:	e7f3      	b.n	800688c <_vfiprintf_r+0x44>
 80068a4:	2300      	movs	r3, #0
 80068a6:	9309      	str	r3, [sp, #36]	; 0x24
 80068a8:	2320      	movs	r3, #32
 80068aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b2:	2330      	movs	r3, #48	; 0x30
 80068b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a68 <_vfiprintf_r+0x220>
 80068b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068bc:	f04f 0901 	mov.w	r9, #1
 80068c0:	4623      	mov	r3, r4
 80068c2:	469a      	mov	sl, r3
 80068c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068c8:	b10a      	cbz	r2, 80068ce <_vfiprintf_r+0x86>
 80068ca:	2a25      	cmp	r2, #37	; 0x25
 80068cc:	d1f9      	bne.n	80068c2 <_vfiprintf_r+0x7a>
 80068ce:	ebba 0b04 	subs.w	fp, sl, r4
 80068d2:	d00b      	beq.n	80068ec <_vfiprintf_r+0xa4>
 80068d4:	465b      	mov	r3, fp
 80068d6:	4622      	mov	r2, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ffa2 	bl	8006824 <__sfputs_r>
 80068e0:	3001      	adds	r0, #1
 80068e2:	f000 80a9 	beq.w	8006a38 <_vfiprintf_r+0x1f0>
 80068e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e8:	445a      	add	r2, fp
 80068ea:	9209      	str	r2, [sp, #36]	; 0x24
 80068ec:	f89a 3000 	ldrb.w	r3, [sl]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80a1 	beq.w	8006a38 <_vfiprintf_r+0x1f0>
 80068f6:	2300      	movs	r3, #0
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006900:	f10a 0a01 	add.w	sl, sl, #1
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	9307      	str	r3, [sp, #28]
 8006908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800690c:	931a      	str	r3, [sp, #104]	; 0x68
 800690e:	4654      	mov	r4, sl
 8006910:	2205      	movs	r2, #5
 8006912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006916:	4854      	ldr	r0, [pc, #336]	; (8006a68 <_vfiprintf_r+0x220>)
 8006918:	f7f9 fc5a 	bl	80001d0 <memchr>
 800691c:	9a04      	ldr	r2, [sp, #16]
 800691e:	b9d8      	cbnz	r0, 8006958 <_vfiprintf_r+0x110>
 8006920:	06d1      	lsls	r1, r2, #27
 8006922:	bf44      	itt	mi
 8006924:	2320      	movmi	r3, #32
 8006926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800692a:	0713      	lsls	r3, r2, #28
 800692c:	bf44      	itt	mi
 800692e:	232b      	movmi	r3, #43	; 0x2b
 8006930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006934:	f89a 3000 	ldrb.w	r3, [sl]
 8006938:	2b2a      	cmp	r3, #42	; 0x2a
 800693a:	d015      	beq.n	8006968 <_vfiprintf_r+0x120>
 800693c:	9a07      	ldr	r2, [sp, #28]
 800693e:	4654      	mov	r4, sl
 8006940:	2000      	movs	r0, #0
 8006942:	f04f 0c0a 	mov.w	ip, #10
 8006946:	4621      	mov	r1, r4
 8006948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800694c:	3b30      	subs	r3, #48	; 0x30
 800694e:	2b09      	cmp	r3, #9
 8006950:	d94d      	bls.n	80069ee <_vfiprintf_r+0x1a6>
 8006952:	b1b0      	cbz	r0, 8006982 <_vfiprintf_r+0x13a>
 8006954:	9207      	str	r2, [sp, #28]
 8006956:	e014      	b.n	8006982 <_vfiprintf_r+0x13a>
 8006958:	eba0 0308 	sub.w	r3, r0, r8
 800695c:	fa09 f303 	lsl.w	r3, r9, r3
 8006960:	4313      	orrs	r3, r2
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	46a2      	mov	sl, r4
 8006966:	e7d2      	b.n	800690e <_vfiprintf_r+0xc6>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	1d19      	adds	r1, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	9103      	str	r1, [sp, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	bfbb      	ittet	lt
 8006974:	425b      	neglt	r3, r3
 8006976:	f042 0202 	orrlt.w	r2, r2, #2
 800697a:	9307      	strge	r3, [sp, #28]
 800697c:	9307      	strlt	r3, [sp, #28]
 800697e:	bfb8      	it	lt
 8006980:	9204      	strlt	r2, [sp, #16]
 8006982:	7823      	ldrb	r3, [r4, #0]
 8006984:	2b2e      	cmp	r3, #46	; 0x2e
 8006986:	d10c      	bne.n	80069a2 <_vfiprintf_r+0x15a>
 8006988:	7863      	ldrb	r3, [r4, #1]
 800698a:	2b2a      	cmp	r3, #42	; 0x2a
 800698c:	d134      	bne.n	80069f8 <_vfiprintf_r+0x1b0>
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	1d1a      	adds	r2, r3, #4
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	9203      	str	r2, [sp, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	bfb8      	it	lt
 800699a:	f04f 33ff 	movlt.w	r3, #4294967295
 800699e:	3402      	adds	r4, #2
 80069a0:	9305      	str	r3, [sp, #20]
 80069a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a78 <_vfiprintf_r+0x230>
 80069a6:	7821      	ldrb	r1, [r4, #0]
 80069a8:	2203      	movs	r2, #3
 80069aa:	4650      	mov	r0, sl
 80069ac:	f7f9 fc10 	bl	80001d0 <memchr>
 80069b0:	b138      	cbz	r0, 80069c2 <_vfiprintf_r+0x17a>
 80069b2:	9b04      	ldr	r3, [sp, #16]
 80069b4:	eba0 000a 	sub.w	r0, r0, sl
 80069b8:	2240      	movs	r2, #64	; 0x40
 80069ba:	4082      	lsls	r2, r0
 80069bc:	4313      	orrs	r3, r2
 80069be:	3401      	adds	r4, #1
 80069c0:	9304      	str	r3, [sp, #16]
 80069c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c6:	4829      	ldr	r0, [pc, #164]	; (8006a6c <_vfiprintf_r+0x224>)
 80069c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069cc:	2206      	movs	r2, #6
 80069ce:	f7f9 fbff 	bl	80001d0 <memchr>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d03f      	beq.n	8006a56 <_vfiprintf_r+0x20e>
 80069d6:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <_vfiprintf_r+0x228>)
 80069d8:	bb1b      	cbnz	r3, 8006a22 <_vfiprintf_r+0x1da>
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	3307      	adds	r3, #7
 80069de:	f023 0307 	bic.w	r3, r3, #7
 80069e2:	3308      	adds	r3, #8
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e8:	443b      	add	r3, r7
 80069ea:	9309      	str	r3, [sp, #36]	; 0x24
 80069ec:	e768      	b.n	80068c0 <_vfiprintf_r+0x78>
 80069ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80069f2:	460c      	mov	r4, r1
 80069f4:	2001      	movs	r0, #1
 80069f6:	e7a6      	b.n	8006946 <_vfiprintf_r+0xfe>
 80069f8:	2300      	movs	r3, #0
 80069fa:	3401      	adds	r4, #1
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	4619      	mov	r1, r3
 8006a00:	f04f 0c0a 	mov.w	ip, #10
 8006a04:	4620      	mov	r0, r4
 8006a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a0a:	3a30      	subs	r2, #48	; 0x30
 8006a0c:	2a09      	cmp	r2, #9
 8006a0e:	d903      	bls.n	8006a18 <_vfiprintf_r+0x1d0>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0c6      	beq.n	80069a2 <_vfiprintf_r+0x15a>
 8006a14:	9105      	str	r1, [sp, #20]
 8006a16:	e7c4      	b.n	80069a2 <_vfiprintf_r+0x15a>
 8006a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e7f0      	b.n	8006a04 <_vfiprintf_r+0x1bc>
 8006a22:	ab03      	add	r3, sp, #12
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	462a      	mov	r2, r5
 8006a28:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <_vfiprintf_r+0x22c>)
 8006a2a:	a904      	add	r1, sp, #16
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f3af 8000 	nop.w
 8006a32:	4607      	mov	r7, r0
 8006a34:	1c78      	adds	r0, r7, #1
 8006a36:	d1d6      	bne.n	80069e6 <_vfiprintf_r+0x19e>
 8006a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	d405      	bmi.n	8006a4a <_vfiprintf_r+0x202>
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	059a      	lsls	r2, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_vfiprintf_r+0x202>
 8006a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a46:	f7ff fcd1 	bl	80063ec <__retarget_lock_release_recursive>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	065b      	lsls	r3, r3, #25
 8006a4e:	f53f af1d 	bmi.w	800688c <_vfiprintf_r+0x44>
 8006a52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a54:	e71c      	b.n	8006890 <_vfiprintf_r+0x48>
 8006a56:	ab03      	add	r3, sp, #12
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	462a      	mov	r2, r5
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <_vfiprintf_r+0x22c>)
 8006a5e:	a904      	add	r1, sp, #16
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 f879 	bl	8006b58 <_printf_i>
 8006a66:	e7e4      	b.n	8006a32 <_vfiprintf_r+0x1ea>
 8006a68:	0800722f 	.word	0x0800722f
 8006a6c:	08007239 	.word	0x08007239
 8006a70:	00000000 	.word	0x00000000
 8006a74:	08006825 	.word	0x08006825
 8006a78:	08007235 	.word	0x08007235

08006a7c <_printf_common>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	4616      	mov	r6, r2
 8006a82:	4699      	mov	r9, r3
 8006a84:	688a      	ldr	r2, [r1, #8]
 8006a86:	690b      	ldr	r3, [r1, #16]
 8006a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	bfb8      	it	lt
 8006a90:	4613      	movlt	r3, r2
 8006a92:	6033      	str	r3, [r6, #0]
 8006a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a98:	4607      	mov	r7, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	b10a      	cbz	r2, 8006aa2 <_printf_common+0x26>
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	6033      	str	r3, [r6, #0]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	0699      	lsls	r1, r3, #26
 8006aa6:	bf42      	ittt	mi
 8006aa8:	6833      	ldrmi	r3, [r6, #0]
 8006aaa:	3302      	addmi	r3, #2
 8006aac:	6033      	strmi	r3, [r6, #0]
 8006aae:	6825      	ldr	r5, [r4, #0]
 8006ab0:	f015 0506 	ands.w	r5, r5, #6
 8006ab4:	d106      	bne.n	8006ac4 <_printf_common+0x48>
 8006ab6:	f104 0a19 	add.w	sl, r4, #25
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	6832      	ldr	r2, [r6, #0]
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	dc26      	bgt.n	8006b12 <_printf_common+0x96>
 8006ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ac8:	1e13      	subs	r3, r2, #0
 8006aca:	6822      	ldr	r2, [r4, #0]
 8006acc:	bf18      	it	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	0692      	lsls	r2, r2, #26
 8006ad2:	d42b      	bmi.n	8006b2c <_printf_common+0xb0>
 8006ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ad8:	4649      	mov	r1, r9
 8006ada:	4638      	mov	r0, r7
 8006adc:	47c0      	blx	r8
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d01e      	beq.n	8006b20 <_printf_common+0xa4>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	6922      	ldr	r2, [r4, #16]
 8006ae6:	f003 0306 	and.w	r3, r3, #6
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf02      	ittt	eq
 8006aee:	68e5      	ldreq	r5, [r4, #12]
 8006af0:	6833      	ldreq	r3, [r6, #0]
 8006af2:	1aed      	subeq	r5, r5, r3
 8006af4:	68a3      	ldr	r3, [r4, #8]
 8006af6:	bf0c      	ite	eq
 8006af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006afc:	2500      	movne	r5, #0
 8006afe:	4293      	cmp	r3, r2
 8006b00:	bfc4      	itt	gt
 8006b02:	1a9b      	subgt	r3, r3, r2
 8006b04:	18ed      	addgt	r5, r5, r3
 8006b06:	2600      	movs	r6, #0
 8006b08:	341a      	adds	r4, #26
 8006b0a:	42b5      	cmp	r5, r6
 8006b0c:	d11a      	bne.n	8006b44 <_printf_common+0xc8>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e008      	b.n	8006b24 <_printf_common+0xa8>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4652      	mov	r2, sl
 8006b16:	4649      	mov	r1, r9
 8006b18:	4638      	mov	r0, r7
 8006b1a:	47c0      	blx	r8
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d103      	bne.n	8006b28 <_printf_common+0xac>
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295
 8006b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b28:	3501      	adds	r5, #1
 8006b2a:	e7c6      	b.n	8006aba <_printf_common+0x3e>
 8006b2c:	18e1      	adds	r1, r4, r3
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	2030      	movs	r0, #48	; 0x30
 8006b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b36:	4422      	add	r2, r4
 8006b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b40:	3302      	adds	r3, #2
 8006b42:	e7c7      	b.n	8006ad4 <_printf_common+0x58>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4622      	mov	r2, r4
 8006b48:	4649      	mov	r1, r9
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	47c0      	blx	r8
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d0e6      	beq.n	8006b20 <_printf_common+0xa4>
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7d9      	b.n	8006b0a <_printf_common+0x8e>
	...

08006b58 <_printf_i>:
 8006b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	7e0f      	ldrb	r7, [r1, #24]
 8006b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b60:	2f78      	cmp	r7, #120	; 0x78
 8006b62:	4691      	mov	r9, r2
 8006b64:	4680      	mov	r8, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	469a      	mov	sl, r3
 8006b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b6e:	d807      	bhi.n	8006b80 <_printf_i+0x28>
 8006b70:	2f62      	cmp	r7, #98	; 0x62
 8006b72:	d80a      	bhi.n	8006b8a <_printf_i+0x32>
 8006b74:	2f00      	cmp	r7, #0
 8006b76:	f000 80d4 	beq.w	8006d22 <_printf_i+0x1ca>
 8006b7a:	2f58      	cmp	r7, #88	; 0x58
 8006b7c:	f000 80c0 	beq.w	8006d00 <_printf_i+0x1a8>
 8006b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b88:	e03a      	b.n	8006c00 <_printf_i+0xa8>
 8006b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b8e:	2b15      	cmp	r3, #21
 8006b90:	d8f6      	bhi.n	8006b80 <_printf_i+0x28>
 8006b92:	a101      	add	r1, pc, #4	; (adr r1, 8006b98 <_printf_i+0x40>)
 8006b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b98:	08006bf1 	.word	0x08006bf1
 8006b9c:	08006c05 	.word	0x08006c05
 8006ba0:	08006b81 	.word	0x08006b81
 8006ba4:	08006b81 	.word	0x08006b81
 8006ba8:	08006b81 	.word	0x08006b81
 8006bac:	08006b81 	.word	0x08006b81
 8006bb0:	08006c05 	.word	0x08006c05
 8006bb4:	08006b81 	.word	0x08006b81
 8006bb8:	08006b81 	.word	0x08006b81
 8006bbc:	08006b81 	.word	0x08006b81
 8006bc0:	08006b81 	.word	0x08006b81
 8006bc4:	08006d09 	.word	0x08006d09
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006cc3 	.word	0x08006cc3
 8006bd0:	08006b81 	.word	0x08006b81
 8006bd4:	08006b81 	.word	0x08006b81
 8006bd8:	08006d2b 	.word	0x08006d2b
 8006bdc:	08006b81 	.word	0x08006b81
 8006be0:	08006c31 	.word	0x08006c31
 8006be4:	08006b81 	.word	0x08006b81
 8006be8:	08006b81 	.word	0x08006b81
 8006bec:	08006ccb 	.word	0x08006ccb
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	1d1a      	adds	r2, r3, #4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	602a      	str	r2, [r5, #0]
 8006bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c00:	2301      	movs	r3, #1
 8006c02:	e09f      	b.n	8006d44 <_printf_i+0x1ec>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	682b      	ldr	r3, [r5, #0]
 8006c08:	0607      	lsls	r7, r0, #24
 8006c0a:	f103 0104 	add.w	r1, r3, #4
 8006c0e:	6029      	str	r1, [r5, #0]
 8006c10:	d501      	bpl.n	8006c16 <_printf_i+0xbe>
 8006c12:	681e      	ldr	r6, [r3, #0]
 8006c14:	e003      	b.n	8006c1e <_printf_i+0xc6>
 8006c16:	0646      	lsls	r6, r0, #25
 8006c18:	d5fb      	bpl.n	8006c12 <_printf_i+0xba>
 8006c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c1e:	2e00      	cmp	r6, #0
 8006c20:	da03      	bge.n	8006c2a <_printf_i+0xd2>
 8006c22:	232d      	movs	r3, #45	; 0x2d
 8006c24:	4276      	negs	r6, r6
 8006c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c2a:	485a      	ldr	r0, [pc, #360]	; (8006d94 <_printf_i+0x23c>)
 8006c2c:	230a      	movs	r3, #10
 8006c2e:	e012      	b.n	8006c56 <_printf_i+0xfe>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	1d19      	adds	r1, r3, #4
 8006c36:	6029      	str	r1, [r5, #0]
 8006c38:	0605      	lsls	r5, r0, #24
 8006c3a:	d501      	bpl.n	8006c40 <_printf_i+0xe8>
 8006c3c:	681e      	ldr	r6, [r3, #0]
 8006c3e:	e002      	b.n	8006c46 <_printf_i+0xee>
 8006c40:	0641      	lsls	r1, r0, #25
 8006c42:	d5fb      	bpl.n	8006c3c <_printf_i+0xe4>
 8006c44:	881e      	ldrh	r6, [r3, #0]
 8006c46:	4853      	ldr	r0, [pc, #332]	; (8006d94 <_printf_i+0x23c>)
 8006c48:	2f6f      	cmp	r7, #111	; 0x6f
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2308      	moveq	r3, #8
 8006c4e:	230a      	movne	r3, #10
 8006c50:	2100      	movs	r1, #0
 8006c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c56:	6865      	ldr	r5, [r4, #4]
 8006c58:	60a5      	str	r5, [r4, #8]
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	bfa2      	ittt	ge
 8006c5e:	6821      	ldrge	r1, [r4, #0]
 8006c60:	f021 0104 	bicge.w	r1, r1, #4
 8006c64:	6021      	strge	r1, [r4, #0]
 8006c66:	b90e      	cbnz	r6, 8006c6c <_printf_i+0x114>
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	d04b      	beq.n	8006d04 <_printf_i+0x1ac>
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c72:	fb03 6711 	mls	r7, r3, r1, r6
 8006c76:	5dc7      	ldrb	r7, [r0, r7]
 8006c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c7c:	4637      	mov	r7, r6
 8006c7e:	42bb      	cmp	r3, r7
 8006c80:	460e      	mov	r6, r1
 8006c82:	d9f4      	bls.n	8006c6e <_printf_i+0x116>
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d10b      	bne.n	8006ca0 <_printf_i+0x148>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	07de      	lsls	r6, r3, #31
 8006c8c:	d508      	bpl.n	8006ca0 <_printf_i+0x148>
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	6861      	ldr	r1, [r4, #4]
 8006c92:	4299      	cmp	r1, r3
 8006c94:	bfde      	ittt	le
 8006c96:	2330      	movle	r3, #48	; 0x30
 8006c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ca0:	1b52      	subs	r2, r2, r5
 8006ca2:	6122      	str	r2, [r4, #16]
 8006ca4:	f8cd a000 	str.w	sl, [sp]
 8006ca8:	464b      	mov	r3, r9
 8006caa:	aa03      	add	r2, sp, #12
 8006cac:	4621      	mov	r1, r4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff fee4 	bl	8006a7c <_printf_common>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d14a      	bne.n	8006d4e <_printf_i+0x1f6>
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	b004      	add	sp, #16
 8006cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	f043 0320 	orr.w	r3, r3, #32
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	4833      	ldr	r0, [pc, #204]	; (8006d98 <_printf_i+0x240>)
 8006ccc:	2778      	movs	r7, #120	; 0x78
 8006cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	6829      	ldr	r1, [r5, #0]
 8006cd6:	061f      	lsls	r7, r3, #24
 8006cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cdc:	d402      	bmi.n	8006ce4 <_printf_i+0x18c>
 8006cde:	065f      	lsls	r7, r3, #25
 8006ce0:	bf48      	it	mi
 8006ce2:	b2b6      	uxthmi	r6, r6
 8006ce4:	07df      	lsls	r7, r3, #31
 8006ce6:	bf48      	it	mi
 8006ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cec:	6029      	str	r1, [r5, #0]
 8006cee:	bf48      	it	mi
 8006cf0:	6023      	strmi	r3, [r4, #0]
 8006cf2:	b91e      	cbnz	r6, 8006cfc <_printf_i+0x1a4>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	f023 0320 	bic.w	r3, r3, #32
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	e7a7      	b.n	8006c50 <_printf_i+0xf8>
 8006d00:	4824      	ldr	r0, [pc, #144]	; (8006d94 <_printf_i+0x23c>)
 8006d02:	e7e4      	b.n	8006cce <_printf_i+0x176>
 8006d04:	4615      	mov	r5, r2
 8006d06:	e7bd      	b.n	8006c84 <_printf_i+0x12c>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	6826      	ldr	r6, [r4, #0]
 8006d0c:	6961      	ldr	r1, [r4, #20]
 8006d0e:	1d18      	adds	r0, r3, #4
 8006d10:	6028      	str	r0, [r5, #0]
 8006d12:	0635      	lsls	r5, r6, #24
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	d501      	bpl.n	8006d1c <_printf_i+0x1c4>
 8006d18:	6019      	str	r1, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <_printf_i+0x1ca>
 8006d1c:	0670      	lsls	r0, r6, #25
 8006d1e:	d5fb      	bpl.n	8006d18 <_printf_i+0x1c0>
 8006d20:	8019      	strh	r1, [r3, #0]
 8006d22:	2300      	movs	r3, #0
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	4615      	mov	r5, r2
 8006d28:	e7bc      	b.n	8006ca4 <_printf_i+0x14c>
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	1d1a      	adds	r2, r3, #4
 8006d2e:	602a      	str	r2, [r5, #0]
 8006d30:	681d      	ldr	r5, [r3, #0]
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	2100      	movs	r1, #0
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7f9 fa4a 	bl	80001d0 <memchr>
 8006d3c:	b108      	cbz	r0, 8006d42 <_printf_i+0x1ea>
 8006d3e:	1b40      	subs	r0, r0, r5
 8006d40:	6060      	str	r0, [r4, #4]
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	2300      	movs	r3, #0
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d4c:	e7aa      	b.n	8006ca4 <_printf_i+0x14c>
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	462a      	mov	r2, r5
 8006d52:	4649      	mov	r1, r9
 8006d54:	4640      	mov	r0, r8
 8006d56:	47d0      	blx	sl
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d0ad      	beq.n	8006cb8 <_printf_i+0x160>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	079b      	lsls	r3, r3, #30
 8006d60:	d413      	bmi.n	8006d8a <_printf_i+0x232>
 8006d62:	68e0      	ldr	r0, [r4, #12]
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	4298      	cmp	r0, r3
 8006d68:	bfb8      	it	lt
 8006d6a:	4618      	movlt	r0, r3
 8006d6c:	e7a6      	b.n	8006cbc <_printf_i+0x164>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4632      	mov	r2, r6
 8006d72:	4649      	mov	r1, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	47d0      	blx	sl
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d09d      	beq.n	8006cb8 <_printf_i+0x160>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	9903      	ldr	r1, [sp, #12]
 8006d82:	1a5b      	subs	r3, r3, r1
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dcf2      	bgt.n	8006d6e <_printf_i+0x216>
 8006d88:	e7eb      	b.n	8006d62 <_printf_i+0x20a>
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	f104 0619 	add.w	r6, r4, #25
 8006d90:	e7f5      	b.n	8006d7e <_printf_i+0x226>
 8006d92:	bf00      	nop
 8006d94:	08007240 	.word	0x08007240
 8006d98:	08007251 	.word	0x08007251

08006d9c <__swbuf_r>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	460e      	mov	r6, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	4605      	mov	r5, r0
 8006da4:	b118      	cbz	r0, 8006dae <__swbuf_r+0x12>
 8006da6:	6a03      	ldr	r3, [r0, #32]
 8006da8:	b90b      	cbnz	r3, 8006dae <__swbuf_r+0x12>
 8006daa:	f7ff f9ff 	bl	80061ac <__sinit>
 8006dae:	69a3      	ldr	r3, [r4, #24]
 8006db0:	60a3      	str	r3, [r4, #8]
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	071a      	lsls	r2, r3, #28
 8006db6:	d525      	bpl.n	8006e04 <__swbuf_r+0x68>
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	b31b      	cbz	r3, 8006e04 <__swbuf_r+0x68>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	6922      	ldr	r2, [r4, #16]
 8006dc0:	1a98      	subs	r0, r3, r2
 8006dc2:	6963      	ldr	r3, [r4, #20]
 8006dc4:	b2f6      	uxtb	r6, r6
 8006dc6:	4283      	cmp	r3, r0
 8006dc8:	4637      	mov	r7, r6
 8006dca:	dc04      	bgt.n	8006dd6 <__swbuf_r+0x3a>
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f7ff fcc0 	bl	8006754 <_fflush_r>
 8006dd4:	b9e0      	cbnz	r0, 8006e10 <__swbuf_r+0x74>
 8006dd6:	68a3      	ldr	r3, [r4, #8]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	60a3      	str	r3, [r4, #8]
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	701e      	strb	r6, [r3, #0]
 8006de4:	6962      	ldr	r2, [r4, #20]
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d004      	beq.n	8006df6 <__swbuf_r+0x5a>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	07db      	lsls	r3, r3, #31
 8006df0:	d506      	bpl.n	8006e00 <__swbuf_r+0x64>
 8006df2:	2e0a      	cmp	r6, #10
 8006df4:	d104      	bne.n	8006e00 <__swbuf_r+0x64>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7ff fcab 	bl	8006754 <_fflush_r>
 8006dfe:	b938      	cbnz	r0, 8006e10 <__swbuf_r+0x74>
 8006e00:	4638      	mov	r0, r7
 8006e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e04:	4621      	mov	r1, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 f806 	bl	8006e18 <__swsetup_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d0d5      	beq.n	8006dbc <__swbuf_r+0x20>
 8006e10:	f04f 37ff 	mov.w	r7, #4294967295
 8006e14:	e7f4      	b.n	8006e00 <__swbuf_r+0x64>
	...

08006e18 <__swsetup_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ec4 <__swsetup_r+0xac>)
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	460c      	mov	r4, r1
 8006e22:	b118      	cbz	r0, 8006e2c <__swsetup_r+0x14>
 8006e24:	6a03      	ldr	r3, [r0, #32]
 8006e26:	b90b      	cbnz	r3, 8006e2c <__swsetup_r+0x14>
 8006e28:	f7ff f9c0 	bl	80061ac <__sinit>
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e32:	0718      	lsls	r0, r3, #28
 8006e34:	d422      	bmi.n	8006e7c <__swsetup_r+0x64>
 8006e36:	06d9      	lsls	r1, r3, #27
 8006e38:	d407      	bmi.n	8006e4a <__swsetup_r+0x32>
 8006e3a:	2309      	movs	r3, #9
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	e034      	b.n	8006eb4 <__swsetup_r+0x9c>
 8006e4a:	0758      	lsls	r0, r3, #29
 8006e4c:	d512      	bpl.n	8006e74 <__swsetup_r+0x5c>
 8006e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e50:	b141      	cbz	r1, 8006e64 <__swsetup_r+0x4c>
 8006e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e56:	4299      	cmp	r1, r3
 8006e58:	d002      	beq.n	8006e60 <__swsetup_r+0x48>
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7ff faf4 	bl	8006448 <_free_r>
 8006e60:	2300      	movs	r3, #0
 8006e62:	6363      	str	r3, [r4, #52]	; 0x34
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	6063      	str	r3, [r4, #4]
 8006e70:	6923      	ldr	r3, [r4, #16]
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	f043 0308 	orr.w	r3, r3, #8
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b94b      	cbnz	r3, 8006e94 <__swsetup_r+0x7c>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8a:	d003      	beq.n	8006e94 <__swsetup_r+0x7c>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f884 	bl	8006f9c <__smakebuf_r>
 8006e94:	89a0      	ldrh	r0, [r4, #12]
 8006e96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e9a:	f010 0301 	ands.w	r3, r0, #1
 8006e9e:	d00a      	beq.n	8006eb6 <__swsetup_r+0x9e>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60a3      	str	r3, [r4, #8]
 8006ea4:	6963      	ldr	r3, [r4, #20]
 8006ea6:	425b      	negs	r3, r3
 8006ea8:	61a3      	str	r3, [r4, #24]
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	b943      	cbnz	r3, 8006ec0 <__swsetup_r+0xa8>
 8006eae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eb2:	d1c4      	bne.n	8006e3e <__swsetup_r+0x26>
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	0781      	lsls	r1, r0, #30
 8006eb8:	bf58      	it	pl
 8006eba:	6963      	ldrpl	r3, [r4, #20]
 8006ebc:	60a3      	str	r3, [r4, #8]
 8006ebe:	e7f4      	b.n	8006eaa <__swsetup_r+0x92>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e7f7      	b.n	8006eb4 <__swsetup_r+0x9c>
 8006ec4:	20000068 	.word	0x20000068

08006ec8 <_raise_r>:
 8006ec8:	291f      	cmp	r1, #31
 8006eca:	b538      	push	{r3, r4, r5, lr}
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	d904      	bls.n	8006edc <_raise_r+0x14>
 8006ed2:	2316      	movs	r3, #22
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ede:	b112      	cbz	r2, 8006ee6 <_raise_r+0x1e>
 8006ee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ee4:	b94b      	cbnz	r3, 8006efa <_raise_r+0x32>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f830 	bl	8006f4c <_getpid_r>
 8006eec:	462a      	mov	r2, r5
 8006eee:	4601      	mov	r1, r0
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef6:	f000 b817 	b.w	8006f28 <_kill_r>
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d00a      	beq.n	8006f14 <_raise_r+0x4c>
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	d103      	bne.n	8006f0a <_raise_r+0x42>
 8006f02:	2316      	movs	r3, #22
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	2001      	movs	r0, #1
 8006f08:	e7e7      	b.n	8006eda <_raise_r+0x12>
 8006f0a:	2400      	movs	r4, #0
 8006f0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f10:	4628      	mov	r0, r5
 8006f12:	4798      	blx	r3
 8006f14:	2000      	movs	r0, #0
 8006f16:	e7e0      	b.n	8006eda <_raise_r+0x12>

08006f18 <raise>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <raise+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f7ff bfd3 	b.w	8006ec8 <_raise_r>
 8006f22:	bf00      	nop
 8006f24:	20000068 	.word	0x20000068

08006f28 <_kill_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_kill_r+0x20>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	602b      	str	r3, [r5, #0]
 8006f36:	f7fa fd64 	bl	8001a02 <_kill>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	d102      	bne.n	8006f44 <_kill_r+0x1c>
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	b103      	cbz	r3, 8006f44 <_kill_r+0x1c>
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	20004248 	.word	0x20004248

08006f4c <_getpid_r>:
 8006f4c:	f7fa bd51 	b.w	80019f2 <_getpid>

08006f50 <__swhatbuf_r>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	460c      	mov	r4, r1
 8006f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	b096      	sub	sp, #88	; 0x58
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	461e      	mov	r6, r3
 8006f60:	da0d      	bge.n	8006f7e <__swhatbuf_r+0x2e>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	bf0c      	ite	eq
 8006f6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f72:	2340      	movne	r3, #64	; 0x40
 8006f74:	2000      	movs	r0, #0
 8006f76:	6031      	str	r1, [r6, #0]
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	b016      	add	sp, #88	; 0x58
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	466a      	mov	r2, sp
 8006f80:	f000 f848 	bl	8007014 <_fstat_r>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	dbec      	blt.n	8006f62 <__swhatbuf_r+0x12>
 8006f88:	9901      	ldr	r1, [sp, #4]
 8006f8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f92:	4259      	negs	r1, r3
 8006f94:	4159      	adcs	r1, r3
 8006f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f9a:	e7eb      	b.n	8006f74 <__swhatbuf_r+0x24>

08006f9c <__smakebuf_r>:
 8006f9c:	898b      	ldrh	r3, [r1, #12]
 8006f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fa0:	079d      	lsls	r5, r3, #30
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	d507      	bpl.n	8006fb8 <__smakebuf_r+0x1c>
 8006fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	6163      	str	r3, [r4, #20]
 8006fb4:	b002      	add	sp, #8
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	ab01      	add	r3, sp, #4
 8006fba:	466a      	mov	r2, sp
 8006fbc:	f7ff ffc8 	bl	8006f50 <__swhatbuf_r>
 8006fc0:	9900      	ldr	r1, [sp, #0]
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f7ff fab3 	bl	8006530 <_malloc_r>
 8006fca:	b948      	cbnz	r0, 8006fe0 <__smakebuf_r+0x44>
 8006fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd0:	059a      	lsls	r2, r3, #22
 8006fd2:	d4ef      	bmi.n	8006fb4 <__smakebuf_r+0x18>
 8006fd4:	f023 0303 	bic.w	r3, r3, #3
 8006fd8:	f043 0302 	orr.w	r3, r3, #2
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	e7e3      	b.n	8006fa8 <__smakebuf_r+0xc>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	6020      	str	r0, [r4, #0]
 8006fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	9b00      	ldr	r3, [sp, #0]
 8006fec:	6163      	str	r3, [r4, #20]
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	6120      	str	r0, [r4, #16]
 8006ff2:	b15b      	cbz	r3, 800700c <__smakebuf_r+0x70>
 8006ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f81d 	bl	8007038 <_isatty_r>
 8006ffe:	b128      	cbz	r0, 800700c <__smakebuf_r+0x70>
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	81a3      	strh	r3, [r4, #12]
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	431d      	orrs	r5, r3
 8007010:	81a5      	strh	r5, [r4, #12]
 8007012:	e7cf      	b.n	8006fb4 <__smakebuf_r+0x18>

08007014 <_fstat_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	; (8007034 <_fstat_r+0x20>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	4611      	mov	r1, r2
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	f7fa fd4d 	bl	8001ac0 <_fstat>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d102      	bne.n	8007030 <_fstat_r+0x1c>
 800702a:	682b      	ldr	r3, [r5, #0]
 800702c:	b103      	cbz	r3, 8007030 <_fstat_r+0x1c>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	bd38      	pop	{r3, r4, r5, pc}
 8007032:	bf00      	nop
 8007034:	20004248 	.word	0x20004248

08007038 <_isatty_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	; (8007054 <_isatty_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7fa fd4c 	bl	8001ae0 <_isatty>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_isatty_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_isatty_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20004248 	.word	0x20004248

08007058 <_gettimeofday>:
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <_gettimeofday+0xc>)
 800705a:	2258      	movs	r2, #88	; 0x58
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	4770      	bx	lr
 8007064:	20004248 	.word	0x20004248

08007068 <_init>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr

08007074 <_fini>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr
