
ECE 455 Project 1 Functional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d188  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800d318  0800d318  0001d318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d530  0800d530  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d538  0800d538  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d538  0800d538  0001d538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d53c  0800d53c  0001d53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00004a04  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a90  20004a90  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c91e  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d0d  00000000  00000000  0003ca1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017d0  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001223  00000000  00000000  00042f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026dda  00000000  00000000  00044123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f17a  00000000  00000000  0006aefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d65e6  00000000  00000000  0008a077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c3c  00000000  00000000  00160660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0016729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d300 	.word	0x0800d300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800d300 	.word	0x0800d300

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200000a8 	.word	0x200000a8
 800059c:	200000fc 	.word	0x200000fc

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b0ba      	sub	sp, #232	; 0xe8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 ff31 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8f7 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f9f3 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b2:	f000 f95d 	bl	8000870 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005b6:	f000 f989 	bl	80008cc <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ba:	f000 f9b7 	bl	800092c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of cars_array_mutex */
  osMutexDef(cars_array_mutex);
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  cars_array_mutexHandle = osMutexCreate(osMutex(cars_array_mutex));
 80005ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 fcb1 	bl	8008f36 <osMutexCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a5f      	ldr	r2, [pc, #380]	; (8000754 <main+0x1b4>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_mutex */
  osMutexDef(traffic_rate_mutex);
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  traffic_rate_mutexHandle = osMutexCreate(osMutex(traffic_rate_mutex));
 80005e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 fca3 	bl	8008f36 <osMutexCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a59      	ldr	r2, [pc, #356]	; (8000758 <main+0x1b8>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_mutex */
  osMutexDef(light_status_mutex);
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  light_status_mutexHandle = osMutexCreate(osMutex(light_status_mutex));
 8000602:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000606:	4618      	mov	r0, r3
 8000608:	f008 fc95 	bl	8008f36 <osMutexCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a53      	ldr	r2, [pc, #332]	; (800075c <main+0x1bc>)
 8000610:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of traffic_queue_1 */
  osMessageQDef(traffic_queue_1, 16, uint16_t);
 8000612:	4b53      	ldr	r3, [pc, #332]	; (8000760 <main+0x1c0>)
 8000614:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_1Handle = osMessageCreate(osMessageQ(traffic_queue_1), NULL);
 800061e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f008 fd80 	bl	800912a <osMessageCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a4d      	ldr	r2, [pc, #308]	; (8000764 <main+0x1c4>)
 800062e:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_queue_2 */
  osMessageQDef(traffic_queue_2, 16, uint16_t);
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <main+0x1c0>)
 8000632:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_2Handle = osMessageCreate(osMessageQ(traffic_queue_2), NULL);
 800063c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f008 fd71 	bl	800912a <osMessageCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a47      	ldr	r2, [pc, #284]	; (8000768 <main+0x1c8>)
 800064c:	6013      	str	r3, [r2, #0]

  /* definition and creation of cars_array_queue */
  osMailQDef(cars_array_queue, 16, uint16_t);
 800064e:	2310      	movs	r3, #16
 8000650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800065a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800065e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  cars_array_queueHandle = osMailCreate(osMailQ(cars_array_queue), NULL);
 8000662:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f008 fe3b 	bl	80092e4 <osMailCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a3e      	ldr	r2, [pc, #248]	; (800076c <main+0x1cc>)
 8000672:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_queue */
  osMessageQDef(light_status_queue, 16, uint16_t);
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <main+0x1c0>)
 8000676:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800067a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_status_queueHandle = osMessageCreate(osMessageQ(light_status_queue), NULL);
 8000680:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fd4f 	bl	800912a <osMessageCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a38      	ldr	r2, [pc, #224]	; (8000770 <main+0x1d0>)
 8000690:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000692:	4b38      	ldr	r3, [pc, #224]	; (8000774 <main+0x1d4>)
 8000694:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000698:	461d      	mov	r5, r3
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f008 fbe2 	bl	8008e76 <osThreadCreate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a30      	ldr	r2, [pc, #192]	; (8000778 <main+0x1d8>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_generat */
  osThreadDef(traffic_generat, TrafficGeneration, osPriorityIdle, 0, 128);
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <main+0x1dc>)
 80006ba:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80006be:	461d      	mov	r5, r3
 80006c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  traffic_generatHandle = osThreadCreate(osThread(traffic_generat), NULL);
 80006cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 fbcf 	bl	8008e76 <osThreadCreate>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a29      	ldr	r2, [pc, #164]	; (8000780 <main+0x1e0>)
 80006dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of adjust_flow */
  osThreadDef(adjust_flow, AdjustFlow, osPriorityIdle, 0, 128);
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <main+0x1e4>)
 80006e0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adjust_flowHandle = osThreadCreate(osThread(adjust_flow), NULL);
 80006f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f008 fbbc 	bl	8008e76 <osThreadCreate>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <main+0x1e8>)
 8000702:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_state */
  osThreadDef(light_state, LightState, osPriorityIdle, 0, 128);
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <main+0x1ec>)
 8000706:	f107 0420 	add.w	r4, r7, #32
 800070a:	461d      	mov	r5, r3
 800070c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  light_stateHandle = osThreadCreate(osThread(light_state), NULL);
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f008 fba9 	bl	8008e76 <osThreadCreate>
 8000724:	4603      	mov	r3, r0
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <main+0x1f0>)
 8000728:	6013      	str	r3, [r2, #0]

  /* definition and creation of sys_manage */
  osThreadDef(sys_manage, SysManage, osPriorityIdle, 0, 128);
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <main+0x1f4>)
 800072c:	1d3c      	adds	r4, r7, #4
 800072e:	461d      	mov	r5, r3
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sys_manageHandle = osThreadCreate(osThread(sys_manage), NULL);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f008 fb98 	bl	8008e76 <osThreadCreate>
 8000746:	4603      	mov	r3, r0
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <main+0x1f8>)
 800074a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800074c:	f008 fb8c 	bl	8008e68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x1b0>
 8000752:	bf00      	nop
 8000754:	20000414 	.word	0x20000414
 8000758:	20000418 	.word	0x20000418
 800075c:	2000041c 	.word	0x2000041c
 8000760:	0800d318 	.word	0x0800d318
 8000764:	20000404 	.word	0x20000404
 8000768:	20000408 	.word	0x20000408
 800076c:	2000040c 	.word	0x2000040c
 8000770:	20000410 	.word	0x20000410
 8000774:	0800d334 	.word	0x0800d334
 8000778:	200003f0 	.word	0x200003f0
 800077c:	0800d360 	.word	0x0800d360
 8000780:	200003f4 	.word	0x200003f4
 8000784:	0800d388 	.word	0x0800d388
 8000788:	200003f8 	.word	0x200003f8
 800078c:	0800d3b0 	.word	0x0800d3b0
 8000790:	200003fc 	.word	0x200003fc
 8000794:	0800d3d8 	.word	0x0800d3d8
 8000798:	20000400 	.word	0x20000400

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00b ff34 	bl	800c618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a27      	ldr	r2, [pc, #156]	; (8000868 <SystemClock_Config+0xcc>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <SystemClock_Config+0xcc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <SystemClock_Config+0xd0>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <SystemClock_Config+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000810:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800081a:	2307      	movs	r3, #7
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	4618      	mov	r0, r3
 8000824:	f004 f84e 	bl	80048c4 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800082e:	f000 fb7b 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2105      	movs	r1, #5
 8000850:	4618      	mov	r0, r3
 8000852:	f004 faaf 	bl	8004db4 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800085c:	f000 fb64 	bl	8000f28 <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3750      	adds	r7, #80	; 0x50
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_I2C1_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_I2C1_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008ae:	f003 fa25 	bl	8003cfc <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 fb36 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200002fc 	.word	0x200002fc
 80008c4:	40005400 	.word	0x40005400
 80008c8:	000186a0 	.word	0x000186a0

080008cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_I2S3_Init+0x54>)
 80008d2:	4a14      	ldr	r2, [pc, #80]	; (8000924 <MX_I2S3_Init+0x58>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2S3_Init+0x54>)
 80008d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_I2S3_Init+0x54>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_I2S3_Init+0x54>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_I2S3_Init+0x54>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_I2S3_Init+0x54>)
 80008f4:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <MX_I2S3_Init+0x5c>)
 80008f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2S3_Init+0x54>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_I2S3_Init+0x54>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2S3_Init+0x54>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_I2S3_Init+0x54>)
 800090c:	f003 fb3a 	bl	8003f84 <HAL_I2S_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000916:	f000 fb07 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000350 	.word	0x20000350
 8000924:	40003c00 	.word	0x40003c00
 8000928:	00017700 	.word	0x00017700

0800092c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI1_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_SPI1_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI1_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI1_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI1_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI1_Init+0x64>)
 800097e:	f004 fd67 	bl	8005450 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 face 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000398 	.word	0x20000398
 8000994:	40013000 	.word	0x40013000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	4b72      	ldr	r3, [pc, #456]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a71      	ldr	r2, [pc, #452]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b6f      	ldr	r3, [pc, #444]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	4b6b      	ldr	r3, [pc, #428]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a6a      	ldr	r2, [pc, #424]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b68      	ldr	r3, [pc, #416]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b64      	ldr	r3, [pc, #400]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a63      	ldr	r2, [pc, #396]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b61      	ldr	r3, [pc, #388]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b5d      	ldr	r3, [pc, #372]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a5c      	ldr	r2, [pc, #368]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b5a      	ldr	r3, [pc, #360]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b56      	ldr	r3, [pc, #344]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b4f      	ldr	r3, [pc, #316]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a4e      	ldr	r2, [pc, #312]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b4c      	ldr	r3, [pc, #304]	; (8000b7c <MX_GPIO_Init+0x1e4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2108      	movs	r1, #8
 8000a5a:	4849      	ldr	r0, [pc, #292]	; (8000b80 <MX_GPIO_Init+0x1e8>)
 8000a5c:	f001 f81a 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	4847      	ldr	r0, [pc, #284]	; (8000b84 <MX_GPIO_Init+0x1ec>)
 8000a66:	f001 f815 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a70:	4845      	ldr	r0, [pc, #276]	; (8000b88 <MX_GPIO_Init+0x1f0>)
 8000a72:	f001 f80f 	bl	8001a94 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a76:	2308      	movs	r3, #8
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	483c      	ldr	r0, [pc, #240]	; (8000b80 <MX_GPIO_Init+0x1e8>)
 8000a8e:	f000 fe65 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <MX_GPIO_Init+0x1ec>)
 8000aaa:	f000 fe57 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	482e      	ldr	r0, [pc, #184]	; (8000b84 <MX_GPIO_Init+0x1ec>)
 8000aca:	f000 fe47 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482a      	ldr	r0, [pc, #168]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000ae4:	f000 fe3a 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4825      	ldr	r0, [pc, #148]	; (8000b90 <MX_GPIO_Init+0x1f8>)
 8000afc:	f000 fe2e 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481c      	ldr	r0, [pc, #112]	; (8000b90 <MX_GPIO_Init+0x1f8>)
 8000b1e:	f000 fe1d 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b26:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_GPIO_Init+0x1f0>)
 8000b3c:	f000 fe0e 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b40:	2320      	movs	r3, #32
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_GPIO_Init+0x1f0>)
 8000b54:	f000 fe02 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0x1e8>)
 8000b6e:	f000 fdf5 	bl	800175c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b72:	bf00      	nop
 8000b74:	3730      	adds	r7, #48	; 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400

08000b94 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000b9c:	f00b f84e 	bl	800bc3c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f008 f9b4 	bl	8008f0e <osDelay>
 8000ba6:	e7fb      	b.n	8000ba0 <StartDefaultTask+0xc>

08000ba8 <TrafficGeneration>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TrafficGeneration */
void TrafficGeneration(void const * argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TrafficGeneration */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f008 f9ac 	bl	8008f0e <osDelay>
 8000bb6:	e7fb      	b.n	8000bb0 <TrafficGeneration+0x8>

08000bb8 <AdjustFlow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AdjustFlow */
void AdjustFlow(void const * argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AdjustFlow */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f008 f9a4 	bl	8008f0e <osDelay>
 8000bc6:	e7fb      	b.n	8000bc0 <AdjustFlow+0x8>

08000bc8 <trafficGenerated>:
 * @brief Function implementing the light_state thread.
 * @param argument: Not used
 * @retval None
 */

int trafficGenerated(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
	osMutexWait(traffic_rate_mutexHandle, osWaitForever);
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <trafficGenerated+0x78>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 f9c6 	bl	8008f68 <osMutexWait>
	// int traffic = traffic_rate; //TODO: traffic_queue_0
	osEvent event = osMessageGet(traffic_queue_1Handle, osWaitForever);
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <trafficGenerated+0x7c>)
 8000bde:	6819      	ldr	r1, [r3, #0]
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 fb08 	bl	80091fc <osMessageGet>
	int traffic = event.value.v;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	617b      	str	r3, [r7, #20]
	osMutexRelease(traffic_rate_mutexHandle);
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <trafficGenerated+0x78>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 fa05 	bl	8009004 <osMutexRelease>
	// modulate traffic rate from 1 to 10

	srand(time(NULL));
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f00b fd14 	bl	800c628 <time>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4613      	mov	r3, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f00b fbd8 	bl	800c3bc <srand>
	int random = rand() % 10;
 8000c0c:	f00b fc04 	bl	800c418 <rand>
 8000c10:	4602      	mov	r2, r0
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <trafficGenerated+0x80>)
 8000c14:	fb83 1302 	smull	r1, r3, r3, r2
 8000c18:	1099      	asrs	r1, r3, #2
 8000c1a:	17d3      	asrs	r3, r2, #31
 8000c1c:	1ac9      	subs	r1, r1, r3
 8000c1e:	460b      	mov	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	440b      	add	r3, r1
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	613b      	str	r3, [r7, #16]
	if (random > traffic) {
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	dd01      	ble.n	8000c36 <trafficGenerated+0x6e>
		return 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <trafficGenerated+0x70>
	}
	return 0;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000418 	.word	0x20000418
 8000c44:	20000404 	.word	0x20000404
 8000c48:	66666667 	.word	0x66666667

08000c4c <LightState>:
/* USER CODE END Header_LightState */
void LightState(void const * argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN LightState */
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(traffic_rate_mutexHandle, osWaitForever);
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <LightState+0x114>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f008 f983 	bl	8008f68 <osMutexWait>
		// int rate = traffic_rate; // TODO: traffic_queue_1
		osEvent event = osMessageGet(traffic_queue_2Handle, osWaitForever);
 8000c62:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <LightState+0x118>)
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	f107 0318 	add.w	r3, r7, #24
 8000c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f008 fac4 	bl	80091fc <osMessageGet>
		int rate = event.value.v;
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
		osMutexRelease(traffic_rate_mutexHandle);
 8000c78:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <LightState+0x114>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f008 f9c1 	bl	8009004 <osMutexRelease>
		// turn green LED on
		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000c82:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <LightState+0x11c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f008 f96c 	bl	8008f68 <osMutexWait>
		osMessagePut(light_status_queueHandle, 2, osWaitForever);
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <LightState+0x120>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 fa6e 	bl	800917c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <LightState+0x11c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f008 f9ad 	bl	8009004 <osMutexRelease>
		// light_status = 2; //TODO: light_queue_0
		// modulate traffic rate to 1
		osDelay(3000 + 3000 * rate);
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	3301      	adds	r3, #1
 8000cae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f008 f929 	bl	8008f0e <osDelay>

		// turn yellow LED on
		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <LightState+0x11c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f008 f94f 	bl	8008f68 <osMutexWait>
		osMessagePut(light_status_queueHandle, 1, osWaitForever);
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <LightState+0x120>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f008 fa51 	bl	800917c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <LightState+0x11c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f008 f990 	bl	8009004 <osMutexRelease>
		// light_status = 1;
		osDelay(1000);
 8000ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce8:	f008 f911 	bl	8008f0e <osDelay>

		osMutexWait(traffic_rate_mutexHandle, osWaitForever);
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <LightState+0x114>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f008 f937 	bl	8008f68 <osMutexWait>
		event = osMessageGet(traffic_queue_2Handle, osWaitForever); //TODO: traffic_queue_1
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <LightState+0x118>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	463b      	mov	r3, r7
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d04:	4618      	mov	r0, r3
 8000d06:	f008 fa79 	bl	80091fc <osMessageGet>
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	463a      	mov	r2, r7
 8000d10:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		rate = event.value.v;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
		osMutexRelease(traffic_rate_mutexHandle);
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <LightState+0x114>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f008 f970 	bl	8009004 <osMutexRelease>
		// turn red LED on
		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <LightState+0x11c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f008 f91b 	bl	8008f68 <osMutexWait>
		osMessagePut(light_status_queueHandle, 0, osWaitForever);
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <LightState+0x120>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f008 fa1d 	bl	800917c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <LightState+0x11c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f008 f95c 	bl	8009004 <osMutexRelease>
		// light_status = 0;
		// modulate traffic rate to 1
		osDelay(3000 + 3000 * rate);
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	3301      	adds	r3, #1
 8000d50:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f008 f8d8 	bl	8008f0e <osDelay>
	{
 8000d5e:	e779      	b.n	8000c54 <LightState+0x8>
 8000d60:	20000418 	.word	0x20000418
 8000d64:	20000408 	.word	0x20000408
 8000d68:	2000041c 	.word	0x2000041c
 8000d6c:	20000410 	.word	0x20000410

08000d70 <SysManage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SysManage */
void SysManage(void const * argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b098      	sub	sp, #96	; 0x60
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	int i;
	int cars[16];
	for(;;)
	{
		osMutexWait(light_status_mutexHandle, osWaitForever);
 8000d78:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <SysManage+0x1a8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	4618      	mov	r0, r3
 8000d82:	f008 f8f1 	bl	8008f68 <osMutexWait>
		osEvent event = osMessageGet(light_status_queueHandle, osWaitForever); //TODO: light_queue_0
 8000d86:	4b65      	ldr	r3, [pc, #404]	; (8000f1c <SysManage+0x1ac>)
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d92:	4618      	mov	r0, r3
 8000d94:	f008 fa32 	bl	80091fc <osMessageGet>
		int light_colour = event.value.v;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	65bb      	str	r3, [r7, #88]	; 0x58
		osMutexRelease(light_status_mutexHandle);
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	; (8000f18 <SysManage+0x1a8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f008 f92f 	bl	8009004 <osMutexRelease>

		// osMutexWait(cars_array_mutexHandle); //TODO: cars_queue_0
		for (i = 15; i>0; i--){
 8000da6:	230f      	movs	r3, #15
 8000da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000daa:	e08e      	b.n	8000eca <SysManage+0x15a>
			if (light_colour == 2) { //green
 8000dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d115      	bne.n	8000dde <SysManage+0x6e>
				cars[i] = cars[i-1];
 8000db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db4:	3b01      	subs	r3, #1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	3360      	adds	r3, #96	; 0x60
 8000dba:	443b      	add	r3, r7
 8000dbc:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	3360      	adds	r3, #96	; 0x60
 8000dc6:	443b      	add	r3, r7
 8000dc8:	f843 2c48 	str.w	r2, [r3, #-72]
				cars[i - 1] = 0;
 8000dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	3360      	adds	r3, #96	; 0x60
 8000dd4:	443b      	add	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f843 2c48 	str.w	r2, [r3, #-72]
 8000ddc:	e072      	b.n	8000ec4 <SysManage+0x154>
			}
			else if (light_colour == 1) { //yellow
 8000dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d136      	bne.n	8000e52 <SysManage+0xe2>
				if (i > 8) {
 8000de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	dd15      	ble.n	8000e16 <SysManage+0xa6>
					cars[i] = cars[i-1];
 8000dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dec:	3b01      	subs	r3, #1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	3360      	adds	r3, #96	; 0x60
 8000df2:	443b      	add	r3, r7
 8000df4:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	3360      	adds	r3, #96	; 0x60
 8000dfe:	443b      	add	r3, r7
 8000e00:	f843 2c48 	str.w	r2, [r3, #-72]
					cars[i-1] = 0;
 8000e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e06:	3b01      	subs	r3, #1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3360      	adds	r3, #96	; 0x60
 8000e0c:	443b      	add	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f843 2c48 	str.w	r2, [r3, #-72]
 8000e14:	e056      	b.n	8000ec4 <SysManage+0x154>
				}
				else {
					if (!cars[i]){
 8000e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	3360      	adds	r3, #96	; 0x60
 8000e1c:	443b      	add	r3, r7
 8000e1e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d14e      	bne.n	8000ec4 <SysManage+0x154>
						cars[i] = cars[i-1];
 8000e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	3360      	adds	r3, #96	; 0x60
 8000e2e:	443b      	add	r3, r7
 8000e30:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	3360      	adds	r3, #96	; 0x60
 8000e3a:	443b      	add	r3, r7
 8000e3c:	f843 2c48 	str.w	r2, [r3, #-72]
						cars[i-1] = 0;
 8000e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e42:	3b01      	subs	r3, #1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	3360      	adds	r3, #96	; 0x60
 8000e48:	443b      	add	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f843 2c48 	str.w	r2, [r3, #-72]
 8000e50:	e038      	b.n	8000ec4 <SysManage+0x154>
					}
				}
			}
			else { //red
				if (i > 11){
 8000e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e54:	2b0b      	cmp	r3, #11
 8000e56:	dd15      	ble.n	8000e84 <SysManage+0x114>
					cars[i] = cars[i-1];
 8000e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	3360      	adds	r3, #96	; 0x60
 8000e60:	443b      	add	r3, r7
 8000e62:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	3360      	adds	r3, #96	; 0x60
 8000e6c:	443b      	add	r3, r7
 8000e6e:	f843 2c48 	str.w	r2, [r3, #-72]
					cars[i-1] = 0;
 8000e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e74:	3b01      	subs	r3, #1
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	3360      	adds	r3, #96	; 0x60
 8000e7a:	443b      	add	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f843 2c48 	str.w	r2, [r3, #-72]
 8000e82:	e01f      	b.n	8000ec4 <SysManage+0x154>
				}
				else if (i < 8){
 8000e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	dc1c      	bgt.n	8000ec4 <SysManage+0x154>
					if (!cars[i]) {
 8000e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	3360      	adds	r3, #96	; 0x60
 8000e90:	443b      	add	r3, r7
 8000e92:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d114      	bne.n	8000ec4 <SysManage+0x154>
						cars[i] = cars[i-1];
 8000e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	3360      	adds	r3, #96	; 0x60
 8000ea2:	443b      	add	r3, r7
 8000ea4:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	3360      	adds	r3, #96	; 0x60
 8000eae:	443b      	add	r3, r7
 8000eb0:	f843 2c48 	str.w	r2, [r3, #-72]
						cars[i-1] = 0;
 8000eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	3360      	adds	r3, #96	; 0x60
 8000ebc:	443b      	add	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f843 2c48 	str.w	r2, [r3, #-72]
		for (i = 15; i>0; i--){
 8000ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f73f af6d 	bgt.w	8000dac <SysManage+0x3c>
					}
				}
			}
		}
		if (trafficGenerated()){
 8000ed2:	f7ff fe79 	bl	8000bc8 <trafficGenerated>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <SysManage+0x172>
			cars[0] = 1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	e001      	b.n	8000ee6 <SysManage+0x176>
		}
		else {
			cars[0] = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
		}
		// osMutexRelease(cars_array_mutexHandle);
		osMutexWait(cars_array_mutexHandle, osWaitForever);
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <SysManage+0x1b0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f008 f83a 	bl	8008f68 <osMutexWait>
		// int* mail = (int *)osMailAlloc(cars_array_queueHandle, osWaitForever);
		osMailPut(cars_array_queueHandle, cars);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <SysManage+0x1b4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f107 0218 	add.w	r2, r7, #24
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f008 fa48 	bl	8009394 <osMailPut>
		osMutexRelease(cars_array_mutexHandle);
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SysManage+0x1b0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f008 f87b 	bl	8009004 <osMutexRelease>
		osDelay(500);
 8000f0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f12:	f007 fffc 	bl	8008f0e <osDelay>
	{
 8000f16:	e72f      	b.n	8000d78 <SysManage+0x8>
 8000f18:	2000041c 	.word	0x2000041c
 8000f1c:	20000410 	.word	0x20000410
 8000f20:	20000414 	.word	0x20000414
 8000f24:	2000040c 	.word	0x2000040c

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_MspInit+0x54>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_MspInit+0x54>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x54>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_MspInit+0x54>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_MspInit+0x54>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_MspInit+0x54>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	210f      	movs	r1, #15
 8000f76:	f06f 0001 	mvn.w	r0, #1
 8000f7a:	f000 fbb8 	bl	80016ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a19      	ldr	r2, [pc, #100]	; (8001010 <HAL_I2C_MspInit+0x84>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12c      	bne.n	8001008 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_I2C_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a17      	ldr	r2, [pc, #92]	; (8001014 <HAL_I2C_MspInit+0x88>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_I2C_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd0:	2312      	movs	r3, #18
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <HAL_I2C_MspInit+0x8c>)
 8000fe8:	f000 fbb8 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_I2C_MspInit+0x88>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_I2C_MspInit+0x88>)
 8000ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_I2C_MspInit+0x88>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40005400 	.word	0x40005400
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400

0800101c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <HAL_I2S_MspInit+0xf0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d15a      	bne.n	8001102 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001050:	23c0      	movs	r3, #192	; 0xc0
 8001052:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001054:	2302      	movs	r3, #2
 8001056:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f004 f8b5 	bl	80051cc <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001068:	f7ff ff5e 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 8001076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107a:	6413      	str	r3, [r2, #64]	; 0x40
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_I2S_MspInit+0xf4>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010c0:	2310      	movs	r3, #16
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010d0:	2306      	movs	r3, #6
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <HAL_I2S_MspInit+0xf8>)
 80010dc:	f000 fb3e 	bl	800175c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010f2:	2306      	movs	r3, #6
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_I2S_MspInit+0xfc>)
 80010fe:	f000 fb2d 	bl	800175c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40003c00 	.word	0x40003c00
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020800 	.word	0x40020800

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12b      	bne.n	8001196 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001176:	23e0      	movs	r3, #224	; 0xe0
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001186:	2305      	movs	r3, #5
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001192:	f000 fae3 	bl	800175c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40013000 	.word	0x40013000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f968 	bl	80014b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011e0:	f009 fed0 	bl	800af84 <xTaskGetSchedulerState>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011ea:	f00a faad 	bl	800b748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <OTG_FS_IRQHandler+0x10>)
 80011fa:	f000 ff45 	bl	8002088 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20004564 	.word	0x20004564

08001208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return 1;
 800120c:	2301      	movs	r3, #1
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <_kill>:

int _kill(int pid, int sig)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001222:	f00b fa3d 	bl	800c6a0 <__errno>
 8001226:	4603      	mov	r3, r0
 8001228:	2216      	movs	r2, #22
 800122a:	601a      	str	r2, [r3, #0]
  return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_exit>:

void _exit (int status)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffe7 	bl	8001218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800124a:	e7fe      	b.n	800124a <_exit+0x12>

0800124c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e00a      	b.n	8001274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125e:	f3af 8000 	nop.w
 8001262:	4601      	mov	r1, r0
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60ba      	str	r2, [r7, #8]
 800126a:	b2ca      	uxtb	r2, r1
 800126c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf0      	blt.n	800125e <_read+0x12>
  }

  return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e009      	b.n	80012ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbf1      	blt.n	8001298 <_write+0x12>
  }
  return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_close>:

int _close(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e6:	605a      	str	r2, [r3, #4]
  return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_isatty>:

int _isatty(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f00b f9a2 	bl	800c6a0 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20020000 	.word	0x20020000
 8001388:	00000400 	.word	0x00000400
 800138c:	20000420 	.word	0x20000420
 8001390:	20004a90 	.word	0x20004a90

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013bc:	f7ff ffea 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f00b f961 	bl	800c6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff f8d9 	bl	80005a0 <main>
  bx  lr    
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80013fc:	0800d540 	.word	0x0800d540
  ldr r2, =_sbss
 8001400:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001404:	20004a90 	.word	0x20004a90

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_Init+0x40>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_Init+0x40>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x40>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f94f 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	200f      	movs	r0, #15
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fd78 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f967 	bl	8001742 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800148c:	f000 f92f 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000424 	.word	0x20000424

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000424 	.word	0x20000424

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff3e 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff31 	bl	800159c <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e16b      	b.n	8001a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 815a 	bne.w	8001a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d005      	beq.n	80017ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d130      	bne.n	8001810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b03      	cmp	r3, #3
 800181a:	d017      	beq.n	800184c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80b4 	beq.w	8001a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b60      	ldr	r3, [pc, #384]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fe:	4a5b      	ldr	r2, [pc, #364]	; (8001a6c <HAL_GPIO_Init+0x310>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a52      	ldr	r2, [pc, #328]	; (8001a70 <HAL_GPIO_Init+0x314>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_Init+0x226>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a51      	ldr	r2, [pc, #324]	; (8001a74 <HAL_GPIO_Init+0x318>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x222>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <HAL_GPIO_Init+0x31c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x21e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <HAL_GPIO_Init+0x320>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_GPIO_Init+0x324>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x216>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4d      	ldr	r2, [pc, #308]	; (8001a84 <HAL_GPIO_Init+0x328>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x212>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_GPIO_Init+0x32c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_GPIO_Init+0x330>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x20a>
 8001962:	2307      	movs	r3, #7
 8001964:	e00e      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001966:	2308      	movs	r3, #8
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196a:	2306      	movs	r3, #6
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196e:	2305      	movs	r3, #5
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001982:	2300      	movs	r3, #0
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001994:	4935      	ldr	r1, [pc, #212]	; (8001a6c <HAL_GPIO_Init+0x310>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_GPIO_Init+0x334>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_GPIO_Init+0x334>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_GPIO_Init+0x334>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_GPIO_Init+0x334>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	f67f ae90 	bls.w	8001778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020c00 	.word	0x40020c00
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40021400 	.word	0x40021400
 8001a88:	40021800 	.word	0x40021800
 8001a8c:	40021c00 	.word	0x40021c00
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af02      	add	r7, sp, #8
 8001acc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e059      	b.n	8001b8c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f00a f8f6 	bl	800bce4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b06:	d102      	bne.n	8001b0e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fd9a 	bl	800564c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7c1a      	ldrb	r2, [r3, #16]
 8001b20:	f88d 2000 	strb.w	r2, [sp]
 8001b24:	3304      	adds	r3, #4
 8001b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b28:	f003 fd1b 	bl	8005562 <USB_CoreInit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e026      	b.n	8001b8c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fd92 	bl	800566e <USB_SetCurrentMode>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e017      	b.n	8001b8c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7c1a      	ldrb	r2, [r3, #16]
 8001b64:	f88d 2000 	strb.w	r2, [sp]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6c:	f003 ff34 	bl	80059d8 <USB_HostInit>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e004      	b.n	8001b8c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b08b      	sub	sp, #44	; 0x2c
 8001b98:	af04      	add	r7, sp, #16
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70bb      	strb	r3, [r7, #2]
 8001baa:	4613      	mov	r3, r2
 8001bac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001bae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001bb0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_HCD_HC_Init+0x2c>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e09d      	b.n	8001cfc <HAL_HCD_HC_Init+0x168>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3319      	adds	r3, #25
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3314      	adds	r3, #20
 8001bec:	787a      	ldrb	r2, [r7, #1]
 8001bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3315      	adds	r3, #21
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3326      	adds	r3, #38	; 0x26
 8001c14:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001c18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c22:	b2d8      	uxtb	r0, r3
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3316      	adds	r3, #22
 8001c32:	4602      	mov	r2, r0
 8001c34:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fbc8 	bl	80023d0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001c40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da0a      	bge.n	8001c5e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	3317      	adds	r3, #23
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e009      	b.n	8001c72 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3317      	adds	r3, #23
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 f812 	bl	8005ca0 <USB_GetHostSpeed>
 8001c7c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10b      	bne.n	8001c9e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_HCD_HC_Init+0x10a>
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2bbc      	cmp	r3, #188	; 0xbc
 8001c98:	d901      	bls.n	8001c9e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c9a:	23bc      	movs	r3, #188	; 0xbc
 8001c9c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3318      	adds	r3, #24
 8001cae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	b298      	uxth	r0, r3
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3328      	adds	r3, #40	; 0x28
 8001cc8:	4602      	mov	r2, r0
 8001cca:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	787c      	ldrb	r4, [r7, #1]
 8001cd6:	78ba      	ldrb	r2, [r7, #2]
 8001cd8:	78f9      	ldrb	r1, [r7, #3]
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4623      	mov	r3, r4
 8001cea:	f004 f801 	bl	8005cf0 <USB_HC_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}

08001d04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_HCD_HC_Halt+0x1e>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e00f      	b.n	8001d42 <HAL_HCD_HC_Halt+0x3e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fb93 	bl	800645e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	4608      	mov	r0, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	70fb      	strb	r3, [r7, #3]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70bb      	strb	r3, [r7, #2]
 8001d62:	4613      	mov	r3, r2
 8001d64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3317      	adds	r3, #23
 8001d76:	78ba      	ldrb	r2, [r7, #2]
 8001d78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3326      	adds	r3, #38	; 0x26
 8001d8a:	787a      	ldrb	r2, [r7, #1]
 8001d8c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d8e:	7c3b      	ldrb	r3, [r7, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d114      	bne.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	332a      	adds	r3, #42	; 0x2a
 8001da4:	2203      	movs	r2, #3
 8001da6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	3319      	adds	r3, #25
 8001db8:	7f3a      	ldrb	r2, [r7, #28]
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e009      	b.n	8001dd2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	332a      	adds	r3, #42	; 0x2a
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dd2:	787b      	ldrb	r3, [r7, #1]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	f200 8102 	bhi.w	8001fde <HAL_HCD_HC_SubmitRequest+0x292>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001fc9 	.word	0x08001fc9
 8001de8:	08001eb5 	.word	0x08001eb5
 8001dec:	08001f3f 	.word	0x08001f3f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001df0:	7c3b      	ldrb	r3, [r7, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f040 80f5 	bne.w	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d12d      	bne.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001dfe:	8b3b      	ldrh	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333d      	adds	r3, #61	; 0x3d
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	333d      	adds	r3, #61	; 0x3d
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	332a      	adds	r3, #42	; 0x2a
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001e42:	e0ce      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	332a      	adds	r3, #42	; 0x2a
 8001e54:	2202      	movs	r2, #2
 8001e56:	701a      	strb	r2, [r3, #0]
      break;
 8001e58:	e0c3      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	331a      	adds	r3, #26
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 80b8 	bne.w	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	333c      	adds	r3, #60	; 0x3c
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	332a      	adds	r3, #42	; 0x2a
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
      break;
 8001e9c:	e0a1      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	332a      	adds	r3, #42	; 0x2a
 8001eae:	2202      	movs	r2, #2
 8001eb0:	701a      	strb	r2, [r3, #0]
      break;
 8001eb2:	e096      	b.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001eb4:	78bb      	ldrb	r3, [r7, #2]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d120      	bne.n	8001efc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	333d      	adds	r3, #61	; 0x3d
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	332a      	adds	r3, #42	; 0x2a
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ee4:	e07e      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	332a      	adds	r3, #42	; 0x2a
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
      break;
 8001efa:	e073      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	333c      	adds	r3, #60	; 0x3c
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	332a      	adds	r3, #42	; 0x2a
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
      break;
 8001f26:	e05d      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	332a      	adds	r3, #42	; 0x2a
 8001f38:	2202      	movs	r2, #2
 8001f3a:	701a      	strb	r2, [r3, #0]
      break;
 8001f3c:	e052      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f3e:	78bb      	ldrb	r3, [r7, #2]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d120      	bne.n	8001f86 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	333d      	adds	r3, #61	; 0x3d
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	332a      	adds	r3, #42	; 0x2a
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f6e:	e039      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	332a      	adds	r3, #42	; 0x2a
 8001f80:	2202      	movs	r2, #2
 8001f82:	701a      	strb	r2, [r3, #0]
      break;
 8001f84:	e02e      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333c      	adds	r3, #60	; 0x3c
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	332a      	adds	r3, #42	; 0x2a
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
      break;
 8001fb0:	e018      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	332a      	adds	r3, #42	; 0x2a
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	701a      	strb	r2, [r3, #0]
      break;
 8001fc6:	e00d      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	332a      	adds	r3, #42	; 0x2a
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
      break;
 8001fdc:	e002      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001fde:	bf00      	nop
 8001fe0:	e000      	b.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001fe2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	332c      	adds	r3, #44	; 0x2c
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	8b39      	ldrh	r1, [r7, #24]
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4403      	add	r3, r0
 8002008:	3334      	adds	r3, #52	; 0x34
 800200a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	334c      	adds	r3, #76	; 0x4c
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3338      	adds	r3, #56	; 0x38
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3315      	adds	r3, #21
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	334d      	adds	r3, #77	; 0x4d
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	4613      	mov	r3, r2
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3310      	adds	r3, #16
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	1d19      	adds	r1, r3, #4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	799b      	ldrb	r3, [r3, #6]
 8002076:	461a      	mov	r2, r3
 8002078:	f003 ff66 	bl	8005f48 <USB_HC_StartXfer>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop

08002088 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fc5b 	bl	800595a <USB_GetMode>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 80fb 	bne.w	80022a2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fc1e 	bl	80058f2 <USB_ReadInterrupts>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80f1 	beq.w	80022a0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 fc15 	bl	80058f2 <USB_ReadInterrupts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020d2:	d104      	bne.n	80020de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fc05 	bl	80058f2 <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020f2:	d104      	bne.n	80020fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fbf5 	bl	80058f2 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800210e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002112:	d104      	bne.n	800211e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800211c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fbe5 	bl	80058f2 <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d103      	bne.n	800213a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fbd7 	bl	80058f2 <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800214a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800214e:	d120      	bne.n	8002192 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002158:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d113      	bne.n	8002192 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800216a:	2110      	movs	r1, #16
 800216c:	6938      	ldr	r0, [r7, #16]
 800216e:	f003 faca 	bl	8005706 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002172:	6938      	ldr	r0, [r7, #16]
 8002174:	f003 faf9 	bl	800576a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7a5b      	ldrb	r3, [r3, #9]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d105      	bne.n	800218c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fcea 	bl	8005b60 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f009 fe27 	bl	800bde0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fbab 	bl	80058f2 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a6:	d102      	bne.n	80021ae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f001 fd33 	bl	8003c14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fb9d 	bl	80058f2 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d106      	bne.n	80021d0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f009 fdf0 	bl	800bda8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fb8c 	bl	80058f2 <USB_ReadInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021e4:	d139      	bne.n	800225a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f004 f926 	bl	800643c <USB_HC_ReadInterrupt>
 80021f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e025      	b.n	8002244 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d018      	beq.n	800223e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002222:	d106      	bne.n	8002232 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f905 	bl	800243a <HCD_HC_IN_IRQHandler>
 8002230:	e005      	b.n	800223e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 ff67 	bl	800310c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	795b      	ldrb	r3, [r3, #5]
 8002248:	461a      	mov	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4293      	cmp	r3, r2
 800224e:	d3d3      	bcc.n	80021f8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fb47 	bl	80058f2 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b10      	cmp	r3, #16
 800226c:	d101      	bne.n	8002272 <HAL_HCD_IRQHandler+0x1ea>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_HCD_IRQHandler+0x1ec>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d014      	beq.n	80022a2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0210 	bic.w	r2, r2, #16
 8002286:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 fbe4 	bl	8003a56 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0210 	orr.w	r2, r2, #16
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	e000      	b.n	80022a2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80022a0:	bf00      	nop
    }
  }
}
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_HCD_Start+0x16>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e013      	b.n	80022e6 <HAL_HCD_Start+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fcae 	bl	8005c2e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f9a7 	bl	800562a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_HCD_Stop+0x16>
 8002300:	2302      	movs	r3, #2
 8002302:	e00d      	b.n	8002320 <HAL_HCD_Stop+0x32>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f004 fa01 	bl	8006718 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fc50 	bl	8005bda <USB_ResetPort>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	; 0x4c
 8002360:	781b      	ldrb	r3, [r3, #0]
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3338      	adds	r3, #56	; 0x38
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fc92 	bl	8005cce <USB_GetCurrentFrame>
 80023aa:	4603      	mov	r3, r0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fc6d 	bl	8005ca0 <USB_GetHostSpeed>
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	331a      	adds	r3, #26
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	331b      	adds	r3, #27
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3325      	adds	r3, #37	; 0x25
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3324      	adds	r3, #36	; 0x24
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fa5d 	bl	8005918 <USB_ReadChInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11a      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	2304      	movs	r3, #4
 8002478:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	334d      	adds	r3, #77	; 0x4d
 800248a:	2207      	movs	r2, #7
 800248c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f003 ffe1 	bl	800645e <USB_HC_Halt>
 800249c:	e09e      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fa36 	bl	8005918 <USB_ReadChInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b6:	d11b      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334d      	adds	r3, #77	; 0x4d
 80024dc:	2208      	movs	r2, #8
 80024de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 ffb8 	bl	800645e <USB_HC_Halt>
 80024ee:	e075      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fa0d 	bl	8005918 <USB_ReadChInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b08      	cmp	r3, #8
 8002506:	d11a      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2308      	movs	r3, #8
 8002518:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334d      	adds	r3, #77	; 0x4d
 800252a:	2206      	movs	r2, #6
 800252c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f003 ff91 	bl	800645e <USB_HC_Halt>
 800253c:	e04e      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f003 f9e6 	bl	8005918 <USB_ReadChInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002556:	d11b      	bne.n	8002590 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	; 0x4d
 800257c:	2209      	movs	r2, #9
 800257e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f003 ff68 	bl	800645e <USB_HC_Halt>
 800258e:	e025      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f003 f9bd 	bl	8005918 <USB_ReadChInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d119      	bne.n	80025dc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	334d      	adds	r3, #77	; 0x4d
 80025ca:	2207      	movs	r2, #7
 80025cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 ff41 	bl	800645e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 f997 	bl	8005918 <USB_ReadChInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f4:	d112      	bne.n	800261c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 ff2d 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002616:	6093      	str	r3, [r2, #8]
 8002618:	f000 bd75 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f003 f977 	bl	8005918 <USB_ReadChInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 8128 	bne.w	8002886 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	2320      	movs	r3, #32
 8002646:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	331b      	adds	r3, #27
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d119      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	331b      	adds	r3, #27
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	0151      	lsls	r1, r2, #5
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	440a      	add	r2, r1
 8002688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002690:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	799b      	ldrb	r3, [r3, #6]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01b      	beq.n	80026d2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3330      	adds	r3, #48	; 0x30
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	1ac9      	subs	r1, r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4403      	add	r3, r0
 80026ce:	3338      	adds	r3, #56	; 0x38
 80026d0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	334d      	adds	r3, #77	; 0x4d
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3344      	adds	r3, #68	; 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2301      	movs	r3, #1
 800270a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3326      	adds	r3, #38	; 0x26
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3326      	adds	r3, #38	; 0x26
 8002732:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002734:	2b02      	cmp	r3, #2
 8002736:	d110      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fe8c 	bl	800645e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	2310      	movs	r3, #16
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	e03d      	b.n	80027d6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3326      	adds	r3, #38	; 0x26
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d00a      	beq.n	8002786 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3326      	adds	r3, #38	; 0x26
 8002780:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002782:	2b01      	cmp	r3, #1
 8002784:	d127      	bne.n	80027d6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	0151      	lsls	r1, r2, #5
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	440a      	add	r2, r1
 800279c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334c      	adds	r3, #76	; 0x4c
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	334c      	adds	r3, #76	; 0x4c
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f009 fb13 	bl	800bdfc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	799b      	ldrb	r3, [r3, #6]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d13b      	bne.n	8002856 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3338      	adds	r3, #56	; 0x38
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4403      	add	r3, r0
 80027fe:	3328      	adds	r3, #40	; 0x28
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	440b      	add	r3, r1
 8002804:	1e59      	subs	r1, r3, #1
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4403      	add	r3, r0
 8002814:	3328      	adds	r3, #40	; 0x28
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8470 	beq.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	333c      	adds	r3, #60	; 0x3c
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	f083 0301 	eor.w	r3, r3, #1
 800283e:	b2d8      	uxtb	r0, r3
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	333c      	adds	r3, #60	; 0x3c
 800284e:	4602      	mov	r2, r0
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	f000 bc58 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	333c      	adds	r3, #60	; 0x3c
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2d8      	uxtb	r0, r3
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	333c      	adds	r3, #60	; 0x3c
 800287e:	4602      	mov	r2, r0
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	f000 bc40 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f003 f842 	bl	8005918 <USB_ReadChInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d131      	bne.n	8002902 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	461a      	mov	r2, r3
 80028ac:	2320      	movs	r3, #32
 80028ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	331a      	adds	r3, #26
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	f040 841f 	bne.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	331b      	adds	r3, #27
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	; 0x4d
 80028ec:	2203      	movs	r2, #3
 80028ee:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fdb0 	bl	800645e <USB_HC_Halt>
 80028fe:	f000 bc02 	b.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f003 f804 	bl	8005918 <USB_ReadChInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 8305 	bne.w	8002f26 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2302      	movs	r3, #2
 800292c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	334d      	adds	r3, #77	; 0x4d
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d114      	bne.n	800296e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	334d      	adds	r3, #77	; 0x4d
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334c      	adds	r3, #76	; 0x4c
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e2cc      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	334d      	adds	r3, #77	; 0x4d
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b06      	cmp	r3, #6
 8002982:	d114      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	334d      	adds	r3, #77	; 0x4d
 8002994:	2202      	movs	r2, #2
 8002996:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	334c      	adds	r3, #76	; 0x4c
 80029a8:	2205      	movs	r2, #5
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e2ac      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	334d      	adds	r3, #77	; 0x4d
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b07      	cmp	r3, #7
 80029c2:	d00b      	beq.n	80029dc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334d      	adds	r3, #77	; 0x4d
 80029d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	f040 80a6 	bne.w	8002b28 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334d      	adds	r3, #77	; 0x4d
 80029ec:	2202      	movs	r2, #2
 80029ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	3344      	adds	r3, #68	; 0x44
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4403      	add	r3, r0
 8002a10:	3344      	adds	r3, #68	; 0x44
 8002a12:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3344      	adds	r3, #68	; 0x44
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d943      	bls.n	8002ab2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3344      	adds	r3, #68	; 0x44
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	331a      	adds	r3, #26
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d123      	bne.n	8002a9c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	331b      	adds	r3, #27
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	331c      	adds	r3, #28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334c      	adds	r3, #76	; 0x4c
 8002aac:	2204      	movs	r2, #4
 8002aae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ab0:	e229      	b.n	8002f06 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	334c      	adds	r3, #76	; 0x4c
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3326      	adds	r3, #38	; 0x26
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3326      	adds	r3, #38	; 0x26
 8002aec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	f040 8209 	bne.w	8002f06 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b0a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b12:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b26:	e1ee      	b.n	8002f06 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334d      	adds	r3, #77	; 0x4d
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	f040 80c8 	bne.w	8002cd0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	334d      	adds	r3, #77	; 0x4d
 8002b50:	2202      	movs	r2, #2
 8002b52:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	331b      	adds	r3, #27
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 81ce 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3326      	adds	r3, #38	; 0x26
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d16b      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3348      	adds	r3, #72	; 0x48
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1c59      	adds	r1, r3, #1
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4403      	add	r3, r0
 8002ba2:	3348      	adds	r3, #72	; 0x48
 8002ba4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3348      	adds	r3, #72	; 0x48
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d943      	bls.n	8002c44 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3348      	adds	r3, #72	; 0x48
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	331b      	adds	r3, #27
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3344      	adds	r3, #68	; 0x44
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d809      	bhi.n	8002c0e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	331c      	adds	r3, #28
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	334c      	adds	r3, #76	; 0x4c
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e014      	b.n	8002c6e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e009      	b.n	8002c6e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	334c      	adds	r3, #76	; 0x4c
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3326      	adds	r3, #38	; 0x26
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3326      	adds	r3, #38	; 0x26
 8002c94:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	f040 8136 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cb2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e11b      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	334d      	adds	r3, #77	; 0x4d
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	f040 8081 	bne.w	8002dea <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	; 0x4d
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	331b      	adds	r3, #27
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	f040 80fa 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	334c      	adds	r3, #76	; 0x4c
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	0151      	lsls	r1, r2, #5
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d46:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	0151      	lsls	r1, r2, #5
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d66:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d82:	f023 0320 	bic.w	r3, r3, #32
 8002d86:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3326      	adds	r3, #38	; 0x26
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3326      	adds	r3, #38	; 0x26
 8002dae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	f040 80a9 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dcc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dd4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e08e      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	334d      	adds	r3, #77	; 0x4d
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d143      	bne.n	8002e88 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334d      	adds	r3, #77	; 0x4d
 8002e10:	2202      	movs	r2, #2
 8002e12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334c      	adds	r3, #76	; 0x4c
 8002e24:	2202      	movs	r2, #2
 8002e26:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3326      	adds	r3, #38	; 0x26
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3326      	adds	r3, #38	; 0x26
 8002e4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d159      	bne.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e6a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e72:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e03f      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334d      	adds	r3, #77	; 0x4d
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d126      	bne.n	8002eec <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	334d      	adds	r3, #77	; 0x4d
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	; 0x44
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c59      	adds	r1, r3, #1
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4403      	add	r3, r0
 8002ed2:	3344      	adds	r3, #68	; 0x44
 8002ed4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	334c      	adds	r3, #76	; 0x4c
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e00d      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	334d      	adds	r3, #77	; 0x4d
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	f000 8100 	beq.w	8003104 <HCD_HC_IN_IRQHandler+0xcca>
 8002f04:	e000      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f06:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334c      	adds	r3, #76	; 0x4c
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f008 ff6c 	bl	800bdfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f24:	e0ef      	b.n	8003106 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f002 fcf2 	bl	8005918 <USB_ReadChInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d12f      	bne.n	8002f9e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2340      	movs	r3, #64	; 0x40
 8002f4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	; 0x4d
 8002f60:	2205      	movs	r2, #5
 8002f62:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	331a      	adds	r3, #26
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3344      	adds	r3, #68	; 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fa61 	bl	800645e <USB_HC_Halt>
 8002f9c:	e0b3      	b.n	8003106 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fcb6 	bl	8005918 <USB_ReadChInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	f040 80a7 	bne.w	8003106 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3326      	adds	r3, #38	; 0x26
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d11b      	bne.n	8003006 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3344      	adds	r3, #68	; 0x44
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	334d      	adds	r3, #77	; 0x4d
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 fa2d 	bl	800645e <USB_HC_Halt>
 8003004:	e03f      	b.n	8003086 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3326      	adds	r3, #38	; 0x26
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3326      	adds	r3, #38	; 0x26
 800302c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800302e:	2b02      	cmp	r3, #2
 8003030:	d129      	bne.n	8003086 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3344      	adds	r3, #68	; 0x44
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	799b      	ldrb	r3, [r3, #6]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HCD_HC_IN_IRQHandler+0xc2a>
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	331b      	adds	r3, #27
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d110      	bne.n	8003086 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	334d      	adds	r3, #77	; 0x4d
 8003074:	2204      	movs	r2, #4
 8003076:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f003 f9ec 	bl	800645e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	331b      	adds	r3, #27
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d129      	bne.n	80030f0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	331b      	adds	r3, #27
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	0151      	lsls	r1, r2, #5
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	440a      	add	r2, r1
 80030c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ce:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	0151      	lsls	r1, r2, #5
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	440a      	add	r2, r1
 80030e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	e000      	b.n	8003106 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003104:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fbf4 	bl	8005918 <USB_ReadChInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d11b      	bne.n	8003172 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	461a      	mov	r2, r3
 8003148:	2304      	movs	r3, #4
 800314a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	334d      	adds	r3, #77	; 0x4d
 800315c:	2207      	movs	r2, #7
 800315e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f003 f978 	bl	800645e <USB_HC_Halt>
 800316e:	f000 bc6f 	b.w	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f002 fbcc 	bl	8005918 <USB_ReadChInterrupts>
 8003180:	4603      	mov	r3, r0
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b20      	cmp	r3, #32
 8003188:	f040 8082 	bne.w	8003290 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	461a      	mov	r2, r3
 800319a:	2320      	movs	r3, #32
 800319c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3319      	adds	r3, #25
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d124      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3319      	adds	r3, #25
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334c      	adds	r3, #76	; 0x4c
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	334d      	adds	r3, #77	; 0x4d
 80031ec:	2203      	movs	r2, #3
 80031ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 f930 	bl	800645e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	331a      	adds	r3, #26
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 841d 	bne.w	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	331b      	adds	r3, #27
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 8411 	bne.w	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3326      	adds	r3, #38	; 0x26
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d009      	beq.n	8003258 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	331b      	adds	r3, #27
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	; 0x4d
 8003268:	2203      	movs	r2, #3
 800326a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f003 f8f2 	bl	800645e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	; 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e3df      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f002 fb3d 	bl	8005918 <USB_ReadChInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a8:	d111      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	461a      	mov	r2, r3
 80032b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 f8c9 	bl	800645e <USB_HC_Halt>
 80032cc:	e3c0      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fb1e 	bl	8005918 <USB_ReadChInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d168      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3344      	adds	r3, #68	; 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f002 fb08 	bl	8005918 <USB_ReadChInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d112      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3319      	adds	r3, #25
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	2340      	movs	r3, #64	; 0x40
 8003336:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	331b      	adds	r3, #27
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d019      	beq.n	8003382 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	331b      	adds	r3, #27
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	0151      	lsls	r1, r2, #5
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	440a      	add	r2, r1
 8003378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003380:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2301      	movs	r3, #1
 8003392:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	334d      	adds	r3, #77	; 0x4d
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 f854 	bl	800645e <USB_HC_Halt>
 80033b6:	e34b      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 faa9 	bl	8005918 <USB_ReadChInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d139      	bne.n	8003444 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	; 0x4d
 80033e0:	2205      	movs	r2, #5
 80033e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	331a      	adds	r3, #26
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3319      	adds	r3, #25
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3344      	adds	r3, #68	; 0x44
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f003 f817 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2340      	movs	r3, #64	; 0x40
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	e305      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f002 fa63 	bl	8005918 <USB_ReadChInterrupts>
 8003452:	4603      	mov	r3, r0
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d11a      	bne.n	8003492 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	2308      	movs	r3, #8
 800346c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	334d      	adds	r3, #77	; 0x4d
 800347e:	2206      	movs	r2, #6
 8003480:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f002 ffe7 	bl	800645e <USB_HC_Halt>
 8003490:	e2de      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f002 fa3c 	bl	8005918 <USB_ReadChInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d144      	bne.n	8003534 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3344      	adds	r3, #68	; 0x44
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334d      	adds	r3, #77	; 0x4d
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3319      	adds	r3, #25
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d114      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3318      	adds	r3, #24
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3319      	adds	r3, #25
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f002 ff9f 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	461a      	mov	r2, r3
 800352e:	2310      	movs	r3, #16
 8003530:	6093      	str	r3, [r2, #8]
 8003532:	e28d      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f002 f9eb 	bl	8005918 <USB_ReadChInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d169      	bne.n	8003620 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	799b      	ldrb	r3, [r3, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	334d      	adds	r3, #77	; 0x4d
 8003564:	2207      	movs	r2, #7
 8003566:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f002 ff74 	bl	800645e <USB_HC_Halt>
 8003576:	e049      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3344      	adds	r3, #68	; 0x44
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4403      	add	r3, r0
 8003598:	3344      	adds	r3, #68	; 0x44
 800359a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3344      	adds	r3, #68	; 0x44
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d922      	bls.n	80035f8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3344      	adds	r3, #68	; 0x44
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334c      	adds	r3, #76	; 0x4c
 80035d6:	2204      	movs	r2, #4
 80035d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334c      	adds	r3, #76	; 0x4c
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f008 fc03 	bl	800bdfc <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f6:	e009      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	334c      	adds	r3, #76	; 0x4c
 8003608:	2202      	movs	r2, #2
 800360a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	6093      	str	r3, [r2, #8]
 800361e:	e217      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f002 f975 	bl	8005918 <USB_ReadChInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003638:	d11b      	bne.n	8003672 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334d      	adds	r3, #77	; 0x4d
 800364a:	2209      	movs	r2, #9
 800364c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f002 ff01 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366e:	6093      	str	r3, [r2, #8]
 8003670:	e1ee      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f002 f94c 	bl	8005918 <USB_ReadChInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	f040 81df 	bne.w	8003a4a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	461a      	mov	r2, r3
 800369a:	2302      	movs	r3, #2
 800369c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	334d      	adds	r3, #77	; 0x4d
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 8093 	bne.w	80037dc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	; 0x4d
 80036c6:	2202      	movs	r2, #2
 80036c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334c      	adds	r3, #76	; 0x4c
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3326      	adds	r3, #38	; 0x26
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d00b      	beq.n	800370c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3326      	adds	r3, #38	; 0x26
 8003704:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003706:	2b03      	cmp	r3, #3
 8003708:	f040 8190 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	799b      	ldrb	r3, [r3, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d115      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	333d      	adds	r3, #61	; 0x3d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2d8      	uxtb	r0, r3
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	333d      	adds	r3, #61	; 0x3d
 800373c:	4602      	mov	r2, r0
 800373e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	799b      	ldrb	r3, [r3, #6]
 8003744:	2b01      	cmp	r3, #1
 8003746:	f040 8171 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3334      	adds	r3, #52	; 0x34
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8165 	beq.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3334      	adds	r3, #52	; 0x34
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4403      	add	r3, r0
 8003782:	3328      	adds	r3, #40	; 0x28
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	440b      	add	r3, r1
 8003788:	1e59      	subs	r1, r3, #1
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4403      	add	r3, r0
 8003798:	3328      	adds	r3, #40	; 0x28
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 813f 	beq.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	333d      	adds	r3, #61	; 0x3d
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	f083 0301 	eor.w	r3, r3, #1
 80037c6:	b2d8      	uxtb	r0, r3
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	333d      	adds	r3, #61	; 0x3d
 80037d6:	4602      	mov	r2, r0
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e127      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334d      	adds	r3, #77	; 0x4d
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d120      	bne.n	8003834 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334d      	adds	r3, #77	; 0x4d
 8003802:	2202      	movs	r2, #2
 8003804:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	331b      	adds	r3, #27
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 8107 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	334c      	adds	r3, #76	; 0x4c
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e0fb      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	334d      	adds	r3, #77	; 0x4d
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d13a      	bne.n	80038c0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	334d      	adds	r3, #77	; 0x4d
 800385a:	2202      	movs	r2, #2
 800385c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	334c      	adds	r3, #76	; 0x4c
 800386e:	2202      	movs	r2, #2
 8003870:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	331b      	adds	r3, #27
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 80d1 	bne.w	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	331b      	adds	r3, #27
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038bc:	6053      	str	r3, [r2, #4]
 80038be:	e0b5      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334d      	adds	r3, #77	; 0x4d
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d114      	bne.n	8003900 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334d      	adds	r3, #77	; 0x4d
 80038e6:	2202      	movs	r2, #2
 80038e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	334c      	adds	r3, #76	; 0x4c
 80038fa:	2202      	movs	r2, #2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	e095      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	334d      	adds	r3, #77	; 0x4d
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d114      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	334d      	adds	r3, #77	; 0x4d
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	334c      	adds	r3, #76	; 0x4c
 800393a:	2205      	movs	r2, #5
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e075      	b.n	8003a2c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	334d      	adds	r3, #77	; 0x4d
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b07      	cmp	r3, #7
 8003954:	d00a      	beq.n	800396c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	334d      	adds	r3, #77	; 0x4d
 8003966:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003968:	2b09      	cmp	r3, #9
 800396a:	d170      	bne.n	8003a4e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	334d      	adds	r3, #77	; 0x4d
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3344      	adds	r3, #68	; 0x44
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4403      	add	r3, r0
 80039a0:	3344      	adds	r3, #68	; 0x44
 80039a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3344      	adds	r3, #68	; 0x44
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d914      	bls.n	80039e4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3344      	adds	r3, #68	; 0x44
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	334c      	adds	r3, #76	; 0x4c
 80039de:	2204      	movs	r2, #4
 80039e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039e2:	e022      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	334c      	adds	r3, #76	; 0x4c
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a0e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a16:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a2a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	334c      	adds	r3, #76	; 0x4c
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f008 f9da 	bl	800bdfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a48:	e002      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08a      	sub	sp, #40	; 0x28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	0c5b      	lsrs	r3, r3, #17
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a8a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d004      	beq.n	8003a9c <HCD_RXQLVL_IRQHandler+0x46>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	f000 80b6 	beq.w	8003c06 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a9a:	e0b7      	b.n	8003c0c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80b3 	beq.w	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	332c      	adds	r3, #44	; 0x2c
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a7 	beq.w	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3338      	adds	r3, #56	; 0x38
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	18d1      	adds	r1, r2, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	3334      	adds	r3, #52	; 0x34
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	f200 8083 	bhi.w	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	332c      	adds	r3, #44	; 0x2c
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	b292      	uxth	r2, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	f001 fe9c 	bl	8005842 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	332c      	adds	r3, #44	; 0x2c
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	18d1      	adds	r1, r2, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4403      	add	r3, r0
 8003b2e:	332c      	adds	r3, #44	; 0x2c
 8003b30:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3338      	adds	r3, #56	; 0x38
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	18d1      	adds	r1, r2, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4403      	add	r3, r0
 8003b56:	3338      	adds	r3, #56	; 0x38
 8003b58:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	0cdb      	lsrs	r3, r3, #19
 8003b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3328      	adds	r3, #40	; 0x28
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d13f      	bne.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03c      	beq.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ba6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	333c      	adds	r3, #60	; 0x3c
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	f083 0301 	eor.w	r3, r3, #1
 8003bd8:	b2d8      	uxtb	r0, r3
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	333c      	adds	r3, #60	; 0x3c
 8003bea:	4602      	mov	r2, r0
 8003bec:	701a      	strb	r2, [r3, #0]
      break;
 8003bee:	e00c      	b.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334c      	adds	r3, #76	; 0x4c
 8003c00:	2204      	movs	r2, #4
 8003c02:	701a      	strb	r2, [r3, #0]
      break;
 8003c04:	e001      	b.n	8003c0a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003c0a:	bf00      	nop
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3728      	adds	r7, #40	; 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d10b      	bne.n	8003c64 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f008 f8b4 	bl	800bdc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f043 0302 	orr.w	r3, r3, #2
 8003c62:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d132      	bne.n	8003cd4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d126      	bne.n	8003cce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7a5b      	ldrb	r3, [r3, #9]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d113      	bne.n	8003cb0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c92:	d106      	bne.n	8003ca2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 ff60 	bl	8005b60 <USB_InitFSLSPClkSel>
 8003ca0:	e011      	b.n	8003cc6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 ff59 	bl	8005b60 <USB_InitFSLSPClkSel>
 8003cae:	e00a      	b.n	8003cc6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	79db      	ldrb	r3, [r3, #7]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cc4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f008 f8aa 	bl	800be20 <HAL_HCD_PortEnabled_Callback>
 8003ccc:	e002      	b.n	8003cd4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f008 f8b4 	bl	800be3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d103      	bne.n	8003ce6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f043 0320 	orr.w	r3, r3, #32
 8003ce4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6013      	str	r3, [r2, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e12b      	b.n	8003f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd f932 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d60:	f001 fa20 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8003d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a81      	ldr	r2, [pc, #516]	; (8003f70 <HAL_I2C_Init+0x274>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d807      	bhi.n	8003d80 <HAL_I2C_Init+0x84>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a80      	ldr	r2, [pc, #512]	; (8003f74 <HAL_I2C_Init+0x278>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bf94      	ite	ls
 8003d78:	2301      	movls	r3, #1
 8003d7a:	2300      	movhi	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e006      	b.n	8003d8e <HAL_I2C_Init+0x92>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a7d      	ldr	r2, [pc, #500]	; (8003f78 <HAL_I2C_Init+0x27c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	bf94      	ite	ls
 8003d88:	2301      	movls	r3, #1
 8003d8a:	2300      	movhi	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0e7      	b.n	8003f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a78      	ldr	r2, [pc, #480]	; (8003f7c <HAL_I2C_Init+0x280>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0c9b      	lsrs	r3, r3, #18
 8003da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a6a      	ldr	r2, [pc, #424]	; (8003f70 <HAL_I2C_Init+0x274>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d802      	bhi.n	8003dd0 <HAL_I2C_Init+0xd4>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	e009      	b.n	8003de4 <HAL_I2C_Init+0xe8>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	4a69      	ldr	r2, [pc, #420]	; (8003f80 <HAL_I2C_Init+0x284>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	3301      	adds	r3, #1
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	495c      	ldr	r1, [pc, #368]	; (8003f70 <HAL_I2C_Init+0x274>)
 8003e00:	428b      	cmp	r3, r1
 8003e02:	d819      	bhi.n	8003e38 <HAL_I2C_Init+0x13c>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e59      	subs	r1, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e12:	1c59      	adds	r1, r3, #1
 8003e14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e18:	400b      	ands	r3, r1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_I2C_Init+0x138>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1e59      	subs	r1, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e32:	e051      	b.n	8003ed8 <HAL_I2C_Init+0x1dc>
 8003e34:	2304      	movs	r3, #4
 8003e36:	e04f      	b.n	8003ed8 <HAL_I2C_Init+0x1dc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d111      	bne.n	8003e64 <HAL_I2C_Init+0x168>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1e58      	subs	r0, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	440b      	add	r3, r1
 8003e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e012      	b.n	8003e8a <HAL_I2C_Init+0x18e>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1e58      	subs	r0, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	0099      	lsls	r1, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Init+0x196>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e022      	b.n	8003ed8 <HAL_I2C_Init+0x1dc>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10e      	bne.n	8003eb8 <HAL_I2C_Init+0x1bc>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1e58      	subs	r0, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6859      	ldr	r1, [r3, #4]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	440b      	add	r3, r1
 8003ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb6:	e00f      	b.n	8003ed8 <HAL_I2C_Init+0x1dc>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1e58      	subs	r0, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	0099      	lsls	r1, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	6809      	ldr	r1, [r1, #0]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6911      	ldr	r1, [r2, #16]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68d2      	ldr	r2, [r2, #12]
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	000186a0 	.word	0x000186a0
 8003f74:	001e847f 	.word	0x001e847f
 8003f78:	003d08ff 	.word	0x003d08ff
 8003f7c:	431bde83 	.word	0x431bde83
 8003f80:	10624dd3 	.word	0x10624dd3

08003f84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e128      	b.n	80041e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a90      	ldr	r2, [pc, #576]	; (80041f0 <HAL_I2S_Init+0x26c>)
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd f833 	bl	800101c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fcc:	f023 030f 	bic.w	r3, r3, #15
 8003fd0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d060      	beq.n	80040a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003fea:	2310      	movs	r3, #16
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e001      	b.n	8003ff4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d802      	bhi.n	8004002 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004002:	2001      	movs	r0, #1
 8004004:	f001 f9c4 	bl	8005390 <HAL_RCCEx_GetPeriphCLKFreq>
 8004008:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004012:	d125      	bne.n	8004060 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	fbb2 f2f3 	udiv	r2, r2, r3
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	3305      	adds	r3, #5
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e01f      	b.n	800407e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	fbb2 f2f3 	udiv	r2, r2, r3
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	3305      	adds	r3, #5
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e00e      	b.n	800407e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	fbb2 f2f3 	udiv	r2, r2, r3
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	461a      	mov	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	3305      	adds	r3, #5
 800407c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4a5c      	ldr	r2, [pc, #368]	; (80041f4 <HAL_I2S_Init+0x270>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	08db      	lsrs	r3, r3, #3
 8004088:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e003      	b.n	80040ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80040a4:	2302      	movs	r3, #2
 80040a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d902      	bls.n	80040b8 <HAL_I2S_Init+0x134>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2bff      	cmp	r3, #255	; 0xff
 80040b6:	d907      	bls.n	80040c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	f043 0210 	orr.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e08f      	b.n	80041e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	ea42 0103 	orr.w	r1, r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	430a      	orrs	r2, r1
 80040da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040e6:	f023 030f 	bic.w	r3, r3, #15
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6851      	ldr	r1, [r2, #4]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6892      	ldr	r2, [r2, #8]
 80040f2:	4311      	orrs	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68d2      	ldr	r2, [r2, #12]
 80040f8:	4311      	orrs	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6992      	ldr	r2, [r2, #24]
 80040fe:	430a      	orrs	r2, r1
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d161      	bne.n	80041d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <HAL_I2S_Init+0x274>)
 8004118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a37      	ldr	r2, [pc, #220]	; (80041fc <HAL_I2S_Init+0x278>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_I2S_Init+0x1a4>
 8004124:	4b36      	ldr	r3, [pc, #216]	; (8004200 <HAL_I2S_Init+0x27c>)
 8004126:	e001      	b.n	800412c <HAL_I2S_Init+0x1a8>
 8004128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	4932      	ldr	r1, [pc, #200]	; (80041fc <HAL_I2S_Init+0x278>)
 8004134:	428a      	cmp	r2, r1
 8004136:	d101      	bne.n	800413c <HAL_I2S_Init+0x1b8>
 8004138:	4a31      	ldr	r2, [pc, #196]	; (8004200 <HAL_I2S_Init+0x27c>)
 800413a:	e001      	b.n	8004140 <HAL_I2S_Init+0x1bc>
 800413c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004140:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004144:	f023 030f 	bic.w	r3, r3, #15
 8004148:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <HAL_I2S_Init+0x278>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <HAL_I2S_Init+0x1d4>
 8004154:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <HAL_I2S_Init+0x27c>)
 8004156:	e001      	b.n	800415c <HAL_I2S_Init+0x1d8>
 8004158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415c:	2202      	movs	r2, #2
 800415e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <HAL_I2S_Init+0x278>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_I2S_Init+0x1ea>
 800416a:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_I2S_Init+0x27c>)
 800416c:	e001      	b.n	8004172 <HAL_I2S_Init+0x1ee>
 800416e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417e:	d003      	beq.n	8004188 <HAL_I2S_Init+0x204>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	e001      	b.n	8004194 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800419e:	4313      	orrs	r3, r2
 80041a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041b2:	4313      	orrs	r3, r2
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <HAL_I2S_Init+0x278>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_I2S_Init+0x24c>
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <HAL_I2S_Init+0x27c>)
 80041ce:	e001      	b.n	80041d4 <HAL_I2S_Init+0x250>
 80041d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d4:	897a      	ldrh	r2, [r7, #10]
 80041d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	080042fb 	.word	0x080042fb
 80041f4:	cccccccd 	.word	0xcccccccd
 80041f8:	08004411 	.word	0x08004411
 80041fc:	40003800 	.word	0x40003800
 8004200:	40003400 	.word	0x40003400

08004204 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	881a      	ldrh	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	1c9a      	adds	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10e      	bne.n	8004294 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004284:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ffb8 	bl	8004204 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	b292      	uxth	r2, r2
 80042b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	1c9a      	adds	r2, r3, #2
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10e      	bne.n	80042f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff93 	bl	8004218 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b04      	cmp	r3, #4
 8004314:	d13a      	bne.n	800438c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d109      	bne.n	8004334 <I2S_IRQHandler+0x3a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d102      	bne.n	8004334 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ffb4 	bl	800429c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d126      	bne.n	800438c <I2S_IRQHandler+0x92>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b20      	cmp	r3, #32
 800434a:	d11f      	bne.n	800438c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800435a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff ff50 	bl	800422c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b03      	cmp	r3, #3
 8004396:	d136      	bne.n	8004406 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d109      	bne.n	80043b6 <I2S_IRQHandler+0xbc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b80      	cmp	r3, #128	; 0x80
 80043ae:	d102      	bne.n	80043b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff45 	bl	8004240 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d122      	bne.n	8004406 <I2S_IRQHandler+0x10c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d11b      	bne.n	8004406 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f8:	f043 0204 	orr.w	r2, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff13 	bl	800422c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a92      	ldr	r2, [pc, #584]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800442a:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800442c:	e001      	b.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800442e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a8b      	ldr	r2, [pc, #556]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004448:	4b8a      	ldr	r3, [pc, #552]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800444a:	e001      	b.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800444c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445c:	d004      	beq.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 8099 	bne.w	800459a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d107      	bne.n	8004482 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f925 	bl	80046cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9c8 	bl	800482c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d13a      	bne.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d035      	beq.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6e      	ldr	r2, [pc, #440]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80044ba:	4b6e      	ldr	r3, [pc, #440]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044bc:	e001      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80044be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4969      	ldr	r1, [pc, #420]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044ca:	428b      	cmp	r3, r1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80044ce:	4b69      	ldr	r3, [pc, #420]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044d0:	e001      	b.n	80044d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80044d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	f043 0202 	orr.w	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fe88 	bl	800422c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b08      	cmp	r3, #8
 8004524:	f040 80c3 	bne.w	80046ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80bd 	beq.w	80046ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004542:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a49      	ldr	r2, [pc, #292]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800454e:	4b49      	ldr	r3, [pc, #292]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004550:	e001      	b.n	8004556 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4944      	ldr	r1, [pc, #272]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800455e:	428b      	cmp	r3, r1
 8004560:	d101      	bne.n	8004566 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004562:	4b44      	ldr	r3, [pc, #272]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004564:	e001      	b.n	800456a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800456a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800456e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fe4a 	bl	800422c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004598:	e089      	b.n	80046ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d107      	bne.n	80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8be 	bl	8004730 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d107      	bne.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8fd 	bl	80047c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d12f      	bne.n	8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02a      	beq.n	8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045fe:	e001      	b.n	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4919      	ldr	r1, [pc, #100]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800460c:	428b      	cmp	r3, r1
 800460e:	d101      	bne.n	8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004612:	e001      	b.n	8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004618:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800461c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	f043 0202 	orr.w	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fdfa 	bl	800422c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b08      	cmp	r3, #8
 8004640:	d136      	bne.n	80046b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d031      	beq.n	80046b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a07      	ldr	r2, [pc, #28]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004658:	e001      	b.n	800465e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800465a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4902      	ldr	r1, [pc, #8]	; (8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004666:	428b      	cmp	r3, r1
 8004668:	d106      	bne.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800466a:	4b02      	ldr	r3, [pc, #8]	; (8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800466c:	e006      	b.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800466e:	bf00      	nop
 8004670:	40003800 	.word	0x40003800
 8004674:	40003400 	.word	0x40003400
 8004678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004680:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004690:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fdc0 	bl	800422c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ac:	e000      	b.n	80046b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046ae:	bf00      	nop
}
 80046b0:	bf00      	nop
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	1c99      	adds	r1, r3, #2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6251      	str	r1, [r2, #36]	; 0x24
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d113      	bne.n	8004726 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800470c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d106      	bne.n	8004726 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ffc9 	bl	80046b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c99      	adds	r1, r3, #2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6251      	str	r1, [r2, #36]	; 0x24
 8004742:	8819      	ldrh	r1, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <I2SEx_TxISR_I2SExt+0x90>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d101      	bne.n	8004752 <I2SEx_TxISR_I2SExt+0x22>
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004750:	e001      	b.n	8004756 <I2SEx_TxISR_I2SExt+0x26>
 8004752:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004756:	460a      	mov	r2, r1
 8004758:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d121      	bne.n	80047b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <I2SEx_TxISR_I2SExt+0x90>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <I2SEx_TxISR_I2SExt+0x50>
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <I2SEx_TxISR_I2SExt+0x94>)
 800477e:	e001      	b.n	8004784 <I2SEx_TxISR_I2SExt+0x54>
 8004780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	490d      	ldr	r1, [pc, #52]	; (80047c0 <I2SEx_TxISR_I2SExt+0x90>)
 800478c:	428b      	cmp	r3, r1
 800478e:	d101      	bne.n	8004794 <I2SEx_TxISR_I2SExt+0x64>
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004792:	e001      	b.n	8004798 <I2SEx_TxISR_I2SExt+0x68>
 8004794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800479c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff81 	bl	80046b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40003800 	.word	0x40003800
 80047c4:	40003400 	.word	0x40003400

080047c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68d8      	ldr	r0, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	1c99      	adds	r1, r3, #2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047e0:	b282      	uxth	r2, r0
 80047e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d113      	bne.n	8004824 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800480a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff4a 	bl	80046b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <I2SEx_RxISR_I2SExt+0x90>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <I2SEx_RxISR_I2SExt+0x16>
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <I2SEx_RxISR_I2SExt+0x94>)
 8004840:	e001      	b.n	8004846 <I2SEx_RxISR_I2SExt+0x1a>
 8004842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004846:	68d8      	ldr	r0, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	1c99      	adds	r1, r3, #2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004852:	b282      	uxth	r2, r0
 8004854:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d121      	bne.n	80048b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <I2SEx_RxISR_I2SExt+0x90>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d101      	bne.n	800487c <I2SEx_RxISR_I2SExt+0x50>
 8004878:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <I2SEx_RxISR_I2SExt+0x94>)
 800487a:	e001      	b.n	8004880 <I2SEx_RxISR_I2SExt+0x54>
 800487c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	490d      	ldr	r1, [pc, #52]	; (80048bc <I2SEx_RxISR_I2SExt+0x90>)
 8004888:	428b      	cmp	r3, r1
 800488a:	d101      	bne.n	8004890 <I2SEx_RxISR_I2SExt+0x64>
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <I2SEx_RxISR_I2SExt+0x94>)
 800488e:	e001      	b.n	8004894 <I2SEx_RxISR_I2SExt+0x68>
 8004890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004894:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004898:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff03 	bl	80046b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40003800 	.word	0x40003800
 80048c0:	40003400 	.word	0x40003400

080048c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e267      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d075      	beq.n	80049ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e2:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d00c      	beq.n	8004908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ee:	4b85      	ldr	r3, [pc, #532]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d112      	bne.n	8004920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fa:	4b82      	ldr	r3, [pc, #520]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004906:	d10b      	bne.n	8004920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004908:	4b7e      	ldr	r3, [pc, #504]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d05b      	beq.n	80049cc <HAL_RCC_OscConfig+0x108>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d157      	bne.n	80049cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e242      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d106      	bne.n	8004938 <HAL_RCC_OscConfig+0x74>
 800492a:	4b76      	ldr	r3, [pc, #472]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a75      	ldr	r2, [pc, #468]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e01d      	b.n	8004974 <HAL_RCC_OscConfig+0xb0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004940:	d10c      	bne.n	800495c <HAL_RCC_OscConfig+0x98>
 8004942:	4b70      	ldr	r3, [pc, #448]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6f      	ldr	r2, [pc, #444]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4b6d      	ldr	r3, [pc, #436]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6c      	ldr	r2, [pc, #432]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e00b      	b.n	8004974 <HAL_RCC_OscConfig+0xb0>
 800495c:	4b69      	ldr	r3, [pc, #420]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a68      	ldr	r2, [pc, #416]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	4b66      	ldr	r3, [pc, #408]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a65      	ldr	r2, [pc, #404]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 800496e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d013      	beq.n	80049a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fc fdac 	bl	80014d8 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fc fda8 	bl	80014d8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e207      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0xc0>
 80049a2:	e014      	b.n	80049ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fc fd98 	bl	80014d8 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fc fd94 	bl	80014d8 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	; 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e1f3      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049be:	4b51      	ldr	r3, [pc, #324]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0xe8>
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d063      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d11c      	bne.n	8004a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f2:	4b44      	ldr	r3, [pc, #272]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d116      	bne.n	8004a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	4b41      	ldr	r3, [pc, #260]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_RCC_OscConfig+0x152>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d001      	beq.n	8004a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e1c7      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a16:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4937      	ldr	r1, [pc, #220]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2a:	e03a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d020      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a34:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <HAL_RCC_OscConfig+0x244>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3a:	f7fc fd4d 	bl	80014d8 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a42:	f7fc fd49 	bl	80014d8 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e1a8      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4925      	ldr	r1, [pc, #148]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	600b      	str	r3, [r1, #0]
 8004a74:	e015      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a76:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_RCC_OscConfig+0x244>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fc fd2c 	bl	80014d8 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fc fd28 	bl	80014d8 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e187      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d036      	beq.n	8004b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d016      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCC_OscConfig+0x248>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fc fd0c 	bl	80014d8 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7fc fd08 	bl	80014d8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e167      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x200>
 8004ae2:	e01b      	b.n	8004b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCC_OscConfig+0x248>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aea:	f7fc fcf5 	bl	80014d8 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af0:	e00e      	b.n	8004b10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af2:	f7fc fcf1 	bl	80014d8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d907      	bls.n	8004b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e150      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
 8004b04:	40023800 	.word	0x40023800
 8004b08:	42470000 	.word	0x42470000
 8004b0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b10:	4b88      	ldr	r3, [pc, #544]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ea      	bne.n	8004af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8097 	beq.w	8004c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2e:	4b81      	ldr	r3, [pc, #516]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	4b7d      	ldr	r3, [pc, #500]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	4a7c      	ldr	r2, [pc, #496]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4a:	4b7a      	ldr	r3, [pc, #488]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5a:	4b77      	ldr	r3, [pc, #476]	; (8004d38 <HAL_RCC_OscConfig+0x474>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d118      	bne.n	8004b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b66:	4b74      	ldr	r3, [pc, #464]	; (8004d38 <HAL_RCC_OscConfig+0x474>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a73      	ldr	r2, [pc, #460]	; (8004d38 <HAL_RCC_OscConfig+0x474>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b72:	f7fc fcb1 	bl	80014d8 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7a:	f7fc fcad 	bl	80014d8 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e10c      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <HAL_RCC_OscConfig+0x474>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d106      	bne.n	8004bae <HAL_RCC_OscConfig+0x2ea>
 8004ba0:	4b64      	ldr	r3, [pc, #400]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	4a63      	ldr	r2, [pc, #396]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bac:	e01c      	b.n	8004be8 <HAL_RCC_OscConfig+0x324>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b05      	cmp	r3, #5
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x30c>
 8004bb6:	4b5f      	ldr	r3, [pc, #380]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a5e      	ldr	r2, [pc, #376]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	f043 0304 	orr.w	r3, r3, #4
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc2:	4b5c      	ldr	r3, [pc, #368]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a5b      	ldr	r2, [pc, #364]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	e00b      	b.n	8004be8 <HAL_RCC_OscConfig+0x324>
 8004bd0:	4b58      	ldr	r3, [pc, #352]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	4a57      	ldr	r2, [pc, #348]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	6713      	str	r3, [r2, #112]	; 0x70
 8004bdc:	4b55      	ldr	r3, [pc, #340]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a54      	ldr	r2, [pc, #336]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004be2:	f023 0304 	bic.w	r3, r3, #4
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fc fc72 	bl	80014d8 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fc fc6e 	bl	80014d8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e0cb      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0e:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ee      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x334>
 8004c1a:	e014      	b.n	8004c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1c:	f7fc fc5c 	bl	80014d8 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c24:	f7fc fc58 	bl	80014d8 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e0b5      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3a:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ee      	bne.n	8004c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4c:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	4a38      	ldr	r2, [pc, #224]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a1 	beq.w	8004da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c62:	4b34      	ldr	r3, [pc, #208]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d05c      	beq.n	8004d28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d141      	bne.n	8004cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <HAL_RCC_OscConfig+0x478>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fc2c 	bl	80014d8 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fc fc28 	bl	80014d8 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e087      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	491b      	ldr	r1, [pc, #108]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_RCC_OscConfig+0x478>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd2:	f7fc fc01 	bl	80014d8 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fc fbfd 	bl	80014d8 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e05c      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x416>
 8004cf8:	e054      	b.n	8004da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <HAL_RCC_OscConfig+0x478>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d00:	f7fc fbea 	bl	80014d8 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fc fbe6 	bl	80014d8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e045      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x444>
 8004d26:	e03d      	b.n	8004da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e038      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_RCC_OscConfig+0x4ec>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d028      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d121      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d11a      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d111      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800

08004db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0cc      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b68      	ldr	r3, [pc, #416]	; (8004f6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d90c      	bls.n	8004df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b65      	ldr	r3, [pc, #404]	; (8004f6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b63      	ldr	r3, [pc, #396]	; (8004f6c <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0b8      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a58      	ldr	r2, [pc, #352]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e20:	4b53      	ldr	r3, [pc, #332]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4a52      	ldr	r2, [pc, #328]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e2c:	4b50      	ldr	r3, [pc, #320]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	494d      	ldr	r1, [pc, #308]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d044      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d107      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e52:	4b47      	ldr	r3, [pc, #284]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d119      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e07f      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d003      	beq.n	8004e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d107      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e72:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e06f      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e82:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e067      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e92:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 0203 	bic.w	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4934      	ldr	r1, [pc, #208]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea4:	f7fc fb18 	bl	80014d8 <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eac:	f7fc fb14 	bl	80014d8 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e04f      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 020c 	and.w	r2, r3, #12
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d1eb      	bne.n	8004eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d20c      	bcs.n	8004efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e032      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f08:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4916      	ldr	r1, [pc, #88]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f26:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	490e      	ldr	r1, [pc, #56]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f3a:	f000 f821 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	490a      	ldr	r1, [pc, #40]	; (8004f74 <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	5ccb      	ldrb	r3, [r1, r3]
 8004f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f52:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <HAL_RCC_ClockConfig+0x1c8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fc fa78 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40023c00 	.word	0x40023c00
 8004f70:	40023800 	.word	0x40023800
 8004f74:	0800d438 	.word	0x0800d438
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	20000004 	.word	0x20000004

08004f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f84:	b094      	sub	sp, #80	; 0x50
 8004f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	2300      	movs	r3, #0
 8004f92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f98:	4b79      	ldr	r3, [pc, #484]	; (8005180 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	f200 80e1 	bhi.w	800516c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d003      	beq.n	8004fba <HAL_RCC_GetSysClockFreq+0x3a>
 8004fb2:	e0db      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fb4:	4b73      	ldr	r3, [pc, #460]	; (8005184 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fb8:	e0db      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fba:	4b73      	ldr	r3, [pc, #460]	; (8005188 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fbe:	e0d8      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc0:	4b6f      	ldr	r3, [pc, #444]	; (8005180 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fca:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d063      	beq.n	800509e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fd6:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	099b      	lsrs	r3, r3, #6
 8004fdc:	2200      	movs	r2, #0
 8004fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fea:	2300      	movs	r3, #0
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
 8004fee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f04f 0000 	mov.w	r0, #0
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	0159      	lsls	r1, r3, #5
 8005000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005004:	0150      	lsls	r0, r2, #5
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4621      	mov	r1, r4
 800500c:	1a51      	subs	r1, r2, r1
 800500e:	6139      	str	r1, [r7, #16]
 8005010:	4629      	mov	r1, r5
 8005012:	eb63 0301 	sbc.w	r3, r3, r1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005024:	4659      	mov	r1, fp
 8005026:	018b      	lsls	r3, r1, #6
 8005028:	4651      	mov	r1, sl
 800502a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800502e:	4651      	mov	r1, sl
 8005030:	018a      	lsls	r2, r1, #6
 8005032:	4651      	mov	r1, sl
 8005034:	ebb2 0801 	subs.w	r8, r2, r1
 8005038:	4659      	mov	r1, fp
 800503a:	eb63 0901 	sbc.w	r9, r3, r1
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800504a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800504e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005052:	4690      	mov	r8, r2
 8005054:	4699      	mov	r9, r3
 8005056:	4623      	mov	r3, r4
 8005058:	eb18 0303 	adds.w	r3, r8, r3
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	462b      	mov	r3, r5
 8005060:	eb49 0303 	adc.w	r3, r9, r3
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005072:	4629      	mov	r1, r5
 8005074:	024b      	lsls	r3, r1, #9
 8005076:	4621      	mov	r1, r4
 8005078:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800507c:	4621      	mov	r1, r4
 800507e:	024a      	lsls	r2, r1, #9
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005086:	2200      	movs	r2, #0
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
 800508a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800508c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005090:	f7fb f8ee 	bl	8000270 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4613      	mov	r3, r2
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	e058      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509e:	4b38      	ldr	r3, [pc, #224]	; (8005180 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	099b      	lsrs	r3, r3, #6
 80050a4:	2200      	movs	r2, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	4611      	mov	r1, r2
 80050aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050b8:	4642      	mov	r2, r8
 80050ba:	464b      	mov	r3, r9
 80050bc:	f04f 0000 	mov.w	r0, #0
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	0159      	lsls	r1, r3, #5
 80050c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ca:	0150      	lsls	r0, r2, #5
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4641      	mov	r1, r8
 80050d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80050d6:	4649      	mov	r1, r9
 80050d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050f0:	ebb2 040a 	subs.w	r4, r2, sl
 80050f4:	eb63 050b 	sbc.w	r5, r3, fp
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	00eb      	lsls	r3, r5, #3
 8005102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005106:	00e2      	lsls	r2, r4, #3
 8005108:	4614      	mov	r4, r2
 800510a:	461d      	mov	r5, r3
 800510c:	4643      	mov	r3, r8
 800510e:	18e3      	adds	r3, r4, r3
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	464b      	mov	r3, r9
 8005114:	eb45 0303 	adc.w	r3, r5, r3
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005126:	4629      	mov	r1, r5
 8005128:	028b      	lsls	r3, r1, #10
 800512a:	4621      	mov	r1, r4
 800512c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005130:	4621      	mov	r1, r4
 8005132:	028a      	lsls	r2, r1, #10
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513a:	2200      	movs	r2, #0
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	61fa      	str	r2, [r7, #28]
 8005140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005144:	f7fb f894 	bl	8000270 <__aeabi_uldivmod>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4613      	mov	r3, r2
 800514e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_GetSysClockFreq+0x200>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	0c1b      	lsrs	r3, r3, #16
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	3301      	adds	r3, #1
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800516a:	e002      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetSysClockFreq+0x204>)
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005174:	4618      	mov	r0, r3
 8005176:	3750      	adds	r7, #80	; 0x50
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800
 8005184:	00f42400 	.word	0x00f42400
 8005188:	007a1200 	.word	0x007a1200

0800518c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005192:	681b      	ldr	r3, [r3, #0]
}
 8005194:	4618      	mov	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20000000 	.word	0x20000000

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051a8:	f7ff fff0 	bl	800518c <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0a9b      	lsrs	r3, r3, #10
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4903      	ldr	r1, [pc, #12]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0800d448 	.word	0x0800d448

080051cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d035      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051f4:	4b62      	ldr	r3, [pc, #392]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051fa:	f7fc f96d 	bl	80014d8 <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005202:	f7fc f969 	bl	80014d8 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e0b0      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005214:	4b5b      	ldr	r3, [pc, #364]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f0      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	019a      	lsls	r2, r3, #6
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	071b      	lsls	r3, r3, #28
 800522c:	4955      	ldr	r1, [pc, #340]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005234:	4b52      	ldr	r3, [pc, #328]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800523a:	f7fc f94d 	bl	80014d8 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005242:	f7fc f949 	bl	80014d8 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e090      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005254:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8083 	beq.w	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	4b44      	ldr	r3, [pc, #272]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4a43      	ldr	r2, [pc, #268]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	; 0x40
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800528a:	4b3f      	ldr	r3, [pc, #252]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a3e      	ldr	r2, [pc, #248]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005294:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005296:	f7fc f91f 	bl	80014d8 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800529e:	f7fc f91b 	bl	80014d8 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e062      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052bc:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02f      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d028      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052e4:	4b29      	ldr	r3, [pc, #164]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ea:	4b28      	ldr	r3, [pc, #160]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052f0:	4a24      	ldr	r2, [pc, #144]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052f6:	4b23      	ldr	r3, [pc, #140]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d114      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005302:	f7fc f8e9 	bl	80014d8 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005308:	e00a      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc f8e5 	bl	80014d8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e02a      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005320:	4b18      	ldr	r3, [pc, #96]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ee      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005338:	d10d      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	490d      	ldr	r1, [pc, #52]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	608b      	str	r3, [r1, #8]
 8005354:	e005      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800535c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005360:	6093      	str	r3, [r2, #8]
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005364:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536e:	4905      	ldr	r1, [pc, #20]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	42470068 	.word	0x42470068
 8005384:	40023800 	.word	0x40023800
 8005388:	40007000 	.word	0x40007000
 800538c:	42470e40 	.word	0x42470e40

08005390 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d13f      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d006      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053c4:	d12f      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053c6:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053c8:	617b      	str	r3, [r7, #20]
          break;
 80053ca:	e02f      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d8:	d108      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053da:	4b19      	ldr	r3, [pc, #100]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e2:	4a19      	ldr	r2, [pc, #100]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e007      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053fc:	4b10      	ldr	r3, [pc, #64]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005402:	099b      	lsrs	r3, r3, #6
 8005404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005416:	0f1b      	lsrs	r3, r3, #28
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	617b      	str	r3, [r7, #20]
          break;
 8005424:	e002      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
          break;
 800542a:	bf00      	nop
        }
      }
      break;
 800542c:	e000      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800542e:	bf00      	nop
    }
  }
  return frequency;
 8005430:	697b      	ldr	r3, [r7, #20]
}
 8005432:	4618      	mov	r0, r3
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40023800 	.word	0x40023800
 8005444:	00bb8000 	.word	0x00bb8000
 8005448:	007a1200 	.word	0x007a1200
 800544c:	00f42400 	.word	0x00f42400

08005450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e07b      	b.n	800555a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d108      	bne.n	800547c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005472:	d009      	beq.n	8005488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	61da      	str	r2, [r3, #28]
 800547a:	e005      	b.n	8005488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fe3a 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	ea42 0103 	orr.w	r1, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	f003 0104 	and.w	r1, r3, #4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	f003 0210 	and.w	r2, r3, #16
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005562:	b084      	sub	sp, #16
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	f107 001c 	add.w	r0, r7, #28
 8005570:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005574:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005578:	2b01      	cmp	r3, #1
 800557a:	d123      	bne.n	80055c4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d105      	bne.n	80055b8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9dc 	bl	8005976 <USB_CoreReset>
 80055be:	4603      	mov	r3, r0
 80055c0:	73fb      	strb	r3, [r7, #15]
 80055c2:	e01b      	b.n	80055fc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f9d0 	bl	8005976 <USB_CoreReset>
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38
 80055ee:	e005      	b.n	80055fc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055fc:	7fbb      	ldrb	r3, [r7, #30]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10b      	bne.n	800561a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f043 0206 	orr.w	r2, r3, #6
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005626:	b004      	add	sp, #16
 8005628:	4770      	bx	lr

0800562a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f043 0201 	orr.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f023 0201 	bic.w	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d115      	bne.n	80056bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800569c:	200a      	movs	r0, #10
 800569e:	f7fb ff27 	bl	80014f0 <HAL_Delay>
      ms += 10U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	330a      	adds	r3, #10
 80056a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f956 	bl	800595a <USB_GetMode>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d01e      	beq.n	80056f2 <USB_SetCurrentMode+0x84>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2bc7      	cmp	r3, #199	; 0xc7
 80056b8:	d9f0      	bls.n	800569c <USB_SetCurrentMode+0x2e>
 80056ba:	e01a      	b.n	80056f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d115      	bne.n	80056ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056ce:	200a      	movs	r0, #10
 80056d0:	f7fb ff0e 	bl	80014f0 <HAL_Delay>
      ms += 10U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	330a      	adds	r3, #10
 80056d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f93d 	bl	800595a <USB_GetMode>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <USB_SetCurrentMode+0x84>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2bc7      	cmp	r3, #199	; 0xc7
 80056ea:	d9f0      	bls.n	80056ce <USB_SetCurrentMode+0x60>
 80056ec:	e001      	b.n	80056f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e005      	b.n	80056fe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2bc8      	cmp	r3, #200	; 0xc8
 80056f6:	d101      	bne.n	80056fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005720:	d901      	bls.n	8005726 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e01b      	b.n	800575e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	daf2      	bge.n	8005714 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	019b      	lsls	r3, r3, #6
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800574a:	d901      	bls.n	8005750 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e006      	b.n	800575e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b20      	cmp	r3, #32
 800575a:	d0f0      	beq.n	800573e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005782:	d901      	bls.n	8005788 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e018      	b.n	80057ba <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	daf2      	bge.n	8005776 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2210      	movs	r2, #16
 8005798:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80057a6:	d901      	bls.n	80057ac <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d0f0      	beq.n	800579a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b089      	sub	sp, #36	; 0x24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	4611      	mov	r1, r2
 80057d2:	461a      	mov	r2, r3
 80057d4:	460b      	mov	r3, r1
 80057d6:	71fb      	strb	r3, [r7, #7]
 80057d8:	4613      	mov	r3, r2
 80057da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d123      	bne.n	8005834 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057ec:	88bb      	ldrh	r3, [r7, #4]
 80057ee:	3303      	adds	r3, #3
 80057f0:	089b      	lsrs	r3, r3, #2
 80057f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	e018      	b.n	800582c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	031a      	lsls	r2, r3, #12
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4413      	add	r3, r2
 8005802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005806:	461a      	mov	r2, r3
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3301      	adds	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3301      	adds	r3, #1
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d3e2      	bcc.n	80057fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3724      	adds	r7, #36	; 0x24
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005842:	b480      	push	{r7}
 8005844:	b08b      	sub	sp, #44	; 0x2c
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	b29b      	uxth	r3, r3
 800585e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005868:	2300      	movs	r3, #0
 800586a:	623b      	str	r3, [r7, #32]
 800586c:	e014      	b.n	8005898 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	601a      	str	r2, [r3, #0]
    pDest++;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	3301      	adds	r3, #1
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	3301      	adds	r3, #1
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	3301      	adds	r3, #1
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	3301      	adds	r3, #1
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	3301      	adds	r3, #1
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	429a      	cmp	r2, r3
 800589e:	d3e6      	bcc.n	800586e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058a0:	8bfb      	ldrh	r3, [r7, #30]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01e      	beq.n	80058e4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b0:	461a      	mov	r2, r3
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	fa22 f303 	lsr.w	r3, r2, r3
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	701a      	strb	r2, [r3, #0]
      i++;
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	3301      	adds	r3, #1
 80058d0:	623b      	str	r3, [r7, #32]
      pDest++;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	3301      	adds	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058d8:	8bfb      	ldrh	r3, [r7, #30]
 80058da:	3b01      	subs	r3, #1
 80058dc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058de:	8bfb      	ldrh	r3, [r7, #30]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ea      	bne.n	80058ba <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	372c      	adds	r7, #44	; 0x2c
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800590a:	68fb      	ldr	r3, [r7, #12]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800594c:	68bb      	ldr	r3, [r7, #8]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0301 	and.w	r3, r3, #1
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800598e:	d901      	bls.n	8005994 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e01b      	b.n	80059cc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	daf2      	bge.n	8005982 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f043 0201 	orr.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059b8:	d901      	bls.n	80059be <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e006      	b.n	80059cc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d0f0      	beq.n	80059ac <USB_CoreReset+0x36>

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059d8:	b084      	sub	sp, #16
 80059da:	b580      	push	{r7, lr}
 80059dc:	b086      	sub	sp, #24
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059f8:	461a      	mov	r2, r3
 80059fa:	2300      	movs	r3, #0
 80059fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d119      	bne.n	8005a62 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d10a      	bne.n	8005a4c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a44:	f043 0304 	orr.w	r3, r3, #4
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e014      	b.n	8005a76 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a5a:	f023 0304 	bic.w	r3, r3, #4
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e009      	b.n	8005a76 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a76:	2110      	movs	r1, #16
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff fe44 	bl	8005706 <USB_FlushTxFifo>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fe6e 	bl	800576a <USB_FlushRxFifo>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	e015      	b.n	8005aca <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ab0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005ace:	461a      	mov	r2, r3
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d3e3      	bcc.n	8005a9e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ae2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <USB_HostInit+0x170>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10b      	bne.n	8005b04 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <USB_HostInit+0x174>)
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a14      	ldr	r2, [pc, #80]	; (8005b50 <USB_HostInit+0x178>)
 8005afe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b02:	e009      	b.n	8005b18 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a11      	ldr	r2, [pc, #68]	; (8005b54 <USB_HostInit+0x17c>)
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <USB_HostInit+0x180>)
 8005b14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f043 0210 	orr.w	r2, r3, #16
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <USB_HostInit+0x184>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	40040000 	.word	0x40040000
 8005b4c:	01000200 	.word	0x01000200
 8005b50:	00e00300 	.word	0x00e00300
 8005b54:	00600080 	.word	0x00600080
 8005b58:	004000e0 	.word	0x004000e0
 8005b5c:	a3200008 	.word	0xa3200008

08005b60 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d107      	bne.n	8005bb2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bae:	6053      	str	r3, [r2, #4]
 8005bb0:	e00c      	b.n	8005bcc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d107      	bne.n	8005bc8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005bc4:	6053      	str	r3, [r2, #4]
 8005bc6:	e001      	b.n	8005bcc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bfa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c08:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c0a:	2064      	movs	r0, #100	; 0x64
 8005c0c:	f7fb fc70 	bl	80014f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c1c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c1e:	200a      	movs	r0, #10
 8005c20:	f7fb fc66 	bl	80014f0 <HAL_Delay>

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c52:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <USB_DriveVbus+0x44>
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d106      	bne.n	8005c72 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c70:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7c:	d109      	bne.n	8005c92 <USB_DriveVbus+0x64>
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c90:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	0c5b      	lsrs	r3, r3, #17
 8005cbe:	f003 0303 	and.w	r3, r3, #3
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	b29b      	uxth	r3, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	70fb      	strb	r3, [r7, #3]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70bb      	strb	r3, [r7, #2]
 8005d06:	4613      	mov	r3, r2
 8005d08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d87c      	bhi.n	8005e28 <USB_HC_Init+0x138>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <USB_HC_Init+0x44>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005deb 	.word	0x08005deb
 8005d3c:	08005d45 	.word	0x08005d45
 8005d40:	08005dad 	.word	0x08005dad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	461a      	mov	r2, r3
 8005d52:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	da10      	bge.n	8005d82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005d80:	e055      	b.n	8005e2e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a6f      	ldr	r2, [pc, #444]	; (8005f44 <USB_HC_Init+0x254>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d151      	bne.n	8005e2e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005da8:	60d3      	str	r3, [r2, #12]
      break;
 8005daa:	e040      	b.n	8005e2e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	f240 639d 	movw	r3, #1693	; 0x69d
 8005dbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da34      	bge.n	8005e32 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005de8:	e023      	b.n	8005e32 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	461a      	mov	r2, r3
 8005df8:	f240 2325 	movw	r3, #549	; 0x225
 8005dfc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da17      	bge.n	8005e36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e20:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e24:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e26:	e006      	b.n	8005e36 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e2c:	e004      	b.n	8005e38 <USB_HC_Init+0x148>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <USB_HC_Init+0x148>
      break;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <USB_HC_Init+0x148>
      break;
 8005e36:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e44:	461a      	mov	r2, r3
 8005e46:	2300      	movs	r3, #0
 8005e48:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	2101      	movs	r1, #1
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	6939      	ldr	r1, [r7, #16]
 8005e80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e84:	4313      	orrs	r3, r2
 8005e86:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da03      	bge.n	8005ea4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	e001      	b.n	8005ea8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fef9 	bl	8005ca0 <USB_GetHostSpeed>
 8005eae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005eb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d106      	bne.n	8005ec6 <USB_HC_Init+0x1d6>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d003      	beq.n	8005ec6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e001      	b.n	8005eca <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eca:	787b      	ldrb	r3, [r7, #1]
 8005ecc:	059b      	lsls	r3, r3, #22
 8005ece:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ed2:	78bb      	ldrb	r3, [r7, #2]
 8005ed4:	02db      	lsls	r3, r3, #11
 8005ed6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005edc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ee0:	049b      	lsls	r3, r3, #18
 8005ee2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ee6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005ee8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005eee:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f08:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d003      	beq.n	8005f1a <USB_HC_Init+0x22a>
 8005f12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10f      	bne.n	8005f3a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f38:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40040000 	.word	0x40040000

08005f48 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f64:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a5d      	ldr	r2, [pc, #372]	; (80060e0 <USB_HC_StartXfer+0x198>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d12f      	bne.n	8005fce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d11c      	bne.n	8005fae <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	7c9b      	ldrb	r3, [r3, #18]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <USB_HC_StartXfer+0x3c>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	7c9b      	ldrb	r3, [r3, #18]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d124      	bne.n	8005fce <USB_HC_StartXfer+0x86>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	799b      	ldrb	r3, [r3, #6]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d120      	bne.n	8005fce <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	6a3a      	ldr	r2, [r7, #32]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005faa:	60d3      	str	r3, [r2, #12]
 8005fac:	e00f      	b.n	8005fce <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <USB_HC_StartXfer+0x86>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	795b      	ldrb	r3, [r3, #5]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d107      	bne.n	8005fce <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fb6b 	bl	80066a0 <USB_DoPing>
        return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e232      	b.n	8006434 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	799b      	ldrb	r3, [r3, #6]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d158      	bne.n	8006088 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	78db      	ldrb	r3, [r3, #3]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	8a92      	ldrh	r2, [r2, #20]
 8005fe8:	fb03 f202 	mul.w	r2, r3, r2
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61da      	str	r2, [r3, #28]
 8005ff0:	e07c      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	7c9b      	ldrb	r3, [r3, #18]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d130      	bne.n	800605c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	2bbc      	cmp	r3, #188	; 0xbc
 8006000:	d918      	bls.n	8006034 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	8a9b      	ldrh	r3, [r3, #20]
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d003      	beq.n	8006024 <USB_HC_StartXfer+0xdc>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d103      	bne.n	800602c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2202      	movs	r2, #2
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	e05f      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2201      	movs	r2, #1
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	e05b      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d007      	beq.n	8006054 <USB_HC_StartXfer+0x10c>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d003      	beq.n	8006054 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2204      	movs	r2, #4
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	e04b      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2203      	movs	r2, #3
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	e047      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10d      	bne.n	800607e <USB_HC_StartXfer+0x136>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	8a92      	ldrh	r2, [r2, #20]
 800606a:	4293      	cmp	r3, r2
 800606c:	d907      	bls.n	800607e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800606e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	8a92      	ldrh	r2, [r2, #20]
 8006074:	fb03 f202 	mul.w	r2, r3, r2
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	61da      	str	r2, [r3, #28]
 800607c:	e036      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	61da      	str	r2, [r3, #28]
 8006086:	e031      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d018      	beq.n	80060c2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	8a92      	ldrh	r2, [r2, #20]
 8006098:	4413      	add	r3, r2
 800609a:	3b01      	subs	r3, #1
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	8a92      	ldrh	r2, [r2, #20]
 80060a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a4:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80060a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060a8:	8b7b      	ldrh	r3, [r7, #26]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d90b      	bls.n	80060c6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80060ae:	8b7b      	ldrh	r3, [r7, #26]
 80060b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	8a92      	ldrh	r2, [r2, #20]
 80060b8:	fb03 f202 	mul.w	r2, r3, r2
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	61da      	str	r2, [r3, #28]
 80060c0:	e001      	b.n	80060c6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80060c2:	2301      	movs	r3, #1
 80060c4:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	78db      	ldrb	r3, [r3, #3]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	8a92      	ldrh	r2, [r2, #20]
 80060d4:	fb03 f202 	mul.w	r2, r3, r2
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	61da      	str	r2, [r3, #28]
 80060dc:	e006      	b.n	80060ec <USB_HC_StartXfer+0x1a4>
 80060de:	bf00      	nop
 80060e0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060f6:	04d9      	lsls	r1, r3, #19
 80060f8:	4ba3      	ldr	r3, [pc, #652]	; (8006388 <USB_HC_StartXfer+0x440>)
 80060fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	7d9b      	ldrb	r3, [r3, #22]
 8006102:	075b      	lsls	r3, r3, #29
 8006104:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006108:	69f9      	ldr	r1, [r7, #28]
 800610a:	0148      	lsls	r0, r1, #5
 800610c:	6a39      	ldr	r1, [r7, #32]
 800610e:	4401      	add	r1, r0
 8006110:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006114:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006116:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d009      	beq.n	8006132 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	460a      	mov	r2, r1
 8006130:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	440a      	add	r2, r1
 8006160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006164:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006168:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	7e7b      	ldrb	r3, [r7, #25]
 800617a:	075b      	lsls	r3, r3, #29
 800617c:	69f9      	ldr	r1, [r7, #28]
 800617e:	0148      	lsls	r0, r1, #5
 8006180:	6a39      	ldr	r1, [r7, #32]
 8006182:	4401      	add	r1, r0
 8006184:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	799b      	ldrb	r3, [r3, #6]
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 80c3 	bne.w	800631c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	7c5b      	ldrb	r3, [r3, #17]
 800619a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061a0:	4313      	orrs	r3, r2
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	6a3a      	ldr	r2, [r7, #32]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061b2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	79db      	ldrb	r3, [r3, #7]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d123      	bne.n	8006224 <USB_HC_StartXfer+0x2dc>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	78db      	ldrb	r3, [r3, #3]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11f      	bne.n	8006224 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006202:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	4413      	add	r3, r2
 800620c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	440a      	add	r2, r1
 800621a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800621e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006222:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	7c9b      	ldrb	r3, [r3, #18]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d003      	beq.n	8006234 <USB_HC_StartXfer+0x2ec>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	7c9b      	ldrb	r3, [r3, #18]
 8006230:	2b03      	cmp	r3, #3
 8006232:	d117      	bne.n	8006264 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006238:	2b01      	cmp	r3, #1
 800623a:	d113      	bne.n	8006264 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	78db      	ldrb	r3, [r3, #3]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d10f      	bne.n	8006264 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	6a3a      	ldr	r2, [r7, #32]
 8006258:	440a      	add	r2, r1
 800625a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006262:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	7c9b      	ldrb	r3, [r3, #18]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d162      	bne.n	8006332 <USB_HC_StartXfer+0x3ea>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	78db      	ldrb	r3, [r3, #3]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d15e      	bne.n	8006332 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	3b01      	subs	r3, #1
 800627a:	2b03      	cmp	r3, #3
 800627c:	d858      	bhi.n	8006330 <USB_HC_StartXfer+0x3e8>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <USB_HC_StartXfer+0x33c>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	08006295 	.word	0x08006295
 8006288:	080062b7 	.word	0x080062b7
 800628c:	080062d9 	.word	0x080062d9
 8006290:	080062fb 	.word	0x080062fb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b2:	6053      	str	r3, [r2, #4]
          break;
 80062b4:	e03d      	b.n	8006332 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d0:	f043 030e 	orr.w	r3, r3, #14
 80062d4:	6053      	str	r3, [r2, #4]
          break;
 80062d6:	e02c      	b.n	8006332 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	6a3a      	ldr	r2, [r7, #32]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062f6:	6053      	str	r3, [r2, #4]
          break;
 80062f8:	e01b      	b.n	8006332 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006318:	6053      	str	r3, [r2, #4]
          break;
 800631a:	e00a      	b.n	8006332 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6053      	str	r3, [r2, #4]
 800632e:	e000      	b.n	8006332 <USB_HC_StartXfer+0x3ea>
          break;
 8006330:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006348:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	78db      	ldrb	r3, [r3, #3]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	e003      	b.n	8006364 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006362:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800636a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006378:	461a      	mov	r2, r3
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e055      	b.n	8006434 <USB_HC_StartXfer+0x4ec>
 8006388:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	78db      	ldrb	r3, [r3, #3]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d14e      	bne.n	8006432 <USB_HC_StartXfer+0x4ea>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d04a      	beq.n	8006432 <USB_HC_StartXfer+0x4ea>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	79db      	ldrb	r3, [r3, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d146      	bne.n	8006432 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	7c9b      	ldrb	r3, [r3, #18]
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d831      	bhi.n	8006410 <USB_HC_StartXfer+0x4c8>
 80063ac:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <USB_HC_StartXfer+0x46c>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063c5 	.word	0x080063c5
 80063b8:	080063e9 	.word	0x080063e9
 80063bc:	080063c5 	.word	0x080063c5
 80063c0:	080063e9 	.word	0x080063e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	3303      	adds	r3, #3
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063ce:	8afa      	ldrh	r2, [r7, #22]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d91c      	bls.n	8006414 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80063e6:	e015      	b.n	8006414 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	3303      	adds	r3, #3
 80063ee:	089b      	lsrs	r3, r3, #2
 80063f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063f2:	8afa      	ldrh	r2, [r7, #22]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	429a      	cmp	r2, r3
 8006400:	d90a      	bls.n	8006418 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	619a      	str	r2, [r3, #24]
        }
        break;
 800640e:	e003      	b.n	8006418 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006410:	bf00      	nop
 8006412:	e002      	b.n	800641a <USB_HC_StartXfer+0x4d2>
        break;
 8006414:	bf00      	nop
 8006416:	e000      	b.n	800641a <USB_HC_StartXfer+0x4d2>
        break;
 8006418:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	785a      	ldrb	r2, [r3, #1]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	b29b      	uxth	r3, r3
 8006428:	2000      	movs	r0, #0
 800642a:	9000      	str	r0, [sp, #0]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff f9ca 	bl	80057c6 <USB_WritePacket>
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3728      	adds	r7, #40	; 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	b29b      	uxth	r3, r3
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800645e:	b480      	push	{r7}
 8006460:	b089      	sub	sp, #36	; 0x24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	0c9b      	lsrs	r3, r3, #18
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	0fdb      	lsrs	r3, r3, #31
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	0fdb      	lsrs	r3, r3, #31
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d10d      	bne.n	80064e0 <USB_HC_Halt+0x82>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <USB_HC_Halt+0x82>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d002      	beq.n	80064dc <USB_HC_Halt+0x7e>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d101      	bne.n	80064e0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e0d8      	b.n	8006692 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <USB_HC_Halt+0x8e>
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d173      	bne.n	80065d4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	440a      	add	r2, r1
 8006502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006506:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800650a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	d14a      	bne.n	80065ae <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d133      	bne.n	800658c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006542:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006562:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	3301      	adds	r3, #1
 8006568:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006570:	d82e      	bhi.n	80065d0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006588:	d0ec      	beq.n	8006564 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800658a:	e081      	b.n	8006690 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ac:	e070      	b.n	8006690 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ce:	e05f      	b.n	8006690 <USB_HC_Halt+0x232>
            break;
 80065d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065d2:	e05d      	b.n	8006690 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d133      	bne.n	800666c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	440a      	add	r2, r1
 800661a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006622:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	440a      	add	r2, r1
 800663a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006642:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3301      	adds	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006650:	d81d      	bhi.n	800668e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006668:	d0ec      	beq.n	8006644 <USB_HC_Halt+0x1e6>
 800666a:	e011      	b.n	8006690 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	440a      	add	r2, r1
 8006682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	e000      	b.n	8006690 <USB_HC_Halt+0x232>
          break;
 800668e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3724      	adds	r7, #36	; 0x24
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066b4:	2301      	movs	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	04da      	lsls	r2, r3, #19
 80066bc:	4b15      	ldr	r3, [pc, #84]	; (8006714 <USB_DoPing+0x74>)
 80066be:	4013      	ands	r3, r2
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	0151      	lsls	r1, r2, #5
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	440a      	add	r2, r1
 80066c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fe:	461a      	mov	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	1ff80000 	.word	0x1ff80000

08006718 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fe ff8d 	bl	800564c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006732:	2110      	movs	r1, #16
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fe ffe6 	bl	8005706 <USB_FlushTxFifo>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff f810 	bl	800576a <USB_FlushRxFifo>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006754:	2300      	movs	r3, #0
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	e01f      	b.n	800679a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006770:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006778:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006780:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	4413      	add	r3, r2
 800678a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678e:	461a      	mov	r2, r3
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	3301      	adds	r3, #1
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b0f      	cmp	r3, #15
 800679e:	d9dc      	bls.n	800675a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e034      	b.n	8006810 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	461a      	mov	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ec:	d80c      	bhi.n	8006808 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006804:	d0ec      	beq.n	80067e0 <USB_StopHost+0xc8>
 8006806:	e000      	b.n	800680a <USB_StopHost+0xf2>
        break;
 8006808:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	3301      	adds	r3, #1
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d9c7      	bls.n	80067a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681c:	461a      	mov	r2, r3
 800681e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006822:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800682a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fe fefc 	bl	800562a <USB_EnableGlobalInt>

  return ret;
 8006832:	7ffb      	ldrb	r3, [r7, #31]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3720      	adds	r7, #32
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af04      	add	r7, sp, #16
 8006842:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006844:	2301      	movs	r3, #1
 8006846:	2202      	movs	r2, #2
 8006848:	2102      	movs	r1, #2
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fcd7 	bl	80071fe <USBH_FindInterface>
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2bff      	cmp	r3, #255	; 0xff
 8006858:	d002      	beq.n	8006860 <USBH_CDC_InterfaceInit+0x24>
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d901      	bls.n	8006864 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006860:	2302      	movs	r3, #2
 8006862:	e13d      	b.n	8006ae0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fcac 	bl	80071c6 <USBH_SelectInterface>
 800686e:	4603      	mov	r3, r0
 8006870:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006878:	2302      	movs	r3, #2
 800687a:	e131      	b.n	8006ae0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006882:	2050      	movs	r0, #80	; 0x50
 8006884:	f005 fcde 	bl	800c244 <malloc>
 8006888:	4603      	mov	r3, r0
 800688a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800689c:	2302      	movs	r3, #2
 800689e:	e11f      	b.n	8006ae0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068a0:	2250      	movs	r2, #80	; 0x50
 80068a2:	2100      	movs	r1, #0
 80068a4:	68b8      	ldr	r0, [r7, #8]
 80068a6:	f005 feb7 	bl	800c618 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	211a      	movs	r1, #26
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	4413      	add	r3, r2
 80068b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	da15      	bge.n	80068ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	211a      	movs	r1, #26
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068d2:	781a      	ldrb	r2, [r3, #0]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	211a      	movs	r1, #26
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068e8:	881a      	ldrh	r2, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f002 fa2a 	bl	8008d4e <USBH_AllocPipe>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	7819      	ldrb	r1, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	7858      	ldrb	r0, [r3, #1]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	8952      	ldrh	r2, [r2, #10]
 800691a:	9202      	str	r2, [sp, #8]
 800691c:	2203      	movs	r2, #3
 800691e:	9201      	str	r2, [sp, #4]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4623      	mov	r3, r4
 8006924:	4602      	mov	r2, r0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f002 f9e2 	bl	8008cf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2200      	movs	r2, #0
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f005 fbff 	bl	800c138 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800693a:	2300      	movs	r3, #0
 800693c:	2200      	movs	r2, #0
 800693e:	210a      	movs	r1, #10
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fc5c 	bl	80071fe <USBH_FindInterface>
 8006946:	4603      	mov	r3, r0
 8006948:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2bff      	cmp	r3, #255	; 0xff
 800694e:	d002      	beq.n	8006956 <USBH_CDC_InterfaceInit+0x11a>
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d901      	bls.n	800695a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006956:	2302      	movs	r3, #2
 8006958:	e0c2      	b.n	8006ae0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	211a      	movs	r1, #26
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	4413      	add	r3, r2
 8006966:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b25b      	sxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	da16      	bge.n	80069a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	211a      	movs	r1, #26
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	211a      	movs	r1, #26
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006998:	881a      	ldrh	r2, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	835a      	strh	r2, [r3, #26]
 800699e:	e015      	b.n	80069cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	211a      	movs	r1, #26
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	211a      	movs	r1, #26
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	211a      	movs	r1, #26
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da16      	bge.n	8006a12 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	211a      	movs	r1, #26
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	211a      	movs	r1, #26
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	835a      	strh	r2, [r3, #26]
 8006a10:	e015      	b.n	8006a3e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	211a      	movs	r1, #26
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	211a      	movs	r1, #26
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a38:	881a      	ldrh	r2, [r3, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	7b9b      	ldrb	r3, [r3, #14]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f002 f982 	bl	8008d4e <USBH_AllocPipe>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7bdb      	ldrb	r3, [r3, #15]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f002 f978 	bl	8008d4e <USBH_AllocPipe>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	7b59      	ldrb	r1, [r3, #13]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7b98      	ldrb	r0, [r3, #14]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	8b12      	ldrh	r2, [r2, #24]
 8006a7e:	9202      	str	r2, [sp, #8]
 8006a80:	2202      	movs	r2, #2
 8006a82:	9201      	str	r2, [sp, #4]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	4623      	mov	r3, r4
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f002 f930 	bl	8008cf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	7b19      	ldrb	r1, [r3, #12]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	7bd8      	ldrb	r0, [r3, #15]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	8b52      	ldrh	r2, [r2, #26]
 8006aa8:	9202      	str	r2, [sp, #8]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	9201      	str	r2, [sp, #4]
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f002 f91b 	bl	8008cf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	7b5b      	ldrb	r3, [r3, #13]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f005 fb34 	bl	800c138 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	7b1b      	ldrb	r3, [r3, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f005 fb2d 	bl	800c138 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd90      	pop	{r4, r7, pc}

08006ae8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00e      	beq.n	8006b20 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f002 f910 	bl	8008d2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 f93b 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	7b1b      	ldrb	r3, [r3, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	7b1b      	ldrb	r3, [r3, #12]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f002 f8fd 	bl	8008d2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	7b1b      	ldrb	r3, [r3, #12]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f002 f928 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	7b5b      	ldrb	r3, [r3, #13]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00e      	beq.n	8006b6c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	7b5b      	ldrb	r3, [r3, #13]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f002 f8ea 	bl	8008d2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	7b5b      	ldrb	r3, [r3, #13]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f002 f915 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f005 fb67 	bl	800c254 <free>
    phost->pActiveClass->pData = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3340      	adds	r3, #64	; 0x40
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f8b1 	bl	8006d1a <GetLineCoding>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d105      	bne.n	8006bce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bc8:	2102      	movs	r1, #2
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bce:	7afb      	ldrb	r3, [r7, #11]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006be0:	2301      	movs	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d877      	bhi.n	8006cec <USBH_CDC_Process+0x114>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <USBH_CDC_Process+0x2c>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c19 	.word	0x08006c19
 8006c08:	08006c1f 	.word	0x08006c1f
 8006c0c:	08006c4f 	.word	0x08006c4f
 8006c10:	08006cc3 	.word	0x08006cc3
 8006c14:	08006cd1 	.word	0x08006cd1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1c:	e06d      	b.n	8006cfa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f897 	bl	8006d58 <SetLineCoding>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c3c:	e058      	b.n	8006cf0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d055      	beq.n	8006cf0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2204      	movs	r2, #4
 8006c48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c4c:	e050      	b.n	8006cf0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	3340      	adds	r3, #64	; 0x40
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f860 	bl	8006d1a <GetLineCoding>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d126      	bne.n	8006cb2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	791b      	ldrb	r3, [r3, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d13b      	bne.n	8006cf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c86:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d133      	bne.n	8006cf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d12b      	bne.n	8006cf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d124      	bne.n	8006cf4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f982 	bl	8006fb4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cb0:	e020      	b.n	8006cf4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d01d      	beq.n	8006cf4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2204      	movs	r2, #4
 8006cbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cc0:	e018      	b.n	8006cf4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f867 	bl	8006d96 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f8f6 	bl	8006eba <CDC_ProcessReception>
      break;
 8006cce:	e014      	b.n	8006cfa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 f98e 	bl	8007ff4 <USBH_ClrFeature>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cea:	e005      	b.n	8006cf8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006cec:	bf00      	nop
 8006cee:	e004      	b.n	8006cfa <USBH_CDC_Process+0x122>
      break;
 8006cf0:	bf00      	nop
 8006cf2:	e002      	b.n	8006cfa <USBH_CDC_Process+0x122>
      break;
 8006cf4:	bf00      	nop
 8006cf6:	e000      	b.n	8006cfa <USBH_CDC_Process+0x122>
      break;
 8006cf8:	bf00      	nop

  }

  return status;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	22a1      	movs	r2, #161	; 0xa1
 8006d28:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2221      	movs	r2, #33	; 0x21
 8006d2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2207      	movs	r2, #7
 8006d40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2207      	movs	r2, #7
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fc8f 	bl	800866c <USBH_CtlReq>
 8006d4e:	4603      	mov	r3, r0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2221      	movs	r2, #33	; 0x21
 8006d66:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2207      	movs	r2, #7
 8006d7e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2207      	movs	r2, #7
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fc70 	bl	800866c <USBH_CtlReq>
 8006d8c:	4603      	mov	r3, r0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af02      	add	r7, sp, #8
 8006d9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d002      	beq.n	8006dbc <CDC_ProcessTransmission+0x26>
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d023      	beq.n	8006e02 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dba:	e07a      	b.n	8006eb2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	8b12      	ldrh	r2, [r2, #24]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d90b      	bls.n	8006de0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	69d9      	ldr	r1, [r3, #28]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8b1a      	ldrh	r2, [r3, #24]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	7b5b      	ldrb	r3, [r3, #13]
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	9000      	str	r0, [sp, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 ff46 	bl	8008c6a <USBH_BulkSendData>
 8006dde:	e00b      	b.n	8006df8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	7b5b      	ldrb	r3, [r3, #13]
 8006dee:	2001      	movs	r0, #1
 8006df0:	9000      	str	r0, [sp, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 ff39 	bl	8008c6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e00:	e057      	b.n	8006eb2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	7b5b      	ldrb	r3, [r3, #13]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f005 f96b 	bl	800c0e4 <USBH_LL_GetURBState>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d136      	bne.n	8006e86 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	8b12      	ldrh	r2, [r2, #24]
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d90e      	bls.n	8006e42 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	8b12      	ldrh	r2, [r2, #24]
 8006e2c:	1a9a      	subs	r2, r3, r2
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	8b12      	ldrh	r2, [r2, #24]
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	61da      	str	r2, [r3, #28]
 8006e40:	e002      	b.n	8006e48 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006e58:	e006      	b.n	8006e68 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f892 	bl	8006f8c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f002 f97c 	bl	800917c <osMessagePut>
      break;
 8006e84:	e014      	b.n	8006eb0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e86:	7afb      	ldrb	r3, [r7, #11]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d111      	bne.n	8006eb0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f002 f966 	bl	800917c <osMessagePut>
      break;
 8006eb0:	bf00      	nop
  }
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d002      	beq.n	8006ee0 <CDC_ProcessReception+0x26>
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d00e      	beq.n	8006efc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ede:	e051      	b.n	8006f84 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	6a19      	ldr	r1, [r3, #32]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	8b5a      	ldrh	r2, [r3, #26]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	7b1b      	ldrb	r3, [r3, #12]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fee1 	bl	8008cb4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006efa:	e043      	b.n	8006f84 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	7b1b      	ldrb	r3, [r3, #12]
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f005 f8ee 	bl	800c0e4 <USBH_LL_GetURBState>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d137      	bne.n	8006f82 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	7b1b      	ldrb	r3, [r3, #12]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f005 f851 	bl	800bfc0 <USBH_LL_GetLastXferSize>
 8006f1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d016      	beq.n	8006f58 <CDC_ProcessReception+0x9e>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	8b5b      	ldrh	r3, [r3, #26]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d910      	bls.n	8006f58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1ad2      	subs	r2, r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	441a      	add	r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2203      	movs	r2, #3
 8006f52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006f56:	e006      	b.n	8006f66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f81d 	bl	8006fa0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f002 f8fd 	bl	800917c <osMessagePut>
      break;
 8006f82:	bf00      	nop
  }
}
 8006f84:	bf00      	nop
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006fc8:	b5b0      	push	{r4, r5, r7, lr}
 8006fca:	b090      	sub	sp, #64	; 0x40
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e04d      	b.n	800707c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	79fa      	ldrb	r2, [r7, #7]
 8006fe4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f847 	bl	800708c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800702c:	4b15      	ldr	r3, [pc, #84]	; (8007084 <USBH_Init+0xbc>)
 800702e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f002 f873 	bl	800912a <osMessageCreate>
 8007044:	4602      	mov	r2, r0
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800704c:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <USBH_Init+0xc0>)
 800704e:	f107 0414 	add.w	r4, r7, #20
 8007052:	461d      	mov	r5, r3
 8007054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800705c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007060:	f107 0314 	add.w	r3, r7, #20
 8007064:	68f9      	ldr	r1, [r7, #12]
 8007066:	4618      	mov	r0, r3
 8007068:	f001 ff05 	bl	8008e76 <osThreadCreate>
 800706c:	4602      	mov	r2, r0
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f004 feef 	bl	800be58 <USBH_LL_Init>

  return USBH_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3740      	adds	r7, #64	; 0x40
 8007080:	46bd      	mov	sp, r7
 8007082:	bdb0      	pop	{r4, r5, r7, pc}
 8007084:	0800d3f8 	.word	0x0800d3f8
 8007088:	0800d414 	.word	0x0800d414

0800708c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e009      	b.n	80070b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	33e0      	adds	r3, #224	; 0xe0
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	2200      	movs	r2, #0
 80070aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b0f      	cmp	r3, #15
 80070b6:	d9f2      	bls.n	800709e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e009      	b.n	80070d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d8:	d3f1      	bcc.n	80070be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2240      	movs	r2, #64	; 0x40
 80070fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	331c      	adds	r3, #28
 800712a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f005 fa71 	bl	800c618 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800713c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f005 fa68 	bl	800c618 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f203 3326 	addw	r3, r3, #806	; 0x326
 800714e:	2212      	movs	r2, #18
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f005 fa60 	bl	800c618 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800715e:	223e      	movs	r2, #62	; 0x3e
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f005 fa58 	bl	800c618 <memset>

  return USBH_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d016      	beq.n	80071b4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10e      	bne.n	80071ae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	33de      	adds	r3, #222	; 0xde
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
 80071ac:	e004      	b.n	80071b8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	73fb      	strb	r3, [r7, #15]
 80071b2:	e001      	b.n	80071b8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071b4:	2302      	movs	r3, #2
 80071b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80071dc:	78fa      	ldrb	r2, [r7, #3]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d204      	bcs.n	80071ec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80071ea:	e001      	b.n	80071f0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80071ec:	2302      	movs	r3, #2
 80071ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80071fe:	b480      	push	{r7}
 8007200:	b087      	sub	sp, #28
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	4608      	mov	r0, r1
 8007208:	4611      	mov	r1, r2
 800720a:	461a      	mov	r2, r3
 800720c:	4603      	mov	r3, r0
 800720e:	70fb      	strb	r3, [r7, #3]
 8007210:	460b      	mov	r3, r1
 8007212:	70bb      	strb	r3, [r7, #2]
 8007214:	4613      	mov	r3, r2
 8007216:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007226:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007228:	e025      	b.n	8007276 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	221a      	movs	r2, #26
 800722e:	fb02 f303 	mul.w	r3, r2, r3
 8007232:	3308      	adds	r3, #8
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	3302      	adds	r3, #2
 800723a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	795b      	ldrb	r3, [r3, #5]
 8007240:	78fa      	ldrb	r2, [r7, #3]
 8007242:	429a      	cmp	r2, r3
 8007244:	d002      	beq.n	800724c <USBH_FindInterface+0x4e>
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	2bff      	cmp	r3, #255	; 0xff
 800724a:	d111      	bne.n	8007270 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007250:	78ba      	ldrb	r2, [r7, #2]
 8007252:	429a      	cmp	r2, r3
 8007254:	d002      	beq.n	800725c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007256:	78bb      	ldrb	r3, [r7, #2]
 8007258:	2bff      	cmp	r3, #255	; 0xff
 800725a:	d109      	bne.n	8007270 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007260:	787a      	ldrb	r2, [r7, #1]
 8007262:	429a      	cmp	r2, r3
 8007264:	d002      	beq.n	800726c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007266:	787b      	ldrb	r3, [r7, #1]
 8007268:	2bff      	cmp	r3, #255	; 0xff
 800726a:	d101      	bne.n	8007270 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	e006      	b.n	800727e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	3301      	adds	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d9d6      	bls.n	800722a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800727c:	23ff      	movs	r3, #255	; 0xff
}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f004 fe1c 	bl	800bed0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007298:	2101      	movs	r1, #1
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f004 ff35 	bl	800c10a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af04      	add	r7, sp, #16
 80072b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072b4:	2302      	movs	r3, #2
 80072b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d102      	bne.n	80072ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2203      	movs	r2, #3
 80072cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b0b      	cmp	r3, #11
 80072d6:	f200 8247 	bhi.w	8007768 <USBH_Process+0x4bc>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <USBH_Process+0x34>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007311 	.word	0x08007311
 80072e4:	0800735f 	.word	0x0800735f
 80072e8:	080073e3 	.word	0x080073e3
 80072ec:	080076e7 	.word	0x080076e7
 80072f0:	08007769 	.word	0x08007769
 80072f4:	080074a3 	.word	0x080074a3
 80072f8:	08007671 	.word	0x08007671
 80072fc:	080074f5 	.word	0x080074f5
 8007300:	08007531 	.word	0x08007531
 8007304:	0800756b 	.word	0x0800756b
 8007308:	080075c9 	.word	0x080075c9
 800730c:	080076cf 	.word	0x080076cf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8227 	beq.w	800776c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007324:	20c8      	movs	r0, #200	; 0xc8
 8007326:	f004 ff3a 	bl	800c19e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f004 fe2d 	bl	800bf8a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007354:	2200      	movs	r2, #0
 8007356:	4619      	mov	r1, r3
 8007358:	f001 ff10 	bl	800917c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800735c:	e206      	b.n	800776c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007364:	2b01      	cmp	r3, #1
 8007366:	d107      	bne.n	8007378 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	e025      	b.n	80073c4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800737e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007382:	d914      	bls.n	80073ae <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800738a:	3301      	adds	r3, #1
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800739a:	2b03      	cmp	r3, #3
 800739c:	d903      	bls.n	80073a6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	220d      	movs	r2, #13
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e00e      	b.n	80073c4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	e00a      	b.n	80073c4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073b4:	f103 020a 	add.w	r2, r3, #10
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80073be:	200a      	movs	r0, #10
 80073c0:	f004 feed 	bl	800c19e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80073d8:	2200      	movs	r2, #0
 80073da:	4619      	mov	r1, r3
 80073dc:	f001 fece 	bl	800917c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073e0:	e1cb      	b.n	800777a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073f2:	2104      	movs	r1, #4
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80073f8:	2064      	movs	r0, #100	; 0x64
 80073fa:	f004 fed0 	bl	800c19e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f004 fd9c 	bl	800bf3c <USBH_LL_GetSpeed>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2205      	movs	r2, #5
 8007412:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007414:	2100      	movs	r1, #0
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fc99 	bl	8008d4e <USBH_AllocPipe>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007424:	2180      	movs	r1, #128	; 0x80
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 fc91 	bl	8008d4e <USBH_AllocPipe>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7919      	ldrb	r1, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007448:	b292      	uxth	r2, r2
 800744a:	9202      	str	r2, [sp, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	9201      	str	r2, [sp, #4]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	4603      	mov	r3, r0
 8007454:	2280      	movs	r2, #128	; 0x80
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 fc4a 	bl	8008cf0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7959      	ldrb	r1, [r3, #5]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007470:	b292      	uxth	r2, r2
 8007472:	9202      	str	r2, [sp, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	9201      	str	r2, [sp, #4]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	4603      	mov	r3, r0
 800747c:	2200      	movs	r2, #0
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fc36 	bl	8008cf0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007498:	2200      	movs	r2, #0
 800749a:	4619      	mov	r1, r3
 800749c:	f001 fe6e 	bl	800917c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074a0:	e16b      	b.n	800777a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f96e 	bl	8007784 <USBH_HandleEnum>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 815d 	bne.w	8007770 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d103      	bne.n	80074d0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2208      	movs	r2, #8
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2207      	movs	r2, #7
 80074d4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2205      	movs	r2, #5
 80074da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80074ea:	2200      	movs	r2, #0
 80074ec:	4619      	mov	r1, r3
 80074ee:	f001 fe45 	bl	800917c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074f2:	e13d      	b.n	8007770 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 813a 	beq.w	8007774 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007506:	2101      	movs	r1, #1
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2208      	movs	r2, #8
 8007510:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2205      	movs	r2, #5
 8007516:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007526:	2200      	movs	r2, #0
 8007528:	4619      	mov	r1, r3
 800752a:	f001 fe27 	bl	800917c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800752e:	e121      	b.n	8007774 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007536:	b29b      	uxth	r3, r3
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fd13 	bl	8007f66 <USBH_SetCfg>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d102      	bne.n	800754c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2209      	movs	r2, #9
 800754a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007560:	2200      	movs	r2, #0
 8007562:	4619      	mov	r1, r3
 8007564:	f001 fe0a 	bl	800917c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007568:	e107      	b.n	800777a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d015      	beq.n	80075a4 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fd16 	bl	8007fac <USBH_SetFeature>
 8007580:	4603      	mov	r3, r0
 8007582:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	220a      	movs	r2, #10
 8007590:	701a      	strb	r2, [r3, #0]
 8007592:	e00a      	b.n	80075aa <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b03      	cmp	r3, #3
 800759a:	d106      	bne.n	80075aa <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	220a      	movs	r2, #10
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	e002      	b.n	80075aa <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	220a      	movs	r2, #10
 80075a8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80075be:	2200      	movs	r2, #0
 80075c0:	4619      	mov	r1, r3
 80075c2:	f001 fddb 	bl	800917c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075c6:	e0d8      	b.n	800777a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d03f      	beq.n	8007652 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]
 80075de:	e016      	b.n	800760e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80075e0:	7bfa      	ldrb	r2, [r7, #15]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	32de      	adds	r2, #222	; 0xde
 80075e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ea:	791a      	ldrb	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d108      	bne.n	8007608 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80075f6:	7bfa      	ldrb	r2, [r7, #15]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	32de      	adds	r2, #222	; 0xde
 80075fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007606:	e005      	b.n	8007614 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	3301      	adds	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0e5      	beq.n	80075e0 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d109      	bne.n	8007644 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2206      	movs	r2, #6
 8007634:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800763c:	2103      	movs	r1, #3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	e006      	b.n	8007652 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	220d      	movs	r2, #13
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	e002      	b.n	8007652 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	220d      	movs	r2, #13
 8007650:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2205      	movs	r2, #5
 8007656:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007666:	2200      	movs	r2, #0
 8007668:	4619      	mov	r1, r3
 800766a:	f001 fd87 	bl	800917c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800766e:	e084      	b.n	800777a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d017      	beq.n	80076aa <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
 8007686:	4603      	mov	r3, r0
 8007688:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d103      	bne.n	800769a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	220b      	movs	r2, #11
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	e00a      	b.n	80076b0 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d106      	bne.n	80076b0 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	220d      	movs	r2, #13
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	e002      	b.n	80076b0 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	220d      	movs	r2, #13
 80076ae:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2205      	movs	r2, #5
 80076b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80076c4:	2200      	movs	r2, #0
 80076c6:	4619      	mov	r1, r3
 80076c8:	f001 fd58 	bl	800917c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076cc:	e055      	b.n	800777a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d04f      	beq.n	8007778 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
      }
      break;
 80076e4:	e048      	b.n	8007778 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fccc 	bl	800708c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007722:	2105      	movs	r1, #5
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d107      	bne.n	8007744 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fda4 	bl	800728a <USBH_Start>
 8007742:	e002      	b.n	800774a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f004 fbc3 	bl	800bed0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800775e:	2200      	movs	r2, #0
 8007760:	4619      	mov	r1, r3
 8007762:	f001 fd0b 	bl	800917c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007766:	e008      	b.n	800777a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007768:	bf00      	nop
 800776a:	e006      	b.n	800777a <USBH_Process+0x4ce>
      break;
 800776c:	bf00      	nop
 800776e:	e004      	b.n	800777a <USBH_Process+0x4ce>
      break;
 8007770:	bf00      	nop
 8007772:	e002      	b.n	800777a <USBH_Process+0x4ce>
    break;
 8007774:	bf00      	nop
 8007776:	e000      	b.n	800777a <USBH_Process+0x4ce>
      break;
 8007778:	bf00      	nop
  }
  return USBH_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af04      	add	r7, sp, #16
 800778a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007790:	2301      	movs	r3, #1
 8007792:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	785b      	ldrb	r3, [r3, #1]
 8007798:	2b07      	cmp	r3, #7
 800779a:	f200 8208 	bhi.w	8007bae <USBH_HandleEnum+0x42a>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <USBH_HandleEnum+0x20>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077c5 	.word	0x080077c5
 80077a8:	08007883 	.word	0x08007883
 80077ac:	080078ed 	.word	0x080078ed
 80077b0:	0800797b 	.word	0x0800797b
 80077b4:	080079e5 	.word	0x080079e5
 80077b8:	08007a55 	.word	0x08007a55
 80077bc:	08007af1 	.word	0x08007af1
 80077c0:	08007b6f 	.word	0x08007b6f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077c4:	2108      	movs	r1, #8
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 faea 	bl	8007da0 <USBH_Get_DevDesc>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d130      	bne.n	8007838 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7919      	ldrb	r1, [r3, #4]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077fa:	b292      	uxth	r2, r2
 80077fc:	9202      	str	r2, [sp, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	9201      	str	r2, [sp, #4]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	4603      	mov	r3, r0
 8007806:	2280      	movs	r2, #128	; 0x80
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fa71 	bl	8008cf0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	7959      	ldrb	r1, [r3, #5]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007822:	b292      	uxth	r2, r2
 8007824:	9202      	str	r2, [sp, #8]
 8007826:	2200      	movs	r2, #0
 8007828:	9201      	str	r2, [sp, #4]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4603      	mov	r3, r0
 800782e:	2200      	movs	r2, #0
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fa5d 	bl	8008cf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007836:	e1bc      	b.n	8007bb2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b03      	cmp	r3, #3
 800783c:	f040 81b9 	bne.w	8007bb2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007846:	3301      	adds	r3, #1
 8007848:	b2da      	uxtb	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007856:	2b03      	cmp	r3, #3
 8007858:	d903      	bls.n	8007862 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	220d      	movs	r2, #13
 800785e:	701a      	strb	r2, [r3, #0]
      break;
 8007860:	e1a7      	b.n	8007bb2 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fa91 	bl	8008d90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	791b      	ldrb	r3, [r3, #4]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fa8b 	bl	8008d90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
      break;
 8007880:	e197      	b.n	8007bb2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007882:	2112      	movs	r1, #18
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa8b 	bl	8007da0 <USBH_Get_DevDesc>
 800788a:	4603      	mov	r3, r0
 800788c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d103      	bne.n	800789c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800789a:	e18c      	b.n	8007bb6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	f040 8189 	bne.w	8007bb6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078aa:	3301      	adds	r3, #1
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d903      	bls.n	80078c6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	220d      	movs	r2, #13
 80078c2:	701a      	strb	r2, [r3, #0]
      break;
 80078c4:	e177      	b.n	8007bb6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	795b      	ldrb	r3, [r3, #5]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 fa5f 	bl	8008d90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	791b      	ldrb	r3, [r3, #4]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 fa59 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	701a      	strb	r2, [r3, #0]
      break;
 80078ea:	e164      	b.n	8007bb6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80078ec:	2101      	movs	r1, #1
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fb15 	bl	8007f1e <USBH_SetAddress>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d132      	bne.n	8007964 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80078fe:	2002      	movs	r0, #2
 8007900:	f004 fc4d 	bl	800c19e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2203      	movs	r2, #3
 8007910:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7919      	ldrb	r1, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007926:	b292      	uxth	r2, r2
 8007928:	9202      	str	r2, [sp, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	9201      	str	r2, [sp, #4]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	4603      	mov	r3, r0
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f9db 	bl	8008cf0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	7959      	ldrb	r1, [r3, #5]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800794e:	b292      	uxth	r2, r2
 8007950:	9202      	str	r2, [sp, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	9201      	str	r2, [sp, #4]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4603      	mov	r3, r0
 800795a:	2200      	movs	r2, #0
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f9c7 	bl	8008cf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007962:	e12a      	b.n	8007bba <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b03      	cmp	r3, #3
 8007968:	f040 8127 	bne.w	8007bba <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	220d      	movs	r2, #13
 8007970:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	705a      	strb	r2, [r3, #1]
      break;
 8007978:	e11f      	b.n	8007bba <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800797a:	2109      	movs	r1, #9
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fa3b 	bl	8007df8 <USBH_Get_CfgDesc>
 8007982:	4603      	mov	r3, r0
 8007984:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2204      	movs	r2, #4
 8007990:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007992:	e114      	b.n	8007bbe <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b03      	cmp	r3, #3
 8007998:	f040 8111 	bne.w	8007bbe <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079a2:	3301      	adds	r3, #1
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d903      	bls.n	80079be <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	220d      	movs	r2, #13
 80079ba:	701a      	strb	r2, [r3, #0]
      break;
 80079bc:	e0ff      	b.n	8007bbe <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	795b      	ldrb	r3, [r3, #5]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f9e3 	bl	8008d90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 f9dd 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
      break;
 80079e2:	e0ec      	b.n	8007bbe <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa03 	bl	8007df8 <USBH_Get_CfgDesc>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d103      	bne.n	8007a04 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2205      	movs	r2, #5
 8007a00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a02:	e0de      	b.n	8007bc2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	f040 80db 	bne.w	8007bc2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a12:	3301      	adds	r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d903      	bls.n	8007a2e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	220d      	movs	r2, #13
 8007a2a:	701a      	strb	r2, [r3, #0]
      break;
 8007a2c:	e0c9      	b.n	8007bc2 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	795b      	ldrb	r3, [r3, #5]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f9ab 	bl	8008d90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f9a5 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
      break;
 8007a52:	e0b6      	b.n	8007bc2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d036      	beq.n	8007acc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a6a:	23ff      	movs	r3, #255	; 0xff
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9ed 	bl	8007e4c <USBH_Get_StringDesc>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d111      	bne.n	8007aa0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2206      	movs	r2, #6
 8007a80:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2205      	movs	r2, #5
 8007a86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a96:	2200      	movs	r2, #0
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f001 fb6f 	bl	800917c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a9e:	e092      	b.n	8007bc6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f040 808f 	bne.w	8007bc6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2206      	movs	r2, #6
 8007aac:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2205      	movs	r2, #5
 8007ab2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	f001 fb59 	bl	800917c <osMessagePut>
      break;
 8007aca:	e07c      	b.n	8007bc6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2206      	movs	r2, #6
 8007ad0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f001 fb47 	bl	800917c <osMessagePut>
      break;
 8007aee:	e06a      	b.n	8007bc6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d027      	beq.n	8007b4a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b06:	23ff      	movs	r3, #255	; 0xff
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f99f 	bl	8007e4c <USBH_Get_StringDesc>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2207      	movs	r2, #7
 8007b1c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b1e:	e054      	b.n	8007bca <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d151      	bne.n	8007bca <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2207      	movs	r2, #7
 8007b2a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2205      	movs	r2, #5
 8007b30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b40:	2200      	movs	r2, #0
 8007b42:	4619      	mov	r1, r3
 8007b44:	f001 fb1a 	bl	800917c <osMessagePut>
      break;
 8007b48:	e03f      	b.n	8007bca <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2207      	movs	r2, #7
 8007b4e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2205      	movs	r2, #5
 8007b54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b64:	2200      	movs	r2, #0
 8007b66:	4619      	mov	r1, r3
 8007b68:	f001 fb08 	bl	800917c <osMessagePut>
      break;
 8007b6c:	e02d      	b.n	8007bca <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d017      	beq.n	8007ba8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b84:	23ff      	movs	r3, #255	; 0xff
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f960 	bl	8007e4c <USBH_Get_StringDesc>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b9a:	e018      	b.n	8007bce <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d115      	bne.n	8007bce <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba6:	e012      	b.n	8007bce <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bac:	e00f      	b.n	8007bce <USBH_HandleEnum+0x44a>

    default:
      break;
 8007bae:	bf00      	nop
 8007bb0:	e00e      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bb2:	bf00      	nop
 8007bb4:	e00c      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bb6:	bf00      	nop
 8007bb8:	e00a      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bba:	bf00      	nop
 8007bbc:	e008      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bbe:	bf00      	nop
 8007bc0:	e006      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e004      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e002      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <USBH_HandleEnum+0x44c>
      break;
 8007bce:	bf00      	nop
  }
  return Status;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop

08007bdc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f804 	bl	8007c1e <USBH_HandleSof>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b0b      	cmp	r3, #11
 8007c2e:	d10a      	bne.n	8007c46 <USBH_HandleSof+0x28>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
  }
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c72:	2200      	movs	r2, #0
 8007c74:	4619      	mov	r1, r3
 8007c76:	f001 fa81 	bl	800917c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007c7a:	bf00      	nop
}
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c92:	bf00      	nop
}
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f001 fa51 	bl	800917c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f004 f8fe 	bl	800bf06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f83d 	bl	8008d90 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	795b      	ldrb	r3, [r3, #5]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f837 	bl	8008d90 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d36:	2200      	movs	r2, #0
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f001 fa1f 	bl	800917c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007d56:	f107 030c 	add.w	r3, r7, #12
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fa4c 	bl	80091fc <osMessageGet>
    if (event.status == osEventMessage)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b10      	cmp	r3, #16
 8007d68:	d1f2      	bne.n	8007d50 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fa9e 	bl	80072ac <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007d70:	e7ee      	b.n	8007d50 <USBH_Process_OS+0x8>

08007d72 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4619      	mov	r1, r3
 8007d92:	f001 f9f3 	bl	800917c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db2:	d901      	bls.n	8007db8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e01b      	b.n	8007df0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007dbe:	887b      	ldrh	r3, [r7, #2]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dc8:	2100      	movs	r1, #0
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f872 	bl	8007eb4 <USBH_GetDescriptor>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007de0:	887a      	ldrh	r2, [r7, #2]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f929 	bl	800803c <USBH_ParseDevDesc>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	331c      	adds	r3, #28
 8007e08:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007e0a:	887b      	ldrh	r3, [r7, #2]
 8007e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e10:	d901      	bls.n	8007e16 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e016      	b.n	8007e44 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e16:	887b      	ldrh	r3, [r7, #2]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f846 	bl	8007eb4 <USBH_GetDescriptor>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d107      	bne.n	8007e42 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007e32:	887b      	ldrh	r3, [r7, #2]
 8007e34:	461a      	mov	r2, r3
 8007e36:	68b9      	ldr	r1, [r7, #8]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f9b3 	bl	80081a4 <USBH_ParseCfgDesc>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	461a      	mov	r2, r3
 8007e58:	460b      	mov	r3, r1
 8007e5a:	72fb      	strb	r3, [r7, #11]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007e60:	893b      	ldrh	r3, [r7, #8]
 8007e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e66:	d802      	bhi.n	8007e6e <USBH_Get_StringDesc+0x22>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e01c      	b.n	8007eac <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e7a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007e82:	893b      	ldrh	r3, [r7, #8]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	460b      	mov	r3, r1
 8007e88:	2100      	movs	r1, #0
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f812 	bl	8007eb4 <USBH_GetDescriptor>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ea0:	893a      	ldrh	r2, [r7, #8]
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fb93 	bl	80085d0 <USBH_ParseStringDesc>
  }

  return status;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	72fb      	strb	r3, [r7, #11]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d11c      	bne.n	8007f08 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ece:	7afb      	ldrb	r3, [r7, #11]
 8007ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2206      	movs	r2, #6
 8007ede:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	893a      	ldrh	r2, [r7, #8]
 8007ee4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ee6:	893b      	ldrh	r3, [r7, #8]
 8007ee8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef0:	d104      	bne.n	8007efc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f240 4209 	movw	r2, #1033	; 0x409
 8007ef8:	829a      	strh	r2, [r3, #20]
 8007efa:	e002      	b.n	8007f02 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8b3a      	ldrh	r2, [r7, #24]
 8007f06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f08:	8b3b      	ldrh	r3, [r7, #24]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fbac 	bl	800866c <USBH_CtlReq>
 8007f14:	4603      	mov	r3, r0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	789b      	ldrb	r3, [r3, #2]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d10f      	bne.n	8007f52 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2205      	movs	r2, #5
 8007f3c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f52:	2200      	movs	r2, #0
 8007f54:	2100      	movs	r1, #0
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fb88 	bl	800866c <USBH_CtlReq>
 8007f5c:	4603      	mov	r3, r0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	789b      	ldrb	r3, [r3, #2]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d10e      	bne.n	8007f98 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2209      	movs	r2, #9
 8007f84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	887a      	ldrh	r2, [r7, #2]
 8007f8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fb65 	bl	800866c <USBH_CtlReq>
 8007fa2:	4603      	mov	r3, r0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	789b      	ldrb	r3, [r3, #2]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d10f      	bne.n	8007fe0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2203      	movs	r2, #3
 8007fca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fb41 	bl	800866c <USBH_CtlReq>
 8007fea:	4603      	mov	r3, r0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	789b      	ldrb	r3, [r3, #2]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d10f      	bne.n	8008028 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008028:	2200      	movs	r2, #0
 800802a:	2100      	movs	r1, #0
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fb1d 	bl	800866c <USBH_CtlReq>
 8008032:	4603      	mov	r3, r0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008050:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800805c:	2302      	movs	r3, #2
 800805e:	e098      	b.n	8008192 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	785a      	ldrb	r2, [r3, #1]
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3302      	adds	r3, #2
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29a      	uxth	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	3303      	adds	r3, #3
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b29b      	uxth	r3, r3
 8008084:	4313      	orrs	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	791a      	ldrb	r2, [r3, #4]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	795a      	ldrb	r2, [r3, #5]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	799a      	ldrb	r2, [r3, #6]
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	79da      	ldrb	r2, [r3, #7]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d11b      	bne.n	80080f8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	79db      	ldrb	r3, [r3, #7]
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	dc0f      	bgt.n	80080e8 <USBH_ParseDevDesc+0xac>
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	db0f      	blt.n	80080ec <USBH_ParseDevDesc+0xb0>
 80080cc:	3b08      	subs	r3, #8
 80080ce:	4a34      	ldr	r2, [pc, #208]	; (80081a0 <USBH_ParseDevDesc+0x164>)
 80080d0:	fa22 f303 	lsr.w	r3, r2, r3
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <USBH_ParseDevDesc+0xb8>
 80080e6:	e001      	b.n	80080ec <USBH_ParseDevDesc+0xb0>
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	d003      	beq.n	80080f4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2208      	movs	r2, #8
 80080f0:	71da      	strb	r2, [r3, #7]
        break;
 80080f2:	e000      	b.n	80080f6 <USBH_ParseDevDesc+0xba>
        break;
 80080f4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80080f6:	e00e      	b.n	8008116 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d107      	bne.n	8008112 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	79db      	ldrb	r3, [r3, #7]
 8008106:	2b08      	cmp	r3, #8
 8008108:	d005      	beq.n	8008116 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2208      	movs	r2, #8
 800810e:	71da      	strb	r2, [r3, #7]
 8008110:	e001      	b.n	8008116 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008112:	2303      	movs	r3, #3
 8008114:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	2b08      	cmp	r3, #8
 800811a:	d939      	bls.n	8008190 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	3308      	adds	r3, #8
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b29a      	uxth	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3309      	adds	r3, #9
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	b29b      	uxth	r3, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	b29a      	uxth	r2, r3
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	330a      	adds	r3, #10
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	b29a      	uxth	r2, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	330b      	adds	r3, #11
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	b29b      	uxth	r3, r3
 800814c:	4313      	orrs	r3, r2
 800814e:	b29a      	uxth	r2, r3
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	330c      	adds	r3, #12
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	330d      	adds	r3, #13
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	b29b      	uxth	r3, r3
 8008168:	4313      	orrs	r3, r2
 800816a:	b29a      	uxth	r2, r3
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	7b9a      	ldrb	r2, [r3, #14]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	7bda      	ldrb	r2, [r3, #15]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	7c1a      	ldrb	r2, [r3, #16]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	7c5a      	ldrb	r2, [r3, #17]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
}
 8008192:	4618      	mov	r0, r3
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	01000101 	.word	0x01000101

080081a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08c      	sub	sp, #48	; 0x30
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	4613      	mov	r3, r2
 80081b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80081b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80081d2:	2302      	movs	r3, #2
 80081d4:	e0db      	b.n	800838e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	785a      	ldrb	r2, [r3, #1]
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3302      	adds	r3, #2
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	3303      	adds	r3, #3
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29b      	uxth	r3, r3
 8008202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008206:	bf28      	it	cs
 8008208:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800820c:	b29a      	uxth	r2, r3
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	791a      	ldrb	r2, [r3, #4]
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	795a      	ldrb	r2, [r3, #5]
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	799a      	ldrb	r2, [r3, #6]
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	79da      	ldrb	r2, [r3, #7]
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	7a1a      	ldrb	r2, [r3, #8]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b09      	cmp	r3, #9
 8008240:	d002      	beq.n	8008248 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	2209      	movs	r2, #9
 8008246:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	2b09      	cmp	r3, #9
 800824c:	f240 809d 	bls.w	800838a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008250:	2309      	movs	r3, #9
 8008252:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008258:	e081      	b.n	800835e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800825a:	f107 0316 	add.w	r3, r7, #22
 800825e:	4619      	mov	r1, r3
 8008260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008262:	f000 f9e8 	bl	8008636 <USBH_GetNextDesc>
 8008266:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b04      	cmp	r3, #4
 800826e:	d176      	bne.n	800835e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b09      	cmp	r3, #9
 8008276:	d002      	beq.n	800827e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	2209      	movs	r2, #9
 800827c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800827e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008282:	221a      	movs	r2, #26
 8008284:	fb02 f303 	mul.w	r3, r2, r3
 8008288:	3308      	adds	r3, #8
 800828a:	6a3a      	ldr	r2, [r7, #32]
 800828c:	4413      	add	r3, r2
 800828e:	3302      	adds	r3, #2
 8008290:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008294:	69f8      	ldr	r0, [r7, #28]
 8008296:	f000 f87e 	bl	8008396 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082a4:	e043      	b.n	800832e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082a6:	f107 0316 	add.w	r3, r7, #22
 80082aa:	4619      	mov	r1, r3
 80082ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ae:	f000 f9c2 	bl	8008636 <USBH_GetNextDesc>
 80082b2:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b05      	cmp	r3, #5
 80082ba:	d138      	bne.n	800832e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	795b      	ldrb	r3, [r3, #5]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d113      	bne.n	80082ec <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d003      	beq.n	80082d4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	799b      	ldrb	r3, [r3, #6]
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d10b      	bne.n	80082ec <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	79db      	ldrb	r3, [r3, #7]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10b      	bne.n	80082f4 <USBH_ParseCfgDesc+0x150>
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d007      	beq.n	80082f4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	2209      	movs	r2, #9
 80082e8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082ea:	e003      	b.n	80082f4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	2207      	movs	r2, #7
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	e000      	b.n	80082f6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082f4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082fe:	3201      	adds	r2, #1
 8008300:	00d2      	lsls	r2, r2, #3
 8008302:	211a      	movs	r1, #26
 8008304:	fb01 f303 	mul.w	r3, r1, r3
 8008308:	4413      	add	r3, r2
 800830a:	3308      	adds	r3, #8
 800830c:	6a3a      	ldr	r2, [r7, #32]
 800830e:	4413      	add	r3, r2
 8008310:	3304      	adds	r3, #4
 8008312:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008316:	69b9      	ldr	r1, [r7, #24]
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 f870 	bl	80083fe <USBH_ParseEPDesc>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008328:	3301      	adds	r3, #1
 800832a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	791b      	ldrb	r3, [r3, #4]
 8008332:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008336:	429a      	cmp	r2, r3
 8008338:	d204      	bcs.n	8008344 <USBH_ParseCfgDesc+0x1a0>
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	885a      	ldrh	r2, [r3, #2]
 800833e:	8afb      	ldrh	r3, [r7, #22]
 8008340:	429a      	cmp	r2, r3
 8008342:	d8b0      	bhi.n	80082a6 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	791b      	ldrb	r3, [r3, #4]
 8008348:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800834c:	429a      	cmp	r2, r3
 800834e:	d201      	bcs.n	8008354 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008350:	2303      	movs	r3, #3
 8008352:	e01c      	b.n	800838e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008358:	3301      	adds	r3, #1
 800835a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800835e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008362:	2b01      	cmp	r3, #1
 8008364:	d805      	bhi.n	8008372 <USBH_ParseCfgDesc+0x1ce>
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	885a      	ldrh	r2, [r3, #2]
 800836a:	8afb      	ldrh	r3, [r7, #22]
 800836c:	429a      	cmp	r2, r3
 800836e:	f63f af74 	bhi.w	800825a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	791b      	ldrb	r3, [r3, #4]
 8008376:	2b02      	cmp	r3, #2
 8008378:	bf28      	it	cs
 800837a:	2302      	movcs	r3, #2
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008382:	429a      	cmp	r2, r3
 8008384:	d201      	bcs.n	800838a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008386:	2303      	movs	r3, #3
 8008388:	e001      	b.n	800838e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800838a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800838e:	4618      	mov	r0, r3
 8008390:	3730      	adds	r7, #48	; 0x30
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781a      	ldrb	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	785a      	ldrb	r2, [r3, #1]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	789a      	ldrb	r2, [r3, #2]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	78da      	ldrb	r2, [r3, #3]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	3304      	adds	r3, #4
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	bf28      	it	cs
 80083ca:	2302      	movcs	r3, #2
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	795a      	ldrb	r2, [r3, #5]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	799a      	ldrb	r2, [r3, #6]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	79da      	ldrb	r2, [r3, #7]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	7a1a      	ldrb	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	721a      	strb	r2, [r3, #8]
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80083fe:	b480      	push	{r7}
 8008400:	b087      	sub	sp, #28
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	785a      	ldrb	r2, [r3, #1]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	789a      	ldrb	r2, [r3, #2]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	78da      	ldrb	r2, [r3, #3]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3304      	adds	r3, #4
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3305      	adds	r3, #5
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	021b      	lsls	r3, r3, #8
 8008440:	b29b      	uxth	r3, r3
 8008442:	4313      	orrs	r3, r2
 8008444:	b29a      	uxth	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	799a      	ldrb	r2, [r3, #6]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	889b      	ldrh	r3, [r3, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800845e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008462:	d804      	bhi.n	800846e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800846c:	d901      	bls.n	8008472 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800846e:	2303      	movs	r3, #3
 8008470:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008478:	2b00      	cmp	r3, #0
 800847a:	d136      	bne.n	80084ea <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	78db      	ldrb	r3, [r3, #3]
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d108      	bne.n	800849a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	889b      	ldrh	r3, [r3, #4]
 800848c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008490:	f240 8097 	bls.w	80085c2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008494:	2303      	movs	r3, #3
 8008496:	75fb      	strb	r3, [r7, #23]
 8008498:	e093      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	78db      	ldrb	r3, [r3, #3]
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d107      	bne.n	80084b6 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	889b      	ldrh	r3, [r3, #4]
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	f240 8089 	bls.w	80085c2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084b0:	2303      	movs	r3, #3
 80084b2:	75fb      	strb	r3, [r7, #23]
 80084b4:	e085      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	78db      	ldrb	r3, [r3, #3]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d005      	beq.n	80084ce <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	78db      	ldrb	r3, [r3, #3]
 80084c6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d10a      	bne.n	80084e4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	799b      	ldrb	r3, [r3, #6]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <USBH_ParseEPDesc+0xe0>
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	799b      	ldrb	r3, [r3, #6]
 80084da:	2b10      	cmp	r3, #16
 80084dc:	d970      	bls.n	80085c0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80084de:	2303      	movs	r3, #3
 80084e0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084e2:	e06d      	b.n	80085c0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084e4:	2303      	movs	r3, #3
 80084e6:	75fb      	strb	r3, [r7, #23]
 80084e8:	e06b      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d13c      	bne.n	800856e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	78db      	ldrb	r3, [r3, #3]
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d005      	beq.n	800850c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	78db      	ldrb	r3, [r3, #3]
 8008504:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008508:	2b00      	cmp	r3, #0
 800850a:	d106      	bne.n	800851a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	889b      	ldrh	r3, [r3, #4]
 8008510:	2b40      	cmp	r3, #64	; 0x40
 8008512:	d956      	bls.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008518:	e053      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	78db      	ldrb	r3, [r3, #3]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b01      	cmp	r3, #1
 8008524:	d10e      	bne.n	8008544 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	799b      	ldrb	r3, [r3, #6]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008532:	2b10      	cmp	r3, #16
 8008534:	d803      	bhi.n	800853e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d941      	bls.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800853e:	2303      	movs	r3, #3
 8008540:	75fb      	strb	r3, [r7, #23]
 8008542:	e03e      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	78db      	ldrb	r3, [r3, #3]
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	2b03      	cmp	r3, #3
 800854e:	d10b      	bne.n	8008568 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	799b      	ldrb	r3, [r3, #6]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <USBH_ParseEPDesc+0x164>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	889b      	ldrh	r3, [r3, #4]
 800855c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008560:	d32f      	bcc.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008562:	2303      	movs	r3, #3
 8008564:	75fb      	strb	r3, [r7, #23]
 8008566:	e02c      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008568:	2303      	movs	r3, #3
 800856a:	75fb      	strb	r3, [r7, #23]
 800856c:	e029      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008574:	2b02      	cmp	r3, #2
 8008576:	d120      	bne.n	80085ba <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	78db      	ldrb	r3, [r3, #3]
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	889b      	ldrh	r3, [r3, #4]
 8008588:	2b08      	cmp	r3, #8
 800858a:	d01a      	beq.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800858c:	2303      	movs	r3, #3
 800858e:	75fb      	strb	r3, [r7, #23]
 8008590:	e017      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	78db      	ldrb	r3, [r3, #3]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b03      	cmp	r3, #3
 800859c:	d10a      	bne.n	80085b4 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	799b      	ldrb	r3, [r3, #6]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <USBH_ParseEPDesc+0x1b0>
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	889b      	ldrh	r3, [r3, #4]
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d909      	bls.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80085ae:	2303      	movs	r3, #3
 80085b0:	75fb      	strb	r3, [r7, #23]
 80085b2:	e006      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80085b4:	2303      	movs	r3, #3
 80085b6:	75fb      	strb	r3, [r7, #23]
 80085b8:	e003      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80085ba:	2303      	movs	r3, #3
 80085bc:	75fb      	strb	r3, [r7, #23]
 80085be:	e000      	b.n	80085c2 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085c0:	bf00      	nop
  }

  return status;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	371c      	adds	r7, #28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d120      	bne.n	800862a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	1e9a      	subs	r2, r3, #2
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	4293      	cmp	r3, r2
 80085f2:	bf28      	it	cs
 80085f4:	4613      	movcs	r3, r2
 80085f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3302      	adds	r3, #2
 80085fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085fe:	2300      	movs	r3, #0
 8008600:	82fb      	strh	r3, [r7, #22]
 8008602:	e00b      	b.n	800861c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008604:	8afb      	ldrh	r3, [r7, #22]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4413      	add	r3, r2
 800860a:	781a      	ldrb	r2, [r3, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	3301      	adds	r3, #1
 8008614:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008616:	8afb      	ldrh	r3, [r7, #22]
 8008618:	3302      	adds	r3, #2
 800861a:	82fb      	strh	r3, [r7, #22]
 800861c:	8afa      	ldrh	r2, [r7, #22]
 800861e:	8abb      	ldrh	r3, [r7, #20]
 8008620:	429a      	cmp	r2, r3
 8008622:	d3ef      	bcc.n	8008604 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
  }
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	881a      	ldrh	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	4413      	add	r3, r2
 800864c:	b29a      	uxth	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4413      	add	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800865e:	68fb      	ldr	r3, [r7, #12]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800867a:	2301      	movs	r3, #1
 800867c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	789b      	ldrb	r3, [r3, #2]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d002      	beq.n	800868c <USBH_CtlReq+0x20>
 8008686:	2b02      	cmp	r3, #2
 8008688:	d01d      	beq.n	80086c6 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800868a:	e043      	b.n	8008714 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	88fa      	ldrh	r2, [r7, #6]
 8008696:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2202      	movs	r2, #2
 80086a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2203      	movs	r2, #3
 80086ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086bc:	2200      	movs	r2, #0
 80086be:	4619      	mov	r1, r3
 80086c0:	f000 fd5c 	bl	800917c <osMessagePut>
      break;
 80086c4:	e026      	b.n	8008714 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 f82a 	bl	8008720 <USBH_HandleControl>
 80086cc:	4603      	mov	r3, r0
 80086ce:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <USBH_CtlReq+0x70>
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d106      	bne.n	80086ea <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	761a      	strb	r2, [r3, #24]
 80086e8:	e005      	b.n	80086f6 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d102      	bne.n	80086f6 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2203      	movs	r2, #3
 80086fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800870a:	2200      	movs	r2, #0
 800870c:	4619      	mov	r1, r3
 800870e:	f000 fd35 	bl	800917c <osMessagePut>
      break;
 8008712:	bf00      	nop
  }
  return status;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af02      	add	r7, sp, #8
 8008726:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008728:	2301      	movs	r3, #1
 800872a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800872c:	2300      	movs	r3, #0
 800872e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	7e1b      	ldrb	r3, [r3, #24]
 8008734:	3b01      	subs	r3, #1
 8008736:	2b0a      	cmp	r3, #10
 8008738:	f200 8229 	bhi.w	8008b8e <USBH_HandleControl+0x46e>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USBH_HandleControl+0x24>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008771 	.word	0x08008771
 8008748:	0800878b 	.word	0x0800878b
 800874c:	0800882d 	.word	0x0800882d
 8008750:	08008853 	.word	0x08008853
 8008754:	080088df 	.word	0x080088df
 8008758:	08008909 	.word	0x08008909
 800875c:	080089cb 	.word	0x080089cb
 8008760:	080089ed 	.word	0x080089ed
 8008764:	08008a7f 	.word	0x08008a7f
 8008768:	08008aa5 	.word	0x08008aa5
 800876c:	08008b37 	.word	0x08008b37
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f103 0110 	add.w	r1, r3, #16
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	795b      	ldrb	r3, [r3, #5]
 800877a:	461a      	mov	r2, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fa17 	bl	8008bb0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	761a      	strb	r2, [r3, #24]
      break;
 8008788:	e20c      	b.n	8008ba4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	795b      	ldrb	r3, [r3, #5]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f003 fca7 	bl	800c0e4 <USBH_LL_GetURBState>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d12c      	bne.n	80087fa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7c1b      	ldrb	r3, [r3, #16]
 80087a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	8adb      	ldrh	r3, [r3, #22]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087b2:	7b7b      	ldrb	r3, [r7, #13]
 80087b4:	2b80      	cmp	r3, #128	; 0x80
 80087b6:	d103      	bne.n	80087c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2203      	movs	r2, #3
 80087bc:	761a      	strb	r2, [r3, #24]
 80087be:	e00d      	b.n	80087dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2205      	movs	r2, #5
 80087c4:	761a      	strb	r2, [r3, #24]
 80087c6:	e009      	b.n	80087dc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80087c8:	7b7b      	ldrb	r3, [r7, #13]
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d103      	bne.n	80087d6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2209      	movs	r2, #9
 80087d2:	761a      	strb	r2, [r3, #24]
 80087d4:	e002      	b.n	80087dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2207      	movs	r2, #7
 80087da:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2203      	movs	r2, #3
 80087e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087f0:	2200      	movs	r2, #0
 80087f2:	4619      	mov	r1, r3
 80087f4:	f000 fcc2 	bl	800917c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087f8:	e1cb      	b.n	8008b92 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d003      	beq.n	8008808 <USBH_HandleControl+0xe8>
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b02      	cmp	r3, #2
 8008804:	f040 81c5 	bne.w	8008b92 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	220b      	movs	r2, #11
 800880c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2203      	movs	r2, #3
 8008812:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008822:	2200      	movs	r2, #0
 8008824:	4619      	mov	r1, r3
 8008826:	f000 fca9 	bl	800917c <osMessagePut>
      break;
 800882a:	e1b2      	b.n	8008b92 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6899      	ldr	r1, [r3, #8]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	899a      	ldrh	r2, [r3, #12]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	791b      	ldrb	r3, [r3, #4]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f9f2 	bl	8008c2e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2204      	movs	r2, #4
 800884e:	761a      	strb	r2, [r3, #24]
      break;
 8008850:	e1a8      	b.n	8008ba4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	791b      	ldrb	r3, [r3, #4]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f003 fc43 	bl	800c0e4 <USBH_LL_GetURBState>
 800885e:	4603      	mov	r3, r0
 8008860:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d110      	bne.n	800888a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2209      	movs	r2, #9
 800886c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2203      	movs	r2, #3
 8008872:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008882:	2200      	movs	r2, #0
 8008884:	4619      	mov	r1, r3
 8008886:	f000 fc79 	bl	800917c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b05      	cmp	r3, #5
 800888e:	d110      	bne.n	80088b2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008890:	2303      	movs	r3, #3
 8008892:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2203      	movs	r2, #3
 8008898:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088a8:	2200      	movs	r2, #0
 80088aa:	4619      	mov	r1, r3
 80088ac:	f000 fc66 	bl	800917c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088b0:	e171      	b.n	8008b96 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	f040 816e 	bne.w	8008b96 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	220b      	movs	r2, #11
 80088be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2203      	movs	r2, #3
 80088c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088d4:	2200      	movs	r2, #0
 80088d6:	4619      	mov	r1, r3
 80088d8:	f000 fc50 	bl	800917c <osMessagePut>
      break;
 80088dc:	e15b      	b.n	8008b96 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6899      	ldr	r1, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	899a      	ldrh	r2, [r3, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	795b      	ldrb	r3, [r3, #5]
 80088ea:	2001      	movs	r0, #1
 80088ec:	9000      	str	r0, [sp, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f978 	bl	8008be4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2206      	movs	r2, #6
 8008904:	761a      	strb	r2, [r3, #24]
      break;
 8008906:	e14d      	b.n	8008ba4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	795b      	ldrb	r3, [r3, #5]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f003 fbe8 	bl	800c0e4 <USBH_LL_GetURBState>
 8008914:	4603      	mov	r3, r0
 8008916:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d111      	bne.n	8008942 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2207      	movs	r2, #7
 8008922:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2203      	movs	r2, #3
 8008928:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008938:	2200      	movs	r2, #0
 800893a:	4619      	mov	r1, r3
 800893c:	f000 fc1e 	bl	800917c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008940:	e12b      	b.n	8008b9a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b05      	cmp	r3, #5
 8008946:	d113      	bne.n	8008970 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	220c      	movs	r2, #12
 800894c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800894e:	2303      	movs	r3, #3
 8008950:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2203      	movs	r2, #3
 8008956:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008966:	2200      	movs	r2, #0
 8008968:	4619      	mov	r1, r3
 800896a:	f000 fc07 	bl	800917c <osMessagePut>
      break;
 800896e:	e114      	b.n	8008b9a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d111      	bne.n	800899a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2205      	movs	r2, #5
 800897a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2203      	movs	r2, #3
 8008980:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008990:	2200      	movs	r2, #0
 8008992:	4619      	mov	r1, r3
 8008994:	f000 fbf2 	bl	800917c <osMessagePut>
      break;
 8008998:	e0ff      	b.n	8008b9a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b04      	cmp	r3, #4
 800899e:	f040 80fc 	bne.w	8008b9a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	220b      	movs	r2, #11
 80089a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80089a8:	2302      	movs	r3, #2
 80089aa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2203      	movs	r2, #3
 80089b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089c0:	2200      	movs	r2, #0
 80089c2:	4619      	mov	r1, r3
 80089c4:	f000 fbda 	bl	800917c <osMessagePut>
      break;
 80089c8:	e0e7      	b.n	8008b9a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	791b      	ldrb	r3, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	2100      	movs	r1, #0
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f92b 	bl	8008c2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089de:	b29a      	uxth	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2208      	movs	r2, #8
 80089e8:	761a      	strb	r2, [r3, #24]

      break;
 80089ea:	e0db      	b.n	8008ba4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	791b      	ldrb	r3, [r3, #4]
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f003 fb76 	bl	800c0e4 <USBH_LL_GetURBState>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d113      	bne.n	8008a2a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	220d      	movs	r2, #13
 8008a06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2203      	movs	r2, #3
 8008a10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a20:	2200      	movs	r2, #0
 8008a22:	4619      	mov	r1, r3
 8008a24:	f000 fbaa 	bl	800917c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a28:	e0b9      	b.n	8008b9e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d111      	bne.n	8008a54 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	220b      	movs	r2, #11
 8008a34:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2203      	movs	r2, #3
 8008a3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f000 fb95 	bl	800917c <osMessagePut>
      break;
 8008a52:	e0a4      	b.n	8008b9e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	f040 80a1 	bne.w	8008b9e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2203      	movs	r2, #3
 8008a64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a74:	2200      	movs	r2, #0
 8008a76:	4619      	mov	r1, r3
 8008a78:	f000 fb80 	bl	800917c <osMessagePut>
      break;
 8008a7c:	e08f      	b.n	8008b9e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	795b      	ldrb	r3, [r3, #5]
 8008a82:	2201      	movs	r2, #1
 8008a84:	9200      	str	r2, [sp, #0]
 8008a86:	2200      	movs	r2, #0
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f8aa 	bl	8008be4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	220a      	movs	r2, #10
 8008aa0:	761a      	strb	r2, [r3, #24]
      break;
 8008aa2:	e07f      	b.n	8008ba4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	795b      	ldrb	r3, [r3, #5]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f003 fb1a 	bl	800c0e4 <USBH_LL_GetURBState>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d113      	bne.n	8008ae2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	220d      	movs	r2, #13
 8008ac2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4619      	mov	r1, r3
 8008adc:	f000 fb4e 	bl	800917c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ae0:	e05f      	b.n	8008ba2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d111      	bne.n	8008b0c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2209      	movs	r2, #9
 8008aec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2203      	movs	r2, #3
 8008af2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b02:	2200      	movs	r2, #0
 8008b04:	4619      	mov	r1, r3
 8008b06:	f000 fb39 	bl	800917c <osMessagePut>
      break;
 8008b0a:	e04a      	b.n	8008ba2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d147      	bne.n	8008ba2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	220b      	movs	r2, #11
 8008b16:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4619      	mov	r1, r3
 8008b30:	f000 fb24 	bl	800917c <osMessagePut>
      break;
 8008b34:	e035      	b.n	8008ba2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	7e5b      	ldrb	r3, [r3, #25]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	765a      	strb	r2, [r3, #25]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	7e5b      	ldrb	r3, [r3, #25]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d806      	bhi.n	8008b58 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b56:	e025      	b.n	8008ba4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b5e:	2106      	movs	r1, #6
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	795b      	ldrb	r3, [r3, #5]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f90d 	bl	8008d90 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	791b      	ldrb	r3, [r3, #4]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f907 	bl	8008d90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8c:	e00a      	b.n	8008ba4 <USBH_HandleControl+0x484>

    default:
      break;
 8008b8e:	bf00      	nop
 8008b90:	e008      	b.n	8008ba4 <USBH_HandleControl+0x484>
      break;
 8008b92:	bf00      	nop
 8008b94:	e006      	b.n	8008ba4 <USBH_HandleControl+0x484>
      break;
 8008b96:	bf00      	nop
 8008b98:	e004      	b.n	8008ba4 <USBH_HandleControl+0x484>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e002      	b.n	8008ba4 <USBH_HandleControl+0x484>
      break;
 8008b9e:	bf00      	nop
 8008ba0:	e000      	b.n	8008ba4 <USBH_HandleControl+0x484>
      break;
 8008ba2:	bf00      	nop
  }

  return status;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop

08008bb0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af04      	add	r7, sp, #16
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bbe:	79f9      	ldrb	r1, [r7, #7]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f003 fa54 	bl	800c082 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af04      	add	r7, sp, #16
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	80fb      	strh	r3, [r7, #6]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c08:	7979      	ldrb	r1, [r7, #5]
 8008c0a:	7e3b      	ldrb	r3, [r7, #24]
 8008c0c:	9303      	str	r3, [sp, #12]
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	9302      	str	r3, [sp, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	2301      	movs	r3, #1
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f003 fa2f 	bl	800c082 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af04      	add	r7, sp, #16
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	80fb      	strh	r3, [r7, #6]
 8008c40:	4613      	mov	r3, r2
 8008c42:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c44:	7979      	ldrb	r1, [r7, #5]
 8008c46:	2300      	movs	r3, #0
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	2301      	movs	r3, #1
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	2201      	movs	r2, #1
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f003 fa11 	bl	800c082 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c60:	2300      	movs	r3, #0

}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b088      	sub	sp, #32
 8008c6e:	af04      	add	r7, sp, #16
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	4611      	mov	r1, r2
 8008c76:	461a      	mov	r2, r3
 8008c78:	460b      	mov	r3, r1
 8008c7a:	80fb      	strh	r3, [r7, #6]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c8e:	7979      	ldrb	r1, [r7, #5]
 8008c90:	7e3b      	ldrb	r3, [r7, #24]
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f003 f9ec 	bl	800c082 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	80fb      	strh	r3, [r7, #6]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cca:	7979      	ldrb	r1, [r7, #5]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9303      	str	r3, [sp, #12]
 8008cd0:	88fb      	ldrh	r3, [r7, #6]
 8008cd2:	9302      	str	r3, [sp, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	2302      	movs	r3, #2
 8008cde:	2201      	movs	r2, #1
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f003 f9ce 	bl	800c082 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	70fb      	strb	r3, [r7, #3]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70bb      	strb	r3, [r7, #2]
 8008d06:	4613      	mov	r3, r2
 8008d08:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d0a:	7878      	ldrb	r0, [r7, #1]
 8008d0c:	78ba      	ldrb	r2, [r7, #2]
 8008d0e:	78f9      	ldrb	r1, [r7, #3]
 8008d10:	8b3b      	ldrh	r3, [r7, #24]
 8008d12:	9302      	str	r3, [sp, #8]
 8008d14:	7d3b      	ldrb	r3, [r7, #20]
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	7c3b      	ldrb	r3, [r7, #16]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f003 f961 	bl	800bfe6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f003 f980 	bl	800c044 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f836 	bl	8008dcc <USBH_GetFreePipe>
 8008d60:	4603      	mov	r3, r0
 8008d62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00a      	beq.n	8008d84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	89fb      	ldrh	r3, [r7, #14]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	33e0      	adds	r3, #224	; 0xe0
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	b2db      	uxtb	r3, r3
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	2b0f      	cmp	r3, #15
 8008da0:	d80d      	bhi.n	8008dbe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	33e0      	adds	r3, #224	; 0xe0
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	33e0      	adds	r3, #224	; 0xe0
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e00f      	b.n	8008dfe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	33e0      	adds	r3, #224	; 0xe0
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	e007      	b.n	8008e08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b0f      	cmp	r3, #15
 8008e02:	d9ec      	bls.n	8008dde <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e26:	2b84      	cmp	r3, #132	; 0x84
 8008e28:	d005      	beq.n	8008e36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008e2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	3303      	adds	r3, #3
 8008e34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008e36:	68fb      	ldr	r3, [r7, #12]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e4a:	f3ef 8305 	mrs	r3, IPSR
 8008e4e:	607b      	str	r3, [r7, #4]
  return(result);
 8008e50:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bf14      	ite	ne
 8008e56:	2301      	movne	r3, #1
 8008e58:	2300      	moveq	r3, #0
 8008e5a:	b2db      	uxtb	r3, r3
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e6c:	f001 fc8c 	bl	800a788 <vTaskStartScheduler>
  
  return osOK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e78:	b089      	sub	sp, #36	; 0x24
 8008e7a:	af04      	add	r7, sp, #16
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d020      	beq.n	8008eca <osThreadCreate+0x54>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01c      	beq.n	8008eca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685c      	ldr	r4, [r3, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691e      	ldr	r6, [r3, #16]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff ffb6 	bl	8008e14 <makeFreeRtosPriority>
 8008ea8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eb2:	9202      	str	r2, [sp, #8]
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	9100      	str	r1, [sp, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	4632      	mov	r2, r6
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 fa9a 	bl	800a3f8 <xTaskCreateStatic>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e01c      	b.n	8008f04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685c      	ldr	r4, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ed6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff ff98 	bl	8008e14 <makeFreeRtosPriority>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	f107 030c 	add.w	r3, r7, #12
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	9200      	str	r2, [sp, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f001 fadc 	bl	800a4b2 <xTaskCreate>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d001      	beq.n	8008f04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008f00:	2300      	movs	r3, #0
 8008f02:	e000      	b.n	8008f06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008f04:	68fb      	ldr	r3, [r7, #12]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <osDelay+0x16>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	e000      	b.n	8008f26 <osDelay+0x18>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 fbfa 	bl	800a720 <vTaskDelay>
  
  return osOK;
 8008f2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f000 fc7e 	bl	800984e <xQueueCreateMutexStatic>
 8008f52:	4603      	mov	r3, r0
 8008f54:	e003      	b.n	8008f5e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008f56:	2001      	movs	r0, #1
 8008f58:	f000 fc61 	bl	800981e <xQueueCreateMutex>
 8008f5c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <osMutexWait+0x18>
    return osErrorParameter;
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	e03a      	b.n	8008ff6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f8a:	d103      	bne.n	8008f94 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	e009      	b.n	8008fa8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <osMutexWait+0x40>
      ticks = 1;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008fa8:	f7ff ff4c 	bl	8008e44 <inHandlerMode>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d017      	beq.n	8008fe2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008fb2:	f107 0308 	add.w	r3, r7, #8
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 f874 	bl	800a0a8 <xQueueReceiveFromISR>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d001      	beq.n	8008fca <osMutexWait+0x62>
      return osErrorOS;
 8008fc6:	23ff      	movs	r3, #255	; 0xff
 8008fc8:	e015      	b.n	8008ff6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d011      	beq.n	8008ff4 <osMutexWait+0x8c>
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <osMutexWait+0x98>)
 8008fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	e008      	b.n	8008ff4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 ff53 	bl	8009e90 <xQueueSemaphoreTake>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d001      	beq.n	8008ff4 <osMutexWait+0x8c>
    return osErrorOS;
 8008ff0:	23ff      	movs	r3, #255	; 0xff
 8008ff2:	e000      	b.n	8008ff6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009014:	f7ff ff16 	bl	8008e44 <inHandlerMode>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d016      	beq.n	800904c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800901e:	f107 0308 	add.w	r3, r7, #8
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fdc6 	bl	8009bb6 <xQueueGiveFromISR>
 800902a:	4603      	mov	r3, r0
 800902c:	2b01      	cmp	r3, #1
 800902e:	d001      	beq.n	8009034 <osMutexRelease+0x30>
      return osErrorOS;
 8009030:	23ff      	movs	r3, #255	; 0xff
 8009032:	e017      	b.n	8009064 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d013      	beq.n	8009062 <osMutexRelease+0x5e>
 800903a:	4b0c      	ldr	r3, [pc, #48]	; (800906c <osMutexRelease+0x68>)
 800903c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	e00a      	b.n	8009062 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800904c:	2300      	movs	r3, #0
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fc16 	bl	8009884 <xQueueGenericSend>
 8009058:	4603      	mov	r3, r0
 800905a:	2b01      	cmp	r3, #1
 800905c:	d001      	beq.n	8009062 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800905e:	23ff      	movs	r3, #255	; 0xff
 8009060:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009062:	68fb      	ldr	r3, [r7, #12]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	e000ed04 	.word	0xe000ed04

08009070 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	3303      	adds	r3, #3
 800907e:	f023 0303 	bic.w	r3, r3, #3
 8009082:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8009084:	2014      	movs	r0, #20
 8009086:	f002 fbef 	bl	800b868 <pvPortMalloc>
 800908a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d046      	beq.n	8009120 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2200      	movs	r2, #0
 80090a4:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 fbdc 	bl	800b868 <pvPortMalloc>
 80090b0:	4602      	mov	r2, r0
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d02b      	beq.n	8009116 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	fb02 f303 	mul.w	r3, r2, r3
 80090c8:	4618      	mov	r0, r3
 80090ca:	f002 fbcd 	bl	800b868 <pvPortMalloc>
 80090ce:	4602      	mov	r2, r0
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d011      	beq.n	8009100 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	e008      	b.n	80090f4 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	4413      	add	r3, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	3301      	adds	r3, #1
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d3f1      	bcc.n	80090e2 <osPoolCreate+0x72>
 80090fe:	e00f      	b.n	8009120 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4618      	mov	r0, r3
 8009106:	f002 fc7b 	bl	800ba00 <vPortFree>
        vPortFree(thePool);
 800910a:	6978      	ldr	r0, [r7, #20]
 800910c:	f002 fc78 	bl	800ba00 <vPortFree>
        thePool = NULL;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	e004      	b.n	8009120 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f002 fc72 	bl	800ba00 <vPortFree>
      thePool = NULL;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8009120:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800912a:	b590      	push	{r4, r7, lr}
 800912c:	b085      	sub	sp, #20
 800912e:	af02      	add	r7, sp, #8
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d011      	beq.n	8009160 <osMessageCreate+0x36>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00d      	beq.n	8009160 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6859      	ldr	r1, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	2400      	movs	r4, #0
 8009156:	9400      	str	r4, [sp, #0]
 8009158:	f000 fa76 	bl	8009648 <xQueueGenericCreateStatic>
 800915c:	4603      	mov	r3, r0
 800915e:	e008      	b.n	8009172 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	f000 fae4 	bl	8009738 <xQueueGenericCreate>
 8009170:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	bd90      	pop	{r4, r7, pc}
	...

0800917c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009188:	2300      	movs	r3, #0
 800918a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <osMessagePut+0x1e>
    ticks = 1;
 8009196:	2301      	movs	r3, #1
 8009198:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800919a:	f7ff fe53 	bl	8008e44 <inHandlerMode>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d018      	beq.n	80091d6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80091a4:	f107 0210 	add.w	r2, r7, #16
 80091a8:	f107 0108 	add.w	r1, r7, #8
 80091ac:	2300      	movs	r3, #0
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 fc66 	bl	8009a80 <xQueueGenericSendFromISR>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d001      	beq.n	80091be <osMessagePut+0x42>
      return osErrorOS;
 80091ba:	23ff      	movs	r3, #255	; 0xff
 80091bc:	e018      	b.n	80091f0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d014      	beq.n	80091ee <osMessagePut+0x72>
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <osMessagePut+0x7c>)
 80091c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	e00b      	b.n	80091ee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80091d6:	f107 0108 	add.w	r1, r7, #8
 80091da:	2300      	movs	r3, #0
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 fb50 	bl	8009884 <xQueueGenericSend>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d001      	beq.n	80091ee <osMessagePut+0x72>
      return osErrorOS;
 80091ea:	23ff      	movs	r3, #255	; 0xff
 80091ec:	e000      	b.n	80091f0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80091fc:	b590      	push	{r4, r7, lr}
 80091fe:	b08b      	sub	sp, #44	; 0x2c
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10a      	bne.n	800922c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009216:	2380      	movs	r3, #128	; 0x80
 8009218:	617b      	str	r3, [r7, #20]
    return event;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	461c      	mov	r4, r3
 800921e:	f107 0314 	add.w	r3, r7, #20
 8009222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800922a:	e054      	b.n	80092d6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800922c:	2300      	movs	r3, #0
 800922e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800923a:	d103      	bne.n	8009244 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800923c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
 8009242:	e009      	b.n	8009258 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d006      	beq.n	8009258 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <osMessageGet+0x5c>
      ticks = 1;
 8009254:	2301      	movs	r3, #1
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009258:	f7ff fdf4 	bl	8008e44 <inHandlerMode>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01c      	beq.n	800929c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009262:	f107 0220 	add.w	r2, r7, #32
 8009266:	f107 0314 	add.w	r3, r7, #20
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	68b8      	ldr	r0, [r7, #8]
 8009270:	f000 ff1a 	bl	800a0a8 <xQueueReceiveFromISR>
 8009274:	4603      	mov	r3, r0
 8009276:	2b01      	cmp	r3, #1
 8009278:	d102      	bne.n	8009280 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800927a:	2310      	movs	r3, #16
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	e001      	b.n	8009284 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009280:	2300      	movs	r3, #0
 8009282:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d01d      	beq.n	80092c6 <osMessageGet+0xca>
 800928a:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <osMessageGet+0xe4>)
 800928c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	e014      	b.n	80092c6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800929c:	f107 0314 	add.w	r3, r7, #20
 80092a0:	3304      	adds	r3, #4
 80092a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a4:	4619      	mov	r1, r3
 80092a6:	68b8      	ldr	r0, [r7, #8]
 80092a8:	f000 fd12 	bl	8009cd0 <xQueueReceive>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d102      	bne.n	80092b8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80092b2:	2310      	movs	r3, #16
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	e006      	b.n	80092c6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <osMessageGet+0xc6>
 80092be:	2300      	movs	r3, #0
 80092c0:	e000      	b.n	80092c4 <osMessageGet+0xc8>
 80092c2:	2340      	movs	r3, #64	; 0x40
 80092c4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	461c      	mov	r4, r3
 80092ca:	f107 0314 	add.w	r3, r7, #20
 80092ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	372c      	adds	r7, #44	; 0x2c
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd90      	pop	{r4, r7, pc}
 80092de:	bf00      	nop
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80092e4:	b590      	push	{r4, r7, lr}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689c      	ldr	r4, [r3, #8]
 8009302:	200c      	movs	r0, #12
 8009304:	f002 fab0 	bl	800b868 <pvPortMalloc>
 8009308:	4603      	mov	r3, r0
 800930a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <osMailCreate+0x36>
    return NULL;
 8009316:	2300      	movs	r3, #0
 8009318:	e038      	b.n	800938c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	681c      	ldr	r4, [r3, #0]
 800932e:	2200      	movs	r2, #0
 8009330:	2104      	movs	r1, #4
 8009332:	f000 fa01 	bl	8009738 <xQueueGenericCreate>
 8009336:	4603      	mov	r3, r0
 8009338:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d107      	bne.n	8009356 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f002 fb57 	bl	800ba00 <vPortFree>
    return NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	e01a      	b.n	800938c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	681c      	ldr	r4, [r3, #0]
 800935c:	f107 030c 	add.w	r3, r7, #12
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff fe85 	bl	8009070 <osPoolCreate>
 8009366:	4603      	mov	r3, r0
 8009368:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d107      	bne.n	8009386 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4618      	mov	r0, r3
 800937e:	f002 fb3f 	bl	800ba00 <vPortFree>
    return NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	e002      	b.n	800938c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800938c:	4618      	mov	r0, r3
 800938e:	371c      	adds	r7, #28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd90      	pop	{r4, r7, pc}

08009394 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <osMailPut+0x14>
    return osErrorParameter;
 80093a4:	2380      	movs	r3, #128	; 0x80
 80093a6:	e02c      	b.n	8009402 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80093ac:	f7ff fd4a 	bl	8008e44 <inHandlerMode>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d018      	beq.n	80093e8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6858      	ldr	r0, [r3, #4]
 80093ba:	f107 020c 	add.w	r2, r7, #12
 80093be:	4639      	mov	r1, r7
 80093c0:	2300      	movs	r3, #0
 80093c2:	f000 fb5d 	bl	8009a80 <xQueueGenericSendFromISR>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d001      	beq.n	80093d0 <osMailPut+0x3c>
      return osErrorOS;
 80093cc:	23ff      	movs	r3, #255	; 0xff
 80093ce:	e018      	b.n	8009402 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d014      	beq.n	8009400 <osMailPut+0x6c>
 80093d6:	4b0d      	ldr	r3, [pc, #52]	; (800940c <osMailPut+0x78>)
 80093d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	e00b      	b.n	8009400 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6858      	ldr	r0, [r3, #4]
 80093ec:	4639      	mov	r1, r7
 80093ee:	2300      	movs	r3, #0
 80093f0:	2200      	movs	r2, #0
 80093f2:	f000 fa47 	bl	8009884 <xQueueGenericSend>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d001      	beq.n	8009400 <osMailPut+0x6c>
      return osErrorOS;
 80093fc:	23ff      	movs	r3, #255	; 0xff
 80093fe:	e000      	b.n	8009402 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f103 0208 	add.w	r2, r3, #8
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f103 0208 	add.w	r2, r3, #8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f103 0208 	add.w	r2, r3, #8
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800946a:	b480      	push	{r7}
 800946c:	b085      	sub	sp, #20
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094b2:	b480      	push	{r7}
 80094b4:	b085      	sub	sp, #20
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094c8:	d103      	bne.n	80094d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e00c      	b.n	80094ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3308      	adds	r3, #8
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	e002      	b.n	80094e0 <vListInsert+0x2e>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d2f6      	bcs.n	80094da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	601a      	str	r2, [r3, #0]
}
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	6892      	ldr	r2, [r2, #8]
 800953a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6852      	ldr	r2, [r2, #4]
 8009544:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d103      	bne.n	8009558 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	1e5a      	subs	r2, r3, #1
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095a2:	f002 f83f 	bl	800b624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	441a      	add	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d2:	3b01      	subs	r3, #1
 80095d4:	68f9      	ldr	r1, [r7, #12]
 80095d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	22ff      	movs	r2, #255	; 0xff
 80095e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	22ff      	movs	r2, #255	; 0xff
 80095ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d114      	bne.n	8009622 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01a      	beq.n	8009636 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3310      	adds	r3, #16
 8009604:	4618      	mov	r0, r3
 8009606:	f001 fb01 	bl	800ac0c <xTaskRemoveFromEventList>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d012      	beq.n	8009636 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <xQueueGenericReset+0xcc>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	e009      	b.n	8009636 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3310      	adds	r3, #16
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fef2 	bl	8009410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3324      	adds	r3, #36	; 0x24
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff feed 	bl	8009410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009636:	f002 f825 	bl	800b684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800963a:	2301      	movs	r3, #1
}
 800963c:	4618      	mov	r0, r3
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08e      	sub	sp, #56	; 0x38
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800966e:	bf00      	nop
 8009670:	e7fe      	b.n	8009670 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10a      	bne.n	800968e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
}
 800968a:	bf00      	nop
 800968c:	e7fe      	b.n	800968c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <xQueueGenericCreateStatic+0x52>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <xQueueGenericCreateStatic+0x56>
 800969a:	2301      	movs	r3, #1
 800969c:	e000      	b.n	80096a0 <xQueueGenericCreateStatic+0x58>
 800969e:	2300      	movs	r3, #0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	623b      	str	r3, [r7, #32]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <xQueueGenericCreateStatic+0x7e>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <xQueueGenericCreateStatic+0x82>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <xQueueGenericCreateStatic+0x84>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	61fb      	str	r3, [r7, #28]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096e6:	2348      	movs	r3, #72	; 0x48
 80096e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2b48      	cmp	r3, #72	; 0x48
 80096ee:	d00a      	beq.n	8009706 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	61bb      	str	r3, [r7, #24]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009706:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00d      	beq.n	800972e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800971a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4613      	mov	r3, r2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 f83f 	bl	80097ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009730:	4618      	mov	r0, r3
 8009732:	3730      	adds	r7, #48	; 0x30
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	; 0x28
 800973c:	af02      	add	r7, sp, #8
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4613      	mov	r3, r2
 8009744:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xQueueGenericCreate+0x2a>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	613b      	str	r3, [r7, #16]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	fb02 f303 	mul.w	r3, r2, r3
 800976a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	3348      	adds	r3, #72	; 0x48
 8009770:	4618      	mov	r0, r3
 8009772:	f002 f879 	bl	800b868 <pvPortMalloc>
 8009776:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d011      	beq.n	80097a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	3348      	adds	r3, #72	; 0x48
 8009786:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009790:	79fa      	ldrb	r2, [r7, #7]
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	4613      	mov	r3, r2
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f805 	bl	80097ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097a2:	69bb      	ldr	r3, [r7, #24]
	}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d103      	bne.n	80097c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	e002      	b.n	80097ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097da:	2101      	movs	r1, #1
 80097dc:	69b8      	ldr	r0, [r7, #24]
 80097de:	f7ff fecb 	bl	8009578 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00e      	beq.n	8009816 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800980a:	2300      	movs	r3, #0
 800980c:	2200      	movs	r2, #0
 800980e:	2100      	movs	r1, #0
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f837 	bl	8009884 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800981e:	b580      	push	{r7, lr}
 8009820:	b086      	sub	sp, #24
 8009822:	af00      	add	r7, sp, #0
 8009824:	4603      	mov	r3, r0
 8009826:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009828:	2301      	movs	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	2300      	movs	r3, #0
 800982e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	461a      	mov	r2, r3
 8009834:	6939      	ldr	r1, [r7, #16]
 8009836:	6978      	ldr	r0, [r7, #20]
 8009838:	f7ff ff7e 	bl	8009738 <xQueueGenericCreate>
 800983c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff ffd3 	bl	80097ea <prvInitialiseMutex>

		return xNewQueue;
 8009844:	68fb      	ldr	r3, [r7, #12]
	}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800984e:	b580      	push	{r7, lr}
 8009850:	b088      	sub	sp, #32
 8009852:	af02      	add	r7, sp, #8
 8009854:	4603      	mov	r3, r0
 8009856:	6039      	str	r1, [r7, #0]
 8009858:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800985a:	2301      	movs	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	2300      	movs	r3, #0
 8009860:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2200      	movs	r2, #0
 800986a:	6939      	ldr	r1, [r7, #16]
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	f7ff feeb 	bl	8009648 <xQueueGenericCreateStatic>
 8009872:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f7ff ffb8 	bl	80097ea <prvInitialiseMutex>

		return xNewQueue;
 800987a:	68fb      	ldr	r3, [r7, #12]
	}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08e      	sub	sp, #56	; 0x38
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009892:	2300      	movs	r3, #0
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <xQueueGenericSend+0x32>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <xQueueGenericSend+0x40>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <xQueueGenericSend+0x44>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e000      	b.n	80098ca <xQueueGenericSend+0x46>
 80098c8:	2300      	movs	r3, #0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xQueueGenericSend+0x60>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d103      	bne.n	80098f2 <xQueueGenericSend+0x6e>
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <xQueueGenericSend+0x72>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <xQueueGenericSend+0x74>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <xQueueGenericSend+0x8e>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	623b      	str	r3, [r7, #32]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009912:	f001 fb37 	bl	800af84 <xTaskGetSchedulerState>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <xQueueGenericSend+0x9e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <xQueueGenericSend+0xa2>
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <xQueueGenericSend+0xa4>
 8009926:	2300      	movs	r3, #0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <xQueueGenericSend+0xbe>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	61fb      	str	r3, [r7, #28]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009942:	f001 fe6f 	bl	800b624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994e:	429a      	cmp	r2, r3
 8009950:	d302      	bcc.n	8009958 <xQueueGenericSend+0xd4>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d129      	bne.n	80099ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800995e:	f000 fc3b 	bl	800a1d8 <prvCopyDataToQueue>
 8009962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	2b00      	cmp	r3, #0
 800996a:	d010      	beq.n	800998e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996e:	3324      	adds	r3, #36	; 0x24
 8009970:	4618      	mov	r0, r3
 8009972:	f001 f94b 	bl	800ac0c <xTaskRemoveFromEventList>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d013      	beq.n	80099a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800997c:	4b3f      	ldr	r3, [pc, #252]	; (8009a7c <xQueueGenericSend+0x1f8>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	e00a      	b.n	80099a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d007      	beq.n	80099a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009994:	4b39      	ldr	r3, [pc, #228]	; (8009a7c <xQueueGenericSend+0x1f8>)
 8009996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80099a4:	f001 fe6e 	bl	800b684 <vPortExitCritical>
				return pdPASS;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e063      	b.n	8009a74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099b2:	f001 fe67 	bl	800b684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e05c      	b.n	8009a74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099c0:	f107 0314 	add.w	r3, r7, #20
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 f983 	bl	800acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099ca:	2301      	movs	r3, #1
 80099cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099ce:	f001 fe59 	bl	800b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099d2:	f000 ff39 	bl	800a848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099d6:	f001 fe25 	bl	800b624 <vPortEnterCritical>
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e0:	b25b      	sxtb	r3, r3
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e6:	d103      	bne.n	80099f0 <xQueueGenericSend+0x16c>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099fc:	d103      	bne.n	8009a06 <xQueueGenericSend+0x182>
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a06:	f001 fe3d 	bl	800b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a0a:	1d3a      	adds	r2, r7, #4
 8009a0c:	f107 0314 	add.w	r3, r7, #20
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 f972 	bl	800acfc <xTaskCheckForTimeOut>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d124      	bne.n	8009a68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a20:	f000 fcd2 	bl	800a3c8 <prvIsQueueFull>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d018      	beq.n	8009a5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	3310      	adds	r3, #16
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f001 f8c6 	bl	800abc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a3a:	f000 fc5d 	bl	800a2f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a3e:	f000 ff11 	bl	800a864 <xTaskResumeAll>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f47f af7c 	bne.w	8009942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <xQueueGenericSend+0x1f8>)
 8009a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	e772      	b.n	8009942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a5e:	f000 fc4b 	bl	800a2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a62:	f000 feff 	bl	800a864 <xTaskResumeAll>
 8009a66:	e76c      	b.n	8009942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a6a:	f000 fc45 	bl	800a2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a6e:	f000 fef9 	bl	800a864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3738      	adds	r7, #56	; 0x38
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	e000ed04 	.word	0xe000ed04

08009a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b090      	sub	sp, #64	; 0x40
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009aaa:	bf00      	nop
 8009aac:	e7fe      	b.n	8009aac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d103      	bne.n	8009abc <xQueueGenericSendFromISR+0x3c>
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <xQueueGenericSendFromISR+0x40>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e000      	b.n	8009ac2 <xQueueGenericSendFromISR+0x42>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10a      	bne.n	8009adc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ad8:	bf00      	nop
 8009ada:	e7fe      	b.n	8009ada <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d103      	bne.n	8009aea <xQueueGenericSendFromISR+0x6a>
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <xQueueGenericSendFromISR+0x6e>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <xQueueGenericSendFromISR+0x70>
 8009aee:	2300      	movs	r3, #0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10a      	bne.n	8009b0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	623b      	str	r3, [r7, #32]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b0a:	f001 fe6d 	bl	800b7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	61fa      	str	r2, [r7, #28]
 8009b24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d302      	bcc.n	8009b3c <xQueueGenericSendFromISR+0xbc>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d12f      	bne.n	8009b9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b52:	f000 fb41 	bl	800a1d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b5e:	d112      	bne.n	8009b86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d016      	beq.n	8009b96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6a:	3324      	adds	r3, #36	; 0x24
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f001 f84d 	bl	800ac0c <xTaskRemoveFromEventList>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00e      	beq.n	8009b96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00b      	beq.n	8009b96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e007      	b.n	8009b96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	b25a      	sxtb	r2, r3
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b96:	2301      	movs	r3, #1
 8009b98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009b9a:	e001      	b.n	8009ba0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009baa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3740      	adds	r7, #64	; 0x40
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b08e      	sub	sp, #56	; 0x38
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	623b      	str	r3, [r7, #32]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <xQueueGiveFromISR+0x48>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	61fb      	str	r3, [r7, #28]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d103      	bne.n	8009c0e <xQueueGiveFromISR+0x58>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <xQueueGiveFromISR+0x5c>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <xQueueGiveFromISR+0x5e>
 8009c12:	2300      	movs	r3, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	61bb      	str	r3, [r7, #24]
}
 8009c2a:	bf00      	nop
 8009c2c:	e7fe      	b.n	8009c2c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c2e:	f001 fddb 	bl	800b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 8009c32:	f3ef 8211 	mrs	r2, BASEPRI
 8009c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	617a      	str	r2, [r7, #20]
 8009c48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009c4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d22b      	bcs.n	8009cb6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c78:	d112      	bne.n	8009ca0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d016      	beq.n	8009cb0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	3324      	adds	r3, #36	; 0x24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 ffc0 	bl	800ac0c <xTaskRemoveFromEventList>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00e      	beq.n	8009cb0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00b      	beq.n	8009cb0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e007      	b.n	8009cb0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	b25a      	sxtb	r2, r3
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb4:	e001      	b.n	8009cba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8009cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f383 8811 	msr	BASEPRI, r3
}
 8009cc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3738      	adds	r7, #56	; 0x38
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08c      	sub	sp, #48	; 0x30
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <xQueueReceive+0x30>
	__asm volatile
 8009cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	623b      	str	r3, [r7, #32]
}
 8009cfc:	bf00      	nop
 8009cfe:	e7fe      	b.n	8009cfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <xQueueReceive+0x3e>
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <xQueueReceive+0x42>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <xQueueReceive+0x44>
 8009d12:	2300      	movs	r3, #0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xQueueReceive+0x5e>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	61fb      	str	r3, [r7, #28]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d2e:	f001 f929 	bl	800af84 <xTaskGetSchedulerState>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d102      	bne.n	8009d3e <xQueueReceive+0x6e>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <xQueueReceive+0x72>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e000      	b.n	8009d44 <xQueueReceive+0x74>
 8009d42:	2300      	movs	r3, #0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xQueueReceive+0x8e>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	61bb      	str	r3, [r7, #24]
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d5e:	f001 fc61 	bl	800b624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01f      	beq.n	8009dae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d6e:	68b9      	ldr	r1, [r7, #8]
 8009d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d72:	f000 fa9b 	bl	800a2ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	1e5a      	subs	r2, r3, #1
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00f      	beq.n	8009da6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	3310      	adds	r3, #16
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 ff3e 	bl	800ac0c <xTaskRemoveFromEventList>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d007      	beq.n	8009da6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d96:	4b3d      	ldr	r3, [pc, #244]	; (8009e8c <xQueueReceive+0x1bc>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009da6:	f001 fc6d 	bl	800b684 <vPortExitCritical>
				return pdPASS;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e069      	b.n	8009e82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d103      	bne.n	8009dbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009db4:	f001 fc66 	bl	800b684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009db8:	2300      	movs	r3, #0
 8009dba:	e062      	b.n	8009e82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d106      	bne.n	8009dd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dc2:	f107 0310 	add.w	r3, r7, #16
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 ff82 	bl	800acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dd0:	f001 fc58 	bl	800b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dd4:	f000 fd38 	bl	800a848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dd8:	f001 fc24 	bl	800b624 <vPortEnterCritical>
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009de8:	d103      	bne.n	8009df2 <xQueueReceive+0x122>
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009df8:	b25b      	sxtb	r3, r3
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dfe:	d103      	bne.n	8009e08 <xQueueReceive+0x138>
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e08:	f001 fc3c 	bl	800b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e0c:	1d3a      	adds	r2, r7, #4
 8009e0e:	f107 0310 	add.w	r3, r7, #16
 8009e12:	4611      	mov	r1, r2
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 ff71 	bl	800acfc <xTaskCheckForTimeOut>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d123      	bne.n	8009e68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e22:	f000 fabb 	bl	800a39c <prvIsQueueEmpty>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d017      	beq.n	8009e5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	3324      	adds	r3, #36	; 0x24
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fec5 	bl	800abc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e3c:	f000 fa5c 	bl	800a2f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e40:	f000 fd10 	bl	800a864 <xTaskResumeAll>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d189      	bne.n	8009d5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009e4a:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <xQueueReceive+0x1bc>)
 8009e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	e780      	b.n	8009d5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e5e:	f000 fa4b 	bl	800a2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e62:	f000 fcff 	bl	800a864 <xTaskResumeAll>
 8009e66:	e77a      	b.n	8009d5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e6a:	f000 fa45 	bl	800a2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e6e:	f000 fcf9 	bl	800a864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e74:	f000 fa92 	bl	800a39c <prvIsQueueEmpty>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f43f af6f 	beq.w	8009d5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3730      	adds	r7, #48	; 0x30
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	e000ed04 	.word	0xe000ed04

08009e90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08e      	sub	sp, #56	; 0x38
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10a      	bne.n	8009ec2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	623b      	str	r3, [r7, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61fb      	str	r3, [r7, #28]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ee0:	f001 f850 	bl	800af84 <xTaskGetSchedulerState>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <xQueueSemaphoreTake+0x60>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <xQueueSemaphoreTake+0x64>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <xQueueSemaphoreTake+0x66>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	61bb      	str	r3, [r7, #24]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f10:	f001 fb88 	bl	800b624 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d024      	beq.n	8009f6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	1e5a      	subs	r2, r3, #1
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009f30:	f001 f9d0 	bl	800b2d4 <pvTaskIncrementMutexHeldCount>
 8009f34:	4602      	mov	r2, r0
 8009f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00f      	beq.n	8009f62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	3310      	adds	r3, #16
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fe60 	bl	800ac0c <xTaskRemoveFromEventList>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d007      	beq.n	8009f62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f52:	4b54      	ldr	r3, [pc, #336]	; (800a0a4 <xQueueSemaphoreTake+0x214>)
 8009f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f62:	f001 fb8f 	bl	800b684 <vPortExitCritical>
				return pdPASS;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e097      	b.n	800a09a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d111      	bne.n	8009f94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	617b      	str	r3, [r7, #20]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009f8c:	f001 fb7a 	bl	800b684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f90:	2300      	movs	r3, #0
 8009f92:	e082      	b.n	800a09a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d106      	bne.n	8009fa8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f9a:	f107 030c 	add.w	r3, r7, #12
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fe96 	bl	800acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fa8:	f001 fb6c 	bl	800b684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fac:	f000 fc4c 	bl	800a848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fb0:	f001 fb38 	bl	800b624 <vPortEnterCritical>
 8009fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fba:	b25b      	sxtb	r3, r3
 8009fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fc0:	d103      	bne.n	8009fca <xQueueSemaphoreTake+0x13a>
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fd0:	b25b      	sxtb	r3, r3
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fd6:	d103      	bne.n	8009fe0 <xQueueSemaphoreTake+0x150>
 8009fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fe0:	f001 fb50 	bl	800b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fe4:	463a      	mov	r2, r7
 8009fe6:	f107 030c 	add.w	r3, r7, #12
 8009fea:	4611      	mov	r1, r2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fe85 	bl	800acfc <xTaskCheckForTimeOut>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d132      	bne.n	800a05e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ffa:	f000 f9cf 	bl	800a39c <prvIsQueueEmpty>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d026      	beq.n	800a052 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d109      	bne.n	800a020 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a00c:	f001 fb0a 	bl	800b624 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	4618      	mov	r0, r3
 800a016:	f000 ffd3 	bl	800afc0 <xTaskPriorityInherit>
 800a01a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a01c:	f001 fb32 	bl	800b684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a022:	3324      	adds	r3, #36	; 0x24
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	4611      	mov	r1, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fdcb 	bl	800abc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a02e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a030:	f000 f962 	bl	800a2f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a034:	f000 fc16 	bl	800a864 <xTaskResumeAll>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f47f af68 	bne.w	8009f10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a040:	4b18      	ldr	r3, [pc, #96]	; (800a0a4 <xQueueSemaphoreTake+0x214>)
 800a042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	e75e      	b.n	8009f10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a054:	f000 f950 	bl	800a2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a058:	f000 fc04 	bl	800a864 <xTaskResumeAll>
 800a05c:	e758      	b.n	8009f10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a05e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a060:	f000 f94a 	bl	800a2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a064:	f000 fbfe 	bl	800a864 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a06a:	f000 f997 	bl	800a39c <prvIsQueueEmpty>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	f43f af4d 	beq.w	8009f10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00d      	beq.n	800a098 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a07c:	f001 fad2 	bl	800b624 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a082:	f000 f891 	bl	800a1a8 <prvGetDisinheritPriorityAfterTimeout>
 800a086:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a08e:	4618      	mov	r0, r3
 800a090:	f001 f892 	bl	800b1b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a094:	f001 faf6 	bl	800b684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a098:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3738      	adds	r7, #56	; 0x38
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	e000ed04 	.word	0xe000ed04

0800a0a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08e      	sub	sp, #56	; 0x38
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10a      	bne.n	800a0d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	623b      	str	r3, [r7, #32]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <xQueueReceiveFromISR+0x3a>
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <xQueueReceiveFromISR+0x3e>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <xQueueReceiveFromISR+0x40>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	61fb      	str	r3, [r7, #28]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a102:	f001 fb71 	bl	800b7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a106:	f3ef 8211 	mrs	r2, BASEPRI
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	61ba      	str	r2, [r7, #24]
 800a11c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a11e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a126:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d02f      	beq.n	800a18e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a138:	68b9      	ldr	r1, [r7, #8]
 800a13a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a13c:	f000 f8b6 	bl	800a2ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	1e5a      	subs	r2, r3, #1
 800a144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a146:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a150:	d112      	bne.n	800a178 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d016      	beq.n	800a188 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	3310      	adds	r3, #16
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 fd54 	bl	800ac0c <xTaskRemoveFromEventList>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00e      	beq.n	800a188 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00b      	beq.n	800a188 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	e007      	b.n	800a188 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a17c:	3301      	adds	r3, #1
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	b25a      	sxtb	r2, r3
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a188:	2301      	movs	r3, #1
 800a18a:	637b      	str	r3, [r7, #52]	; 0x34
 800a18c:	e001      	b.n	800a192 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a18e:	2300      	movs	r3, #0
 800a190:	637b      	str	r3, [r7, #52]	; 0x34
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f383 8811 	msr	BASEPRI, r3
}
 800a19c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3738      	adds	r7, #56	; 0x38
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d006      	beq.n	800a1c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f1c3 0307 	rsb	r3, r3, #7
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e001      	b.n	800a1ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
	}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10d      	bne.n	800a212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d14d      	bne.n	800a29a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 ff52 	bl	800b0ac <xTaskPriorityDisinherit>
 800a208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	609a      	str	r2, [r3, #8]
 800a210:	e043      	b.n	800a29a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d119      	bne.n	800a24c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6858      	ldr	r0, [r3, #4]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a220:	461a      	mov	r2, r3
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	f002 fa69 	bl	800c6fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	441a      	add	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d32b      	bcc.n	800a29a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	605a      	str	r2, [r3, #4]
 800a24a:	e026      	b.n	800a29a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	68d8      	ldr	r0, [r3, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a254:	461a      	mov	r2, r3
 800a256:	68b9      	ldr	r1, [r7, #8]
 800a258:	f002 fa4f 	bl	800c6fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a264:	425b      	negs	r3, r3
 800a266:	441a      	add	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	429a      	cmp	r2, r3
 800a276:	d207      	bcs.n	800a288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a280:	425b      	negs	r3, r3
 800a282:	441a      	add	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d105      	bne.n	800a29a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	3b01      	subs	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a2a2:	697b      	ldr	r3, [r7, #20]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d018      	beq.n	800a2f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68da      	ldr	r2, [r3, #12]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	441a      	add	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d303      	bcc.n	800a2e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68d9      	ldr	r1, [r3, #12]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6838      	ldr	r0, [r7, #0]
 800a2ec:	f002 fa05 	bl	800c6fa <memcpy>
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a300:	f001 f990 	bl	800b624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a30a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a30c:	e011      	b.n	800a332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d012      	beq.n	800a33c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3324      	adds	r3, #36	; 0x24
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 fc76 	bl	800ac0c <xTaskRemoveFromEventList>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a326:	f000 fd4b 	bl	800adc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	dce9      	bgt.n	800a30e <prvUnlockQueue+0x16>
 800a33a:	e000      	b.n	800a33e <prvUnlockQueue+0x46>
					break;
 800a33c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	22ff      	movs	r2, #255	; 0xff
 800a342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a346:	f001 f99d 	bl	800b684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a34a:	f001 f96b 	bl	800b624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a356:	e011      	b.n	800a37c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d012      	beq.n	800a386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3310      	adds	r3, #16
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fc51 	bl	800ac0c <xTaskRemoveFromEventList>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a370:	f000 fd26 	bl	800adc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a374:	7bbb      	ldrb	r3, [r7, #14]
 800a376:	3b01      	subs	r3, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a37c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a380:	2b00      	cmp	r3, #0
 800a382:	dce9      	bgt.n	800a358 <prvUnlockQueue+0x60>
 800a384:	e000      	b.n	800a388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	22ff      	movs	r2, #255	; 0xff
 800a38c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a390:	f001 f978 	bl	800b684 <vPortExitCritical>
}
 800a394:	bf00      	nop
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3a4:	f001 f93e 	bl	800b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e001      	b.n	800a3ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3ba:	f001 f963 	bl	800b684 <vPortExitCritical>

	return xReturn;
 800a3be:	68fb      	ldr	r3, [r7, #12]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3d0:	f001 f928 	bl	800b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d102      	bne.n	800a3e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e001      	b.n	800a3ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3ea:	f001 f94b 	bl	800b684 <vPortExitCritical>

	return xReturn;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08e      	sub	sp, #56	; 0x38
 800a3fc:	af04      	add	r7, sp, #16
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	623b      	str	r3, [r7, #32]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xTaskCreateStatic+0x46>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	61fb      	str	r3, [r7, #28]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a43e:	2354      	movs	r3, #84	; 0x54
 800a440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b54      	cmp	r3, #84	; 0x54
 800a446:	d00a      	beq.n	800a45e <xTaskCreateStatic+0x66>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	61bb      	str	r3, [r7, #24]
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a45e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01e      	beq.n	800a4a4 <xTaskCreateStatic+0xac>
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01b      	beq.n	800a4a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a474:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	2202      	movs	r2, #2
 800a47a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a47e:	2300      	movs	r3, #0
 800a480:	9303      	str	r3, [sp, #12]
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a484:	9302      	str	r3, [sp, #8]
 800a486:	f107 0314 	add.w	r3, r7, #20
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f000 f850 	bl	800a53c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a49e:	f000 f8d5 	bl	800a64c <prvAddNewTaskToReadyList>
 800a4a2:	e001      	b.n	800a4a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4a8:	697b      	ldr	r3, [r7, #20]
	}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3728      	adds	r7, #40	; 0x28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b08c      	sub	sp, #48	; 0x30
 800a4b6:	af04      	add	r7, sp, #16
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	60b9      	str	r1, [r7, #8]
 800a4bc:	603b      	str	r3, [r7, #0]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4c2:	88fb      	ldrh	r3, [r7, #6]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 f9ce 	bl	800b868 <pvPortMalloc>
 800a4cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00e      	beq.n	800a4f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4d4:	2054      	movs	r0, #84	; 0x54
 800a4d6:	f001 f9c7 	bl	800b868 <pvPortMalloc>
 800a4da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	631a      	str	r2, [r3, #48]	; 0x30
 800a4e8:	e005      	b.n	800a4f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4ea:	6978      	ldr	r0, [r7, #20]
 800a4ec:	f001 fa88 	bl	800ba00 <vPortFree>
 800a4f0:	e001      	b.n	800a4f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d017      	beq.n	800a52c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a504:	88fa      	ldrh	r2, [r7, #6]
 800a506:	2300      	movs	r3, #0
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	9302      	str	r3, [sp, #8]
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 f80e 	bl	800a53c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a520:	69f8      	ldr	r0, [r7, #28]
 800a522:	f000 f893 	bl	800a64c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a526:	2301      	movs	r3, #1
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	e002      	b.n	800a532 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a530:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a532:	69bb      	ldr	r3, [r7, #24]
	}
 800a534:	4618      	mov	r0, r3
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a554:	3b01      	subs	r3, #1
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	f023 0307 	bic.w	r3, r3, #7
 800a562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	617b      	str	r3, [r7, #20]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d01f      	beq.n	800a5ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a58a:	2300      	movs	r3, #0
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	e012      	b.n	800a5b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	4413      	add	r3, r2
 800a596:	7819      	ldrb	r1, [r3, #0]
 800a598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	4413      	add	r3, r2
 800a59e:	3334      	adds	r3, #52	; 0x34
 800a5a0:	460a      	mov	r2, r1
 800a5a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d006      	beq.n	800a5be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	2b0f      	cmp	r3, #15
 800a5ba:	d9e9      	bls.n	800a590 <prvInitialiseNewTask+0x54>
 800a5bc:	e000      	b.n	800a5c0 <prvInitialiseNewTask+0x84>
			{
				break;
 800a5be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5c8:	e003      	b.n	800a5d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	d901      	bls.n	800a5dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5d8:	2306      	movs	r3, #6
 800a5da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe ff2c 	bl	8009450 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	3318      	adds	r3, #24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe ff27 	bl	8009450 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	f1c3 0207 	rsb	r2, r3, #7
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a616:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	2200      	movs	r2, #0
 800a61c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	68f9      	ldr	r1, [r7, #12]
 800a62a:	69b8      	ldr	r0, [r7, #24]
 800a62c:	f000 fecc 	bl	800b3c8 <pxPortInitialiseStack>
 800a630:	4602      	mov	r2, r0
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a642:	bf00      	nop
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a654:	f000 ffe6 	bl	800b624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a658:	4b2a      	ldr	r3, [pc, #168]	; (800a704 <prvAddNewTaskToReadyList+0xb8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3301      	adds	r3, #1
 800a65e:	4a29      	ldr	r2, [pc, #164]	; (800a704 <prvAddNewTaskToReadyList+0xb8>)
 800a660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a662:	4b29      	ldr	r3, [pc, #164]	; (800a708 <prvAddNewTaskToReadyList+0xbc>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d109      	bne.n	800a67e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a66a:	4a27      	ldr	r2, [pc, #156]	; (800a708 <prvAddNewTaskToReadyList+0xbc>)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a670:	4b24      	ldr	r3, [pc, #144]	; (800a704 <prvAddNewTaskToReadyList+0xb8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d110      	bne.n	800a69a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a678:	f000 fbc6 	bl	800ae08 <prvInitialiseTaskLists>
 800a67c:	e00d      	b.n	800a69a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a67e:	4b23      	ldr	r3, [pc, #140]	; (800a70c <prvAddNewTaskToReadyList+0xc0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d109      	bne.n	800a69a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a686:	4b20      	ldr	r3, [pc, #128]	; (800a708 <prvAddNewTaskToReadyList+0xbc>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	429a      	cmp	r2, r3
 800a692:	d802      	bhi.n	800a69a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a694:	4a1c      	ldr	r2, [pc, #112]	; (800a708 <prvAddNewTaskToReadyList+0xbc>)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a69a:	4b1d      	ldr	r3, [pc, #116]	; (800a710 <prvAddNewTaskToReadyList+0xc4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	4a1b      	ldr	r2, [pc, #108]	; (800a710 <prvAddNewTaskToReadyList+0xc4>)
 800a6a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	409a      	lsls	r2, r3
 800a6ac:	4b19      	ldr	r3, [pc, #100]	; (800a714 <prvAddNewTaskToReadyList+0xc8>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	4a18      	ldr	r2, [pc, #96]	; (800a714 <prvAddNewTaskToReadyList+0xc8>)
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4a15      	ldr	r2, [pc, #84]	; (800a718 <prvAddNewTaskToReadyList+0xcc>)
 800a6c4:	441a      	add	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	f7fe fecc 	bl	800946a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6d2:	f000 ffd7 	bl	800b684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <prvAddNewTaskToReadyList+0xc0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00e      	beq.n	800a6fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6de:	4b0a      	ldr	r3, [pc, #40]	; (800a708 <prvAddNewTaskToReadyList+0xbc>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d207      	bcs.n	800a6fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6ec:	4b0b      	ldr	r3, [pc, #44]	; (800a71c <prvAddNewTaskToReadyList+0xd0>)
 800a6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6fc:	bf00      	nop
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20000528 	.word	0x20000528
 800a708:	20000428 	.word	0x20000428
 800a70c:	20000534 	.word	0x20000534
 800a710:	20000544 	.word	0x20000544
 800a714:	20000530 	.word	0x20000530
 800a718:	2000042c 	.word	0x2000042c
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d017      	beq.n	800a762 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a732:	4b13      	ldr	r3, [pc, #76]	; (800a780 <vTaskDelay+0x60>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <vTaskDelay+0x30>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	60bb      	str	r3, [r7, #8]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a750:	f000 f87a 	bl	800a848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a754:	2100      	movs	r1, #0
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fdd0 	bl	800b2fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a75c:	f000 f882 	bl	800a864 <xTaskResumeAll>
 800a760:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d107      	bne.n	800a778 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a768:	4b06      	ldr	r3, [pc, #24]	; (800a784 <vTaskDelay+0x64>)
 800a76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a778:	bf00      	nop
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000550 	.word	0x20000550
 800a784:	e000ed04 	.word	0xe000ed04

0800a788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	; 0x28
 800a78c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a792:	2300      	movs	r3, #0
 800a794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a796:	463a      	mov	r2, r7
 800a798:	1d39      	adds	r1, r7, #4
 800a79a:	f107 0308 	add.w	r3, r7, #8
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7f5 fee4 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	9202      	str	r2, [sp, #8]
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	460a      	mov	r2, r1
 800a7b6:	491e      	ldr	r1, [pc, #120]	; (800a830 <vTaskStartScheduler+0xa8>)
 800a7b8:	481e      	ldr	r0, [pc, #120]	; (800a834 <vTaskStartScheduler+0xac>)
 800a7ba:	f7ff fe1d 	bl	800a3f8 <xTaskCreateStatic>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4a1d      	ldr	r2, [pc, #116]	; (800a838 <vTaskStartScheduler+0xb0>)
 800a7c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a7c4:	4b1c      	ldr	r3, [pc, #112]	; (800a838 <vTaskStartScheduler+0xb0>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	e001      	b.n	800a7d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d116      	bne.n	800a80a <vTaskStartScheduler+0x82>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	613b      	str	r3, [r7, #16]
}
 800a7ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7f0:	4b12      	ldr	r3, [pc, #72]	; (800a83c <vTaskStartScheduler+0xb4>)
 800a7f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7f8:	4b11      	ldr	r3, [pc, #68]	; (800a840 <vTaskStartScheduler+0xb8>)
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7fe:	4b11      	ldr	r3, [pc, #68]	; (800a844 <vTaskStartScheduler+0xbc>)
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a804:	f000 fe6c 	bl	800b4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a808:	e00e      	b.n	800a828 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a810:	d10a      	bne.n	800a828 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	60fb      	str	r3, [r7, #12]
}
 800a824:	bf00      	nop
 800a826:	e7fe      	b.n	800a826 <vTaskStartScheduler+0x9e>
}
 800a828:	bf00      	nop
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	0800d430 	.word	0x0800d430
 800a834:	0800add9 	.word	0x0800add9
 800a838:	2000054c 	.word	0x2000054c
 800a83c:	20000548 	.word	0x20000548
 800a840:	20000534 	.word	0x20000534
 800a844:	2000052c 	.word	0x2000052c

0800a848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a84c:	4b04      	ldr	r3, [pc, #16]	; (800a860 <vTaskSuspendAll+0x18>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3301      	adds	r3, #1
 800a852:	4a03      	ldr	r2, [pc, #12]	; (800a860 <vTaskSuspendAll+0x18>)
 800a854:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a856:	bf00      	nop
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	20000550 	.word	0x20000550

0800a864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a872:	4b41      	ldr	r3, [pc, #260]	; (800a978 <xTaskResumeAll+0x114>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10a      	bne.n	800a890 <xTaskResumeAll+0x2c>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	603b      	str	r3, [r7, #0]
}
 800a88c:	bf00      	nop
 800a88e:	e7fe      	b.n	800a88e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a890:	f000 fec8 	bl	800b624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a894:	4b38      	ldr	r3, [pc, #224]	; (800a978 <xTaskResumeAll+0x114>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3b01      	subs	r3, #1
 800a89a:	4a37      	ldr	r2, [pc, #220]	; (800a978 <xTaskResumeAll+0x114>)
 800a89c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a89e:	4b36      	ldr	r3, [pc, #216]	; (800a978 <xTaskResumeAll+0x114>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d161      	bne.n	800a96a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8a6:	4b35      	ldr	r3, [pc, #212]	; (800a97c <xTaskResumeAll+0x118>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d05d      	beq.n	800a96a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8ae:	e02e      	b.n	800a90e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b0:	4b33      	ldr	r3, [pc, #204]	; (800a980 <xTaskResumeAll+0x11c>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3318      	adds	r3, #24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fe31 	bl	8009524 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe fe2c 	bl	8009524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	409a      	lsls	r2, r3
 800a8d4:	4b2b      	ldr	r3, [pc, #172]	; (800a984 <xTaskResumeAll+0x120>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <xTaskResumeAll+0x120>)
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4a27      	ldr	r2, [pc, #156]	; (800a988 <xTaskResumeAll+0x124>)
 800a8ec:	441a      	add	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7fe fdb8 	bl	800946a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fe:	4b23      	ldr	r3, [pc, #140]	; (800a98c <xTaskResumeAll+0x128>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	429a      	cmp	r2, r3
 800a906:	d302      	bcc.n	800a90e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a908:	4b21      	ldr	r3, [pc, #132]	; (800a990 <xTaskResumeAll+0x12c>)
 800a90a:	2201      	movs	r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a90e:	4b1c      	ldr	r3, [pc, #112]	; (800a980 <xTaskResumeAll+0x11c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1cc      	bne.n	800a8b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a91c:	f000 fb12 	bl	800af44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a920:	4b1c      	ldr	r3, [pc, #112]	; (800a994 <xTaskResumeAll+0x130>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d010      	beq.n	800a94e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a92c:	f000 f836 	bl	800a99c <xTaskIncrementTick>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a936:	4b16      	ldr	r3, [pc, #88]	; (800a990 <xTaskResumeAll+0x12c>)
 800a938:	2201      	movs	r2, #1
 800a93a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3b01      	subs	r3, #1
 800a940:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1f1      	bne.n	800a92c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a948:	4b12      	ldr	r3, [pc, #72]	; (800a994 <xTaskResumeAll+0x130>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a94e:	4b10      	ldr	r3, [pc, #64]	; (800a990 <xTaskResumeAll+0x12c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d009      	beq.n	800a96a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a956:	2301      	movs	r3, #1
 800a958:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a95a:	4b0f      	ldr	r3, [pc, #60]	; (800a998 <xTaskResumeAll+0x134>)
 800a95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a96a:	f000 fe8b 	bl	800b684 <vPortExitCritical>

	return xAlreadyYielded;
 800a96e:	68bb      	ldr	r3, [r7, #8]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	20000550 	.word	0x20000550
 800a97c:	20000528 	.word	0x20000528
 800a980:	200004e8 	.word	0x200004e8
 800a984:	20000530 	.word	0x20000530
 800a988:	2000042c 	.word	0x2000042c
 800a98c:	20000428 	.word	0x20000428
 800a990:	2000053c 	.word	0x2000053c
 800a994:	20000538 	.word	0x20000538
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9a6:	4b4e      	ldr	r3, [pc, #312]	; (800aae0 <xTaskIncrementTick+0x144>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f040 808e 	bne.w	800aacc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9b0:	4b4c      	ldr	r3, [pc, #304]	; (800aae4 <xTaskIncrementTick+0x148>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9b8:	4a4a      	ldr	r2, [pc, #296]	; (800aae4 <xTaskIncrementTick+0x148>)
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d120      	bne.n	800aa06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9c4:	4b48      	ldr	r3, [pc, #288]	; (800aae8 <xTaskIncrementTick+0x14c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	603b      	str	r3, [r7, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <xTaskIncrementTick+0x46>
 800a9e4:	4b40      	ldr	r3, [pc, #256]	; (800aae8 <xTaskIncrementTick+0x14c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	60fb      	str	r3, [r7, #12]
 800a9ea:	4b40      	ldr	r3, [pc, #256]	; (800aaec <xTaskIncrementTick+0x150>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a3e      	ldr	r2, [pc, #248]	; (800aae8 <xTaskIncrementTick+0x14c>)
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	4a3e      	ldr	r2, [pc, #248]	; (800aaec <xTaskIncrementTick+0x150>)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	4b3d      	ldr	r3, [pc, #244]	; (800aaf0 <xTaskIncrementTick+0x154>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	4a3c      	ldr	r2, [pc, #240]	; (800aaf0 <xTaskIncrementTick+0x154>)
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	f000 fa9f 	bl	800af44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa06:	4b3b      	ldr	r3, [pc, #236]	; (800aaf4 <xTaskIncrementTick+0x158>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d348      	bcc.n	800aaa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa10:	4b35      	ldr	r3, [pc, #212]	; (800aae8 <xTaskIncrementTick+0x14c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d104      	bne.n	800aa24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa1a:	4b36      	ldr	r3, [pc, #216]	; (800aaf4 <xTaskIncrementTick+0x158>)
 800aa1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa20:	601a      	str	r2, [r3, #0]
					break;
 800aa22:	e03e      	b.n	800aaa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa24:	4b30      	ldr	r3, [pc, #192]	; (800aae8 <xTaskIncrementTick+0x14c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d203      	bcs.n	800aa44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa3c:	4a2d      	ldr	r2, [pc, #180]	; (800aaf4 <xTaskIncrementTick+0x158>)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa42:	e02e      	b.n	800aaa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fd6b 	bl	8009524 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	3318      	adds	r3, #24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fd62 	bl	8009524 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	2201      	movs	r2, #1
 800aa66:	409a      	lsls	r2, r3
 800aa68:	4b23      	ldr	r3, [pc, #140]	; (800aaf8 <xTaskIncrementTick+0x15c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	4a22      	ldr	r2, [pc, #136]	; (800aaf8 <xTaskIncrementTick+0x15c>)
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4a1f      	ldr	r2, [pc, #124]	; (800aafc <xTaskIncrementTick+0x160>)
 800aa80:	441a      	add	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	3304      	adds	r3, #4
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f7fe fcee 	bl	800946a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa92:	4b1b      	ldr	r3, [pc, #108]	; (800ab00 <xTaskIncrementTick+0x164>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d3b9      	bcc.n	800aa10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaa0:	e7b6      	b.n	800aa10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aaa2:	4b17      	ldr	r3, [pc, #92]	; (800ab00 <xTaskIncrementTick+0x164>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa8:	4914      	ldr	r1, [pc, #80]	; (800aafc <xTaskIncrementTick+0x160>)
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	440b      	add	r3, r1
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d901      	bls.n	800aabe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aabe:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <xTaskIncrementTick+0x168>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d007      	beq.n	800aad6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800aac6:	2301      	movs	r3, #1
 800aac8:	617b      	str	r3, [r7, #20]
 800aaca:	e004      	b.n	800aad6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aacc:	4b0e      	ldr	r3, [pc, #56]	; (800ab08 <xTaskIncrementTick+0x16c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3301      	adds	r3, #1
 800aad2:	4a0d      	ldr	r2, [pc, #52]	; (800ab08 <xTaskIncrementTick+0x16c>)
 800aad4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aad6:	697b      	ldr	r3, [r7, #20]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20000550 	.word	0x20000550
 800aae4:	2000052c 	.word	0x2000052c
 800aae8:	200004e0 	.word	0x200004e0
 800aaec:	200004e4 	.word	0x200004e4
 800aaf0:	20000540 	.word	0x20000540
 800aaf4:	20000548 	.word	0x20000548
 800aaf8:	20000530 	.word	0x20000530
 800aafc:	2000042c 	.word	0x2000042c
 800ab00:	20000428 	.word	0x20000428
 800ab04:	2000053c 	.word	0x2000053c
 800ab08:	20000538 	.word	0x20000538

0800ab0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab12:	4b27      	ldr	r3, [pc, #156]	; (800abb0 <vTaskSwitchContext+0xa4>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab1a:	4b26      	ldr	r3, [pc, #152]	; (800abb4 <vTaskSwitchContext+0xa8>)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab20:	e03f      	b.n	800aba2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ab22:	4b24      	ldr	r3, [pc, #144]	; (800abb4 <vTaskSwitchContext+0xa8>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab28:	4b23      	ldr	r3, [pc, #140]	; (800abb8 <vTaskSwitchContext+0xac>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	fab3 f383 	clz	r3, r3
 800ab34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ab36:	7afb      	ldrb	r3, [r7, #11]
 800ab38:	f1c3 031f 	rsb	r3, r3, #31
 800ab3c:	617b      	str	r3, [r7, #20]
 800ab3e:	491f      	ldr	r1, [pc, #124]	; (800abbc <vTaskSwitchContext+0xb0>)
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	4613      	mov	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	440b      	add	r3, r1
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10a      	bne.n	800ab68 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	607b      	str	r3, [r7, #4]
}
 800ab64:	bf00      	nop
 800ab66:	e7fe      	b.n	800ab66 <vTaskSwitchContext+0x5a>
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4a12      	ldr	r2, [pc, #72]	; (800abbc <vTaskSwitchContext+0xb0>)
 800ab74:	4413      	add	r3, r2
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	605a      	str	r2, [r3, #4]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	685a      	ldr	r2, [r3, #4]
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	3308      	adds	r3, #8
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d104      	bne.n	800ab98 <vTaskSwitchContext+0x8c>
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	605a      	str	r2, [r3, #4]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	4a08      	ldr	r2, [pc, #32]	; (800abc0 <vTaskSwitchContext+0xb4>)
 800aba0:	6013      	str	r3, [r2, #0]
}
 800aba2:	bf00      	nop
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	20000550 	.word	0x20000550
 800abb4:	2000053c 	.word	0x2000053c
 800abb8:	20000530 	.word	0x20000530
 800abbc:	2000042c 	.word	0x2000042c
 800abc0:	20000428 	.word	0x20000428

0800abc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	60fb      	str	r3, [r7, #12]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <vTaskPlaceOnEventList+0x44>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3318      	adds	r3, #24
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7fe fc5d 	bl	80094b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abf8:	2101      	movs	r1, #1
 800abfa:	6838      	ldr	r0, [r7, #0]
 800abfc:	f000 fb7e 	bl	800b2fc <prvAddCurrentTaskToDelayedList>
}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20000428 	.word	0x20000428

0800ac0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10a      	bne.n	800ac38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	60fb      	str	r3, [r7, #12]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	3318      	adds	r3, #24
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe fc71 	bl	8009524 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac42:	4b1d      	ldr	r3, [pc, #116]	; (800acb8 <xTaskRemoveFromEventList+0xac>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d11c      	bne.n	800ac84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fc68 	bl	8009524 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	2201      	movs	r2, #1
 800ac5a:	409a      	lsls	r2, r3
 800ac5c:	4b17      	ldr	r3, [pc, #92]	; (800acbc <xTaskRemoveFromEventList+0xb0>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	4a16      	ldr	r2, [pc, #88]	; (800acbc <xTaskRemoveFromEventList+0xb0>)
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4a13      	ldr	r2, [pc, #76]	; (800acc0 <xTaskRemoveFromEventList+0xb4>)
 800ac74:	441a      	add	r2, r3
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	3304      	adds	r3, #4
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	f7fe fbf4 	bl	800946a <vListInsertEnd>
 800ac82:	e005      	b.n	800ac90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	3318      	adds	r3, #24
 800ac88:	4619      	mov	r1, r3
 800ac8a:	480e      	ldr	r0, [pc, #56]	; (800acc4 <xTaskRemoveFromEventList+0xb8>)
 800ac8c:	f7fe fbed 	bl	800946a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac94:	4b0c      	ldr	r3, [pc, #48]	; (800acc8 <xTaskRemoveFromEventList+0xbc>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d905      	bls.n	800acaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aca2:	4b0a      	ldr	r3, [pc, #40]	; (800accc <xTaskRemoveFromEventList+0xc0>)
 800aca4:	2201      	movs	r2, #1
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	e001      	b.n	800acae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acae:	697b      	ldr	r3, [r7, #20]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	20000550 	.word	0x20000550
 800acbc:	20000530 	.word	0x20000530
 800acc0:	2000042c 	.word	0x2000042c
 800acc4:	200004e8 	.word	0x200004e8
 800acc8:	20000428 	.word	0x20000428
 800accc:	2000053c 	.word	0x2000053c

0800acd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acd8:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <vTaskInternalSetTimeOutState+0x24>)
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <vTaskInternalSetTimeOutState+0x28>)
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	605a      	str	r2, [r3, #4]
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	20000540 	.word	0x20000540
 800acf8:	2000052c 	.word	0x2000052c

0800acfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	613b      	str	r3, [r7, #16]
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	60fb      	str	r3, [r7, #12]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad3e:	f000 fc71 	bl	800b624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad42:	4b1d      	ldr	r3, [pc, #116]	; (800adb8 <xTaskCheckForTimeOut+0xbc>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad5a:	d102      	bne.n	800ad62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	61fb      	str	r3, [r7, #28]
 800ad60:	e023      	b.n	800adaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	4b15      	ldr	r3, [pc, #84]	; (800adbc <xTaskCheckForTimeOut+0xc0>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d007      	beq.n	800ad7e <xTaskCheckForTimeOut+0x82>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	69ba      	ldr	r2, [r7, #24]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d302      	bcc.n	800ad7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	61fb      	str	r3, [r7, #28]
 800ad7c:	e015      	b.n	800adaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d20b      	bcs.n	800ada0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff ff9b 	bl	800acd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	61fb      	str	r3, [r7, #28]
 800ad9e:	e004      	b.n	800adaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ada6:	2301      	movs	r3, #1
 800ada8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800adaa:	f000 fc6b 	bl	800b684 <vPortExitCritical>

	return xReturn;
 800adae:	69fb      	ldr	r3, [r7, #28]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3720      	adds	r7, #32
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	2000052c 	.word	0x2000052c
 800adbc:	20000540 	.word	0x20000540

0800adc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800adc4:	4b03      	ldr	r3, [pc, #12]	; (800add4 <vTaskMissedYield+0x14>)
 800adc6:	2201      	movs	r2, #1
 800adc8:	601a      	str	r2, [r3, #0]
}
 800adca:	bf00      	nop
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	2000053c 	.word	0x2000053c

0800add8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ade0:	f000 f852 	bl	800ae88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ade4:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <prvIdleTask+0x28>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d9f9      	bls.n	800ade0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800adec:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <prvIdleTask+0x2c>)
 800adee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800adfc:	e7f0      	b.n	800ade0 <prvIdleTask+0x8>
 800adfe:	bf00      	nop
 800ae00:	2000042c 	.word	0x2000042c
 800ae04:	e000ed04 	.word	0xe000ed04

0800ae08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae0e:	2300      	movs	r3, #0
 800ae10:	607b      	str	r3, [r7, #4]
 800ae12:	e00c      	b.n	800ae2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4a12      	ldr	r2, [pc, #72]	; (800ae68 <prvInitialiseTaskLists+0x60>)
 800ae20:	4413      	add	r3, r2
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fe faf4 	bl	8009410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	607b      	str	r3, [r7, #4]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b06      	cmp	r3, #6
 800ae32:	d9ef      	bls.n	800ae14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae34:	480d      	ldr	r0, [pc, #52]	; (800ae6c <prvInitialiseTaskLists+0x64>)
 800ae36:	f7fe faeb 	bl	8009410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae3a:	480d      	ldr	r0, [pc, #52]	; (800ae70 <prvInitialiseTaskLists+0x68>)
 800ae3c:	f7fe fae8 	bl	8009410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae40:	480c      	ldr	r0, [pc, #48]	; (800ae74 <prvInitialiseTaskLists+0x6c>)
 800ae42:	f7fe fae5 	bl	8009410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae46:	480c      	ldr	r0, [pc, #48]	; (800ae78 <prvInitialiseTaskLists+0x70>)
 800ae48:	f7fe fae2 	bl	8009410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae4c:	480b      	ldr	r0, [pc, #44]	; (800ae7c <prvInitialiseTaskLists+0x74>)
 800ae4e:	f7fe fadf 	bl	8009410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae52:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <prvInitialiseTaskLists+0x78>)
 800ae54:	4a05      	ldr	r2, [pc, #20]	; (800ae6c <prvInitialiseTaskLists+0x64>)
 800ae56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae58:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <prvInitialiseTaskLists+0x7c>)
 800ae5a:	4a05      	ldr	r2, [pc, #20]	; (800ae70 <prvInitialiseTaskLists+0x68>)
 800ae5c:	601a      	str	r2, [r3, #0]
}
 800ae5e:	bf00      	nop
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	2000042c 	.word	0x2000042c
 800ae6c:	200004b8 	.word	0x200004b8
 800ae70:	200004cc 	.word	0x200004cc
 800ae74:	200004e8 	.word	0x200004e8
 800ae78:	200004fc 	.word	0x200004fc
 800ae7c:	20000514 	.word	0x20000514
 800ae80:	200004e0 	.word	0x200004e0
 800ae84:	200004e4 	.word	0x200004e4

0800ae88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae8e:	e019      	b.n	800aec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae90:	f000 fbc8 	bl	800b624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae94:	4b10      	ldr	r3, [pc, #64]	; (800aed8 <prvCheckTasksWaitingTermination+0x50>)
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe fb3f 	bl	8009524 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aea6:	4b0d      	ldr	r3, [pc, #52]	; (800aedc <prvCheckTasksWaitingTermination+0x54>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	4a0b      	ldr	r2, [pc, #44]	; (800aedc <prvCheckTasksWaitingTermination+0x54>)
 800aeae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aeb0:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <prvCheckTasksWaitingTermination+0x58>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	4a0a      	ldr	r2, [pc, #40]	; (800aee0 <prvCheckTasksWaitingTermination+0x58>)
 800aeb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aeba:	f000 fbe3 	bl	800b684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f810 	bl	800aee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aec4:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <prvCheckTasksWaitingTermination+0x58>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e1      	bne.n	800ae90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	200004fc 	.word	0x200004fc
 800aedc:	20000528 	.word	0x20000528
 800aee0:	20000510 	.word	0x20000510

0800aee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d108      	bne.n	800af08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fd80 	bl	800ba00 <vPortFree>
				vPortFree( pxTCB );
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fd7d 	bl	800ba00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af06:	e018      	b.n	800af3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d103      	bne.n	800af1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fd74 	bl	800ba00 <vPortFree>
	}
 800af18:	e00f      	b.n	800af3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af20:	2b02      	cmp	r3, #2
 800af22:	d00a      	beq.n	800af3a <prvDeleteTCB+0x56>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	60fb      	str	r3, [r7, #12]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <prvDeleteTCB+0x54>
	}
 800af3a:	bf00      	nop
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
	...

0800af44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af4a:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <prvResetNextTaskUnblockTime+0x38>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d104      	bne.n	800af5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af54:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <prvResetNextTaskUnblockTime+0x3c>)
 800af56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af5c:	e008      	b.n	800af70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af5e:	4b07      	ldr	r3, [pc, #28]	; (800af7c <prvResetNextTaskUnblockTime+0x38>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	4a04      	ldr	r2, [pc, #16]	; (800af80 <prvResetNextTaskUnblockTime+0x3c>)
 800af6e:	6013      	str	r3, [r2, #0]
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	200004e0 	.word	0x200004e0
 800af80:	20000548 	.word	0x20000548

0800af84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af8a:	4b0b      	ldr	r3, [pc, #44]	; (800afb8 <xTaskGetSchedulerState+0x34>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d102      	bne.n	800af98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af92:	2301      	movs	r3, #1
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	e008      	b.n	800afaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af98:	4b08      	ldr	r3, [pc, #32]	; (800afbc <xTaskGetSchedulerState+0x38>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d102      	bne.n	800afa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800afa0:	2302      	movs	r3, #2
 800afa2:	607b      	str	r3, [r7, #4]
 800afa4:	e001      	b.n	800afaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800afa6:	2300      	movs	r3, #0
 800afa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800afaa:	687b      	ldr	r3, [r7, #4]
	}
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	20000534 	.word	0x20000534
 800afbc:	20000550 	.word	0x20000550

0800afc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800afcc:	2300      	movs	r3, #0
 800afce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d05e      	beq.n	800b094 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afda:	4b31      	ldr	r3, [pc, #196]	; (800b0a0 <xTaskPriorityInherit+0xe0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d24e      	bcs.n	800b082 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	db06      	blt.n	800affa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afec:	4b2c      	ldr	r3, [pc, #176]	; (800b0a0 <xTaskPriorityInherit+0xe0>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	f1c3 0207 	rsb	r2, r3, #7
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	6959      	ldr	r1, [r3, #20]
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4a26      	ldr	r2, [pc, #152]	; (800b0a4 <xTaskPriorityInherit+0xe4>)
 800b00c:	4413      	add	r3, r2
 800b00e:	4299      	cmp	r1, r3
 800b010:	d12f      	bne.n	800b072 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	3304      	adds	r3, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fa84 	bl	8009524 <uxListRemove>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10a      	bne.n	800b038 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b026:	2201      	movs	r2, #1
 800b028:	fa02 f303 	lsl.w	r3, r2, r3
 800b02c:	43da      	mvns	r2, r3
 800b02e:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <xTaskPriorityInherit+0xe8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4013      	ands	r3, r2
 800b034:	4a1c      	ldr	r2, [pc, #112]	; (800b0a8 <xTaskPriorityInherit+0xe8>)
 800b036:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b038:	4b19      	ldr	r3, [pc, #100]	; (800b0a0 <xTaskPriorityInherit+0xe0>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	2201      	movs	r2, #1
 800b048:	409a      	lsls	r2, r3
 800b04a:	4b17      	ldr	r3, [pc, #92]	; (800b0a8 <xTaskPriorityInherit+0xe8>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4313      	orrs	r3, r2
 800b050:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <xTaskPriorityInherit+0xe8>)
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4a10      	ldr	r2, [pc, #64]	; (800b0a4 <xTaskPriorityInherit+0xe4>)
 800b062:	441a      	add	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3304      	adds	r3, #4
 800b068:	4619      	mov	r1, r3
 800b06a:	4610      	mov	r0, r2
 800b06c:	f7fe f9fd 	bl	800946a <vListInsertEnd>
 800b070:	e004      	b.n	800b07c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b072:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <xTaskPriorityInherit+0xe0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e008      	b.n	800b094 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b086:	4b06      	ldr	r3, [pc, #24]	; (800b0a0 <xTaskPriorityInherit+0xe0>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d201      	bcs.n	800b094 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b090:	2301      	movs	r3, #1
 800b092:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b094:	68fb      	ldr	r3, [r7, #12]
	}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	20000428 	.word	0x20000428
 800b0a4:	2000042c 	.word	0x2000042c
 800b0a8:	20000530 	.word	0x20000530

0800b0ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d06e      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0c2:	4b3a      	ldr	r3, [pc, #232]	; (800b1ac <xTaskPriorityDisinherit+0x100>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d00a      	beq.n	800b0e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	60fb      	str	r3, [r7, #12]
}
 800b0de:	bf00      	nop
 800b0e0:	e7fe      	b.n	800b0e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	60bb      	str	r3, [r7, #8]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b104:	1e5a      	subs	r2, r3, #1
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b112:	429a      	cmp	r2, r3
 800b114:	d044      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d140      	bne.n	800b1a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	3304      	adds	r3, #4
 800b122:	4618      	mov	r0, r3
 800b124:	f7fe f9fe 	bl	8009524 <uxListRemove>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d115      	bne.n	800b15a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b132:	491f      	ldr	r1, [pc, #124]	; (800b1b0 <xTaskPriorityDisinherit+0x104>)
 800b134:	4613      	mov	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	440b      	add	r3, r1
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10a      	bne.n	800b15a <xTaskPriorityDisinherit+0xae>
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	2201      	movs	r2, #1
 800b14a:	fa02 f303 	lsl.w	r3, r2, r3
 800b14e:	43da      	mvns	r2, r3
 800b150:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <xTaskPriorityDisinherit+0x108>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4013      	ands	r3, r2
 800b156:	4a17      	ldr	r2, [pc, #92]	; (800b1b4 <xTaskPriorityDisinherit+0x108>)
 800b158:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	f1c3 0207 	rsb	r2, r3, #7
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	2201      	movs	r2, #1
 800b174:	409a      	lsls	r2, r3
 800b176:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <xTaskPriorityDisinherit+0x108>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	4a0d      	ldr	r2, [pc, #52]	; (800b1b4 <xTaskPriorityDisinherit+0x108>)
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4a08      	ldr	r2, [pc, #32]	; (800b1b0 <xTaskPriorityDisinherit+0x104>)
 800b18e:	441a      	add	r2, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3304      	adds	r3, #4
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7fe f967 	bl	800946a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1a0:	697b      	ldr	r3, [r7, #20]
	}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000428 	.word	0x20000428
 800b1b0:	2000042c 	.word	0x2000042c
 800b1b4:	20000530 	.word	0x20000530

0800b1b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d077      	beq.n	800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	60fb      	str	r3, [r7, #12]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d902      	bls.n	800b1fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	e002      	b.n	800b204 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b202:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	69fa      	ldr	r2, [r7, #28]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d058      	beq.n	800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	429a      	cmp	r2, r3
 800b216:	d153      	bne.n	800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b218:	4b2b      	ldr	r3, [pc, #172]	; (800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d10a      	bne.n	800b238 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	60bb      	str	r3, [r7, #8]
}
 800b234:	bf00      	nop
 800b236:	e7fe      	b.n	800b236 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	db04      	blt.n	800b256 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	f1c3 0207 	rsb	r2, r3, #7
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	6959      	ldr	r1, [r3, #20]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a19      	ldr	r2, [pc, #100]	; (800b2cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b266:	4413      	add	r3, r2
 800b268:	4299      	cmp	r1, r3
 800b26a:	d129      	bne.n	800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	3304      	adds	r3, #4
 800b270:	4618      	mov	r0, r3
 800b272:	f7fe f957 	bl	8009524 <uxListRemove>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	2201      	movs	r2, #1
 800b282:	fa02 f303 	lsl.w	r3, r2, r3
 800b286:	43da      	mvns	r2, r3
 800b288:	4b11      	ldr	r3, [pc, #68]	; (800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4013      	ands	r3, r2
 800b28e:	4a10      	ldr	r2, [pc, #64]	; (800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b290:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b296:	2201      	movs	r2, #1
 800b298:	409a      	lsls	r2, r3
 800b29a:	4b0d      	ldr	r3, [pc, #52]	; (800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	4a0b      	ldr	r2, [pc, #44]	; (800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4a06      	ldr	r2, [pc, #24]	; (800b2cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b2b2:	441a      	add	r2, r3
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f7fe f8d5 	bl	800946a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2c0:	bf00      	nop
 800b2c2:	3720      	adds	r7, #32
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	20000428 	.word	0x20000428
 800b2cc:	2000042c 	.word	0x2000042c
 800b2d0:	20000530 	.word	0x20000530

0800b2d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b2d4:	b480      	push	{r7}
 800b2d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b2d8:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d004      	beq.n	800b2ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b2e0:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2e6:	3201      	adds	r2, #1
 800b2e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b2ea:	4b03      	ldr	r3, [pc, #12]	; (800b2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
	}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	20000428 	.word	0x20000428

0800b2fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b306:	4b29      	ldr	r3, [pc, #164]	; (800b3ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b30c:	4b28      	ldr	r3, [pc, #160]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3304      	adds	r3, #4
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe f906 	bl	8009524 <uxListRemove>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10b      	bne.n	800b336 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b31e:	4b24      	ldr	r3, [pc, #144]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	2201      	movs	r2, #1
 800b326:	fa02 f303 	lsl.w	r3, r2, r3
 800b32a:	43da      	mvns	r2, r3
 800b32c:	4b21      	ldr	r3, [pc, #132]	; (800b3b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4013      	ands	r3, r2
 800b332:	4a20      	ldr	r2, [pc, #128]	; (800b3b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b334:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b33c:	d10a      	bne.n	800b354 <prvAddCurrentTaskToDelayedList+0x58>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d007      	beq.n	800b354 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b344:	4b1a      	ldr	r3, [pc, #104]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3304      	adds	r3, #4
 800b34a:	4619      	mov	r1, r3
 800b34c:	481a      	ldr	r0, [pc, #104]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b34e:	f7fe f88c 	bl	800946a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b352:	e026      	b.n	800b3a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4413      	add	r3, r2
 800b35a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b35c:	4b14      	ldr	r3, [pc, #80]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d209      	bcs.n	800b380 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b36c:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3304      	adds	r3, #4
 800b376:	4619      	mov	r1, r3
 800b378:	4610      	mov	r0, r2
 800b37a:	f7fe f89a 	bl	80094b2 <vListInsert>
}
 800b37e:	e010      	b.n	800b3a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b380:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	4b0a      	ldr	r3, [pc, #40]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3304      	adds	r3, #4
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f7fe f890 	bl	80094b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b392:	4b0c      	ldr	r3, [pc, #48]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d202      	bcs.n	800b3a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b39c:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	6013      	str	r3, [r2, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	2000052c 	.word	0x2000052c
 800b3b0:	20000428 	.word	0x20000428
 800b3b4:	20000530 	.word	0x20000530
 800b3b8:	20000514 	.word	0x20000514
 800b3bc:	200004e4 	.word	0x200004e4
 800b3c0:	200004e0 	.word	0x200004e0
 800b3c4:	20000548 	.word	0x20000548

0800b3c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3b04      	subs	r3, #4
 800b3d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3b04      	subs	r3, #4
 800b3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f023 0201 	bic.w	r2, r3, #1
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3b04      	subs	r3, #4
 800b3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3f8:	4a0c      	ldr	r2, [pc, #48]	; (800b42c <pxPortInitialiseStack+0x64>)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3b14      	subs	r3, #20
 800b402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3b04      	subs	r3, #4
 800b40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f06f 0202 	mvn.w	r2, #2
 800b416:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	3b20      	subs	r3, #32
 800b41c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b41e:	68fb      	ldr	r3, [r7, #12]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	0800b431 	.word	0x0800b431

0800b430 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b43a:	4b12      	ldr	r3, [pc, #72]	; (800b484 <prvTaskExitError+0x54>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b442:	d00a      	beq.n	800b45a <prvTaskExitError+0x2a>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	60fb      	str	r3, [r7, #12]
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <prvTaskExitError+0x28>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	60bb      	str	r3, [r7, #8]
}
 800b46c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b46e:	bf00      	nop
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0fc      	beq.n	800b470 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b476:	bf00      	nop
 800b478:	bf00      	nop
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	2000002c 	.word	0x2000002c
	...

0800b490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b490:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <pxCurrentTCBConst2>)
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	6808      	ldr	r0, [r1, #0]
 800b496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49a:	f380 8809 	msr	PSP, r0
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f04f 0000 	mov.w	r0, #0
 800b4a6:	f380 8811 	msr	BASEPRI, r0
 800b4aa:	4770      	bx	lr
 800b4ac:	f3af 8000 	nop.w

0800b4b0 <pxCurrentTCBConst2>:
 800b4b0:	20000428 	.word	0x20000428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4b8:	4808      	ldr	r0, [pc, #32]	; (800b4dc <prvPortStartFirstTask+0x24>)
 800b4ba:	6800      	ldr	r0, [r0, #0]
 800b4bc:	6800      	ldr	r0, [r0, #0]
 800b4be:	f380 8808 	msr	MSP, r0
 800b4c2:	f04f 0000 	mov.w	r0, #0
 800b4c6:	f380 8814 	msr	CONTROL, r0
 800b4ca:	b662      	cpsie	i
 800b4cc:	b661      	cpsie	f
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	df00      	svc	0
 800b4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4da:	bf00      	nop
 800b4dc:	e000ed08 	.word	0xe000ed08

0800b4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4e6:	4b46      	ldr	r3, [pc, #280]	; (800b600 <xPortStartScheduler+0x120>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a46      	ldr	r2, [pc, #280]	; (800b604 <xPortStartScheduler+0x124>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d10a      	bne.n	800b506 <xPortStartScheduler+0x26>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	613b      	str	r3, [r7, #16]
}
 800b502:	bf00      	nop
 800b504:	e7fe      	b.n	800b504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b506:	4b3e      	ldr	r3, [pc, #248]	; (800b600 <xPortStartScheduler+0x120>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a3f      	ldr	r2, [pc, #252]	; (800b608 <xPortStartScheduler+0x128>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d10a      	bne.n	800b526 <xPortStartScheduler+0x46>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	60fb      	str	r3, [r7, #12]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b526:	4b39      	ldr	r3, [pc, #228]	; (800b60c <xPortStartScheduler+0x12c>)
 800b528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	22ff      	movs	r2, #255	; 0xff
 800b536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b540:	78fb      	ldrb	r3, [r7, #3]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	4b31      	ldr	r3, [pc, #196]	; (800b610 <xPortStartScheduler+0x130>)
 800b54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b54e:	4b31      	ldr	r3, [pc, #196]	; (800b614 <xPortStartScheduler+0x134>)
 800b550:	2207      	movs	r2, #7
 800b552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b554:	e009      	b.n	800b56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b556:	4b2f      	ldr	r3, [pc, #188]	; (800b614 <xPortStartScheduler+0x134>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	4a2d      	ldr	r2, [pc, #180]	; (800b614 <xPortStartScheduler+0x134>)
 800b55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	b2db      	uxtb	r3, r3
 800b568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b572:	2b80      	cmp	r3, #128	; 0x80
 800b574:	d0ef      	beq.n	800b556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b576:	4b27      	ldr	r3, [pc, #156]	; (800b614 <xPortStartScheduler+0x134>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f1c3 0307 	rsb	r3, r3, #7
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d00a      	beq.n	800b598 <xPortStartScheduler+0xb8>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	60bb      	str	r3, [r7, #8]
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b598:	4b1e      	ldr	r3, [pc, #120]	; (800b614 <xPortStartScheduler+0x134>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	4a1d      	ldr	r2, [pc, #116]	; (800b614 <xPortStartScheduler+0x134>)
 800b5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5a2:	4b1c      	ldr	r3, [pc, #112]	; (800b614 <xPortStartScheduler+0x134>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5aa:	4a1a      	ldr	r2, [pc, #104]	; (800b614 <xPortStartScheduler+0x134>)
 800b5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5b6:	4b18      	ldr	r3, [pc, #96]	; (800b618 <xPortStartScheduler+0x138>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a17      	ldr	r2, [pc, #92]	; (800b618 <xPortStartScheduler+0x138>)
 800b5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5c2:	4b15      	ldr	r3, [pc, #84]	; (800b618 <xPortStartScheduler+0x138>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a14      	ldr	r2, [pc, #80]	; (800b618 <xPortStartScheduler+0x138>)
 800b5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5ce:	f000 f8dd 	bl	800b78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5d2:	4b12      	ldr	r3, [pc, #72]	; (800b61c <xPortStartScheduler+0x13c>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5d8:	f000 f8fc 	bl	800b7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5dc:	4b10      	ldr	r3, [pc, #64]	; (800b620 <xPortStartScheduler+0x140>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a0f      	ldr	r2, [pc, #60]	; (800b620 <xPortStartScheduler+0x140>)
 800b5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5e8:	f7ff ff66 	bl	800b4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5ec:	f7ff fa8e 	bl	800ab0c <vTaskSwitchContext>
	prvTaskExitError();
 800b5f0:	f7ff ff1e 	bl	800b430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	e000ed00 	.word	0xe000ed00
 800b604:	410fc271 	.word	0x410fc271
 800b608:	410fc270 	.word	0x410fc270
 800b60c:	e000e400 	.word	0xe000e400
 800b610:	20000554 	.word	0x20000554
 800b614:	20000558 	.word	0x20000558
 800b618:	e000ed20 	.word	0xe000ed20
 800b61c:	2000002c 	.word	0x2000002c
 800b620:	e000ef34 	.word	0xe000ef34

0800b624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	607b      	str	r3, [r7, #4]
}
 800b63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b63e:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <vPortEnterCritical+0x58>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3301      	adds	r3, #1
 800b644:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <vPortEnterCritical+0x58>)
 800b646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b648:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <vPortEnterCritical+0x58>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d10f      	bne.n	800b670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b650:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <vPortEnterCritical+0x5c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <vPortEnterCritical+0x4c>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	603b      	str	r3, [r7, #0]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <vPortEnterCritical+0x4a>
	}
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	2000002c 	.word	0x2000002c
 800b680:	e000ed04 	.word	0xe000ed04

0800b684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b68a:	4b12      	ldr	r3, [pc, #72]	; (800b6d4 <vPortExitCritical+0x50>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <vPortExitCritical+0x24>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	607b      	str	r3, [r7, #4]
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <vPortExitCritical+0x50>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <vPortExitCritical+0x50>)
 800b6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6b2:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <vPortExitCritical+0x50>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d105      	bne.n	800b6c6 <vPortExitCritical+0x42>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	f383 8811 	msr	BASEPRI, r3
}
 800b6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	2000002c 	.word	0x2000002c
	...

0800b6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6e0:	f3ef 8009 	mrs	r0, PSP
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	4b15      	ldr	r3, [pc, #84]	; (800b740 <pxCurrentTCBConst>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	f01e 0f10 	tst.w	lr, #16
 800b6f0:	bf08      	it	eq
 800b6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fa:	6010      	str	r0, [r2, #0]
 800b6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b704:	f380 8811 	msr	BASEPRI, r0
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f7ff f9fc 	bl	800ab0c <vTaskSwitchContext>
 800b714:	f04f 0000 	mov.w	r0, #0
 800b718:	f380 8811 	msr	BASEPRI, r0
 800b71c:	bc09      	pop	{r0, r3}
 800b71e:	6819      	ldr	r1, [r3, #0]
 800b720:	6808      	ldr	r0, [r1, #0]
 800b722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b726:	f01e 0f10 	tst.w	lr, #16
 800b72a:	bf08      	it	eq
 800b72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b730:	f380 8809 	msr	PSP, r0
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	f3af 8000 	nop.w

0800b740 <pxCurrentTCBConst>:
 800b740:	20000428 	.word	0x20000428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop

0800b748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	607b      	str	r3, [r7, #4]
}
 800b760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b762:	f7ff f91b 	bl	800a99c <xTaskIncrementTick>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d003      	beq.n	800b774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b76c:	4b06      	ldr	r3, [pc, #24]	; (800b788 <xPortSysTickHandler+0x40>)
 800b76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	f383 8811 	msr	BASEPRI, r3
}
 800b77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	e000ed04 	.word	0xe000ed04

0800b78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b790:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <vPortSetupTimerInterrupt+0x34>)
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b796:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <vPortSetupTimerInterrupt+0x38>)
 800b798:	2200      	movs	r2, #0
 800b79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <vPortSetupTimerInterrupt+0x3c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a0a      	ldr	r2, [pc, #40]	; (800b7cc <vPortSetupTimerInterrupt+0x40>)
 800b7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a6:	099b      	lsrs	r3, r3, #6
 800b7a8:	4a09      	ldr	r2, [pc, #36]	; (800b7d0 <vPortSetupTimerInterrupt+0x44>)
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7ae:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <vPortSetupTimerInterrupt+0x34>)
 800b7b0:	2207      	movs	r2, #7
 800b7b2:	601a      	str	r2, [r3, #0]
}
 800b7b4:	bf00      	nop
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	e000e010 	.word	0xe000e010
 800b7c4:	e000e018 	.word	0xe000e018
 800b7c8:	20000000 	.word	0x20000000
 800b7cc:	10624dd3 	.word	0x10624dd3
 800b7d0:	e000e014 	.word	0xe000e014

0800b7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7e4 <vPortEnableVFP+0x10>
 800b7d8:	6801      	ldr	r1, [r0, #0]
 800b7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7de:	6001      	str	r1, [r0, #0]
 800b7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7e2:	bf00      	nop
 800b7e4:	e000ed88 	.word	0xe000ed88

0800b7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7ee:	f3ef 8305 	mrs	r3, IPSR
 800b7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b0f      	cmp	r3, #15
 800b7f8:	d914      	bls.n	800b824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7fa:	4a17      	ldr	r2, [pc, #92]	; (800b858 <vPortValidateInterruptPriority+0x70>)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4413      	add	r3, r2
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b804:	4b15      	ldr	r3, [pc, #84]	; (800b85c <vPortValidateInterruptPriority+0x74>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	7afa      	ldrb	r2, [r7, #11]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d20a      	bcs.n	800b824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b824:	4b0e      	ldr	r3, [pc, #56]	; (800b860 <vPortValidateInterruptPriority+0x78>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <vPortValidateInterruptPriority+0x7c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	429a      	cmp	r2, r3
 800b832:	d90a      	bls.n	800b84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	603b      	str	r3, [r7, #0]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <vPortValidateInterruptPriority+0x60>
	}
 800b84a:	bf00      	nop
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	e000e3f0 	.word	0xe000e3f0
 800b85c:	20000554 	.word	0x20000554
 800b860:	e000ed0c 	.word	0xe000ed0c
 800b864:	20000558 	.word	0x20000558

0800b868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08a      	sub	sp, #40	; 0x28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b870:	2300      	movs	r3, #0
 800b872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b874:	f7fe ffe8 	bl	800a848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b878:	4b5b      	ldr	r3, [pc, #364]	; (800b9e8 <pvPortMalloc+0x180>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b880:	f000 f920 	bl	800bac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b884:	4b59      	ldr	r3, [pc, #356]	; (800b9ec <pvPortMalloc+0x184>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4013      	ands	r3, r2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 8093 	bne.w	800b9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d01d      	beq.n	800b8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b898:	2208      	movs	r2, #8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4413      	add	r3, r2
 800b89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f003 0307 	and.w	r3, r3, #7
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d014      	beq.n	800b8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f023 0307 	bic.w	r3, r3, #7
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	617b      	str	r3, [r7, #20]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d06e      	beq.n	800b9b8 <pvPortMalloc+0x150>
 800b8da:	4b45      	ldr	r3, [pc, #276]	; (800b9f0 <pvPortMalloc+0x188>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d869      	bhi.n	800b9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8e4:	4b43      	ldr	r3, [pc, #268]	; (800b9f4 <pvPortMalloc+0x18c>)
 800b8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8e8:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <pvPortMalloc+0x18c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ee:	e004      	b.n	800b8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d903      	bls.n	800b90c <pvPortMalloc+0xa4>
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1f1      	bne.n	800b8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b90c:	4b36      	ldr	r3, [pc, #216]	; (800b9e8 <pvPortMalloc+0x180>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b912:	429a      	cmp	r2, r3
 800b914:	d050      	beq.n	800b9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2208      	movs	r2, #8
 800b91c:	4413      	add	r3, r2
 800b91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	2308      	movs	r3, #8
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	429a      	cmp	r2, r3
 800b936:	d91f      	bls.n	800b978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4413      	add	r3, r2
 800b93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00a      	beq.n	800b960 <pvPortMalloc+0xf8>
	__asm volatile
 800b94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	613b      	str	r3, [r7, #16]
}
 800b95c:	bf00      	nop
 800b95e:	e7fe      	b.n	800b95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	1ad2      	subs	r2, r2, r3
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b972:	69b8      	ldr	r0, [r7, #24]
 800b974:	f000 f908 	bl	800bb88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b978:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <pvPortMalloc+0x188>)
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	4a1b      	ldr	r2, [pc, #108]	; (800b9f0 <pvPortMalloc+0x188>)
 800b984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b986:	4b1a      	ldr	r3, [pc, #104]	; (800b9f0 <pvPortMalloc+0x188>)
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	4b1b      	ldr	r3, [pc, #108]	; (800b9f8 <pvPortMalloc+0x190>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d203      	bcs.n	800b99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b992:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <pvPortMalloc+0x188>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a18      	ldr	r2, [pc, #96]	; (800b9f8 <pvPortMalloc+0x190>)
 800b998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <pvPortMalloc+0x184>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9ae:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <pvPortMalloc+0x194>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	4a11      	ldr	r2, [pc, #68]	; (800b9fc <pvPortMalloc+0x194>)
 800b9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9b8:	f7fe ff54 	bl	800a864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	f003 0307 	and.w	r3, r3, #7
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00a      	beq.n	800b9dc <pvPortMalloc+0x174>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	60fb      	str	r3, [r7, #12]
}
 800b9d8:	bf00      	nop
 800b9da:	e7fe      	b.n	800b9da <pvPortMalloc+0x172>
	return pvReturn;
 800b9dc:	69fb      	ldr	r3, [r7, #28]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3728      	adds	r7, #40	; 0x28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20004164 	.word	0x20004164
 800b9ec:	20004178 	.word	0x20004178
 800b9f0:	20004168 	.word	0x20004168
 800b9f4:	2000415c 	.word	0x2000415c
 800b9f8:	2000416c 	.word	0x2000416c
 800b9fc:	20004170 	.word	0x20004170

0800ba00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d04d      	beq.n	800baae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba12:	2308      	movs	r3, #8
 800ba14:	425b      	negs	r3, r3
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	4413      	add	r3, r2
 800ba1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	4b24      	ldr	r3, [pc, #144]	; (800bab8 <vPortFree+0xb8>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4013      	ands	r3, r2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <vPortFree+0x44>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	60fb      	str	r3, [r7, #12]
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00a      	beq.n	800ba62 <vPortFree+0x62>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	60bb      	str	r3, [r7, #8]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	4b14      	ldr	r3, [pc, #80]	; (800bab8 <vPortFree+0xb8>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01e      	beq.n	800baae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d11a      	bne.n	800baae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	4b0e      	ldr	r3, [pc, #56]	; (800bab8 <vPortFree+0xb8>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	43db      	mvns	r3, r3
 800ba82:	401a      	ands	r2, r3
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba88:	f7fe fede 	bl	800a848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <vPortFree+0xbc>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4413      	add	r3, r2
 800ba96:	4a09      	ldr	r2, [pc, #36]	; (800babc <vPortFree+0xbc>)
 800ba98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba9a:	6938      	ldr	r0, [r7, #16]
 800ba9c:	f000 f874 	bl	800bb88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <vPortFree+0xc0>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3301      	adds	r3, #1
 800baa6:	4a06      	ldr	r2, [pc, #24]	; (800bac0 <vPortFree+0xc0>)
 800baa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800baaa:	f7fe fedb 	bl	800a864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800baae:	bf00      	nop
 800bab0:	3718      	adds	r7, #24
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20004178 	.word	0x20004178
 800babc:	20004168 	.word	0x20004168
 800bac0:	20004174 	.word	0x20004174

0800bac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bad0:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <prvHeapInit+0xac>)
 800bad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f003 0307 	and.w	r3, r3, #7
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00c      	beq.n	800baf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3307      	adds	r3, #7
 800bae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 0307 	bic.w	r3, r3, #7
 800baea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	4a1f      	ldr	r2, [pc, #124]	; (800bb70 <prvHeapInit+0xac>)
 800baf4:	4413      	add	r3, r2
 800baf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bafc:	4a1d      	ldr	r2, [pc, #116]	; (800bb74 <prvHeapInit+0xb0>)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb02:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <prvHeapInit+0xb0>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb10:	2208      	movs	r2, #8
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1a9b      	subs	r3, r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0307 	bic.w	r3, r3, #7
 800bb1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <prvHeapInit+0xb4>)
 800bb24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <prvHeapInit+0xb4>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb2e:	4b12      	ldr	r3, [pc, #72]	; (800bb78 <prvHeapInit+0xb4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	1ad2      	subs	r2, r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb44:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <prvHeapInit+0xb4>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <prvHeapInit+0xb8>)
 800bb52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	4a09      	ldr	r2, [pc, #36]	; (800bb80 <prvHeapInit+0xbc>)
 800bb5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb5c:	4b09      	ldr	r3, [pc, #36]	; (800bb84 <prvHeapInit+0xc0>)
 800bb5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	2000055c 	.word	0x2000055c
 800bb74:	2000415c 	.word	0x2000415c
 800bb78:	20004164 	.word	0x20004164
 800bb7c:	2000416c 	.word	0x2000416c
 800bb80:	20004168 	.word	0x20004168
 800bb84:	20004178 	.word	0x20004178

0800bb88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb90:	4b28      	ldr	r3, [pc, #160]	; (800bc34 <prvInsertBlockIntoFreeList+0xac>)
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	e002      	b.n	800bb9c <prvInsertBlockIntoFreeList+0x14>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d8f7      	bhi.n	800bb96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d108      	bne.n	800bbca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	441a      	add	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	441a      	add	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d118      	bne.n	800bc10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <prvInsertBlockIntoFreeList+0xb0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d00d      	beq.n	800bc06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	441a      	add	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	601a      	str	r2, [r3, #0]
 800bc04:	e008      	b.n	800bc18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvInsertBlockIntoFreeList+0xb0>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	601a      	str	r2, [r3, #0]
 800bc0e:	e003      	b.n	800bc18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d002      	beq.n	800bc26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc26:	bf00      	nop
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	2000415c 	.word	0x2000415c
 800bc38:	20004164 	.word	0x20004164

0800bc3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bc40:	2201      	movs	r2, #1
 800bc42:	490e      	ldr	r1, [pc, #56]	; (800bc7c <MX_USB_HOST_Init+0x40>)
 800bc44:	480e      	ldr	r0, [pc, #56]	; (800bc80 <MX_USB_HOST_Init+0x44>)
 800bc46:	f7fb f9bf 	bl	8006fc8 <USBH_Init>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bc50:	f7f5 f96a 	bl	8000f28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bc54:	490b      	ldr	r1, [pc, #44]	; (800bc84 <MX_USB_HOST_Init+0x48>)
 800bc56:	480a      	ldr	r0, [pc, #40]	; (800bc80 <MX_USB_HOST_Init+0x44>)
 800bc58:	f7fb fa8b 	bl	8007172 <USBH_RegisterClass>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bc62:	f7f5 f961 	bl	8000f28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bc66:	4806      	ldr	r0, [pc, #24]	; (800bc80 <MX_USB_HOST_Init+0x44>)
 800bc68:	f7fb fb0f 	bl	800728a <USBH_Start>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bc72:	f7f5 f959 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bc76:	bf00      	nop
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800bc89 	.word	0x0800bc89
 800bc80:	2000417c 	.word	0x2000417c
 800bc84:	2000000c 	.word	0x2000000c

0800bc88 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bc94:	78fb      	ldrb	r3, [r7, #3]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d819      	bhi.n	800bcd0 <USBH_UserProcess+0x48>
 800bc9c:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <USBH_UserProcess+0x1c>)
 800bc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca2:	bf00      	nop
 800bca4:	0800bcd1 	.word	0x0800bcd1
 800bca8:	0800bcc1 	.word	0x0800bcc1
 800bcac:	0800bcd1 	.word	0x0800bcd1
 800bcb0:	0800bcc9 	.word	0x0800bcc9
 800bcb4:	0800bcb9 	.word	0x0800bcb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bcb8:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <USBH_UserProcess+0x58>)
 800bcba:	2203      	movs	r2, #3
 800bcbc:	701a      	strb	r2, [r3, #0]
  break;
 800bcbe:	e008      	b.n	800bcd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bcc0:	4b07      	ldr	r3, [pc, #28]	; (800bce0 <USBH_UserProcess+0x58>)
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	701a      	strb	r2, [r3, #0]
  break;
 800bcc6:	e004      	b.n	800bcd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bcc8:	4b05      	ldr	r3, [pc, #20]	; (800bce0 <USBH_UserProcess+0x58>)
 800bcca:	2201      	movs	r2, #1
 800bccc:	701a      	strb	r2, [r3, #0]
  break;
 800bcce:	e000      	b.n	800bcd2 <USBH_UserProcess+0x4a>

  default:
  break;
 800bcd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	20004560 	.word	0x20004560

0800bce4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	; 0x28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcec:	f107 0314 	add.w	r3, r7, #20
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	605a      	str	r2, [r3, #4]
 800bcf6:	609a      	str	r2, [r3, #8]
 800bcf8:	60da      	str	r2, [r3, #12]
 800bcfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd04:	d147      	bne.n	800bd96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd06:	2300      	movs	r3, #0
 800bd08:	613b      	str	r3, [r7, #16]
 800bd0a:	4b25      	ldr	r3, [pc, #148]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd0e:	4a24      	ldr	r2, [pc, #144]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd10:	f043 0301 	orr.w	r3, r3, #1
 800bd14:	6313      	str	r3, [r2, #48]	; 0x30
 800bd16:	4b22      	ldr	r3, [pc, #136]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	613b      	str	r3, [r7, #16]
 800bd20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bd22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bd30:	f107 0314 	add.w	r3, r7, #20
 800bd34:	4619      	mov	r1, r3
 800bd36:	481b      	ldr	r0, [pc, #108]	; (800bda4 <HAL_HCD_MspInit+0xc0>)
 800bd38:	f7f5 fd10 	bl	800175c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bd3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bd40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd42:	2302      	movs	r3, #2
 800bd44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd4e:	230a      	movs	r3, #10
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd52:	f107 0314 	add.w	r3, r7, #20
 800bd56:	4619      	mov	r1, r3
 800bd58:	4812      	ldr	r0, [pc, #72]	; (800bda4 <HAL_HCD_MspInit+0xc0>)
 800bd5a:	f7f5 fcff 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd5e:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd62:	4a0f      	ldr	r2, [pc, #60]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd68:	6353      	str	r3, [r2, #52]	; 0x34
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd72:	4a0b      	ldr	r2, [pc, #44]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd78:	6453      	str	r3, [r2, #68]	; 0x44
 800bd7a:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <HAL_HCD_MspInit+0xbc>)
 800bd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bd86:	2200      	movs	r2, #0
 800bd88:	2105      	movs	r1, #5
 800bd8a:	2043      	movs	r0, #67	; 0x43
 800bd8c:	f7f5 fcaf 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd90:	2043      	movs	r0, #67	; 0x43
 800bd92:	f7f5 fcc8 	bl	8001726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd96:	bf00      	nop
 800bd98:	3728      	adds	r7, #40	; 0x28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	40023800 	.word	0x40023800
 800bda4:	40020000 	.word	0x40020000

0800bda8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fb ff1f 	bl	8007bfa <USBH_LL_IncTimer>
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fb ff63 	bl	8007c9e <USBH_LL_Connect>
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fb ff78 	bl	8007ce4 <USBH_LL_Disconnect>
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
 800be08:	4613      	mov	r3, r2
 800be0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800be12:	4618      	mov	r0, r3
 800be14:	f7fb ffad 	bl	8007d72 <USBH_LL_NotifyURBChange>
#endif
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fb ff0d 	bl	8007c4e <USBH_LL_PortEnabled>
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fb ff19 	bl	8007c82 <USBH_LL_PortDisabled>
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800be66:	2b01      	cmp	r3, #1
 800be68:	d12a      	bne.n	800bec0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800be6a:	4a18      	ldr	r2, [pc, #96]	; (800becc <USBH_LL_Init+0x74>)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a15      	ldr	r2, [pc, #84]	; (800becc <USBH_LL_Init+0x74>)
 800be76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be7a:	4b14      	ldr	r3, [pc, #80]	; (800becc <USBH_LL_Init+0x74>)
 800be7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800be82:	4b12      	ldr	r3, [pc, #72]	; (800becc <USBH_LL_Init+0x74>)
 800be84:	2208      	movs	r2, #8
 800be86:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800be88:	4b10      	ldr	r3, [pc, #64]	; (800becc <USBH_LL_Init+0x74>)
 800be8a:	2201      	movs	r2, #1
 800be8c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be8e:	4b0f      	ldr	r3, [pc, #60]	; (800becc <USBH_LL_Init+0x74>)
 800be90:	2200      	movs	r2, #0
 800be92:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800be94:	4b0d      	ldr	r3, [pc, #52]	; (800becc <USBH_LL_Init+0x74>)
 800be96:	2202      	movs	r2, #2
 800be98:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be9a:	4b0c      	ldr	r3, [pc, #48]	; (800becc <USBH_LL_Init+0x74>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bea0:	480a      	ldr	r0, [pc, #40]	; (800becc <USBH_LL_Init+0x74>)
 800bea2:	f7f5 fe10 	bl	8001ac6 <HAL_HCD_Init>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800beac:	f7f5 f83c 	bl	8000f28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800beb0:	4806      	ldr	r0, [pc, #24]	; (800becc <USBH_LL_Init+0x74>)
 800beb2:	f7f6 fa71 	bl	8002398 <HAL_HCD_GetCurrentFrame>
 800beb6:	4603      	mov	r3, r0
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7fb fe8e 	bl	8007bdc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20004564 	.word	0x20004564

0800bed0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f6 f9de 	bl	80022a8 <HAL_HCD_Start>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f95e 	bl	800c1b4 <USBH_Get_USB_Status>
 800bef8:	4603      	mov	r3, r0
 800befa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befc:	7bbb      	ldrb	r3, [r7, #14]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7f6 f9e6 	bl	80022ee <HAL_HCD_Stop>
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 f943 	bl	800c1b4 <USBH_Get_USB_Status>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bf44:	2301      	movs	r3, #1
 800bf46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7f6 fa30 	bl	80023b4 <HAL_HCD_GetCurrentSpeed>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d00c      	beq.n	800bf74 <USBH_LL_GetSpeed+0x38>
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d80d      	bhi.n	800bf7a <USBH_LL_GetSpeed+0x3e>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d002      	beq.n	800bf68 <USBH_LL_GetSpeed+0x2c>
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d003      	beq.n	800bf6e <USBH_LL_GetSpeed+0x32>
 800bf66:	e008      	b.n	800bf7a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf6c:	e008      	b.n	800bf80 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	73fb      	strb	r3, [r7, #15]
    break;
 800bf72:	e005      	b.n	800bf80 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bf74:	2302      	movs	r3, #2
 800bf76:	73fb      	strb	r3, [r7, #15]
    break;
 800bf78:	e002      	b.n	800bf80 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf7e:	bf00      	nop
  }
  return  speed;
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f6 f9c1 	bl	8002328 <HAL_HCD_ResetPort>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 f901 	bl	800c1b4 <USBH_Get_USB_Status>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfd2:	78fa      	ldrb	r2, [r7, #3]
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7f6 f9c9 	bl	800236e <HAL_HCD_HC_GetXferCount>
 800bfdc:	4603      	mov	r3, r0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bfe6:	b590      	push	{r4, r7, lr}
 800bfe8:	b089      	sub	sp, #36	; 0x24
 800bfea:	af04      	add	r7, sp, #16
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	4608      	mov	r0, r1
 800bff0:	4611      	mov	r1, r2
 800bff2:	461a      	mov	r2, r3
 800bff4:	4603      	mov	r3, r0
 800bff6:	70fb      	strb	r3, [r7, #3]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70bb      	strb	r3, [r7, #2]
 800bffc:	4613      	mov	r3, r2
 800bffe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c00e:	787c      	ldrb	r4, [r7, #1]
 800c010:	78ba      	ldrb	r2, [r7, #2]
 800c012:	78f9      	ldrb	r1, [r7, #3]
 800c014:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c016:	9302      	str	r3, [sp, #8]
 800c018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	4623      	mov	r3, r4
 800c026:	f7f5 fdb5 	bl	8001b94 <HAL_HCD_HC_Init>
 800c02a:	4603      	mov	r3, r0
 800c02c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f8bf 	bl	800c1b4 <USBH_Get_USB_Status>
 800c036:	4603      	mov	r3, r0
 800c038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	bd90      	pop	{r4, r7, pc}

0800c044 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c05e:	78fa      	ldrb	r2, [r7, #3]
 800c060:	4611      	mov	r1, r2
 800c062:	4618      	mov	r0, r3
 800c064:	f7f5 fe4e 	bl	8001d04 <HAL_HCD_HC_Halt>
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 f8a0 	bl	800c1b4 <USBH_Get_USB_Status>
 800c074:	4603      	mov	r3, r0
 800c076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c078:	7bbb      	ldrb	r3, [r7, #14]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c082:	b590      	push	{r4, r7, lr}
 800c084:	b089      	sub	sp, #36	; 0x24
 800c086:	af04      	add	r7, sp, #16
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	4608      	mov	r0, r1
 800c08c:	4611      	mov	r1, r2
 800c08e:	461a      	mov	r2, r3
 800c090:	4603      	mov	r3, r0
 800c092:	70fb      	strb	r3, [r7, #3]
 800c094:	460b      	mov	r3, r1
 800c096:	70bb      	strb	r3, [r7, #2]
 800c098:	4613      	mov	r3, r2
 800c09a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c0aa:	787c      	ldrb	r4, [r7, #1]
 800c0ac:	78ba      	ldrb	r2, [r7, #2]
 800c0ae:	78f9      	ldrb	r1, [r7, #3]
 800c0b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c0b4:	9303      	str	r3, [sp, #12]
 800c0b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c0b8:	9302      	str	r3, [sp, #8]
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	4623      	mov	r3, r4
 800c0c6:	f7f5 fe41 	bl	8001d4c <HAL_HCD_HC_SubmitRequest>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 f86f 	bl	800c1b4 <USBH_Get_USB_Status>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd90      	pop	{r4, r7, pc}

0800c0e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0f6:	78fa      	ldrb	r2, [r7, #3]
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7f6 f922 	bl	8002344 <HAL_HCD_HC_GetURBState>
 800c100:	4603      	mov	r3, r0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	460b      	mov	r3, r1
 800c114:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d103      	bne.n	800c128 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f872 	bl	800c20c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c128:	20c8      	movs	r0, #200	; 0xc8
 800c12a:	f7f5 f9e1 	bl	80014f0 <HAL_Delay>
  return USBH_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
 800c144:	4613      	mov	r3, r2
 800c146:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c14e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c150:	78fa      	ldrb	r2, [r7, #3]
 800c152:	68f9      	ldr	r1, [r7, #12]
 800c154:	4613      	mov	r3, r2
 800c156:	011b      	lsls	r3, r3, #4
 800c158:	1a9b      	subs	r3, r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	440b      	add	r3, r1
 800c15e:	3317      	adds	r3, #23
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00a      	beq.n	800c17c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c166:	78fa      	ldrb	r2, [r7, #3]
 800c168:	68f9      	ldr	r1, [r7, #12]
 800c16a:	4613      	mov	r3, r2
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	1a9b      	subs	r3, r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	440b      	add	r3, r1
 800c174:	333c      	adds	r3, #60	; 0x3c
 800c176:	78ba      	ldrb	r2, [r7, #2]
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	e009      	b.n	800c190 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c17c:	78fa      	ldrb	r2, [r7, #3]
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	4613      	mov	r3, r2
 800c182:	011b      	lsls	r3, r3, #4
 800c184:	1a9b      	subs	r3, r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	333d      	adds	r3, #61	; 0x3d
 800c18c:	78ba      	ldrb	r2, [r7, #2]
 800c18e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b082      	sub	sp, #8
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7f5 f9a2 	bl	80014f0 <HAL_Delay>
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d817      	bhi.n	800c1f8 <USBH_Get_USB_Status+0x44>
 800c1c8:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <USBH_Get_USB_Status+0x1c>)
 800c1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ce:	bf00      	nop
 800c1d0:	0800c1e1 	.word	0x0800c1e1
 800c1d4:	0800c1e7 	.word	0x0800c1e7
 800c1d8:	0800c1ed 	.word	0x0800c1ed
 800c1dc:	0800c1f3 	.word	0x0800c1f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1e4:	e00b      	b.n	800c1fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ea:	e008      	b.n	800c1fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f0:	e005      	b.n	800c1fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c1f2:	2302      	movs	r3, #2
 800c1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f6:	e002      	b.n	800c1fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c1fc:	bf00      	nop
  }
  return usb_status;
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c220:	2300      	movs	r3, #0
 800c222:	73fb      	strb	r3, [r7, #15]
 800c224:	e001      	b.n	800c22a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c226:	2301      	movs	r3, #1
 800c228:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
 800c22c:	461a      	mov	r2, r3
 800c22e:	2101      	movs	r1, #1
 800c230:	4803      	ldr	r0, [pc, #12]	; (800c240 <MX_DriverVbusFS+0x34>)
 800c232:	f7f5 fc2f 	bl	8001a94 <HAL_GPIO_WritePin>
}
 800c236:	bf00      	nop
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	40020800 	.word	0x40020800

0800c244 <malloc>:
 800c244:	4b02      	ldr	r3, [pc, #8]	; (800c250 <malloc+0xc>)
 800c246:	4601      	mov	r1, r0
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	f000 b82b 	b.w	800c2a4 <_malloc_r>
 800c24e:	bf00      	nop
 800c250:	20000088 	.word	0x20000088

0800c254 <free>:
 800c254:	4b02      	ldr	r3, [pc, #8]	; (800c260 <free+0xc>)
 800c256:	4601      	mov	r1, r0
 800c258:	6818      	ldr	r0, [r3, #0]
 800c25a:	f000 ba7b 	b.w	800c754 <_free_r>
 800c25e:	bf00      	nop
 800c260:	20000088 	.word	0x20000088

0800c264 <sbrk_aligned>:
 800c264:	b570      	push	{r4, r5, r6, lr}
 800c266:	4e0e      	ldr	r6, [pc, #56]	; (800c2a0 <sbrk_aligned+0x3c>)
 800c268:	460c      	mov	r4, r1
 800c26a:	6831      	ldr	r1, [r6, #0]
 800c26c:	4605      	mov	r5, r0
 800c26e:	b911      	cbnz	r1, 800c276 <sbrk_aligned+0x12>
 800c270:	f000 fa06 	bl	800c680 <_sbrk_r>
 800c274:	6030      	str	r0, [r6, #0]
 800c276:	4621      	mov	r1, r4
 800c278:	4628      	mov	r0, r5
 800c27a:	f000 fa01 	bl	800c680 <_sbrk_r>
 800c27e:	1c43      	adds	r3, r0, #1
 800c280:	d00a      	beq.n	800c298 <sbrk_aligned+0x34>
 800c282:	1cc4      	adds	r4, r0, #3
 800c284:	f024 0403 	bic.w	r4, r4, #3
 800c288:	42a0      	cmp	r0, r4
 800c28a:	d007      	beq.n	800c29c <sbrk_aligned+0x38>
 800c28c:	1a21      	subs	r1, r4, r0
 800c28e:	4628      	mov	r0, r5
 800c290:	f000 f9f6 	bl	800c680 <_sbrk_r>
 800c294:	3001      	adds	r0, #1
 800c296:	d101      	bne.n	800c29c <sbrk_aligned+0x38>
 800c298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c29c:	4620      	mov	r0, r4
 800c29e:	bd70      	pop	{r4, r5, r6, pc}
 800c2a0:	20004948 	.word	0x20004948

0800c2a4 <_malloc_r>:
 800c2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a8:	1ccd      	adds	r5, r1, #3
 800c2aa:	f025 0503 	bic.w	r5, r5, #3
 800c2ae:	3508      	adds	r5, #8
 800c2b0:	2d0c      	cmp	r5, #12
 800c2b2:	bf38      	it	cc
 800c2b4:	250c      	movcc	r5, #12
 800c2b6:	2d00      	cmp	r5, #0
 800c2b8:	4607      	mov	r7, r0
 800c2ba:	db01      	blt.n	800c2c0 <_malloc_r+0x1c>
 800c2bc:	42a9      	cmp	r1, r5
 800c2be:	d905      	bls.n	800c2cc <_malloc_r+0x28>
 800c2c0:	230c      	movs	r3, #12
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	2600      	movs	r6, #0
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3a0 <_malloc_r+0xfc>
 800c2d0:	f000 f868 	bl	800c3a4 <__malloc_lock>
 800c2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d8:	461c      	mov	r4, r3
 800c2da:	bb5c      	cbnz	r4, 800c334 <_malloc_r+0x90>
 800c2dc:	4629      	mov	r1, r5
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f7ff ffc0 	bl	800c264 <sbrk_aligned>
 800c2e4:	1c43      	adds	r3, r0, #1
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	d155      	bne.n	800c396 <_malloc_r+0xf2>
 800c2ea:	f8d8 4000 	ldr.w	r4, [r8]
 800c2ee:	4626      	mov	r6, r4
 800c2f0:	2e00      	cmp	r6, #0
 800c2f2:	d145      	bne.n	800c380 <_malloc_r+0xdc>
 800c2f4:	2c00      	cmp	r4, #0
 800c2f6:	d048      	beq.n	800c38a <_malloc_r+0xe6>
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	eb04 0903 	add.w	r9, r4, r3
 800c302:	f000 f9bd 	bl	800c680 <_sbrk_r>
 800c306:	4581      	cmp	r9, r0
 800c308:	d13f      	bne.n	800c38a <_malloc_r+0xe6>
 800c30a:	6821      	ldr	r1, [r4, #0]
 800c30c:	1a6d      	subs	r5, r5, r1
 800c30e:	4629      	mov	r1, r5
 800c310:	4638      	mov	r0, r7
 800c312:	f7ff ffa7 	bl	800c264 <sbrk_aligned>
 800c316:	3001      	adds	r0, #1
 800c318:	d037      	beq.n	800c38a <_malloc_r+0xe6>
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	442b      	add	r3, r5
 800c31e:	6023      	str	r3, [r4, #0]
 800c320:	f8d8 3000 	ldr.w	r3, [r8]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d038      	beq.n	800c39a <_malloc_r+0xf6>
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	42a2      	cmp	r2, r4
 800c32c:	d12b      	bne.n	800c386 <_malloc_r+0xe2>
 800c32e:	2200      	movs	r2, #0
 800c330:	605a      	str	r2, [r3, #4]
 800c332:	e00f      	b.n	800c354 <_malloc_r+0xb0>
 800c334:	6822      	ldr	r2, [r4, #0]
 800c336:	1b52      	subs	r2, r2, r5
 800c338:	d41f      	bmi.n	800c37a <_malloc_r+0xd6>
 800c33a:	2a0b      	cmp	r2, #11
 800c33c:	d917      	bls.n	800c36e <_malloc_r+0xca>
 800c33e:	1961      	adds	r1, r4, r5
 800c340:	42a3      	cmp	r3, r4
 800c342:	6025      	str	r5, [r4, #0]
 800c344:	bf18      	it	ne
 800c346:	6059      	strne	r1, [r3, #4]
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	bf08      	it	eq
 800c34c:	f8c8 1000 	streq.w	r1, [r8]
 800c350:	5162      	str	r2, [r4, r5]
 800c352:	604b      	str	r3, [r1, #4]
 800c354:	4638      	mov	r0, r7
 800c356:	f104 060b 	add.w	r6, r4, #11
 800c35a:	f000 f829 	bl	800c3b0 <__malloc_unlock>
 800c35e:	f026 0607 	bic.w	r6, r6, #7
 800c362:	1d23      	adds	r3, r4, #4
 800c364:	1af2      	subs	r2, r6, r3
 800c366:	d0ae      	beq.n	800c2c6 <_malloc_r+0x22>
 800c368:	1b9b      	subs	r3, r3, r6
 800c36a:	50a3      	str	r3, [r4, r2]
 800c36c:	e7ab      	b.n	800c2c6 <_malloc_r+0x22>
 800c36e:	42a3      	cmp	r3, r4
 800c370:	6862      	ldr	r2, [r4, #4]
 800c372:	d1dd      	bne.n	800c330 <_malloc_r+0x8c>
 800c374:	f8c8 2000 	str.w	r2, [r8]
 800c378:	e7ec      	b.n	800c354 <_malloc_r+0xb0>
 800c37a:	4623      	mov	r3, r4
 800c37c:	6864      	ldr	r4, [r4, #4]
 800c37e:	e7ac      	b.n	800c2da <_malloc_r+0x36>
 800c380:	4634      	mov	r4, r6
 800c382:	6876      	ldr	r6, [r6, #4]
 800c384:	e7b4      	b.n	800c2f0 <_malloc_r+0x4c>
 800c386:	4613      	mov	r3, r2
 800c388:	e7cc      	b.n	800c324 <_malloc_r+0x80>
 800c38a:	230c      	movs	r3, #12
 800c38c:	603b      	str	r3, [r7, #0]
 800c38e:	4638      	mov	r0, r7
 800c390:	f000 f80e 	bl	800c3b0 <__malloc_unlock>
 800c394:	e797      	b.n	800c2c6 <_malloc_r+0x22>
 800c396:	6025      	str	r5, [r4, #0]
 800c398:	e7dc      	b.n	800c354 <_malloc_r+0xb0>
 800c39a:	605b      	str	r3, [r3, #4]
 800c39c:	deff      	udf	#255	; 0xff
 800c39e:	bf00      	nop
 800c3a0:	20004944 	.word	0x20004944

0800c3a4 <__malloc_lock>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__malloc_lock+0x8>)
 800c3a6:	f000 b9a6 	b.w	800c6f6 <__retarget_lock_acquire_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	20004a88 	.word	0x20004a88

0800c3b0 <__malloc_unlock>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__malloc_unlock+0x8>)
 800c3b2:	f000 b9a1 	b.w	800c6f8 <__retarget_lock_release_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	20004a88 	.word	0x20004a88

0800c3bc <srand>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4b10      	ldr	r3, [pc, #64]	; (800c400 <srand+0x44>)
 800c3c0:	681d      	ldr	r5, [r3, #0]
 800c3c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	b9b3      	cbnz	r3, 800c3f6 <srand+0x3a>
 800c3c8:	2018      	movs	r0, #24
 800c3ca:	f7ff ff3b 	bl	800c244 <malloc>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	6328      	str	r0, [r5, #48]	; 0x30
 800c3d2:	b920      	cbnz	r0, 800c3de <srand+0x22>
 800c3d4:	4b0b      	ldr	r3, [pc, #44]	; (800c404 <srand+0x48>)
 800c3d6:	480c      	ldr	r0, [pc, #48]	; (800c408 <srand+0x4c>)
 800c3d8:	2146      	movs	r1, #70	; 0x46
 800c3da:	f000 f99d 	bl	800c718 <__assert_func>
 800c3de:	490b      	ldr	r1, [pc, #44]	; (800c40c <srand+0x50>)
 800c3e0:	4b0b      	ldr	r3, [pc, #44]	; (800c410 <srand+0x54>)
 800c3e2:	e9c0 1300 	strd	r1, r3, [r0]
 800c3e6:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <srand+0x58>)
 800c3e8:	6083      	str	r3, [r0, #8]
 800c3ea:	230b      	movs	r3, #11
 800c3ec:	8183      	strh	r3, [r0, #12]
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c3f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	611c      	str	r4, [r3, #16]
 800c3fc:	615a      	str	r2, [r3, #20]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	20000088 	.word	0x20000088
 800c404:	0800d450 	.word	0x0800d450
 800c408:	0800d467 	.word	0x0800d467
 800c40c:	abcd330e 	.word	0xabcd330e
 800c410:	e66d1234 	.word	0xe66d1234
 800c414:	0005deec 	.word	0x0005deec

0800c418 <rand>:
 800c418:	4b16      	ldr	r3, [pc, #88]	; (800c474 <rand+0x5c>)
 800c41a:	b510      	push	{r4, lr}
 800c41c:	681c      	ldr	r4, [r3, #0]
 800c41e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c420:	b9b3      	cbnz	r3, 800c450 <rand+0x38>
 800c422:	2018      	movs	r0, #24
 800c424:	f7ff ff0e 	bl	800c244 <malloc>
 800c428:	4602      	mov	r2, r0
 800c42a:	6320      	str	r0, [r4, #48]	; 0x30
 800c42c:	b920      	cbnz	r0, 800c438 <rand+0x20>
 800c42e:	4b12      	ldr	r3, [pc, #72]	; (800c478 <rand+0x60>)
 800c430:	4812      	ldr	r0, [pc, #72]	; (800c47c <rand+0x64>)
 800c432:	2152      	movs	r1, #82	; 0x52
 800c434:	f000 f970 	bl	800c718 <__assert_func>
 800c438:	4911      	ldr	r1, [pc, #68]	; (800c480 <rand+0x68>)
 800c43a:	4b12      	ldr	r3, [pc, #72]	; (800c484 <rand+0x6c>)
 800c43c:	e9c0 1300 	strd	r1, r3, [r0]
 800c440:	4b11      	ldr	r3, [pc, #68]	; (800c488 <rand+0x70>)
 800c442:	6083      	str	r3, [r0, #8]
 800c444:	230b      	movs	r3, #11
 800c446:	8183      	strh	r3, [r0, #12]
 800c448:	2100      	movs	r1, #0
 800c44a:	2001      	movs	r0, #1
 800c44c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c450:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c452:	480e      	ldr	r0, [pc, #56]	; (800c48c <rand+0x74>)
 800c454:	690b      	ldr	r3, [r1, #16]
 800c456:	694c      	ldr	r4, [r1, #20]
 800c458:	4a0d      	ldr	r2, [pc, #52]	; (800c490 <rand+0x78>)
 800c45a:	4358      	muls	r0, r3
 800c45c:	fb02 0004 	mla	r0, r2, r4, r0
 800c460:	fba3 3202 	umull	r3, r2, r3, r2
 800c464:	3301      	adds	r3, #1
 800c466:	eb40 0002 	adc.w	r0, r0, r2
 800c46a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c46e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c472:	bd10      	pop	{r4, pc}
 800c474:	20000088 	.word	0x20000088
 800c478:	0800d450 	.word	0x0800d450
 800c47c:	0800d467 	.word	0x0800d467
 800c480:	abcd330e 	.word	0xabcd330e
 800c484:	e66d1234 	.word	0xe66d1234
 800c488:	0005deec 	.word	0x0005deec
 800c48c:	5851f42d 	.word	0x5851f42d
 800c490:	4c957f2d 	.word	0x4c957f2d

0800c494 <std>:
 800c494:	2300      	movs	r3, #0
 800c496:	b510      	push	{r4, lr}
 800c498:	4604      	mov	r4, r0
 800c49a:	e9c0 3300 	strd	r3, r3, [r0]
 800c49e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4a2:	6083      	str	r3, [r0, #8]
 800c4a4:	8181      	strh	r1, [r0, #12]
 800c4a6:	6643      	str	r3, [r0, #100]	; 0x64
 800c4a8:	81c2      	strh	r2, [r0, #14]
 800c4aa:	6183      	str	r3, [r0, #24]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	2208      	movs	r2, #8
 800c4b0:	305c      	adds	r0, #92	; 0x5c
 800c4b2:	f000 f8b1 	bl	800c618 <memset>
 800c4b6:	4b0d      	ldr	r3, [pc, #52]	; (800c4ec <std+0x58>)
 800c4b8:	6263      	str	r3, [r4, #36]	; 0x24
 800c4ba:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <std+0x5c>)
 800c4bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4be:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <std+0x60>)
 800c4c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4c2:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <std+0x64>)
 800c4c4:	6323      	str	r3, [r4, #48]	; 0x30
 800c4c6:	4b0d      	ldr	r3, [pc, #52]	; (800c4fc <std+0x68>)
 800c4c8:	6224      	str	r4, [r4, #32]
 800c4ca:	429c      	cmp	r4, r3
 800c4cc:	d006      	beq.n	800c4dc <std+0x48>
 800c4ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c4d2:	4294      	cmp	r4, r2
 800c4d4:	d002      	beq.n	800c4dc <std+0x48>
 800c4d6:	33d0      	adds	r3, #208	; 0xd0
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	d105      	bne.n	800c4e8 <std+0x54>
 800c4dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e4:	f000 b906 	b.w	800c6f4 <__retarget_lock_init_recursive>
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	bf00      	nop
 800c4ec:	0800c949 	.word	0x0800c949
 800c4f0:	0800c96b 	.word	0x0800c96b
 800c4f4:	0800c9a3 	.word	0x0800c9a3
 800c4f8:	0800c9c7 	.word	0x0800c9c7
 800c4fc:	2000494c 	.word	0x2000494c

0800c500 <stdio_exit_handler>:
 800c500:	4a02      	ldr	r2, [pc, #8]	; (800c50c <stdio_exit_handler+0xc>)
 800c502:	4903      	ldr	r1, [pc, #12]	; (800c510 <stdio_exit_handler+0x10>)
 800c504:	4803      	ldr	r0, [pc, #12]	; (800c514 <stdio_exit_handler+0x14>)
 800c506:	f000 b869 	b.w	800c5dc <_fwalk_sglue>
 800c50a:	bf00      	nop
 800c50c:	20000030 	.word	0x20000030
 800c510:	0800c8f9 	.word	0x0800c8f9
 800c514:	2000003c 	.word	0x2000003c

0800c518 <cleanup_stdio>:
 800c518:	6841      	ldr	r1, [r0, #4]
 800c51a:	4b0c      	ldr	r3, [pc, #48]	; (800c54c <cleanup_stdio+0x34>)
 800c51c:	4299      	cmp	r1, r3
 800c51e:	b510      	push	{r4, lr}
 800c520:	4604      	mov	r4, r0
 800c522:	d001      	beq.n	800c528 <cleanup_stdio+0x10>
 800c524:	f000 f9e8 	bl	800c8f8 <_fflush_r>
 800c528:	68a1      	ldr	r1, [r4, #8]
 800c52a:	4b09      	ldr	r3, [pc, #36]	; (800c550 <cleanup_stdio+0x38>)
 800c52c:	4299      	cmp	r1, r3
 800c52e:	d002      	beq.n	800c536 <cleanup_stdio+0x1e>
 800c530:	4620      	mov	r0, r4
 800c532:	f000 f9e1 	bl	800c8f8 <_fflush_r>
 800c536:	68e1      	ldr	r1, [r4, #12]
 800c538:	4b06      	ldr	r3, [pc, #24]	; (800c554 <cleanup_stdio+0x3c>)
 800c53a:	4299      	cmp	r1, r3
 800c53c:	d004      	beq.n	800c548 <cleanup_stdio+0x30>
 800c53e:	4620      	mov	r0, r4
 800c540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c544:	f000 b9d8 	b.w	800c8f8 <_fflush_r>
 800c548:	bd10      	pop	{r4, pc}
 800c54a:	bf00      	nop
 800c54c:	2000494c 	.word	0x2000494c
 800c550:	200049b4 	.word	0x200049b4
 800c554:	20004a1c 	.word	0x20004a1c

0800c558 <global_stdio_init.part.0>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	4b0b      	ldr	r3, [pc, #44]	; (800c588 <global_stdio_init.part.0+0x30>)
 800c55c:	4c0b      	ldr	r4, [pc, #44]	; (800c58c <global_stdio_init.part.0+0x34>)
 800c55e:	4a0c      	ldr	r2, [pc, #48]	; (800c590 <global_stdio_init.part.0+0x38>)
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	4620      	mov	r0, r4
 800c564:	2200      	movs	r2, #0
 800c566:	2104      	movs	r1, #4
 800c568:	f7ff ff94 	bl	800c494 <std>
 800c56c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c570:	2201      	movs	r2, #1
 800c572:	2109      	movs	r1, #9
 800c574:	f7ff ff8e 	bl	800c494 <std>
 800c578:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c57c:	2202      	movs	r2, #2
 800c57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c582:	2112      	movs	r1, #18
 800c584:	f7ff bf86 	b.w	800c494 <std>
 800c588:	20004a84 	.word	0x20004a84
 800c58c:	2000494c 	.word	0x2000494c
 800c590:	0800c501 	.word	0x0800c501

0800c594 <__sfp_lock_acquire>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__sfp_lock_acquire+0x8>)
 800c596:	f000 b8ae 	b.w	800c6f6 <__retarget_lock_acquire_recursive>
 800c59a:	bf00      	nop
 800c59c:	20004a89 	.word	0x20004a89

0800c5a0 <__sfp_lock_release>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__sfp_lock_release+0x8>)
 800c5a2:	f000 b8a9 	b.w	800c6f8 <__retarget_lock_release_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	20004a89 	.word	0x20004a89

0800c5ac <__sinit>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	f7ff fff0 	bl	800c594 <__sfp_lock_acquire>
 800c5b4:	6a23      	ldr	r3, [r4, #32]
 800c5b6:	b11b      	cbz	r3, 800c5c0 <__sinit+0x14>
 800c5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5bc:	f7ff bff0 	b.w	800c5a0 <__sfp_lock_release>
 800c5c0:	4b04      	ldr	r3, [pc, #16]	; (800c5d4 <__sinit+0x28>)
 800c5c2:	6223      	str	r3, [r4, #32]
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <__sinit+0x2c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1f5      	bne.n	800c5b8 <__sinit+0xc>
 800c5cc:	f7ff ffc4 	bl	800c558 <global_stdio_init.part.0>
 800c5d0:	e7f2      	b.n	800c5b8 <__sinit+0xc>
 800c5d2:	bf00      	nop
 800c5d4:	0800c519 	.word	0x0800c519
 800c5d8:	20004a84 	.word	0x20004a84

0800c5dc <_fwalk_sglue>:
 800c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	4688      	mov	r8, r1
 800c5e4:	4614      	mov	r4, r2
 800c5e6:	2600      	movs	r6, #0
 800c5e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5ec:	f1b9 0901 	subs.w	r9, r9, #1
 800c5f0:	d505      	bpl.n	800c5fe <_fwalk_sglue+0x22>
 800c5f2:	6824      	ldr	r4, [r4, #0]
 800c5f4:	2c00      	cmp	r4, #0
 800c5f6:	d1f7      	bne.n	800c5e8 <_fwalk_sglue+0xc>
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d907      	bls.n	800c614 <_fwalk_sglue+0x38>
 800c604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c608:	3301      	adds	r3, #1
 800c60a:	d003      	beq.n	800c614 <_fwalk_sglue+0x38>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4638      	mov	r0, r7
 800c610:	47c0      	blx	r8
 800c612:	4306      	orrs	r6, r0
 800c614:	3568      	adds	r5, #104	; 0x68
 800c616:	e7e9      	b.n	800c5ec <_fwalk_sglue+0x10>

0800c618 <memset>:
 800c618:	4402      	add	r2, r0
 800c61a:	4603      	mov	r3, r0
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d100      	bne.n	800c622 <memset+0xa>
 800c620:	4770      	bx	lr
 800c622:	f803 1b01 	strb.w	r1, [r3], #1
 800c626:	e7f9      	b.n	800c61c <memset+0x4>

0800c628 <time>:
 800c628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c62a:	4b0b      	ldr	r3, [pc, #44]	; (800c658 <time+0x30>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	4669      	mov	r1, sp
 800c630:	4604      	mov	r4, r0
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	f000 f812 	bl	800c65c <_gettimeofday_r>
 800c638:	2800      	cmp	r0, #0
 800c63a:	bfbe      	ittt	lt
 800c63c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800c640:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c644:	e9cd 2300 	strdlt	r2, r3, [sp]
 800c648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c64c:	b10c      	cbz	r4, 800c652 <time+0x2a>
 800c64e:	e9c4 0100 	strd	r0, r1, [r4]
 800c652:	b004      	add	sp, #16
 800c654:	bd10      	pop	{r4, pc}
 800c656:	bf00      	nop
 800c658:	20000088 	.word	0x20000088

0800c65c <_gettimeofday_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4d07      	ldr	r5, [pc, #28]	; (800c67c <_gettimeofday_r+0x20>)
 800c660:	2300      	movs	r3, #0
 800c662:	4604      	mov	r4, r0
 800c664:	4608      	mov	r0, r1
 800c666:	4611      	mov	r1, r2
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	f000 fe41 	bl	800d2f0 <_gettimeofday>
 800c66e:	1c43      	adds	r3, r0, #1
 800c670:	d102      	bne.n	800c678 <_gettimeofday_r+0x1c>
 800c672:	682b      	ldr	r3, [r5, #0]
 800c674:	b103      	cbz	r3, 800c678 <_gettimeofday_r+0x1c>
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	bd38      	pop	{r3, r4, r5, pc}
 800c67a:	bf00      	nop
 800c67c:	20004a8c 	.word	0x20004a8c

0800c680 <_sbrk_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d06      	ldr	r5, [pc, #24]	; (800c69c <_sbrk_r+0x1c>)
 800c684:	2300      	movs	r3, #0
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	f7f4 fe4c 	bl	8001328 <_sbrk>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d102      	bne.n	800c69a <_sbrk_r+0x1a>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	b103      	cbz	r3, 800c69a <_sbrk_r+0x1a>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	20004a8c 	.word	0x20004a8c

0800c6a0 <__errno>:
 800c6a0:	4b01      	ldr	r3, [pc, #4]	; (800c6a8 <__errno+0x8>)
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	20000088 	.word	0x20000088

0800c6ac <__libc_init_array>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4d0d      	ldr	r5, [pc, #52]	; (800c6e4 <__libc_init_array+0x38>)
 800c6b0:	4c0d      	ldr	r4, [pc, #52]	; (800c6e8 <__libc_init_array+0x3c>)
 800c6b2:	1b64      	subs	r4, r4, r5
 800c6b4:	10a4      	asrs	r4, r4, #2
 800c6b6:	2600      	movs	r6, #0
 800c6b8:	42a6      	cmp	r6, r4
 800c6ba:	d109      	bne.n	800c6d0 <__libc_init_array+0x24>
 800c6bc:	4d0b      	ldr	r5, [pc, #44]	; (800c6ec <__libc_init_array+0x40>)
 800c6be:	4c0c      	ldr	r4, [pc, #48]	; (800c6f0 <__libc_init_array+0x44>)
 800c6c0:	f000 fe1e 	bl	800d300 <_init>
 800c6c4:	1b64      	subs	r4, r4, r5
 800c6c6:	10a4      	asrs	r4, r4, #2
 800c6c8:	2600      	movs	r6, #0
 800c6ca:	42a6      	cmp	r6, r4
 800c6cc:	d105      	bne.n	800c6da <__libc_init_array+0x2e>
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6d4:	4798      	blx	r3
 800c6d6:	3601      	adds	r6, #1
 800c6d8:	e7ee      	b.n	800c6b8 <__libc_init_array+0xc>
 800c6da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6de:	4798      	blx	r3
 800c6e0:	3601      	adds	r6, #1
 800c6e2:	e7f2      	b.n	800c6ca <__libc_init_array+0x1e>
 800c6e4:	0800d538 	.word	0x0800d538
 800c6e8:	0800d538 	.word	0x0800d538
 800c6ec:	0800d538 	.word	0x0800d538
 800c6f0:	0800d53c 	.word	0x0800d53c

0800c6f4 <__retarget_lock_init_recursive>:
 800c6f4:	4770      	bx	lr

0800c6f6 <__retarget_lock_acquire_recursive>:
 800c6f6:	4770      	bx	lr

0800c6f8 <__retarget_lock_release_recursive>:
 800c6f8:	4770      	bx	lr

0800c6fa <memcpy>:
 800c6fa:	440a      	add	r2, r1
 800c6fc:	4291      	cmp	r1, r2
 800c6fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c702:	d100      	bne.n	800c706 <memcpy+0xc>
 800c704:	4770      	bx	lr
 800c706:	b510      	push	{r4, lr}
 800c708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c70c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c710:	4291      	cmp	r1, r2
 800c712:	d1f9      	bne.n	800c708 <memcpy+0xe>
 800c714:	bd10      	pop	{r4, pc}
	...

0800c718 <__assert_func>:
 800c718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c71a:	4614      	mov	r4, r2
 800c71c:	461a      	mov	r2, r3
 800c71e:	4b09      	ldr	r3, [pc, #36]	; (800c744 <__assert_func+0x2c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4605      	mov	r5, r0
 800c724:	68d8      	ldr	r0, [r3, #12]
 800c726:	b14c      	cbz	r4, 800c73c <__assert_func+0x24>
 800c728:	4b07      	ldr	r3, [pc, #28]	; (800c748 <__assert_func+0x30>)
 800c72a:	9100      	str	r1, [sp, #0]
 800c72c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c730:	4906      	ldr	r1, [pc, #24]	; (800c74c <__assert_func+0x34>)
 800c732:	462b      	mov	r3, r5
 800c734:	f000 f94c 	bl	800c9d0 <fiprintf>
 800c738:	f000 f9a2 	bl	800ca80 <abort>
 800c73c:	4b04      	ldr	r3, [pc, #16]	; (800c750 <__assert_func+0x38>)
 800c73e:	461c      	mov	r4, r3
 800c740:	e7f3      	b.n	800c72a <__assert_func+0x12>
 800c742:	bf00      	nop
 800c744:	20000088 	.word	0x20000088
 800c748:	0800d4bf 	.word	0x0800d4bf
 800c74c:	0800d4cc 	.word	0x0800d4cc
 800c750:	0800d4fa 	.word	0x0800d4fa

0800c754 <_free_r>:
 800c754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c756:	2900      	cmp	r1, #0
 800c758:	d044      	beq.n	800c7e4 <_free_r+0x90>
 800c75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c75e:	9001      	str	r0, [sp, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f1a1 0404 	sub.w	r4, r1, #4
 800c766:	bfb8      	it	lt
 800c768:	18e4      	addlt	r4, r4, r3
 800c76a:	f7ff fe1b 	bl	800c3a4 <__malloc_lock>
 800c76e:	4a1e      	ldr	r2, [pc, #120]	; (800c7e8 <_free_r+0x94>)
 800c770:	9801      	ldr	r0, [sp, #4]
 800c772:	6813      	ldr	r3, [r2, #0]
 800c774:	b933      	cbnz	r3, 800c784 <_free_r+0x30>
 800c776:	6063      	str	r3, [r4, #4]
 800c778:	6014      	str	r4, [r2, #0]
 800c77a:	b003      	add	sp, #12
 800c77c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c780:	f7ff be16 	b.w	800c3b0 <__malloc_unlock>
 800c784:	42a3      	cmp	r3, r4
 800c786:	d908      	bls.n	800c79a <_free_r+0x46>
 800c788:	6825      	ldr	r5, [r4, #0]
 800c78a:	1961      	adds	r1, r4, r5
 800c78c:	428b      	cmp	r3, r1
 800c78e:	bf01      	itttt	eq
 800c790:	6819      	ldreq	r1, [r3, #0]
 800c792:	685b      	ldreq	r3, [r3, #4]
 800c794:	1949      	addeq	r1, r1, r5
 800c796:	6021      	streq	r1, [r4, #0]
 800c798:	e7ed      	b.n	800c776 <_free_r+0x22>
 800c79a:	461a      	mov	r2, r3
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	b10b      	cbz	r3, 800c7a4 <_free_r+0x50>
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	d9fa      	bls.n	800c79a <_free_r+0x46>
 800c7a4:	6811      	ldr	r1, [r2, #0]
 800c7a6:	1855      	adds	r5, r2, r1
 800c7a8:	42a5      	cmp	r5, r4
 800c7aa:	d10b      	bne.n	800c7c4 <_free_r+0x70>
 800c7ac:	6824      	ldr	r4, [r4, #0]
 800c7ae:	4421      	add	r1, r4
 800c7b0:	1854      	adds	r4, r2, r1
 800c7b2:	42a3      	cmp	r3, r4
 800c7b4:	6011      	str	r1, [r2, #0]
 800c7b6:	d1e0      	bne.n	800c77a <_free_r+0x26>
 800c7b8:	681c      	ldr	r4, [r3, #0]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	6053      	str	r3, [r2, #4]
 800c7be:	440c      	add	r4, r1
 800c7c0:	6014      	str	r4, [r2, #0]
 800c7c2:	e7da      	b.n	800c77a <_free_r+0x26>
 800c7c4:	d902      	bls.n	800c7cc <_free_r+0x78>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	6003      	str	r3, [r0, #0]
 800c7ca:	e7d6      	b.n	800c77a <_free_r+0x26>
 800c7cc:	6825      	ldr	r5, [r4, #0]
 800c7ce:	1961      	adds	r1, r4, r5
 800c7d0:	428b      	cmp	r3, r1
 800c7d2:	bf04      	itt	eq
 800c7d4:	6819      	ldreq	r1, [r3, #0]
 800c7d6:	685b      	ldreq	r3, [r3, #4]
 800c7d8:	6063      	str	r3, [r4, #4]
 800c7da:	bf04      	itt	eq
 800c7dc:	1949      	addeq	r1, r1, r5
 800c7de:	6021      	streq	r1, [r4, #0]
 800c7e0:	6054      	str	r4, [r2, #4]
 800c7e2:	e7ca      	b.n	800c77a <_free_r+0x26>
 800c7e4:	b003      	add	sp, #12
 800c7e6:	bd30      	pop	{r4, r5, pc}
 800c7e8:	20004944 	.word	0x20004944

0800c7ec <__sflush_r>:
 800c7ec:	898a      	ldrh	r2, [r1, #12]
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	0710      	lsls	r0, r2, #28
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	d458      	bmi.n	800c8ac <__sflush_r+0xc0>
 800c7fa:	684b      	ldr	r3, [r1, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	dc05      	bgt.n	800c80c <__sflush_r+0x20>
 800c800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c802:	2b00      	cmp	r3, #0
 800c804:	dc02      	bgt.n	800c80c <__sflush_r+0x20>
 800c806:	2000      	movs	r0, #0
 800c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c80e:	2e00      	cmp	r6, #0
 800c810:	d0f9      	beq.n	800c806 <__sflush_r+0x1a>
 800c812:	2300      	movs	r3, #0
 800c814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c818:	682f      	ldr	r7, [r5, #0]
 800c81a:	6a21      	ldr	r1, [r4, #32]
 800c81c:	602b      	str	r3, [r5, #0]
 800c81e:	d032      	beq.n	800c886 <__sflush_r+0x9a>
 800c820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	075a      	lsls	r2, r3, #29
 800c826:	d505      	bpl.n	800c834 <__sflush_r+0x48>
 800c828:	6863      	ldr	r3, [r4, #4]
 800c82a:	1ac0      	subs	r0, r0, r3
 800c82c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c82e:	b10b      	cbz	r3, 800c834 <__sflush_r+0x48>
 800c830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c832:	1ac0      	subs	r0, r0, r3
 800c834:	2300      	movs	r3, #0
 800c836:	4602      	mov	r2, r0
 800c838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c83a:	6a21      	ldr	r1, [r4, #32]
 800c83c:	4628      	mov	r0, r5
 800c83e:	47b0      	blx	r6
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	89a3      	ldrh	r3, [r4, #12]
 800c844:	d106      	bne.n	800c854 <__sflush_r+0x68>
 800c846:	6829      	ldr	r1, [r5, #0]
 800c848:	291d      	cmp	r1, #29
 800c84a:	d82b      	bhi.n	800c8a4 <__sflush_r+0xb8>
 800c84c:	4a29      	ldr	r2, [pc, #164]	; (800c8f4 <__sflush_r+0x108>)
 800c84e:	410a      	asrs	r2, r1
 800c850:	07d6      	lsls	r6, r2, #31
 800c852:	d427      	bmi.n	800c8a4 <__sflush_r+0xb8>
 800c854:	2200      	movs	r2, #0
 800c856:	6062      	str	r2, [r4, #4]
 800c858:	04d9      	lsls	r1, r3, #19
 800c85a:	6922      	ldr	r2, [r4, #16]
 800c85c:	6022      	str	r2, [r4, #0]
 800c85e:	d504      	bpl.n	800c86a <__sflush_r+0x7e>
 800c860:	1c42      	adds	r2, r0, #1
 800c862:	d101      	bne.n	800c868 <__sflush_r+0x7c>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b903      	cbnz	r3, 800c86a <__sflush_r+0x7e>
 800c868:	6560      	str	r0, [r4, #84]	; 0x54
 800c86a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c86c:	602f      	str	r7, [r5, #0]
 800c86e:	2900      	cmp	r1, #0
 800c870:	d0c9      	beq.n	800c806 <__sflush_r+0x1a>
 800c872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c876:	4299      	cmp	r1, r3
 800c878:	d002      	beq.n	800c880 <__sflush_r+0x94>
 800c87a:	4628      	mov	r0, r5
 800c87c:	f7ff ff6a 	bl	800c754 <_free_r>
 800c880:	2000      	movs	r0, #0
 800c882:	6360      	str	r0, [r4, #52]	; 0x34
 800c884:	e7c0      	b.n	800c808 <__sflush_r+0x1c>
 800c886:	2301      	movs	r3, #1
 800c888:	4628      	mov	r0, r5
 800c88a:	47b0      	blx	r6
 800c88c:	1c41      	adds	r1, r0, #1
 800c88e:	d1c8      	bne.n	800c822 <__sflush_r+0x36>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0c5      	beq.n	800c822 <__sflush_r+0x36>
 800c896:	2b1d      	cmp	r3, #29
 800c898:	d001      	beq.n	800c89e <__sflush_r+0xb2>
 800c89a:	2b16      	cmp	r3, #22
 800c89c:	d101      	bne.n	800c8a2 <__sflush_r+0xb6>
 800c89e:	602f      	str	r7, [r5, #0]
 800c8a0:	e7b1      	b.n	800c806 <__sflush_r+0x1a>
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	e7ad      	b.n	800c808 <__sflush_r+0x1c>
 800c8ac:	690f      	ldr	r7, [r1, #16]
 800c8ae:	2f00      	cmp	r7, #0
 800c8b0:	d0a9      	beq.n	800c806 <__sflush_r+0x1a>
 800c8b2:	0793      	lsls	r3, r2, #30
 800c8b4:	680e      	ldr	r6, [r1, #0]
 800c8b6:	bf08      	it	eq
 800c8b8:	694b      	ldreq	r3, [r1, #20]
 800c8ba:	600f      	str	r7, [r1, #0]
 800c8bc:	bf18      	it	ne
 800c8be:	2300      	movne	r3, #0
 800c8c0:	eba6 0807 	sub.w	r8, r6, r7
 800c8c4:	608b      	str	r3, [r1, #8]
 800c8c6:	f1b8 0f00 	cmp.w	r8, #0
 800c8ca:	dd9c      	ble.n	800c806 <__sflush_r+0x1a>
 800c8cc:	6a21      	ldr	r1, [r4, #32]
 800c8ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8d0:	4643      	mov	r3, r8
 800c8d2:	463a      	mov	r2, r7
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	47b0      	blx	r6
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	dc06      	bgt.n	800c8ea <__sflush_r+0xfe>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e2:	81a3      	strh	r3, [r4, #12]
 800c8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8e8:	e78e      	b.n	800c808 <__sflush_r+0x1c>
 800c8ea:	4407      	add	r7, r0
 800c8ec:	eba8 0800 	sub.w	r8, r8, r0
 800c8f0:	e7e9      	b.n	800c8c6 <__sflush_r+0xda>
 800c8f2:	bf00      	nop
 800c8f4:	dfbffffe 	.word	0xdfbffffe

0800c8f8 <_fflush_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	690b      	ldr	r3, [r1, #16]
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	460c      	mov	r4, r1
 800c900:	b913      	cbnz	r3, 800c908 <_fflush_r+0x10>
 800c902:	2500      	movs	r5, #0
 800c904:	4628      	mov	r0, r5
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	b118      	cbz	r0, 800c912 <_fflush_r+0x1a>
 800c90a:	6a03      	ldr	r3, [r0, #32]
 800c90c:	b90b      	cbnz	r3, 800c912 <_fflush_r+0x1a>
 800c90e:	f7ff fe4d 	bl	800c5ac <__sinit>
 800c912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0f3      	beq.n	800c902 <_fflush_r+0xa>
 800c91a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c91c:	07d0      	lsls	r0, r2, #31
 800c91e:	d404      	bmi.n	800c92a <_fflush_r+0x32>
 800c920:	0599      	lsls	r1, r3, #22
 800c922:	d402      	bmi.n	800c92a <_fflush_r+0x32>
 800c924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c926:	f7ff fee6 	bl	800c6f6 <__retarget_lock_acquire_recursive>
 800c92a:	4628      	mov	r0, r5
 800c92c:	4621      	mov	r1, r4
 800c92e:	f7ff ff5d 	bl	800c7ec <__sflush_r>
 800c932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c934:	07da      	lsls	r2, r3, #31
 800c936:	4605      	mov	r5, r0
 800c938:	d4e4      	bmi.n	800c904 <_fflush_r+0xc>
 800c93a:	89a3      	ldrh	r3, [r4, #12]
 800c93c:	059b      	lsls	r3, r3, #22
 800c93e:	d4e1      	bmi.n	800c904 <_fflush_r+0xc>
 800c940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c942:	f7ff fed9 	bl	800c6f8 <__retarget_lock_release_recursive>
 800c946:	e7dd      	b.n	800c904 <_fflush_r+0xc>

0800c948 <__sread>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	460c      	mov	r4, r1
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	f000 f872 	bl	800ca38 <_read_r>
 800c954:	2800      	cmp	r0, #0
 800c956:	bfab      	itete	ge
 800c958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c95a:	89a3      	ldrhlt	r3, [r4, #12]
 800c95c:	181b      	addge	r3, r3, r0
 800c95e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c962:	bfac      	ite	ge
 800c964:	6563      	strge	r3, [r4, #84]	; 0x54
 800c966:	81a3      	strhlt	r3, [r4, #12]
 800c968:	bd10      	pop	{r4, pc}

0800c96a <__swrite>:
 800c96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c96e:	461f      	mov	r7, r3
 800c970:	898b      	ldrh	r3, [r1, #12]
 800c972:	05db      	lsls	r3, r3, #23
 800c974:	4605      	mov	r5, r0
 800c976:	460c      	mov	r4, r1
 800c978:	4616      	mov	r6, r2
 800c97a:	d505      	bpl.n	800c988 <__swrite+0x1e>
 800c97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c980:	2302      	movs	r3, #2
 800c982:	2200      	movs	r2, #0
 800c984:	f000 f846 	bl	800ca14 <_lseek_r>
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c98e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c992:	81a3      	strh	r3, [r4, #12]
 800c994:	4632      	mov	r2, r6
 800c996:	463b      	mov	r3, r7
 800c998:	4628      	mov	r0, r5
 800c99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c99e:	f000 b85d 	b.w	800ca5c <_write_r>

0800c9a2 <__sseek>:
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9aa:	f000 f833 	bl	800ca14 <_lseek_r>
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	89a3      	ldrh	r3, [r4, #12]
 800c9b2:	bf15      	itete	ne
 800c9b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9be:	81a3      	strheq	r3, [r4, #12]
 800c9c0:	bf18      	it	ne
 800c9c2:	81a3      	strhne	r3, [r4, #12]
 800c9c4:	bd10      	pop	{r4, pc}

0800c9c6 <__sclose>:
 800c9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ca:	f000 b813 	b.w	800c9f4 <_close_r>
	...

0800c9d0 <fiprintf>:
 800c9d0:	b40e      	push	{r1, r2, r3}
 800c9d2:	b503      	push	{r0, r1, lr}
 800c9d4:	4601      	mov	r1, r0
 800c9d6:	ab03      	add	r3, sp, #12
 800c9d8:	4805      	ldr	r0, [pc, #20]	; (800c9f0 <fiprintf+0x20>)
 800c9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9de:	6800      	ldr	r0, [r0, #0]
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	f000 f87d 	bl	800cae0 <_vfiprintf_r>
 800c9e6:	b002      	add	sp, #8
 800c9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9ec:	b003      	add	sp, #12
 800c9ee:	4770      	bx	lr
 800c9f0:	20000088 	.word	0x20000088

0800c9f4 <_close_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d06      	ldr	r5, [pc, #24]	; (800ca10 <_close_r+0x1c>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	602b      	str	r3, [r5, #0]
 800ca00:	f7f4 fc5d 	bl	80012be <_close>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d102      	bne.n	800ca0e <_close_r+0x1a>
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	b103      	cbz	r3, 800ca0e <_close_r+0x1a>
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	20004a8c 	.word	0x20004a8c

0800ca14 <_lseek_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4d07      	ldr	r5, [pc, #28]	; (800ca34 <_lseek_r+0x20>)
 800ca18:	4604      	mov	r4, r0
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	2200      	movs	r2, #0
 800ca20:	602a      	str	r2, [r5, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	f7f4 fc72 	bl	800130c <_lseek>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_lseek_r+0x1e>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_lseek_r+0x1e>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	20004a8c 	.word	0x20004a8c

0800ca38 <_read_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4d07      	ldr	r5, [pc, #28]	; (800ca58 <_read_r+0x20>)
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	4608      	mov	r0, r1
 800ca40:	4611      	mov	r1, r2
 800ca42:	2200      	movs	r2, #0
 800ca44:	602a      	str	r2, [r5, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	f7f4 fc00 	bl	800124c <_read>
 800ca4c:	1c43      	adds	r3, r0, #1
 800ca4e:	d102      	bne.n	800ca56 <_read_r+0x1e>
 800ca50:	682b      	ldr	r3, [r5, #0]
 800ca52:	b103      	cbz	r3, 800ca56 <_read_r+0x1e>
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	bd38      	pop	{r3, r4, r5, pc}
 800ca58:	20004a8c 	.word	0x20004a8c

0800ca5c <_write_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4d07      	ldr	r5, [pc, #28]	; (800ca7c <_write_r+0x20>)
 800ca60:	4604      	mov	r4, r0
 800ca62:	4608      	mov	r0, r1
 800ca64:	4611      	mov	r1, r2
 800ca66:	2200      	movs	r2, #0
 800ca68:	602a      	str	r2, [r5, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f7f4 fc0b 	bl	8001286 <_write>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d102      	bne.n	800ca7a <_write_r+0x1e>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	b103      	cbz	r3, 800ca7a <_write_r+0x1e>
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	20004a8c 	.word	0x20004a8c

0800ca80 <abort>:
 800ca80:	b508      	push	{r3, lr}
 800ca82:	2006      	movs	r0, #6
 800ca84:	f000 fc18 	bl	800d2b8 <raise>
 800ca88:	2001      	movs	r0, #1
 800ca8a:	f7f4 fbd5 	bl	8001238 <_exit>

0800ca8e <__sfputc_r>:
 800ca8e:	6893      	ldr	r3, [r2, #8]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	b410      	push	{r4}
 800ca96:	6093      	str	r3, [r2, #8]
 800ca98:	da08      	bge.n	800caac <__sfputc_r+0x1e>
 800ca9a:	6994      	ldr	r4, [r2, #24]
 800ca9c:	42a3      	cmp	r3, r4
 800ca9e:	db01      	blt.n	800caa4 <__sfputc_r+0x16>
 800caa0:	290a      	cmp	r1, #10
 800caa2:	d103      	bne.n	800caac <__sfputc_r+0x1e>
 800caa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caa8:	f000 bac4 	b.w	800d034 <__swbuf_r>
 800caac:	6813      	ldr	r3, [r2, #0]
 800caae:	1c58      	adds	r0, r3, #1
 800cab0:	6010      	str	r0, [r2, #0]
 800cab2:	7019      	strb	r1, [r3, #0]
 800cab4:	4608      	mov	r0, r1
 800cab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <__sfputs_r>:
 800cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cabe:	4606      	mov	r6, r0
 800cac0:	460f      	mov	r7, r1
 800cac2:	4614      	mov	r4, r2
 800cac4:	18d5      	adds	r5, r2, r3
 800cac6:	42ac      	cmp	r4, r5
 800cac8:	d101      	bne.n	800cace <__sfputs_r+0x12>
 800caca:	2000      	movs	r0, #0
 800cacc:	e007      	b.n	800cade <__sfputs_r+0x22>
 800cace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad2:	463a      	mov	r2, r7
 800cad4:	4630      	mov	r0, r6
 800cad6:	f7ff ffda 	bl	800ca8e <__sfputc_r>
 800cada:	1c43      	adds	r3, r0, #1
 800cadc:	d1f3      	bne.n	800cac6 <__sfputs_r+0xa>
 800cade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cae0 <_vfiprintf_r>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	460d      	mov	r5, r1
 800cae6:	b09d      	sub	sp, #116	; 0x74
 800cae8:	4614      	mov	r4, r2
 800caea:	4698      	mov	r8, r3
 800caec:	4606      	mov	r6, r0
 800caee:	b118      	cbz	r0, 800caf8 <_vfiprintf_r+0x18>
 800caf0:	6a03      	ldr	r3, [r0, #32]
 800caf2:	b90b      	cbnz	r3, 800caf8 <_vfiprintf_r+0x18>
 800caf4:	f7ff fd5a 	bl	800c5ac <__sinit>
 800caf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cafa:	07d9      	lsls	r1, r3, #31
 800cafc:	d405      	bmi.n	800cb0a <_vfiprintf_r+0x2a>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	059a      	lsls	r2, r3, #22
 800cb02:	d402      	bmi.n	800cb0a <_vfiprintf_r+0x2a>
 800cb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb06:	f7ff fdf6 	bl	800c6f6 <__retarget_lock_acquire_recursive>
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	071b      	lsls	r3, r3, #28
 800cb0e:	d501      	bpl.n	800cb14 <_vfiprintf_r+0x34>
 800cb10:	692b      	ldr	r3, [r5, #16]
 800cb12:	b99b      	cbnz	r3, 800cb3c <_vfiprintf_r+0x5c>
 800cb14:	4629      	mov	r1, r5
 800cb16:	4630      	mov	r0, r6
 800cb18:	f000 faca 	bl	800d0b0 <__swsetup_r>
 800cb1c:	b170      	cbz	r0, 800cb3c <_vfiprintf_r+0x5c>
 800cb1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb20:	07dc      	lsls	r4, r3, #31
 800cb22:	d504      	bpl.n	800cb2e <_vfiprintf_r+0x4e>
 800cb24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb28:	b01d      	add	sp, #116	; 0x74
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	0598      	lsls	r0, r3, #22
 800cb32:	d4f7      	bmi.n	800cb24 <_vfiprintf_r+0x44>
 800cb34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb36:	f7ff fddf 	bl	800c6f8 <__retarget_lock_release_recursive>
 800cb3a:	e7f3      	b.n	800cb24 <_vfiprintf_r+0x44>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb40:	2320      	movs	r3, #32
 800cb42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb46:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb4a:	2330      	movs	r3, #48	; 0x30
 800cb4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cd00 <_vfiprintf_r+0x220>
 800cb50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb54:	f04f 0901 	mov.w	r9, #1
 800cb58:	4623      	mov	r3, r4
 800cb5a:	469a      	mov	sl, r3
 800cb5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb60:	b10a      	cbz	r2, 800cb66 <_vfiprintf_r+0x86>
 800cb62:	2a25      	cmp	r2, #37	; 0x25
 800cb64:	d1f9      	bne.n	800cb5a <_vfiprintf_r+0x7a>
 800cb66:	ebba 0b04 	subs.w	fp, sl, r4
 800cb6a:	d00b      	beq.n	800cb84 <_vfiprintf_r+0xa4>
 800cb6c:	465b      	mov	r3, fp
 800cb6e:	4622      	mov	r2, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7ff ffa2 	bl	800cabc <__sfputs_r>
 800cb78:	3001      	adds	r0, #1
 800cb7a:	f000 80a9 	beq.w	800ccd0 <_vfiprintf_r+0x1f0>
 800cb7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb80:	445a      	add	r2, fp
 800cb82:	9209      	str	r2, [sp, #36]	; 0x24
 800cb84:	f89a 3000 	ldrb.w	r3, [sl]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 80a1 	beq.w	800ccd0 <_vfiprintf_r+0x1f0>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb98:	f10a 0a01 	add.w	sl, sl, #1
 800cb9c:	9304      	str	r3, [sp, #16]
 800cb9e:	9307      	str	r3, [sp, #28]
 800cba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cba4:	931a      	str	r3, [sp, #104]	; 0x68
 800cba6:	4654      	mov	r4, sl
 800cba8:	2205      	movs	r2, #5
 800cbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbae:	4854      	ldr	r0, [pc, #336]	; (800cd00 <_vfiprintf_r+0x220>)
 800cbb0:	f7f3 fb0e 	bl	80001d0 <memchr>
 800cbb4:	9a04      	ldr	r2, [sp, #16]
 800cbb6:	b9d8      	cbnz	r0, 800cbf0 <_vfiprintf_r+0x110>
 800cbb8:	06d1      	lsls	r1, r2, #27
 800cbba:	bf44      	itt	mi
 800cbbc:	2320      	movmi	r3, #32
 800cbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbc2:	0713      	lsls	r3, r2, #28
 800cbc4:	bf44      	itt	mi
 800cbc6:	232b      	movmi	r3, #43	; 0x2b
 800cbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbcc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbd0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbd2:	d015      	beq.n	800cc00 <_vfiprintf_r+0x120>
 800cbd4:	9a07      	ldr	r2, [sp, #28]
 800cbd6:	4654      	mov	r4, sl
 800cbd8:	2000      	movs	r0, #0
 800cbda:	f04f 0c0a 	mov.w	ip, #10
 800cbde:	4621      	mov	r1, r4
 800cbe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbe4:	3b30      	subs	r3, #48	; 0x30
 800cbe6:	2b09      	cmp	r3, #9
 800cbe8:	d94d      	bls.n	800cc86 <_vfiprintf_r+0x1a6>
 800cbea:	b1b0      	cbz	r0, 800cc1a <_vfiprintf_r+0x13a>
 800cbec:	9207      	str	r2, [sp, #28]
 800cbee:	e014      	b.n	800cc1a <_vfiprintf_r+0x13a>
 800cbf0:	eba0 0308 	sub.w	r3, r0, r8
 800cbf4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	46a2      	mov	sl, r4
 800cbfe:	e7d2      	b.n	800cba6 <_vfiprintf_r+0xc6>
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	1d19      	adds	r1, r3, #4
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	9103      	str	r1, [sp, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	bfbb      	ittet	lt
 800cc0c:	425b      	neglt	r3, r3
 800cc0e:	f042 0202 	orrlt.w	r2, r2, #2
 800cc12:	9307      	strge	r3, [sp, #28]
 800cc14:	9307      	strlt	r3, [sp, #28]
 800cc16:	bfb8      	it	lt
 800cc18:	9204      	strlt	r2, [sp, #16]
 800cc1a:	7823      	ldrb	r3, [r4, #0]
 800cc1c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc1e:	d10c      	bne.n	800cc3a <_vfiprintf_r+0x15a>
 800cc20:	7863      	ldrb	r3, [r4, #1]
 800cc22:	2b2a      	cmp	r3, #42	; 0x2a
 800cc24:	d134      	bne.n	800cc90 <_vfiprintf_r+0x1b0>
 800cc26:	9b03      	ldr	r3, [sp, #12]
 800cc28:	1d1a      	adds	r2, r3, #4
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	9203      	str	r2, [sp, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfb8      	it	lt
 800cc32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc36:	3402      	adds	r4, #2
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cd10 <_vfiprintf_r+0x230>
 800cc3e:	7821      	ldrb	r1, [r4, #0]
 800cc40:	2203      	movs	r2, #3
 800cc42:	4650      	mov	r0, sl
 800cc44:	f7f3 fac4 	bl	80001d0 <memchr>
 800cc48:	b138      	cbz	r0, 800cc5a <_vfiprintf_r+0x17a>
 800cc4a:	9b04      	ldr	r3, [sp, #16]
 800cc4c:	eba0 000a 	sub.w	r0, r0, sl
 800cc50:	2240      	movs	r2, #64	; 0x40
 800cc52:	4082      	lsls	r2, r0
 800cc54:	4313      	orrs	r3, r2
 800cc56:	3401      	adds	r4, #1
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc5e:	4829      	ldr	r0, [pc, #164]	; (800cd04 <_vfiprintf_r+0x224>)
 800cc60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc64:	2206      	movs	r2, #6
 800cc66:	f7f3 fab3 	bl	80001d0 <memchr>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d03f      	beq.n	800ccee <_vfiprintf_r+0x20e>
 800cc6e:	4b26      	ldr	r3, [pc, #152]	; (800cd08 <_vfiprintf_r+0x228>)
 800cc70:	bb1b      	cbnz	r3, 800ccba <_vfiprintf_r+0x1da>
 800cc72:	9b03      	ldr	r3, [sp, #12]
 800cc74:	3307      	adds	r3, #7
 800cc76:	f023 0307 	bic.w	r3, r3, #7
 800cc7a:	3308      	adds	r3, #8
 800cc7c:	9303      	str	r3, [sp, #12]
 800cc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc80:	443b      	add	r3, r7
 800cc82:	9309      	str	r3, [sp, #36]	; 0x24
 800cc84:	e768      	b.n	800cb58 <_vfiprintf_r+0x78>
 800cc86:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	2001      	movs	r0, #1
 800cc8e:	e7a6      	b.n	800cbde <_vfiprintf_r+0xfe>
 800cc90:	2300      	movs	r3, #0
 800cc92:	3401      	adds	r4, #1
 800cc94:	9305      	str	r3, [sp, #20]
 800cc96:	4619      	mov	r1, r3
 800cc98:	f04f 0c0a 	mov.w	ip, #10
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cca2:	3a30      	subs	r2, #48	; 0x30
 800cca4:	2a09      	cmp	r2, #9
 800cca6:	d903      	bls.n	800ccb0 <_vfiprintf_r+0x1d0>
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0c6      	beq.n	800cc3a <_vfiprintf_r+0x15a>
 800ccac:	9105      	str	r1, [sp, #20]
 800ccae:	e7c4      	b.n	800cc3a <_vfiprintf_r+0x15a>
 800ccb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e7f0      	b.n	800cc9c <_vfiprintf_r+0x1bc>
 800ccba:	ab03      	add	r3, sp, #12
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	462a      	mov	r2, r5
 800ccc0:	4b12      	ldr	r3, [pc, #72]	; (800cd0c <_vfiprintf_r+0x22c>)
 800ccc2:	a904      	add	r1, sp, #16
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f3af 8000 	nop.w
 800ccca:	4607      	mov	r7, r0
 800cccc:	1c78      	adds	r0, r7, #1
 800ccce:	d1d6      	bne.n	800cc7e <_vfiprintf_r+0x19e>
 800ccd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccd2:	07d9      	lsls	r1, r3, #31
 800ccd4:	d405      	bmi.n	800cce2 <_vfiprintf_r+0x202>
 800ccd6:	89ab      	ldrh	r3, [r5, #12]
 800ccd8:	059a      	lsls	r2, r3, #22
 800ccda:	d402      	bmi.n	800cce2 <_vfiprintf_r+0x202>
 800ccdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccde:	f7ff fd0b 	bl	800c6f8 <__retarget_lock_release_recursive>
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	065b      	lsls	r3, r3, #25
 800cce6:	f53f af1d 	bmi.w	800cb24 <_vfiprintf_r+0x44>
 800ccea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccec:	e71c      	b.n	800cb28 <_vfiprintf_r+0x48>
 800ccee:	ab03      	add	r3, sp, #12
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	462a      	mov	r2, r5
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <_vfiprintf_r+0x22c>)
 800ccf6:	a904      	add	r1, sp, #16
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f000 f879 	bl	800cdf0 <_printf_i>
 800ccfe:	e7e4      	b.n	800ccca <_vfiprintf_r+0x1ea>
 800cd00:	0800d4fb 	.word	0x0800d4fb
 800cd04:	0800d505 	.word	0x0800d505
 800cd08:	00000000 	.word	0x00000000
 800cd0c:	0800cabd 	.word	0x0800cabd
 800cd10:	0800d501 	.word	0x0800d501

0800cd14 <_printf_common>:
 800cd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd18:	4616      	mov	r6, r2
 800cd1a:	4699      	mov	r9, r3
 800cd1c:	688a      	ldr	r2, [r1, #8]
 800cd1e:	690b      	ldr	r3, [r1, #16]
 800cd20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	bfb8      	it	lt
 800cd28:	4613      	movlt	r3, r2
 800cd2a:	6033      	str	r3, [r6, #0]
 800cd2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd30:	4607      	mov	r7, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	b10a      	cbz	r2, 800cd3a <_printf_common+0x26>
 800cd36:	3301      	adds	r3, #1
 800cd38:	6033      	str	r3, [r6, #0]
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	0699      	lsls	r1, r3, #26
 800cd3e:	bf42      	ittt	mi
 800cd40:	6833      	ldrmi	r3, [r6, #0]
 800cd42:	3302      	addmi	r3, #2
 800cd44:	6033      	strmi	r3, [r6, #0]
 800cd46:	6825      	ldr	r5, [r4, #0]
 800cd48:	f015 0506 	ands.w	r5, r5, #6
 800cd4c:	d106      	bne.n	800cd5c <_printf_common+0x48>
 800cd4e:	f104 0a19 	add.w	sl, r4, #25
 800cd52:	68e3      	ldr	r3, [r4, #12]
 800cd54:	6832      	ldr	r2, [r6, #0]
 800cd56:	1a9b      	subs	r3, r3, r2
 800cd58:	42ab      	cmp	r3, r5
 800cd5a:	dc26      	bgt.n	800cdaa <_printf_common+0x96>
 800cd5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd60:	1e13      	subs	r3, r2, #0
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	bf18      	it	ne
 800cd66:	2301      	movne	r3, #1
 800cd68:	0692      	lsls	r2, r2, #26
 800cd6a:	d42b      	bmi.n	800cdc4 <_printf_common+0xb0>
 800cd6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd70:	4649      	mov	r1, r9
 800cd72:	4638      	mov	r0, r7
 800cd74:	47c0      	blx	r8
 800cd76:	3001      	adds	r0, #1
 800cd78:	d01e      	beq.n	800cdb8 <_printf_common+0xa4>
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	6922      	ldr	r2, [r4, #16]
 800cd7e:	f003 0306 	and.w	r3, r3, #6
 800cd82:	2b04      	cmp	r3, #4
 800cd84:	bf02      	ittt	eq
 800cd86:	68e5      	ldreq	r5, [r4, #12]
 800cd88:	6833      	ldreq	r3, [r6, #0]
 800cd8a:	1aed      	subeq	r5, r5, r3
 800cd8c:	68a3      	ldr	r3, [r4, #8]
 800cd8e:	bf0c      	ite	eq
 800cd90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd94:	2500      	movne	r5, #0
 800cd96:	4293      	cmp	r3, r2
 800cd98:	bfc4      	itt	gt
 800cd9a:	1a9b      	subgt	r3, r3, r2
 800cd9c:	18ed      	addgt	r5, r5, r3
 800cd9e:	2600      	movs	r6, #0
 800cda0:	341a      	adds	r4, #26
 800cda2:	42b5      	cmp	r5, r6
 800cda4:	d11a      	bne.n	800cddc <_printf_common+0xc8>
 800cda6:	2000      	movs	r0, #0
 800cda8:	e008      	b.n	800cdbc <_printf_common+0xa8>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	4652      	mov	r2, sl
 800cdae:	4649      	mov	r1, r9
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	47c0      	blx	r8
 800cdb4:	3001      	adds	r0, #1
 800cdb6:	d103      	bne.n	800cdc0 <_printf_common+0xac>
 800cdb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc0:	3501      	adds	r5, #1
 800cdc2:	e7c6      	b.n	800cd52 <_printf_common+0x3e>
 800cdc4:	18e1      	adds	r1, r4, r3
 800cdc6:	1c5a      	adds	r2, r3, #1
 800cdc8:	2030      	movs	r0, #48	; 0x30
 800cdca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdce:	4422      	add	r2, r4
 800cdd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdd8:	3302      	adds	r3, #2
 800cdda:	e7c7      	b.n	800cd6c <_printf_common+0x58>
 800cddc:	2301      	movs	r3, #1
 800cdde:	4622      	mov	r2, r4
 800cde0:	4649      	mov	r1, r9
 800cde2:	4638      	mov	r0, r7
 800cde4:	47c0      	blx	r8
 800cde6:	3001      	adds	r0, #1
 800cde8:	d0e6      	beq.n	800cdb8 <_printf_common+0xa4>
 800cdea:	3601      	adds	r6, #1
 800cdec:	e7d9      	b.n	800cda2 <_printf_common+0x8e>
	...

0800cdf0 <_printf_i>:
 800cdf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf4:	7e0f      	ldrb	r7, [r1, #24]
 800cdf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdf8:	2f78      	cmp	r7, #120	; 0x78
 800cdfa:	4691      	mov	r9, r2
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	469a      	mov	sl, r3
 800ce02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce06:	d807      	bhi.n	800ce18 <_printf_i+0x28>
 800ce08:	2f62      	cmp	r7, #98	; 0x62
 800ce0a:	d80a      	bhi.n	800ce22 <_printf_i+0x32>
 800ce0c:	2f00      	cmp	r7, #0
 800ce0e:	f000 80d4 	beq.w	800cfba <_printf_i+0x1ca>
 800ce12:	2f58      	cmp	r7, #88	; 0x58
 800ce14:	f000 80c0 	beq.w	800cf98 <_printf_i+0x1a8>
 800ce18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce20:	e03a      	b.n	800ce98 <_printf_i+0xa8>
 800ce22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce26:	2b15      	cmp	r3, #21
 800ce28:	d8f6      	bhi.n	800ce18 <_printf_i+0x28>
 800ce2a:	a101      	add	r1, pc, #4	; (adr r1, 800ce30 <_printf_i+0x40>)
 800ce2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce30:	0800ce89 	.word	0x0800ce89
 800ce34:	0800ce9d 	.word	0x0800ce9d
 800ce38:	0800ce19 	.word	0x0800ce19
 800ce3c:	0800ce19 	.word	0x0800ce19
 800ce40:	0800ce19 	.word	0x0800ce19
 800ce44:	0800ce19 	.word	0x0800ce19
 800ce48:	0800ce9d 	.word	0x0800ce9d
 800ce4c:	0800ce19 	.word	0x0800ce19
 800ce50:	0800ce19 	.word	0x0800ce19
 800ce54:	0800ce19 	.word	0x0800ce19
 800ce58:	0800ce19 	.word	0x0800ce19
 800ce5c:	0800cfa1 	.word	0x0800cfa1
 800ce60:	0800cec9 	.word	0x0800cec9
 800ce64:	0800cf5b 	.word	0x0800cf5b
 800ce68:	0800ce19 	.word	0x0800ce19
 800ce6c:	0800ce19 	.word	0x0800ce19
 800ce70:	0800cfc3 	.word	0x0800cfc3
 800ce74:	0800ce19 	.word	0x0800ce19
 800ce78:	0800cec9 	.word	0x0800cec9
 800ce7c:	0800ce19 	.word	0x0800ce19
 800ce80:	0800ce19 	.word	0x0800ce19
 800ce84:	0800cf63 	.word	0x0800cf63
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	1d1a      	adds	r2, r3, #4
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	602a      	str	r2, [r5, #0]
 800ce90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e09f      	b.n	800cfdc <_printf_i+0x1ec>
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	682b      	ldr	r3, [r5, #0]
 800cea0:	0607      	lsls	r7, r0, #24
 800cea2:	f103 0104 	add.w	r1, r3, #4
 800cea6:	6029      	str	r1, [r5, #0]
 800cea8:	d501      	bpl.n	800ceae <_printf_i+0xbe>
 800ceaa:	681e      	ldr	r6, [r3, #0]
 800ceac:	e003      	b.n	800ceb6 <_printf_i+0xc6>
 800ceae:	0646      	lsls	r6, r0, #25
 800ceb0:	d5fb      	bpl.n	800ceaa <_printf_i+0xba>
 800ceb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ceb6:	2e00      	cmp	r6, #0
 800ceb8:	da03      	bge.n	800cec2 <_printf_i+0xd2>
 800ceba:	232d      	movs	r3, #45	; 0x2d
 800cebc:	4276      	negs	r6, r6
 800cebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec2:	485a      	ldr	r0, [pc, #360]	; (800d02c <_printf_i+0x23c>)
 800cec4:	230a      	movs	r3, #10
 800cec6:	e012      	b.n	800ceee <_printf_i+0xfe>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	6820      	ldr	r0, [r4, #0]
 800cecc:	1d19      	adds	r1, r3, #4
 800cece:	6029      	str	r1, [r5, #0]
 800ced0:	0605      	lsls	r5, r0, #24
 800ced2:	d501      	bpl.n	800ced8 <_printf_i+0xe8>
 800ced4:	681e      	ldr	r6, [r3, #0]
 800ced6:	e002      	b.n	800cede <_printf_i+0xee>
 800ced8:	0641      	lsls	r1, r0, #25
 800ceda:	d5fb      	bpl.n	800ced4 <_printf_i+0xe4>
 800cedc:	881e      	ldrh	r6, [r3, #0]
 800cede:	4853      	ldr	r0, [pc, #332]	; (800d02c <_printf_i+0x23c>)
 800cee0:	2f6f      	cmp	r7, #111	; 0x6f
 800cee2:	bf0c      	ite	eq
 800cee4:	2308      	moveq	r3, #8
 800cee6:	230a      	movne	r3, #10
 800cee8:	2100      	movs	r1, #0
 800ceea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceee:	6865      	ldr	r5, [r4, #4]
 800cef0:	60a5      	str	r5, [r4, #8]
 800cef2:	2d00      	cmp	r5, #0
 800cef4:	bfa2      	ittt	ge
 800cef6:	6821      	ldrge	r1, [r4, #0]
 800cef8:	f021 0104 	bicge.w	r1, r1, #4
 800cefc:	6021      	strge	r1, [r4, #0]
 800cefe:	b90e      	cbnz	r6, 800cf04 <_printf_i+0x114>
 800cf00:	2d00      	cmp	r5, #0
 800cf02:	d04b      	beq.n	800cf9c <_printf_i+0x1ac>
 800cf04:	4615      	mov	r5, r2
 800cf06:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf0a:	fb03 6711 	mls	r7, r3, r1, r6
 800cf0e:	5dc7      	ldrb	r7, [r0, r7]
 800cf10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf14:	4637      	mov	r7, r6
 800cf16:	42bb      	cmp	r3, r7
 800cf18:	460e      	mov	r6, r1
 800cf1a:	d9f4      	bls.n	800cf06 <_printf_i+0x116>
 800cf1c:	2b08      	cmp	r3, #8
 800cf1e:	d10b      	bne.n	800cf38 <_printf_i+0x148>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	07de      	lsls	r6, r3, #31
 800cf24:	d508      	bpl.n	800cf38 <_printf_i+0x148>
 800cf26:	6923      	ldr	r3, [r4, #16]
 800cf28:	6861      	ldr	r1, [r4, #4]
 800cf2a:	4299      	cmp	r1, r3
 800cf2c:	bfde      	ittt	le
 800cf2e:	2330      	movle	r3, #48	; 0x30
 800cf30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cf38:	1b52      	subs	r2, r2, r5
 800cf3a:	6122      	str	r2, [r4, #16]
 800cf3c:	f8cd a000 	str.w	sl, [sp]
 800cf40:	464b      	mov	r3, r9
 800cf42:	aa03      	add	r2, sp, #12
 800cf44:	4621      	mov	r1, r4
 800cf46:	4640      	mov	r0, r8
 800cf48:	f7ff fee4 	bl	800cd14 <_printf_common>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d14a      	bne.n	800cfe6 <_printf_i+0x1f6>
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf54:	b004      	add	sp, #16
 800cf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	f043 0320 	orr.w	r3, r3, #32
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	4833      	ldr	r0, [pc, #204]	; (800d030 <_printf_i+0x240>)
 800cf64:	2778      	movs	r7, #120	; 0x78
 800cf66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	6829      	ldr	r1, [r5, #0]
 800cf6e:	061f      	lsls	r7, r3, #24
 800cf70:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf74:	d402      	bmi.n	800cf7c <_printf_i+0x18c>
 800cf76:	065f      	lsls	r7, r3, #25
 800cf78:	bf48      	it	mi
 800cf7a:	b2b6      	uxthmi	r6, r6
 800cf7c:	07df      	lsls	r7, r3, #31
 800cf7e:	bf48      	it	mi
 800cf80:	f043 0320 	orrmi.w	r3, r3, #32
 800cf84:	6029      	str	r1, [r5, #0]
 800cf86:	bf48      	it	mi
 800cf88:	6023      	strmi	r3, [r4, #0]
 800cf8a:	b91e      	cbnz	r6, 800cf94 <_printf_i+0x1a4>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	f023 0320 	bic.w	r3, r3, #32
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	2310      	movs	r3, #16
 800cf96:	e7a7      	b.n	800cee8 <_printf_i+0xf8>
 800cf98:	4824      	ldr	r0, [pc, #144]	; (800d02c <_printf_i+0x23c>)
 800cf9a:	e7e4      	b.n	800cf66 <_printf_i+0x176>
 800cf9c:	4615      	mov	r5, r2
 800cf9e:	e7bd      	b.n	800cf1c <_printf_i+0x12c>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	6826      	ldr	r6, [r4, #0]
 800cfa4:	6961      	ldr	r1, [r4, #20]
 800cfa6:	1d18      	adds	r0, r3, #4
 800cfa8:	6028      	str	r0, [r5, #0]
 800cfaa:	0635      	lsls	r5, r6, #24
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	d501      	bpl.n	800cfb4 <_printf_i+0x1c4>
 800cfb0:	6019      	str	r1, [r3, #0]
 800cfb2:	e002      	b.n	800cfba <_printf_i+0x1ca>
 800cfb4:	0670      	lsls	r0, r6, #25
 800cfb6:	d5fb      	bpl.n	800cfb0 <_printf_i+0x1c0>
 800cfb8:	8019      	strh	r1, [r3, #0]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	6123      	str	r3, [r4, #16]
 800cfbe:	4615      	mov	r5, r2
 800cfc0:	e7bc      	b.n	800cf3c <_printf_i+0x14c>
 800cfc2:	682b      	ldr	r3, [r5, #0]
 800cfc4:	1d1a      	adds	r2, r3, #4
 800cfc6:	602a      	str	r2, [r5, #0]
 800cfc8:	681d      	ldr	r5, [r3, #0]
 800cfca:	6862      	ldr	r2, [r4, #4]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f7f3 f8fe 	bl	80001d0 <memchr>
 800cfd4:	b108      	cbz	r0, 800cfda <_printf_i+0x1ea>
 800cfd6:	1b40      	subs	r0, r0, r5
 800cfd8:	6060      	str	r0, [r4, #4]
 800cfda:	6863      	ldr	r3, [r4, #4]
 800cfdc:	6123      	str	r3, [r4, #16]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe4:	e7aa      	b.n	800cf3c <_printf_i+0x14c>
 800cfe6:	6923      	ldr	r3, [r4, #16]
 800cfe8:	462a      	mov	r2, r5
 800cfea:	4649      	mov	r1, r9
 800cfec:	4640      	mov	r0, r8
 800cfee:	47d0      	blx	sl
 800cff0:	3001      	adds	r0, #1
 800cff2:	d0ad      	beq.n	800cf50 <_printf_i+0x160>
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	079b      	lsls	r3, r3, #30
 800cff8:	d413      	bmi.n	800d022 <_printf_i+0x232>
 800cffa:	68e0      	ldr	r0, [r4, #12]
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	4298      	cmp	r0, r3
 800d000:	bfb8      	it	lt
 800d002:	4618      	movlt	r0, r3
 800d004:	e7a6      	b.n	800cf54 <_printf_i+0x164>
 800d006:	2301      	movs	r3, #1
 800d008:	4632      	mov	r2, r6
 800d00a:	4649      	mov	r1, r9
 800d00c:	4640      	mov	r0, r8
 800d00e:	47d0      	blx	sl
 800d010:	3001      	adds	r0, #1
 800d012:	d09d      	beq.n	800cf50 <_printf_i+0x160>
 800d014:	3501      	adds	r5, #1
 800d016:	68e3      	ldr	r3, [r4, #12]
 800d018:	9903      	ldr	r1, [sp, #12]
 800d01a:	1a5b      	subs	r3, r3, r1
 800d01c:	42ab      	cmp	r3, r5
 800d01e:	dcf2      	bgt.n	800d006 <_printf_i+0x216>
 800d020:	e7eb      	b.n	800cffa <_printf_i+0x20a>
 800d022:	2500      	movs	r5, #0
 800d024:	f104 0619 	add.w	r6, r4, #25
 800d028:	e7f5      	b.n	800d016 <_printf_i+0x226>
 800d02a:	bf00      	nop
 800d02c:	0800d50c 	.word	0x0800d50c
 800d030:	0800d51d 	.word	0x0800d51d

0800d034 <__swbuf_r>:
 800d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d036:	460e      	mov	r6, r1
 800d038:	4614      	mov	r4, r2
 800d03a:	4605      	mov	r5, r0
 800d03c:	b118      	cbz	r0, 800d046 <__swbuf_r+0x12>
 800d03e:	6a03      	ldr	r3, [r0, #32]
 800d040:	b90b      	cbnz	r3, 800d046 <__swbuf_r+0x12>
 800d042:	f7ff fab3 	bl	800c5ac <__sinit>
 800d046:	69a3      	ldr	r3, [r4, #24]
 800d048:	60a3      	str	r3, [r4, #8]
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	071a      	lsls	r2, r3, #28
 800d04e:	d525      	bpl.n	800d09c <__swbuf_r+0x68>
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	b31b      	cbz	r3, 800d09c <__swbuf_r+0x68>
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	6922      	ldr	r2, [r4, #16]
 800d058:	1a98      	subs	r0, r3, r2
 800d05a:	6963      	ldr	r3, [r4, #20]
 800d05c:	b2f6      	uxtb	r6, r6
 800d05e:	4283      	cmp	r3, r0
 800d060:	4637      	mov	r7, r6
 800d062:	dc04      	bgt.n	800d06e <__swbuf_r+0x3a>
 800d064:	4621      	mov	r1, r4
 800d066:	4628      	mov	r0, r5
 800d068:	f7ff fc46 	bl	800c8f8 <_fflush_r>
 800d06c:	b9e0      	cbnz	r0, 800d0a8 <__swbuf_r+0x74>
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	3b01      	subs	r3, #1
 800d072:	60a3      	str	r3, [r4, #8]
 800d074:	6823      	ldr	r3, [r4, #0]
 800d076:	1c5a      	adds	r2, r3, #1
 800d078:	6022      	str	r2, [r4, #0]
 800d07a:	701e      	strb	r6, [r3, #0]
 800d07c:	6962      	ldr	r2, [r4, #20]
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	429a      	cmp	r2, r3
 800d082:	d004      	beq.n	800d08e <__swbuf_r+0x5a>
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	07db      	lsls	r3, r3, #31
 800d088:	d506      	bpl.n	800d098 <__swbuf_r+0x64>
 800d08a:	2e0a      	cmp	r6, #10
 800d08c:	d104      	bne.n	800d098 <__swbuf_r+0x64>
 800d08e:	4621      	mov	r1, r4
 800d090:	4628      	mov	r0, r5
 800d092:	f7ff fc31 	bl	800c8f8 <_fflush_r>
 800d096:	b938      	cbnz	r0, 800d0a8 <__swbuf_r+0x74>
 800d098:	4638      	mov	r0, r7
 800d09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d09c:	4621      	mov	r1, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f000 f806 	bl	800d0b0 <__swsetup_r>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d0d5      	beq.n	800d054 <__swbuf_r+0x20>
 800d0a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d0ac:	e7f4      	b.n	800d098 <__swbuf_r+0x64>
	...

0800d0b0 <__swsetup_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4b2a      	ldr	r3, [pc, #168]	; (800d15c <__swsetup_r+0xac>)
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	6818      	ldr	r0, [r3, #0]
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	b118      	cbz	r0, 800d0c4 <__swsetup_r+0x14>
 800d0bc:	6a03      	ldr	r3, [r0, #32]
 800d0be:	b90b      	cbnz	r3, 800d0c4 <__swsetup_r+0x14>
 800d0c0:	f7ff fa74 	bl	800c5ac <__sinit>
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0ca:	0718      	lsls	r0, r3, #28
 800d0cc:	d422      	bmi.n	800d114 <__swsetup_r+0x64>
 800d0ce:	06d9      	lsls	r1, r3, #27
 800d0d0:	d407      	bmi.n	800d0e2 <__swsetup_r+0x32>
 800d0d2:	2309      	movs	r3, #9
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0e0:	e034      	b.n	800d14c <__swsetup_r+0x9c>
 800d0e2:	0758      	lsls	r0, r3, #29
 800d0e4:	d512      	bpl.n	800d10c <__swsetup_r+0x5c>
 800d0e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0e8:	b141      	cbz	r1, 800d0fc <__swsetup_r+0x4c>
 800d0ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0ee:	4299      	cmp	r1, r3
 800d0f0:	d002      	beq.n	800d0f8 <__swsetup_r+0x48>
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f7ff fb2e 	bl	800c754 <_free_r>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	6363      	str	r3, [r4, #52]	; 0x34
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d102:	81a3      	strh	r3, [r4, #12]
 800d104:	2300      	movs	r3, #0
 800d106:	6063      	str	r3, [r4, #4]
 800d108:	6923      	ldr	r3, [r4, #16]
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f043 0308 	orr.w	r3, r3, #8
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	6923      	ldr	r3, [r4, #16]
 800d116:	b94b      	cbnz	r3, 800d12c <__swsetup_r+0x7c>
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d11e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d122:	d003      	beq.n	800d12c <__swsetup_r+0x7c>
 800d124:	4621      	mov	r1, r4
 800d126:	4628      	mov	r0, r5
 800d128:	f000 f840 	bl	800d1ac <__smakebuf_r>
 800d12c:	89a0      	ldrh	r0, [r4, #12]
 800d12e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d132:	f010 0301 	ands.w	r3, r0, #1
 800d136:	d00a      	beq.n	800d14e <__swsetup_r+0x9e>
 800d138:	2300      	movs	r3, #0
 800d13a:	60a3      	str	r3, [r4, #8]
 800d13c:	6963      	ldr	r3, [r4, #20]
 800d13e:	425b      	negs	r3, r3
 800d140:	61a3      	str	r3, [r4, #24]
 800d142:	6923      	ldr	r3, [r4, #16]
 800d144:	b943      	cbnz	r3, 800d158 <__swsetup_r+0xa8>
 800d146:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d14a:	d1c4      	bne.n	800d0d6 <__swsetup_r+0x26>
 800d14c:	bd38      	pop	{r3, r4, r5, pc}
 800d14e:	0781      	lsls	r1, r0, #30
 800d150:	bf58      	it	pl
 800d152:	6963      	ldrpl	r3, [r4, #20]
 800d154:	60a3      	str	r3, [r4, #8]
 800d156:	e7f4      	b.n	800d142 <__swsetup_r+0x92>
 800d158:	2000      	movs	r0, #0
 800d15a:	e7f7      	b.n	800d14c <__swsetup_r+0x9c>
 800d15c:	20000088 	.word	0x20000088

0800d160 <__swhatbuf_r>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	460c      	mov	r4, r1
 800d164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d168:	2900      	cmp	r1, #0
 800d16a:	b096      	sub	sp, #88	; 0x58
 800d16c:	4615      	mov	r5, r2
 800d16e:	461e      	mov	r6, r3
 800d170:	da0d      	bge.n	800d18e <__swhatbuf_r+0x2e>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d178:	f04f 0100 	mov.w	r1, #0
 800d17c:	bf0c      	ite	eq
 800d17e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d182:	2340      	movne	r3, #64	; 0x40
 800d184:	2000      	movs	r0, #0
 800d186:	6031      	str	r1, [r6, #0]
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	b016      	add	sp, #88	; 0x58
 800d18c:	bd70      	pop	{r4, r5, r6, pc}
 800d18e:	466a      	mov	r2, sp
 800d190:	f000 f848 	bl	800d224 <_fstat_r>
 800d194:	2800      	cmp	r0, #0
 800d196:	dbec      	blt.n	800d172 <__swhatbuf_r+0x12>
 800d198:	9901      	ldr	r1, [sp, #4]
 800d19a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d19e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d1a2:	4259      	negs	r1, r3
 800d1a4:	4159      	adcs	r1, r3
 800d1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1aa:	e7eb      	b.n	800d184 <__swhatbuf_r+0x24>

0800d1ac <__smakebuf_r>:
 800d1ac:	898b      	ldrh	r3, [r1, #12]
 800d1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1b0:	079d      	lsls	r5, r3, #30
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	d507      	bpl.n	800d1c8 <__smakebuf_r+0x1c>
 800d1b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	6123      	str	r3, [r4, #16]
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	6163      	str	r3, [r4, #20]
 800d1c4:	b002      	add	sp, #8
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}
 800d1c8:	ab01      	add	r3, sp, #4
 800d1ca:	466a      	mov	r2, sp
 800d1cc:	f7ff ffc8 	bl	800d160 <__swhatbuf_r>
 800d1d0:	9900      	ldr	r1, [sp, #0]
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	f7ff f865 	bl	800c2a4 <_malloc_r>
 800d1da:	b948      	cbnz	r0, 800d1f0 <__smakebuf_r+0x44>
 800d1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e0:	059a      	lsls	r2, r3, #22
 800d1e2:	d4ef      	bmi.n	800d1c4 <__smakebuf_r+0x18>
 800d1e4:	f023 0303 	bic.w	r3, r3, #3
 800d1e8:	f043 0302 	orr.w	r3, r3, #2
 800d1ec:	81a3      	strh	r3, [r4, #12]
 800d1ee:	e7e3      	b.n	800d1b8 <__smakebuf_r+0xc>
 800d1f0:	89a3      	ldrh	r3, [r4, #12]
 800d1f2:	6020      	str	r0, [r4, #0]
 800d1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	9b00      	ldr	r3, [sp, #0]
 800d1fc:	6163      	str	r3, [r4, #20]
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	6120      	str	r0, [r4, #16]
 800d202:	b15b      	cbz	r3, 800d21c <__smakebuf_r+0x70>
 800d204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d208:	4630      	mov	r0, r6
 800d20a:	f000 f81d 	bl	800d248 <_isatty_r>
 800d20e:	b128      	cbz	r0, 800d21c <__smakebuf_r+0x70>
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	f023 0303 	bic.w	r3, r3, #3
 800d216:	f043 0301 	orr.w	r3, r3, #1
 800d21a:	81a3      	strh	r3, [r4, #12]
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	431d      	orrs	r5, r3
 800d220:	81a5      	strh	r5, [r4, #12]
 800d222:	e7cf      	b.n	800d1c4 <__smakebuf_r+0x18>

0800d224 <_fstat_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d07      	ldr	r5, [pc, #28]	; (800d244 <_fstat_r+0x20>)
 800d228:	2300      	movs	r3, #0
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	4611      	mov	r1, r2
 800d230:	602b      	str	r3, [r5, #0]
 800d232:	f7f4 f850 	bl	80012d6 <_fstat>
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	d102      	bne.n	800d240 <_fstat_r+0x1c>
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	b103      	cbz	r3, 800d240 <_fstat_r+0x1c>
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	20004a8c 	.word	0x20004a8c

0800d248 <_isatty_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d06      	ldr	r5, [pc, #24]	; (800d264 <_isatty_r+0x1c>)
 800d24c:	2300      	movs	r3, #0
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	602b      	str	r3, [r5, #0]
 800d254:	f7f4 f84f 	bl	80012f6 <_isatty>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d102      	bne.n	800d262 <_isatty_r+0x1a>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	b103      	cbz	r3, 800d262 <_isatty_r+0x1a>
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	20004a8c 	.word	0x20004a8c

0800d268 <_raise_r>:
 800d268:	291f      	cmp	r1, #31
 800d26a:	b538      	push	{r3, r4, r5, lr}
 800d26c:	4604      	mov	r4, r0
 800d26e:	460d      	mov	r5, r1
 800d270:	d904      	bls.n	800d27c <_raise_r+0x14>
 800d272:	2316      	movs	r3, #22
 800d274:	6003      	str	r3, [r0, #0]
 800d276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d27e:	b112      	cbz	r2, 800d286 <_raise_r+0x1e>
 800d280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d284:	b94b      	cbnz	r3, 800d29a <_raise_r+0x32>
 800d286:	4620      	mov	r0, r4
 800d288:	f000 f830 	bl	800d2ec <_getpid_r>
 800d28c:	462a      	mov	r2, r5
 800d28e:	4601      	mov	r1, r0
 800d290:	4620      	mov	r0, r4
 800d292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d296:	f000 b817 	b.w	800d2c8 <_kill_r>
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d00a      	beq.n	800d2b4 <_raise_r+0x4c>
 800d29e:	1c59      	adds	r1, r3, #1
 800d2a0:	d103      	bne.n	800d2aa <_raise_r+0x42>
 800d2a2:	2316      	movs	r3, #22
 800d2a4:	6003      	str	r3, [r0, #0]
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	e7e7      	b.n	800d27a <_raise_r+0x12>
 800d2aa:	2400      	movs	r4, #0
 800d2ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	4798      	blx	r3
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	e7e0      	b.n	800d27a <_raise_r+0x12>

0800d2b8 <raise>:
 800d2b8:	4b02      	ldr	r3, [pc, #8]	; (800d2c4 <raise+0xc>)
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	6818      	ldr	r0, [r3, #0]
 800d2be:	f7ff bfd3 	b.w	800d268 <_raise_r>
 800d2c2:	bf00      	nop
 800d2c4:	20000088 	.word	0x20000088

0800d2c8 <_kill_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d07      	ldr	r5, [pc, #28]	; (800d2e8 <_kill_r+0x20>)
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	602b      	str	r3, [r5, #0]
 800d2d6:	f7f3 ff9f 	bl	8001218 <_kill>
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	d102      	bne.n	800d2e4 <_kill_r+0x1c>
 800d2de:	682b      	ldr	r3, [r5, #0]
 800d2e0:	b103      	cbz	r3, 800d2e4 <_kill_r+0x1c>
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	bd38      	pop	{r3, r4, r5, pc}
 800d2e6:	bf00      	nop
 800d2e8:	20004a8c 	.word	0x20004a8c

0800d2ec <_getpid_r>:
 800d2ec:	f7f3 bf8c 	b.w	8001208 <_getpid>

0800d2f0 <_gettimeofday>:
 800d2f0:	4b02      	ldr	r3, [pc, #8]	; (800d2fc <_gettimeofday+0xc>)
 800d2f2:	2258      	movs	r2, #88	; 0x58
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2fa:	4770      	bx	lr
 800d2fc:	20004a8c 	.word	0x20004a8c

0800d300 <_init>:
 800d300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d302:	bf00      	nop
 800d304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d306:	bc08      	pop	{r3}
 800d308:	469e      	mov	lr, r3
 800d30a:	4770      	bx	lr

0800d30c <_fini>:
 800d30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30e:	bf00      	nop
 800d310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d312:	bc08      	pop	{r3}
 800d314:	469e      	mov	lr, r3
 800d316:	4770      	bx	lr
