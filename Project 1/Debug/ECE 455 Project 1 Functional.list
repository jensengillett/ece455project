
ECE 455 Project 1 Functional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d38  08008d38  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000486c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200048d8  200048d8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014ea3  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000343a  00000000  00000000  00034f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001420  00000000  00000000  000383c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f7d  00000000  00000000  000397e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025271  00000000  00000000  0003a75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015d9d  00000000  00000000  0005f9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e295c  00000000  00000000  0007576b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e48  00000000  00000000  001580c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0015df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b44 	.word	0x08008b44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008b44 	.word	0x08008b44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000088 	.word	0x20000088
 8000dd8:	200000dc 	.word	0x200000dc

08000ddc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <vApplicationGetTimerTaskMemory+0x2c>)
 8000dec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <vApplicationGetTimerTaskMemory+0x30>)
 8000df2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	200002dc 	.word	0x200002dc
 8000e0c:	20000330 	.word	0x20000330

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b0c8      	sub	sp, #288	; 0x120
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	srand(314159);
 8000e16:	48a3      	ldr	r0, [pc, #652]	; (80010a4 <main+0x294>)
 8000e18:	f006 fe70 	bl	8007afc <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f001 fb12 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f976 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fb06 	bl	8001434 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e28:	f000 fa2e 	bl	8001288 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000e2c:	f000 f9da 	bl	80011e4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e30:	f000 fa60 	bl	80012f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e34:	f000 fab0 	bl	8001398 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of cars_array_mutex */
  osMutexDef(cars_array_mutex);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  cars_array_mutexHandle = osMutexCreate(osMutex(cars_array_mutex));
 8000e44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fc5f 	bl	800470c <osMutexCreate>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a95      	ldr	r2, [pc, #596]	; (80010a8 <main+0x298>)
 8000e52:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_2_mutex */
  osMutexDef(traffic_rate_2_mutex);
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  traffic_rate_2_mutexHandle = osMutexCreate(osMutex(traffic_rate_2_mutex));
 8000e60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fc51 	bl	800470c <osMutexCreate>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a8f      	ldr	r2, [pc, #572]	; (80010ac <main+0x29c>)
 8000e6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_mutex */
  osMutexDef(light_status_mutex);
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  light_status_mutexHandle = osMutexCreate(osMutex(light_status_mutex));
 8000e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fc43 	bl	800470c <osMutexCreate>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a89      	ldr	r2, [pc, #548]	; (80010b0 <main+0x2a0>)
 8000e8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_rate_1_mutex */
  osMutexDef(traffic_rate_1_mutex);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  traffic_rate_1_mutexHandle = osMutexCreate(osMutex(traffic_rate_1_mutex));
 8000e98:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fc35 	bl	800470c <osMutexCreate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a83      	ldr	r2, [pc, #524]	; (80010b4 <main+0x2a4>)
 8000ea6:	6013      	str	r3, [r2, #0]

  /* definition and creation of car_timing_mutex */
  osMutexDef(car_timing_mutex);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  car_timing_mutexHandle = osMutexCreate(osMutex(car_timing_mutex));
 8000eb4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fc27 	bl	800470c <osMutexCreate>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a7d      	ldr	r2, [pc, #500]	; (80010b8 <main+0x2a8>)
 8000ec2:	6013      	str	r3, [r2, #0]

  /* definition and creation of pot_timer_mutex */
  osMutexDef(pot_timer_mutex);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  pot_timer_mutexHandle = osMutexCreate(osMutex(pot_timer_mutex));
 8000ed0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fc19 	bl	800470c <osMutexCreate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a77      	ldr	r2, [pc, #476]	; (80010bc <main+0x2ac>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_timer_mutex */
  osMutexDef(light_timer_mutex);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  light_timer_mutexHandle = osMutexCreate(osMutex(light_timer_mutex));
 8000eec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fc0b 	bl	800470c <osMutexCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a71      	ldr	r2, [pc, #452]	; (80010c0 <main+0x2b0>)
 8000efa:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of car_movement_timer */
  osTimerDef(car_movement_timer, car_movement_callback);
 8000efc:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <main+0x2b4>)
 8000efe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  car_movement_timerHandle = osTimerCreate(osTimer(car_movement_timer), osTimerPeriodic, NULL);
 8000f08:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fb83 	bl	800461c <osTimerCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a6b      	ldr	r2, [pc, #428]	; (80010c8 <main+0x2b8>)
 8000f1a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of traffic_queue_1 */
  osMessageQDef(traffic_queue_1, 16, uint16_t);
 8000f1c:	4b6b      	ldr	r3, [pc, #428]	; (80010cc <main+0x2bc>)
 8000f1e:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_1Handle = osMessageCreate(osMessageQ(traffic_queue_1), NULL);
 8000f28:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fc88 	bl	8004844 <osMessageCreate>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a66      	ldr	r2, [pc, #408]	; (80010d0 <main+0x2c0>)
 8000f38:	6013      	str	r3, [r2, #0]

  /* definition and creation of traffic_queue_2 */
  osMessageQDef(traffic_queue_2, 16, uint16_t);
 8000f3a:	4b64      	ldr	r3, [pc, #400]	; (80010cc <main+0x2bc>)
 8000f3c:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_2Handle = osMessageCreate(osMessageQ(traffic_queue_2), NULL);
 8000f46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fc79 	bl	8004844 <osMessageCreate>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a5f      	ldr	r2, [pc, #380]	; (80010d4 <main+0x2c4>)
 8000f56:	6013      	str	r3, [r2, #0]

  /* definition and creation of cars_array_queue */
  osMessageQDef(cars_array_queue, 16, uint32_t);
 8000f58:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <main+0x2c8>)
 8000f5a:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cars_array_queueHandle = osMessageCreate(osMessageQ(cars_array_queue), NULL);
 8000f64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fc6a 	bl	8004844 <osMessageCreate>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a5a      	ldr	r2, [pc, #360]	; (80010dc <main+0x2cc>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_status_queue */
  osMessageQDef(light_status_queue, 16, uint16_t);
 8000f76:	4b55      	ldr	r3, [pc, #340]	; (80010cc <main+0x2bc>)
 8000f78:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_status_queueHandle = osMessageCreate(osMessageQ(light_status_queue), NULL);
 8000f82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fc5b 	bl	8004844 <osMessageCreate>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a53      	ldr	r2, [pc, #332]	; (80010e0 <main+0x2d0>)
 8000f92:	6013      	str	r3, [r2, #0]

  /* definition and creation of car_timer_queue */
  osMessageQDef(car_timer_queue, 16, uint16_t);
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <main+0x2bc>)
 8000f96:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  car_timer_queueHandle = osMessageCreate(osMessageQ(car_timer_queue), NULL);
 8000fa0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fc4c 	bl	8004844 <osMessageCreate>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <main+0x2d4>)
 8000fb0:	6013      	str	r3, [r2, #0]

  /* definition and creation of pot_timer_queue */
  osMessageQDef(pot_timer_queue, 16, uint16_t);
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <main+0x2bc>)
 8000fb4:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pot_timer_queueHandle = osMessageCreate(osMessageQ(pot_timer_queue), NULL);
 8000fbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 fc3d 	bl	8004844 <osMessageCreate>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <main+0x2d8>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_timer_queue */
  osMessageQDef(light_timer_queue, 16, uint16_t);
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <main+0x2bc>)
 8000fd2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_timer_queueHandle = osMessageCreate(osMessageQ(light_timer_queue), NULL);
 8000fdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fc2e 	bl	8004844 <osMessageCreate>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a40      	ldr	r2, [pc, #256]	; (80010ec <main+0x2dc>)
 8000fec:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <main+0x2e0>)
 8000ff0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001002:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f003 faa6 	bl	800455a <osThreadCreate>
 800100e:	4603      	mov	r3, r0
 8001010:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <main+0x2e4>)
 8001012:	6013      	str	r3, [r2, #0]

  /* definition and creation of adjust_flow */
  osThreadDef(adjust_flow, AdjustFlow, osPriorityIdle, 0, 128);
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <main+0x2e8>)
 8001016:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800101a:	461d      	mov	r5, r3
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001024:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adjust_flowHandle = osThreadCreate(osThread(adjust_flow), NULL);
 8001028:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fa93 	bl	800455a <osThreadCreate>
 8001034:	4603      	mov	r3, r0
 8001036:	4a31      	ldr	r2, [pc, #196]	; (80010fc <main+0x2ec>)
 8001038:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_state */
  osThreadDef(light_state, LightState, osPriorityIdle, 0, 128);
 800103a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800103e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001042:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <main+0x2f0>)
 8001044:	461c      	mov	r4, r3
 8001046:	4615      	mov	r5, r2
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  light_stateHandle = osThreadCreate(osThread(light_state), NULL);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fa7d 	bl	800455a <osThreadCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a28      	ldr	r2, [pc, #160]	; (8001104 <main+0x2f4>)
 8001064:	6013      	str	r3, [r2, #0]

  /* definition and creation of sys_manage */
  osThreadDef(sys_manage, SysManage, osPriorityIdle, 0, 128);
 8001066:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800106a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <main+0x2f8>)
 8001070:	461c      	mov	r4, r3
 8001072:	4615      	mov	r5, r2
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sys_manageHandle = osThreadCreate(osThread(sys_manage), NULL);
 8001080:	463b      	mov	r3, r7
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fa68 	bl	800455a <osThreadCreate>
 800108a:	4603      	mov	r3, r0
 800108c:	4a1f      	ldr	r2, [pc, #124]	; (800110c <main+0x2fc>)
 800108e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osTimerStart(car_movement_timerHandle, 500);
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <main+0x2b8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001098:	4618      	mov	r0, r3
 800109a:	f003 faf3 	bl	8004684 <osTimerStart>
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800109e:	f003 fa55 	bl	800454c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80010a2:	e7fe      	b.n	80010a2 <main+0x292>
 80010a4:	0004cb2f 	.word	0x0004cb2f
 80010a8:	20000890 	.word	0x20000890
 80010ac:	20000894 	.word	0x20000894
 80010b0:	20000898 	.word	0x20000898
 80010b4:	2000089c 	.word	0x2000089c
 80010b8:	200008a0 	.word	0x200008a0
 80010bc:	200008a4 	.word	0x200008a4
 80010c0:	200008a8 	.word	0x200008a8
 80010c4:	08001e29 	.word	0x08001e29
 80010c8:	2000088c 	.word	0x2000088c
 80010cc:	08008b5c 	.word	0x08008b5c
 80010d0:	20000870 	.word	0x20000870
 80010d4:	20000874 	.word	0x20000874
 80010d8:	08008b6c 	.word	0x08008b6c
 80010dc:	20000878 	.word	0x20000878
 80010e0:	2000087c 	.word	0x2000087c
 80010e4:	20000880 	.word	0x20000880
 80010e8:	20000884 	.word	0x20000884
 80010ec:	20000888 	.word	0x20000888
 80010f0:	08008b88 	.word	0x08008b88
 80010f4:	20000860 	.word	0x20000860
 80010f8:	08008bb0 	.word	0x08008bb0
 80010fc:	20000864 	.word	0x20000864
 8001100:	08008bd8 	.word	0x08008bd8
 8001104:	20000868 	.word	0x20000868
 8001108:	08008c00 	.word	0x08008c00
 800110c:	2000086c 	.word	0x2000086c

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2230      	movs	r2, #48	; 0x30
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fe1a 	bl	8007d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <SystemClock_Config+0xcc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <SystemClock_Config+0xcc>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemClock_Config+0xcc>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <SystemClock_Config+0xd0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <SystemClock_Config+0xd0>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <SystemClock_Config+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001184:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800118e:	2307      	movs	r3, #7
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fffa 	bl	8003190 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011a2:	f000 feab 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2302      	movs	r3, #2
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2105      	movs	r1, #5
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fa5b 	bl	8003680 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011d0:	f000 fe94 	bl	8001efc <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	; 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_ADC1_Init+0x98>)
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <MX_ADC1_Init+0x9c>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_ADC1_Init+0x98>)
 80011fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_ADC1_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_ADC1_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_ADC1_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_ADC1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_ADC1_Init+0x98>)
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_ADC1_Init+0xa0>)
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_ADC1_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_ADC1_Init+0x98>)
 8001232:	2201      	movs	r2, #1
 8001234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_ADC1_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_ADC1_Init+0x98>)
 8001240:	2201      	movs	r2, #1
 8001242:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_ADC1_Init+0x98>)
 8001246:	f001 f93f 	bl	80024c8 <HAL_ADC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001250:	f000 fe54 	bl	8001efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001254:	230d      	movs	r3, #13
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_ADC1_Init+0x98>)
 8001266:	f001 fadd 	bl	8002824 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001270:	f000 fe44 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000730 	.word	0x20000730
 8001280:	40012000 	.word	0x40012000
 8001284:	0f000001 	.word	0x0f000001

08001288 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_SPI1_Init+0x64>)
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <MX_SPI1_Init+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_SPI1_Init+0x64>)
 8001294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_SPI1_Init+0x64>)
 80012b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_SPI1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_SPI1_Init+0x64>)
 80012d4:	220a      	movs	r2, #10
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_SPI1_Init+0x64>)
 80012da:	f002 fc0f 	bl	8003afc <HAL_SPI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e4:	f000 fe0a 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000778 	.word	0x20000778
 80012f0:	40013000 	.word	0x40013000

080012f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_TIM1_Init+0x9c>)
 8001312:	4a20      	ldr	r2, [pc, #128]	; (8001394 <MX_TIM1_Init+0xa0>)
 8001314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_TIM1_Init+0x9c>)
 8001318:	f242 720f 	movw	r2, #9999	; 0x270f
 800131c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_TIM1_Init+0x9c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8599;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_TIM1_Init+0x9c>)
 8001326:	f242 1297 	movw	r2, #8599	; 0x2197
 800132a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_TIM1_Init+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_TIM1_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_TIM1_Init+0x9c>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_TIM1_Init+0x9c>)
 8001340:	f002 fc65 	bl	8003c0e <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800134a:	f000 fdd7 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_TIM1_Init+0x9c>)
 800135c:	f002 fe06 	bl	8003f6c <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001366:	f000 fdc9 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_TIM1_Init+0x9c>)
 8001378:	f003 f82e 	bl	80043d8 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001382:	f000 fdbb 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200007d0 	.word	0x200007d0
 8001394:	40010000 	.word	0x40010000

08001398 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM3_Init+0x94>)
 80013b6:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <MX_TIM3_Init+0x98>)
 80013b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8599;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM3_Init+0x94>)
 80013bc:	f242 1297 	movw	r2, #8599	; 0x2197
 80013c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM3_Init+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_TIM3_Init+0x94>)
 80013ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80013ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM3_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_TIM3_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_TIM3_Init+0x94>)
 80013de:	f002 fc16 	bl	8003c0e <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013e8:	f000 fd88 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM3_Init+0x94>)
 80013fa:	f002 fdb7 	bl	8003f6c <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001404:	f000 fd7a 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM3_Init+0x94>)
 8001416:	f002 ffdf 	bl	80043d8 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 fd6c 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000818 	.word	0x20000818
 8001430:	40000400 	.word	0x40000400

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b46      	ldr	r3, [pc, #280]	; (8001568 <MX_GPIO_Init+0x134>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a45      	ldr	r2, [pc, #276]	; (8001568 <MX_GPIO_Init+0x134>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <MX_GPIO_Init+0x134>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <MX_GPIO_Init+0x134>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <MX_GPIO_Init+0x134>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <MX_GPIO_Init+0x134>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <MX_GPIO_Init+0x134>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <MX_GPIO_Init+0x134>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <MX_GPIO_Init+0x134>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_GPIO_Init+0x134>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a30      	ldr	r2, [pc, #192]	; (8001568 <MX_GPIO_Init+0x134>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_GPIO_Init+0x134>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <MX_GPIO_Init+0x134>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a29      	ldr	r2, [pc, #164]	; (8001568 <MX_GPIO_Init+0x134>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_GPIO_Init+0x134>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 80014d6:	2200      	movs	r2, #0
 80014d8:	f240 11c7 	movw	r1, #455	; 0x1c7
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <MX_GPIO_Init+0x138>)
 80014de:	f001 fe3d 	bl	800315c <HAL_GPIO_WritePin>
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014e8:	4821      	ldr	r0, [pc, #132]	; (8001570 <MX_GPIO_Init+0x13c>)
 80014ea:	f001 fe37 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Red_Light_Pin Amber_Light_Pin Green_Light_Pin Shift_Reg_Data_Pin
                           Shift_Reg_Clock_Pin Shift_Reg_Reset_Pin */
  GPIO_InitStruct.Pin = Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 80014ee:	f240 13c7 	movw	r3, #455	; 0x1c7
 80014f2:	617b      	str	r3, [r7, #20]
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <MX_GPIO_Init+0x138>)
 8001508:	f001 fc8c 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800150c:	2304      	movs	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4815      	ldr	r0, [pc, #84]	; (8001574 <MX_GPIO_Init+0x140>)
 8001520:	f001 fc80 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001524:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <MX_GPIO_Init+0x13c>)
 800153e:	f001 fc71 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001548:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_GPIO_Init+0x138>)
 800155a:	f001 fc63 	bl	8002e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	40020400 	.word	0x40020400

08001578 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f003 f836 	bl	80045f2 <osDelay>
 8001586:	e7fb      	b.n	8001580 <StartDefaultTask+0x8>

08001588 <AdjustFlow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AdjustFlow */
void AdjustFlow(void const * argument)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN AdjustFlow */
	uint16_t raw = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	84fb      	strh	r3, [r7, #38]	; 0x26
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(pot_timer_mutexHandle, osWaitForever);
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <AdjustFlow+0xd4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800159c:	4618      	mov	r0, r3
 800159e:	f003 f8cd 	bl	800473c <osMutexWait>
		osEvent event = osMessageGet(pot_timer_queueHandle, 0);
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <AdjustFlow+0xd8>)
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	2200      	movs	r2, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 f9b1 	bl	8004914 <osMessageGet>
		osMutexRelease(pot_timer_mutexHandle);
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <AdjustFlow+0xd4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f90e 	bl	80047d8 <osMutexRelease>
		if(event.status != osEventMessage){
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d14a      	bne.n	8001658 <AdjustFlow+0xd0>
			continue;
		}
		HAL_ADC_Start(&hadc1);
 80015c2:	4828      	ldr	r0, [pc, #160]	; (8001664 <AdjustFlow+0xdc>)
 80015c4:	f000 ffc4 	bl	8002550 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015cc:	4825      	ldr	r0, [pc, #148]	; (8001664 <AdjustFlow+0xdc>)
 80015ce:	f001 f891 	bl	80026f4 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 80015d2:	4824      	ldr	r0, [pc, #144]	; (8001664 <AdjustFlow+0xdc>)
 80015d4:	f001 f919 	bl	800280a <HAL_ADC_GetValue>
 80015d8:	4603      	mov	r3, r0
 80015da:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(raw > 2400){
 80015dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015de:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80015e2:	d902      	bls.n	80015ea <AdjustFlow+0x62>
			raw = 2400;
 80015e4:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80015e8:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <AdjustFlow+0xe0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f8a2 	bl	800473c <osMutexWait>
		osMessageGet(traffic_queue_1Handle, 0);
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <AdjustFlow+0xe4>)
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f003 f987 	bl	8004914 <osMessageGet>
		osMessagePut(traffic_queue_1Handle, raw, osWaitForever);
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <AdjustFlow+0xe4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800160c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001610:	4618      	mov	r0, r3
 8001612:	f003 f93f 	bl	8004894 <osMessagePut>
		osMutexRelease(traffic_rate_1_mutexHandle);
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <AdjustFlow+0xe0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 f8dc 	bl	80047d8 <osMutexRelease>

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <AdjustFlow+0xe8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001628:	4618      	mov	r0, r3
 800162a:	f003 f887 	bl	800473c <osMutexWait>
		osMessageGet(traffic_queue_2Handle, 0);
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <AdjustFlow+0xec>)
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	463b      	mov	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f003 f96c 	bl	8004914 <osMessageGet>
		osMessagePut(traffic_queue_2Handle, raw, osWaitForever);
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <AdjustFlow+0xec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001646:	4618      	mov	r0, r3
 8001648:	f003 f924 	bl	8004894 <osMessagePut>
		osMutexRelease(traffic_rate_2_mutexHandle);
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <AdjustFlow+0xe8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f003 f8c1 	bl	80047d8 <osMutexRelease>
 8001656:	e79d      	b.n	8001594 <AdjustFlow+0xc>
			continue;
 8001658:	bf00      	nop
	{
 800165a:	e79b      	b.n	8001594 <AdjustFlow+0xc>
 800165c:	200008a4 	.word	0x200008a4
 8001660:	20000884 	.word	0x20000884
 8001664:	20000730 	.word	0x20000730
 8001668:	2000089c 	.word	0x2000089c
 800166c:	20000870 	.word	0x20000870
 8001670:	20000894 	.word	0x20000894
 8001674:	20000874 	.word	0x20000874

08001678 <LightState>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LightState */
void LightState(void const * argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0
 800167e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN LightState */
	uint16_t rate = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	86fb      	strh	r3, [r7, #54]	; 0x36
	float scaled = 0;
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
	int scale_cap = 1;
 800168a:	2301      	movs	r3, #1
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
	int scale_count = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 8001692:	4b70      	ldr	r3, [pc, #448]	; (8001854 <LightState+0x1dc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800169a:	4618      	mov	r0, r3
 800169c:	f003 f84e 	bl	800473c <osMutexWait>
		// int rate = traffic_rate; // TODO: traffic_queue_1
		osEvent event = osMessageGet(traffic_queue_2Handle, 0);
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <LightState+0x1e0>)
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	2200      	movs	r2, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 f932 	bl	8004914 <osMessageGet>
		if(event.status == osEventMessage){
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d101      	bne.n	80016ba <LightState+0x42>
			rate = event.value.v;
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <LightState+0x1dc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 f88a 	bl	80047d8 <osMutexRelease>
		scaled = rate / 2400.0;
 80016c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff24 	bl	8000514 <__aeabi_i2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b62      	ldr	r3, [pc, #392]	; (800185c <LightState+0x1e4>)
 80016d2:	f7ff f8b3 	bl	800083c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f995 	bl	8000a0c <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		// turn green LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2101      	movs	r1, #1
 80016ea:	485d      	ldr	r0, [pc, #372]	; (8001860 <LightState+0x1e8>)
 80016ec:	f001 fd36 	bl	800315c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2102      	movs	r1, #2
 80016f4:	485a      	ldr	r0, [pc, #360]	; (8001860 <LightState+0x1e8>)
 80016f6:	f001 fd31 	bl	800315c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2104      	movs	r1, #4
 80016fe:	4858      	ldr	r0, [pc, #352]	; (8001860 <LightState+0x1e8>)
 8001700:	f001 fd2c 	bl	800315c <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001704:	4b57      	ldr	r3, [pc, #348]	; (8001864 <LightState+0x1ec>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800170c:	4618      	mov	r0, r3
 800170e:	f003 f815 	bl	800473c <osMutexWait>
		osMessagePut(light_status_queueHandle, 2, osWaitForever);
 8001712:	4b55      	ldr	r3, [pc, #340]	; (8001868 <LightState+0x1f0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171a:	2102      	movs	r1, #2
 800171c:	4618      	mov	r0, r3
 800171e:	f003 f8b9 	bl	8004894 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001722:	4b50      	ldr	r3, [pc, #320]	; (8001864 <LightState+0x1ec>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f003 f856 	bl	80047d8 <osMutexRelease>
		// light_status = 2; //TODO: light_queue_0
		// modulate traffic rate to 1
		// osDelay((uint32_t)(3000 + 3000 * scaled));
		scale_cap = (int)(3000 + 3000 * scaled)/500;
 800172c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001730:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800186c <LightState+0x1f4>
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800186c <LightState+0x1f4>
 800173c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001744:	ee17 1a90 	vmov	r1, s15
 8001748:	4b49      	ldr	r3, [pc, #292]	; (8001870 <LightState+0x1f8>)
 800174a:	fb83 2301 	smull	r2, r3, r3, r1
 800174e:	115a      	asrs	r2, r3, #5
 8001750:	17cb      	asrs	r3, r1, #31
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
		osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <LightState+0x1fc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800175e:	4618      	mov	r0, r3
 8001760:	f002 ffec 	bl	800473c <osMutexWait>
		event = osMessageGet(light_timer_queueHandle, 0);
 8001764:	4b44      	ldr	r3, [pc, #272]	; (8001878 <LightState+0x200>)
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f8d1 	bl	8004914 <osMessageGet>
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	463a      	mov	r2, r7
 8001778:	ca07      	ldmia	r2, {r0, r1, r2}
 800177a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(light_timer_mutexHandle);
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <LightState+0x1fc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f828 	bl	80047d8 <osMutexRelease>
		while(scale_count < scale_cap){
 8001788:	e01e      	b.n	80017c8 <LightState+0x150>
			if (event.status == osEventMessage){
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2b10      	cmp	r3, #16
 800178e:	d102      	bne.n	8001796 <LightState+0x11e>
				scale_count ++;
 8001790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001792:	3301      	adds	r3, #1
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
			}
			osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <LightState+0x1fc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 ffcc 	bl	800473c <osMutexWait>
			event = osMessageGet(light_timer_queueHandle, 0);
 80017a4:	4b34      	ldr	r3, [pc, #208]	; (8001878 <LightState+0x200>)
 80017a6:	6819      	ldr	r1, [r3, #0]
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 f8b1 	bl	8004914 <osMessageGet>
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	463a      	mov	r2, r7
 80017b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(light_timer_mutexHandle);
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <LightState+0x1fc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 f808 	bl	80047d8 <osMutexRelease>
		while(scale_count < scale_cap){
 80017c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbdc      	blt.n	800178a <LightState+0x112>
		}
		scale_count = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30

		// turn yellow LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2101      	movs	r1, #1
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <LightState+0x1e8>)
 80017da:	f001 fcbf 	bl	800315c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2102      	movs	r1, #2
 80017e2:	481f      	ldr	r0, [pc, #124]	; (8001860 <LightState+0x1e8>)
 80017e4:	f001 fcba 	bl	800315c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2104      	movs	r1, #4
 80017ec:	481c      	ldr	r0, [pc, #112]	; (8001860 <LightState+0x1e8>)
 80017ee:	f001 fcb5 	bl	800315c <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <LightState+0x1ec>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 ff9e 	bl	800473c <osMutexWait>
		osMessagePut(light_status_queueHandle, 1, osWaitForever);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <LightState+0x1f0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001808:	2101      	movs	r1, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f003 f842 	bl	8004894 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <LightState+0x1ec>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 ffdf 	bl	80047d8 <osMutexRelease>
		// light_status = 1;
		scale_cap = 2;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
		osMutexWait(light_timer_mutexHandle, osWaitForever);
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <LightState+0x1fc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff88 	bl	800473c <osMutexWait>
		event = osMessageGet(light_timer_queueHandle, 0);
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <LightState+0x200>)
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f86d 	bl	8004914 <osMessageGet>
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	463a      	mov	r2, r7
 8001840:	ca07      	ldmia	r2, {r0, r1, r2}
 8001842:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(light_timer_mutexHandle);
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <LightState+0x1fc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 ffc4 	bl	80047d8 <osMutexRelease>
		while(scale_count < scale_cap){
 8001850:	e033      	b.n	80018ba <LightState+0x242>
 8001852:	bf00      	nop
 8001854:	20000894 	.word	0x20000894
 8001858:	20000874 	.word	0x20000874
 800185c:	40a2c000 	.word	0x40a2c000
 8001860:	40020800 	.word	0x40020800
 8001864:	20000898 	.word	0x20000898
 8001868:	2000087c 	.word	0x2000087c
 800186c:	453b8000 	.word	0x453b8000
 8001870:	10624dd3 	.word	0x10624dd3
 8001874:	200008a8 	.word	0x200008a8
 8001878:	20000888 	.word	0x20000888
			if (event.status == osEventMessage){
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b10      	cmp	r3, #16
 8001880:	d102      	bne.n	8001888 <LightState+0x210>
				scale_count ++;
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	3301      	adds	r3, #1
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
			}
			osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001888:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <LightState+0x3a4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001890:	4618      	mov	r0, r3
 8001892:	f002 ff53 	bl	800473c <osMutexWait>
			event = osMessageGet(light_timer_queueHandle, 0);
 8001896:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <LightState+0x3a8>)
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f838 	bl	8004914 <osMessageGet>
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	463a      	mov	r2, r7
 80018aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(light_timer_mutexHandle);
 80018b0:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <LightState+0x3a4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 ff8f 	bl	80047d8 <osMutexRelease>
		while(scale_count < scale_cap){
 80018ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbdc      	blt.n	800187c <LightState+0x204>
		}
		scale_count = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80018c6:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <LightState+0x3ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 ff34 	bl	800473c <osMutexWait>
		event = osMessageGet(traffic_queue_2Handle, 0); //TODO: traffic_queue_1
 80018d4:	4b54      	ldr	r3, [pc, #336]	; (8001a28 <LightState+0x3b0>)
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	463b      	mov	r3, r7
 80018da:	2200      	movs	r2, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 f819 	bl	8004914 <osMessageGet>
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	463a      	mov	r2, r7
 80018e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d101      	bne.n	80018f8 <LightState+0x280>
			rate = event.value.v;
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
 80018f8:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <LightState+0x3ac>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 ff6b 	bl	80047d8 <osMutexRelease>
		scaled = rate / 2400.0;
 8001902:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe05 	bl	8000514 <__aeabi_i2d>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <LightState+0x3b4>)
 8001910:	f7fe ff94 	bl	800083c <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f876 	bl	8000a0c <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
		// turn red LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2101      	movs	r1, #1
 8001928:	4841      	ldr	r0, [pc, #260]	; (8001a30 <LightState+0x3b8>)
 800192a:	f001 fc17 	bl	800315c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2102      	movs	r1, #2
 8001932:	483f      	ldr	r0, [pc, #252]	; (8001a30 <LightState+0x3b8>)
 8001934:	f001 fc12 	bl	800315c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2104      	movs	r1, #4
 800193c:	483c      	ldr	r0, [pc, #240]	; (8001a30 <LightState+0x3b8>)
 800193e:	f001 fc0d 	bl	800315c <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <LightState+0x3bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fef6 	bl	800473c <osMutexWait>
		osMessagePut(light_status_queueHandle, 0, osWaitForever);
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <LightState+0x3c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f002 ff9a 	bl	8004894 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <LightState+0x3bc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f002 ff37 	bl	80047d8 <osMutexRelease>
		// light_status = 0;
		// modulate traffic rate to 1
		// osDelay((uint32_t)(3000 + 3000 * (1-scaled)));
		scale_cap = (int)(3000 + 3000 * (1 - scaled))/500;
 800196a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800196e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001976:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001a3c <LightState+0x3c4>
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001a3c <LightState+0x3c4>
 8001982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198a:	ee17 1a90 	vmov	r1, s15
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <LightState+0x3c8>)
 8001990:	fb83 2301 	smull	r2, r3, r3, r1
 8001994:	115a      	asrs	r2, r3, #5
 8001996:	17cb      	asrs	r3, r1, #31
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
		osMutexWait(light_timer_mutexHandle, osWaitForever);
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <LightState+0x3a4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fec9 	bl	800473c <osMutexWait>
		event = osMessageGet(light_timer_queueHandle, 0);
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <LightState+0x3a8>)
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	463b      	mov	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 ffae 	bl	8004914 <osMessageGet>
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	463a      	mov	r2, r7
 80019be:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(light_timer_mutexHandle);
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <LightState+0x3a4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 ff05 	bl	80047d8 <osMutexRelease>
		while(scale_count < scale_cap){
 80019ce:	e01e      	b.n	8001a0e <LightState+0x396>
			if (event.status == osEventMessage){
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d102      	bne.n	80019dc <LightState+0x364>
				scale_count ++;
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	3301      	adds	r3, #1
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
			}
			osMutexWait(light_timer_mutexHandle, osWaitForever);
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <LightState+0x3a4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fea9 	bl	800473c <osMutexWait>
			event = osMessageGet(light_timer_queueHandle, 0);
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <LightState+0x3a8>)
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ff8e 	bl	8004914 <osMessageGet>
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	463a      	mov	r2, r7
 80019fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(light_timer_mutexHandle);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <LightState+0x3a4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fee5 	bl	80047d8 <osMutexRelease>
		while(scale_count < scale_cap){
 8001a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbdc      	blt.n	80019d0 <LightState+0x358>
		}
		scale_count = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
	{
 8001a1a:	e63a      	b.n	8001692 <LightState+0x1a>
 8001a1c:	200008a8 	.word	0x200008a8
 8001a20:	20000888 	.word	0x20000888
 8001a24:	20000894 	.word	0x20000894
 8001a28:	20000874 	.word	0x20000874
 8001a2c:	40a2c000 	.word	0x40a2c000
 8001a30:	40020800 	.word	0x40020800
 8001a34:	20000898 	.word	0x20000898
 8001a38:	2000087c 	.word	0x2000087c
 8001a3c:	453b8000 	.word	0x453b8000
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <trafficGenerated>:
		converted_number |= traffic_array[i] << (18-i);
	}
	return converted_number;
}

int trafficGenerated(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
	uint16_t traffic = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	82fb      	strh	r3, [r7, #22]
	float scaled = 0;
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
	osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <trafficGenerated+0xb4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fe6d 	bl	800473c <osMutexWait>
	//int traffic = traffic_rate; //TODO: traffic_queue_0
	osEvent event = osMessageGet(traffic_queue_1Handle, 0);
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <trafficGenerated+0xb8>)
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 ff52 	bl	8004914 <osMessageGet>
	if(event.status == osEventMessage){
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d101      	bne.n	8001a7a <trafficGenerated+0x36>
		traffic = event.value.v;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	82fb      	strh	r3, [r7, #22]
	}
	osMutexRelease(traffic_rate_1_mutexHandle);
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <trafficGenerated+0xb4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 feaa 	bl	80047d8 <osMutexRelease>
	scaled = traffic / 2400.0;
 8001a84:	8afb      	ldrh	r3, [r7, #22]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd44 	bl	8000514 <__aeabi_i2d>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <trafficGenerated+0xbc>)
 8001a92:	f7fe fed3 	bl	800083c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7fe ffb5 	bl	8000a0c <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	613b      	str	r3, [r7, #16]
	// modulate traffic rate from 1 to 10

	float random = (float)(rand() % 10);
 8001aa6:	f006 f857 	bl	8007b58 <rand>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <trafficGenerated+0xc0>)
 8001aae:	fb83 1302 	smull	r1, r3, r3, r2
 8001ab2:	1099      	asrs	r1, r3, #2
 8001ab4:	17d3      	asrs	r3, r2, #31
 8001ab6:	1ac9      	subs	r1, r1, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	1ad1      	subs	r1, r2, r3
 8001ac2:	ee07 1a90 	vmov	s15, r1
 8001ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aca:	edc7 7a03 	vstr	s15, [r7, #12]
	if (random < scaled*10) {
 8001ace:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ada:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	d501      	bpl.n	8001aec <trafficGenerated+0xa8>
		return 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <trafficGenerated+0xaa>
	}
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000089c 	.word	0x2000089c
 8001afc:	20000870 	.word	0x20000870
 8001b00:	40a2c000 	.word	0x40a2c000
 8001b04:	66666667 	.word	0x66666667

08001b08 <SysManage>:

/* USER CODE END Header_SysManage */
void SysManage(void const * argument)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0b4      	sub	sp, #208	; 0xd0
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN SysManage */
	/* Infinite loop */
	int i;
	int cars[19] = {};
 8001b10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b14:	224c      	movs	r2, #76	; 0x4c
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 f91d 	bl	8007d58 <memset>
	int cars_padded[21] = {};
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	2254      	movs	r2, #84	; 0x54
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f006 f916 	bl	8007d58 <memset>
	int light_colour = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	for(;;)
	{
		osMutexWait(car_timing_mutexHandle, osWaitForever);
 8001b32:	4bb8      	ldr	r3, [pc, #736]	; (8001e14 <SysManage+0x30c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fdfe 	bl	800473c <osMutexWait>
		osEvent event = osMessageGet(car_timer_queueHandle, 0);
 8001b40:	4bb5      	ldr	r3, [pc, #724]	; (8001e18 <SysManage+0x310>)
 8001b42:	6819      	ldr	r1, [r3, #0]
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fee2 	bl	8004914 <osMessageGet>
		osMutexRelease(car_timing_mutexHandle);
 8001b50:	4bb0      	ldr	r3, [pc, #704]	; (8001e14 <SysManage+0x30c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fe3f 	bl	80047d8 <osMutexRelease>
		if(event.status != osEventMessage){
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d003      	beq.n	8001b68 <SysManage+0x60>
			osDelay(1);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f002 fd46 	bl	80045f2 <osDelay>
 8001b66:	e7e4      	b.n	8001b32 <SysManage+0x2a>
			continue;
		}

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001b68:	4bac      	ldr	r3, [pc, #688]	; (8001e1c <SysManage+0x314>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 fde3 	bl	800473c <osMutexWait>
		event = osMessageGet(light_status_queueHandle, 0); //TODO: light_queue_0
 8001b76:	4baa      	ldr	r3, [pc, #680]	; (8001e20 <SysManage+0x318>)
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 fec8 	bl	8004914 <osMessageGet>
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	463a      	mov	r2, r7
 8001b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d102      	bne.n	8001b9c <SysManage+0x94>
			light_colour = event.value.v;
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		}
		osMutexRelease(light_status_mutexHandle);
 8001b9c:	4b9f      	ldr	r3, [pc, #636]	; (8001e1c <SysManage+0x314>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fe19 	bl	80047d8 <osMutexRelease>

		// osMutexWait(cars_array_mutexHandle); //TODO: cars_queue_0
		for (i = 18; i>0; i--){
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bac:	e0a6      	b.n	8001cfc <SysManage+0x1f4>
			if (light_colour == 2) { //green
 8001bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d118      	bne.n	8001be8 <SysManage+0xe0>
				cars[i] = cars[i-1];
 8001bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	33d0      	adds	r3, #208	; 0xd0
 8001bc0:	443b      	add	r3, r7
 8001bc2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001bc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	33d0      	adds	r3, #208	; 0xd0
 8001bce:	443b      	add	r3, r7
 8001bd0:	f843 2c54 	str.w	r2, [r3, #-84]
				cars[i - 1] = 0;
 8001bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	33d0      	adds	r3, #208	; 0xd0
 8001bde:	443b      	add	r3, r7
 8001be0:	2200      	movs	r2, #0
 8001be2:	f843 2c54 	str.w	r2, [r3, #-84]
 8001be6:	e084      	b.n	8001cf2 <SysManage+0x1ea>
			}
			else if (light_colour == 1) { //yellow
 8001be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d13e      	bne.n	8001c6e <SysManage+0x166>
				if (i > 8) {
 8001bf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	dd18      	ble.n	8001c2a <SysManage+0x122>
					cars[i] = cars[i-1];
 8001bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	33d0      	adds	r3, #208	; 0xd0
 8001c02:	443b      	add	r3, r7
 8001c04:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	33d0      	adds	r3, #208	; 0xd0
 8001c10:	443b      	add	r3, r7
 8001c12:	f843 2c54 	str.w	r2, [r3, #-84]
					cars[i-1] = 0;
 8001c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	33d0      	adds	r3, #208	; 0xd0
 8001c20:	443b      	add	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	f843 2c54 	str.w	r2, [r3, #-84]
 8001c28:	e063      	b.n	8001cf2 <SysManage+0x1ea>
				}
				else {
					if (!cars[i]){
 8001c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	33d0      	adds	r3, #208	; 0xd0
 8001c32:	443b      	add	r3, r7
 8001c34:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d15a      	bne.n	8001cf2 <SysManage+0x1ea>
						cars[i] = cars[i-1];
 8001c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c40:	3b01      	subs	r3, #1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	33d0      	adds	r3, #208	; 0xd0
 8001c46:	443b      	add	r3, r7
 8001c48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	33d0      	adds	r3, #208	; 0xd0
 8001c54:	443b      	add	r3, r7
 8001c56:	f843 2c54 	str.w	r2, [r3, #-84]
						cars[i-1] = 0;
 8001c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	33d0      	adds	r3, #208	; 0xd0
 8001c64:	443b      	add	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	f843 2c54 	str.w	r2, [r3, #-84]
 8001c6c:	e041      	b.n	8001cf2 <SysManage+0x1ea>
					}
				}
			}
			else { //red
				if (i > 8){
 8001c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	dd18      	ble.n	8001ca8 <SysManage+0x1a0>
					cars[i] = cars[i-1];
 8001c76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	33d0      	adds	r3, #208	; 0xd0
 8001c80:	443b      	add	r3, r7
 8001c82:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	33d0      	adds	r3, #208	; 0xd0
 8001c8e:	443b      	add	r3, r7
 8001c90:	f843 2c54 	str.w	r2, [r3, #-84]
					cars[i-1] = 0;
 8001c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	33d0      	adds	r3, #208	; 0xd0
 8001c9e:	443b      	add	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f843 2c54 	str.w	r2, [r3, #-84]
 8001ca6:	e024      	b.n	8001cf2 <SysManage+0x1ea>
				}
				else if (i < 8){
 8001ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cac:	2b07      	cmp	r3, #7
 8001cae:	dc20      	bgt.n	8001cf2 <SysManage+0x1ea>
					if (!cars[i]) {
 8001cb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	33d0      	adds	r3, #208	; 0xd0
 8001cb8:	443b      	add	r3, r7
 8001cba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d117      	bne.n	8001cf2 <SysManage+0x1ea>
						cars[i] = cars[i-1];
 8001cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	33d0      	adds	r3, #208	; 0xd0
 8001ccc:	443b      	add	r3, r7
 8001cce:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	33d0      	adds	r3, #208	; 0xd0
 8001cda:	443b      	add	r3, r7
 8001cdc:	f843 2c54 	str.w	r2, [r3, #-84]
						cars[i-1] = 0;
 8001ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	33d0      	adds	r3, #208	; 0xd0
 8001cea:	443b      	add	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	f843 2c54 	str.w	r2, [r3, #-84]
		for (i = 18; i>0; i--){
 8001cf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f73f af54 	bgt.w	8001bae <SysManage+0xa6>
//						cars[i-1] = 0;
//					}
//				}
//			}
		}
		if (trafficGenerated()){
 8001d06:	f7ff fe9d 	bl	8001a44 <trafficGenerated>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <SysManage+0x20e>
			cars[0] = 1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d14:	e001      	b.n	8001d1a <SysManage+0x212>
		}
		else {
			cars[0] = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	67fb      	str	r3, [r7, #124]	; 0x7c
		//osMailPut(cars_array_queueHandle, cars);
		//osMessagePut(cars_array_queueHandle, cars_int, osWaitForever);
		//osMutexRelease(cars_array_mutexHandle);

		// Pad the shift registers with extra data in the 8th bit for each.
		for(i = 0; i < 19; i++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d20:	e03a      	b.n	8001d98 <SysManage+0x290>
			if(i >= 14){
 8001d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d26:	2b0d      	cmp	r3, #13
 8001d28:	dd0f      	ble.n	8001d4a <SysManage+0x242>
				cars_padded[i+2] = cars[i];
 8001d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d2e:	1c99      	adds	r1, r3, #2
 8001d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	33d0      	adds	r3, #208	; 0xd0
 8001d38:	443b      	add	r3, r7
 8001d3a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001d3e:	008b      	lsls	r3, r1, #2
 8001d40:	33d0      	adds	r3, #208	; 0xd0
 8001d42:	443b      	add	r3, r7
 8001d44:	f843 2ca8 	str.w	r2, [r3, #-168]
 8001d48:	e021      	b.n	8001d8e <SysManage+0x286>
			} else if(i >= 7){
 8001d4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	dd0f      	ble.n	8001d72 <SysManage+0x26a>
				cars_padded[i+1] = cars[i];
 8001d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	33d0      	adds	r3, #208	; 0xd0
 8001d60:	443b      	add	r3, r7
 8001d62:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001d66:	008b      	lsls	r3, r1, #2
 8001d68:	33d0      	adds	r3, #208	; 0xd0
 8001d6a:	443b      	add	r3, r7
 8001d6c:	f843 2ca8 	str.w	r2, [r3, #-168]
 8001d70:	e00d      	b.n	8001d8e <SysManage+0x286>
			} else {
				cars_padded[i] = cars[i];
 8001d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	33d0      	adds	r3, #208	; 0xd0
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	33d0      	adds	r3, #208	; 0xd0
 8001d88:	443b      	add	r3, r7
 8001d8a:	f843 2ca8 	str.w	r2, [r3, #-168]
		for(i = 0; i < 19; i++){
 8001d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d9c:	2b12      	cmp	r3, #18
 8001d9e:	ddc0      	ble.n	8001d22 <SysManage+0x21a>
			}
		}

		HAL_GPIO_WritePin(GPIOC, Shift_Reg_Reset_Pin, GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	481f      	ldr	r0, [pc, #124]	; (8001e24 <SysManage+0x31c>)
 8001da8:	f001 f9d8 	bl	800315c <HAL_GPIO_WritePin>
		osDelay(1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f002 fc20 	bl	80045f2 <osDelay>
		HAL_GPIO_WritePin(GPIOC, Shift_Reg_Reset_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db8:	481a      	ldr	r0, [pc, #104]	; (8001e24 <SysManage+0x31c>)
 8001dba:	f001 f9cf 	bl	800315c <HAL_GPIO_WritePin>
		//osDelay(1);
		for(i =20; i >= 0; i--){
 8001dbe:	2314      	movs	r3, #20
 8001dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001dc4:	e021      	b.n	8001e0a <SysManage+0x302>

			if(cars_padded[i] != 0){
 8001dc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	33d0      	adds	r3, #208	; 0xd0
 8001dce:	443b      	add	r3, r7
 8001dd0:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <SysManage+0x2da>
				HAL_GPIO_WritePin(GPIOC, Shift_Reg_Data_Pin, GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2140      	movs	r1, #64	; 0x40
 8001ddc:	4811      	ldr	r0, [pc, #68]	; (8001e24 <SysManage+0x31c>)
 8001dde:	f001 f9bd 	bl	800315c <HAL_GPIO_WritePin>
			}
			//osDelay(1);
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Clock_Pin, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	480f      	ldr	r0, [pc, #60]	; (8001e24 <SysManage+0x31c>)
 8001de8:	f001 f9b8 	bl	800315c <HAL_GPIO_WritePin>
			//osDelay(1);
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Clock_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <SysManage+0x31c>)
 8001df2:	f001 f9b3 	bl	800315c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Data_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	480a      	ldr	r0, [pc, #40]	; (8001e24 <SysManage+0x31c>)
 8001dfc:	f001 f9ae 	bl	800315c <HAL_GPIO_WritePin>
		for(i =20; i >= 0; i--){
 8001e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e04:	3b01      	subs	r3, #1
 8001e06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	dad9      	bge.n	8001dc6 <SysManage+0x2be>
	{
 8001e12:	e68e      	b.n	8001b32 <SysManage+0x2a>
 8001e14:	200008a0 	.word	0x200008a0
 8001e18:	20000880 	.word	0x20000880
 8001e1c:	20000898 	.word	0x20000898
 8001e20:	2000087c 	.word	0x2000087c
 8001e24:	40020800 	.word	0x40020800

08001e28 <car_movement_callback>:
  /* USER CODE END SysManage */
}

/* car_movement_callback function */
void car_movement_callback(void const * argument)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN car_movement_callback */
	osMutexWait(car_timing_mutexHandle, osWaitForever);
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <car_movement_callback+0x98>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 fc7f 	bl	800473c <osMutexWait>
	osMutexWait(pot_timer_mutexHandle, osWaitForever);
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <car_movement_callback+0x9c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 fc78 	bl	800473c <osMutexWait>
	osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <car_movement_callback+0xa0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fc71 	bl	800473c <osMutexWait>

	osMessageGet(car_timer_queueHandle, 0);
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <car_movement_callback+0xa4>)
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fd56 	bl	8004914 <osMessageGet>
	osMessagePut(car_timer_queueHandle, 1, osWaitForever);
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <car_movement_callback+0xa4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fd0e 	bl	8004894 <osMessagePut>
	osMessagePut(pot_timer_queueHandle, 1, osWaitForever);
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <car_movement_callback+0xa8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fd06 	bl	8004894 <osMessagePut>
	osMessagePut(light_timer_queueHandle, 1, osWaitForever);
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <car_movement_callback+0xac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 fcfe 	bl	8004894 <osMessagePut>

	osMutexRelease(light_timer_mutexHandle);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <car_movement_callback+0xa0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fc9b 	bl	80047d8 <osMutexRelease>
	osMutexRelease(pot_timer_mutexHandle);
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <car_movement_callback+0x9c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fc96 	bl	80047d8 <osMutexRelease>
	osMutexRelease(car_timing_mutexHandle);
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <car_movement_callback+0x98>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fc91 	bl	80047d8 <osMutexRelease>
  /* USER CODE END car_movement_callback */
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200008a0 	.word	0x200008a0
 8001ec4:	200008a4 	.word	0x200008a4
 8001ec8:	200008a8 	.word	0x200008a8
 8001ecc:	20000880 	.word	0x20000880
 8001ed0:	20000884 	.word	0x20000884
 8001ed4:	20000888 	.word	0x20000888

08001ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eea:	f000 facd 	bl	8002488 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40000800 	.word	0x40000800

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f04:	e7fe      	b.n	8001f04 <Error_Handler+0x8>
	...

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_MspInit+0x54>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_MspInit+0x54>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_MspInit+0x54>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_MspInit+0x54>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_MspInit+0x54>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_MspInit+0x54>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	210f      	movs	r1, #15
 8001f4a:	f06f 0001 	mvn.w	r0, #1
 8001f4e:	f000 ff3f 	bl	8002dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_ADC_MspInit+0x7c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d127      	bne.n	8001fd2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_ADC_MspInit+0x80>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <HAL_ADC_MspInit+0x80>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_ADC_MspInit+0x80>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_ADC_MspInit+0x80>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_ADC_MspInit+0x80>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_ADC_MspInit+0x80>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Pot_In_Pin;
 8001fba:	2308      	movs	r3, #8
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_In_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <HAL_ADC_MspInit+0x84>)
 8001fce:	f000 ff29 	bl	8002e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40012000 	.word	0x40012000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_SPI_MspInit+0x84>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12b      	bne.n	8002062 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_SPI_MspInit+0x88>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_SPI_MspInit+0x88>)
 8002014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_SPI_MspInit+0x88>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_SPI_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_SPI_MspInit+0x88>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_SPI_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002042:	23e0      	movs	r3, #224	; 0xe0
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002052:	2305      	movs	r3, #5
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <HAL_SPI_MspInit+0x8c>)
 800205e:	f000 fee1 	bl	8002e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40013000 	.word	0x40013000
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_TIM_Base_MspInit+0x70>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_TIM_Base_MspInit+0x74>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a16      	ldr	r2, [pc, #88]	; (80020ec <HAL_TIM_Base_MspInit+0x74>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_TIM_Base_MspInit+0x74>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020a6:	e01a      	b.n	80020de <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_TIM_Base_MspInit+0x78>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d115      	bne.n	80020de <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_TIM_Base_MspInit+0x74>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <HAL_TIM_Base_MspInit+0x74>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_TIM_Base_MspInit+0x74>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2105      	movs	r1, #5
 80020d2:	201d      	movs	r0, #29
 80020d4:	f000 fe7c 	bl	8002dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d8:	201d      	movs	r0, #29
 80020da:	f000 fe95 	bl	8002e08 <HAL_NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40000400 	.word	0x40000400

080020f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08e      	sub	sp, #56	; 0x38
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_InitTick+0xe4>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_InitTick+0xe4>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_InitTick+0xe4>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002120:	f107 0210 	add.w	r2, r7, #16
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fcb4 	bl	8003a98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800213a:	f001 fc99 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 800213e:	6378      	str	r0, [r7, #52]	; 0x34
 8002140:	e004      	b.n	800214c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002142:	f001 fc95 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 8002146:	4603      	mov	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214e:	4a23      	ldr	r2, [pc, #140]	; (80021dc <HAL_InitTick+0xe8>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	3b01      	subs	r3, #1
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_InitTick+0xec>)
 800215c:	4a21      	ldr	r2, [pc, #132]	; (80021e4 <HAL_InitTick+0xf0>)
 800215e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_InitTick+0xec>)
 8002162:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002166:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_InitTick+0xec>)
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_InitTick+0xec>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_InitTick+0xec>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_InitTick+0xec>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002180:	4817      	ldr	r0, [pc, #92]	; (80021e0 <HAL_InitTick+0xec>)
 8002182:	f001 fd44 	bl	8003c0e <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800218c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11b      	bne.n	80021cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002194:	4812      	ldr	r0, [pc, #72]	; (80021e0 <HAL_InitTick+0xec>)
 8002196:	f001 fd89 	bl	8003cac <HAL_TIM_Base_Start_IT>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d111      	bne.n	80021cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021a8:	201e      	movs	r0, #30
 80021aa:	f000 fe2d 	bl	8002e08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d808      	bhi.n	80021c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	201e      	movs	r0, #30
 80021ba:	f000 fe09 	bl	8002dd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_InitTick+0xf4>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e002      	b.n	80021cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3738      	adds	r7, #56	; 0x38
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	200008ac 	.word	0x200008ac
 80021e4:	40000800 	.word	0x40000800
 80021e8:	20000004 	.word	0x20000004

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f0:	e7fe      	b.n	80021f0 <NMI_Handler+0x4>

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <TIM3_IRQHandler+0x10>)
 800221e:	f001 fdb5 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000818 	.word	0x20000818

0800222c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <TIM4_IRQHandler+0x10>)
 8002232:	f001 fdab 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200008ac 	.word	0x200008ac

08002240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_kill>:

int _kill(int pid, int sig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800225a:	f005 fd85 	bl	8007d68 <__errno>
 800225e:	4603      	mov	r3, r0
 8002260:	2216      	movs	r2, #22
 8002262:	601a      	str	r2, [r3, #0]
  return -1;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <_exit>:

void _exit (int status)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ffe7 	bl	8002250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002282:	e7fe      	b.n	8002282 <_exit+0x12>

08002284 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e00a      	b.n	80022ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002296:	f3af 8000 	nop.w
 800229a:	4601      	mov	r1, r0
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60ba      	str	r2, [r7, #8]
 80022a2:	b2ca      	uxtb	r2, r1
 80022a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dbf0      	blt.n	8002296 <_read+0x12>
  }

  return len;
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e009      	b.n	80022e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbf1      	blt.n	80022d0 <_write+0x12>
  }
  return len;
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_close>:

int _close(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231e:	605a      	str	r2, [r3, #4]
  return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_isatty>:

int _isatty(int file)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f005 fcea 	bl	8007d68 <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20020000 	.word	0x20020000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	200008f4 	.word	0x200008f4
 80023c8:	200048d8 	.word	0x200048d8

080023cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023f4:	f7ff ffea 	bl	80023cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023fa:	490d      	ldr	r1, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002410:	4c0a      	ldr	r4, [pc, #40]	; (800243c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241e:	f005 fca9 	bl	8007d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7fe fcf5 	bl	8000e10 <main>
  bx  lr    
 8002426:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002434:	08008d40 	.word	0x08008d40
  ldr r2, =_sbss
 8002438:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800243c:	200048d8 	.word	0x200048d8

08002440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC_IRQHandler>
	...

08002444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_Init+0x40>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_Init+0x40>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_Init+0x40>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 fca4 	bl	8002dba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002472:	200f      	movs	r0, #15
 8002474:	f7ff fe3e 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002478:	f7ff fd46 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023c00 	.word	0x40023c00

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x20>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_IncTick+0x24>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_IncTick+0x24>)
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000008 	.word	0x20000008
 80024ac:	200008f8 	.word	0x200008f8

080024b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_GetTick+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	200008f8 	.word	0x200008f8

080024c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e033      	b.n	8002546 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fd3a 	bl	8001f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800250e:	f023 0302 	bic.w	r3, r3, #2
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 faa4 	bl	8002a68 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
 8002536:	e001      	b.n	800253c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADC_Start+0x1a>
 8002566:	2302      	movs	r3, #2
 8002568:	e0b2      	b.n	80026d0 <HAL_ADC_Start+0x180>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d018      	beq.n	80025b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002590:	4b52      	ldr	r3, [pc, #328]	; (80026dc <HAL_ADC_Start+0x18c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_ADC_Start+0x190>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9a      	lsrs	r2, r3, #18
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d17a      	bne.n	80026b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fe:	d106      	bne.n	800260e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f023 0206 	bic.w	r2, r3, #6
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
 800260c:	e002      	b.n	8002614 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800261c:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_ADC_Start+0x194>)
 800261e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002628:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2b00      	cmp	r3, #0
 8002634:	d12a      	bne.n	800268c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <HAL_ADC_Start+0x198>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d015      	beq.n	800266c <HAL_ADC_Start+0x11c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a29      	ldr	r2, [pc, #164]	; (80026ec <HAL_ADC_Start+0x19c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d105      	bne.n	8002656 <HAL_ADC_Start+0x106>
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_ADC_Start+0x194>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <HAL_ADC_Start+0x1a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d136      	bne.n	80026ce <HAL_ADC_Start+0x17e>
 8002660:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_ADC_Start+0x194>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d130      	bne.n	80026ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d129      	bne.n	80026ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	e020      	b.n	80026ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <HAL_ADC_Start+0x198>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d11b      	bne.n	80026ce <HAL_ADC_Start+0x17e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d114      	bne.n	80026ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	e00b      	b.n	80026ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	20000000 	.word	0x20000000
 80026e0:	431bde83 	.word	0x431bde83
 80026e4:	40012300 	.word	0x40012300
 80026e8:	40012000 	.word	0x40012000
 80026ec:	40012100 	.word	0x40012100
 80026f0:	40012200 	.word	0x40012200

080026f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002710:	d113      	bne.n	800273a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800271c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002720:	d10b      	bne.n	800273a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e063      	b.n	8002802 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800273a:	f7ff feb9 	bl	80024b0 <HAL_GetTick>
 800273e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002740:	e021      	b.n	8002786 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d01d      	beq.n	8002786 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_ADC_PollForConversion+0x6c>
 8002750:	f7ff feae 	bl	80024b0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d212      	bcs.n	8002786 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d00b      	beq.n	8002786 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0204 	orr.w	r2, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e03d      	b.n	8002802 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d1d6      	bne.n	8002742 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0212 	mvn.w	r2, #18
 800279c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d123      	bne.n	8002800 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11f      	bne.n	8002800 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d111      	bne.n	8002800 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e105      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x228>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b09      	cmp	r3, #9
 800284e:	d925      	bls.n	800289c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68d9      	ldr	r1, [r3, #12]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	3b1e      	subs	r3, #30
 8002866:	2207      	movs	r2, #7
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43da      	mvns	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	400a      	ands	r2, r1
 8002874:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68d9      	ldr	r1, [r3, #12]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	4618      	mov	r0, r3
 8002888:	4603      	mov	r3, r0
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4403      	add	r3, r0
 800288e:	3b1e      	subs	r3, #30
 8002890:	409a      	lsls	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	e022      	b.n	80028e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6919      	ldr	r1, [r3, #16]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	2207      	movs	r2, #7
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	400a      	ands	r2, r1
 80028be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6919      	ldr	r1, [r3, #16]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4403      	add	r3, r0
 80028d8:	409a      	lsls	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d824      	bhi.n	8002934 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b05      	subs	r3, #5
 80028fc:	221f      	movs	r2, #31
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	400a      	ands	r2, r1
 800290a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	4618      	mov	r0, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3b05      	subs	r3, #5
 8002926:	fa00 f203 	lsl.w	r2, r0, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	635a      	str	r2, [r3, #52]	; 0x34
 8002932:	e04c      	b.n	80029ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d824      	bhi.n	8002986 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	3b23      	subs	r3, #35	; 0x23
 800294e:	221f      	movs	r2, #31
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43da      	mvns	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	400a      	ands	r2, r1
 800295c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	4618      	mov	r0, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	3b23      	subs	r3, #35	; 0x23
 8002978:	fa00 f203 	lsl.w	r2, r0, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
 8002984:	e023      	b.n	80029ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3b41      	subs	r3, #65	; 0x41
 8002998:	221f      	movs	r2, #31
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	400a      	ands	r2, r1
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4618      	mov	r0, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	3b41      	subs	r3, #65	; 0x41
 80029c2:	fa00 f203 	lsl.w	r2, r0, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_ADC_ConfigChannel+0x234>)
 80029d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <HAL_ADC_ConfigChannel+0x238>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1cc>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d105      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_ADC_ConfigChannel+0x238>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d123      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x21e>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d003      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x1e6>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b11      	cmp	r3, #17
 8002a08:	d11b      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d111      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_ADC_ConfigChannel+0x23c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_ADC_ConfigChannel+0x240>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	0c9a      	lsrs	r2, r3, #18
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a34:	e002      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f9      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40012300 	.word	0x40012300
 8002a5c:	40012000 	.word	0x40012000
 8002a60:	20000000 	.word	0x20000000
 8002a64:	431bde83 	.word	0x431bde83

08002a68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a70:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <ADC_Init+0x1f0>)
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	021a      	lsls	r2, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ac0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <ADC_Init+0x1f4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	e00f      	b.n	8002b66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b64:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0202 	bic.w	r2, r2, #2
 8002b74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6899      	ldr	r1, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e1b      	ldrb	r3, [r3, #24]
 8002b80:	005a      	lsls	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01b      	beq.n	8002bcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	035a      	lsls	r2, r3, #13
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	e007      	b.n	8002bdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bda:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	051a      	lsls	r2, r3, #20
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c1e:	025a      	lsls	r2, r3, #9
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6899      	ldr	r1, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	029a      	lsls	r2, r3, #10
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40012300 	.word	0x40012300
 8002c5c:	0f000001 	.word	0x0f000001

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	; (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff4c 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de2:	f7ff ff61 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f7ff ffb1 	bl	8002d54 <NVIC_EncodePriority>
 8002df2:	4602      	mov	r2, r0
 8002df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff80 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff54 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e16b      	b.n	8003118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 815a 	bne.w	8003112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d005      	beq.n	8002e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d130      	bne.n	8002ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eac:	2201      	movs	r2, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 0201 	and.w	r2, r3, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d017      	beq.n	8002f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d123      	bne.n	8002f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0203 	and.w	r2, r3, #3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80b4 	beq.w	8003112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b60      	ldr	r3, [pc, #384]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a5f      	ldr	r2, [pc, #380]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b5d      	ldr	r3, [pc, #372]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <HAL_GPIO_Init+0x310>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_GPIO_Init+0x314>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x226>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_GPIO_Init+0x318>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x222>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a50      	ldr	r2, [pc, #320]	; (8003140 <HAL_GPIO_Init+0x31c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x21e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4f      	ldr	r2, [pc, #316]	; (8003144 <HAL_GPIO_Init+0x320>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x21a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4e      	ldr	r2, [pc, #312]	; (8003148 <HAL_GPIO_Init+0x324>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x216>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4d      	ldr	r2, [pc, #308]	; (800314c <HAL_GPIO_Init+0x328>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x212>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4c      	ldr	r2, [pc, #304]	; (8003150 <HAL_GPIO_Init+0x32c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4b      	ldr	r2, [pc, #300]	; (8003154 <HAL_GPIO_Init+0x330>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x20a>
 800302a:	2307      	movs	r3, #7
 800302c:	e00e      	b.n	800304c <HAL_GPIO_Init+0x228>
 800302e:	2308      	movs	r3, #8
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003032:	2306      	movs	r3, #6
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x228>
 800304a:	2300      	movs	r3, #0
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305c:	4935      	ldr	r1, [pc, #212]	; (8003134 <HAL_GPIO_Init+0x310>)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_GPIO_Init+0x334>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308e:	4a32      	ldr	r2, [pc, #200]	; (8003158 <HAL_GPIO_Init+0x334>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_GPIO_Init+0x334>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_GPIO_Init+0x334>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f ae90 	bls.w	8002e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40013800 	.word	0x40013800
 8003138:	40020000 	.word	0x40020000
 800313c:	40020400 	.word	0x40020400
 8003140:	40020800 	.word	0x40020800
 8003144:	40020c00 	.word	0x40020c00
 8003148:	40021000 	.word	0x40021000
 800314c:	40021400 	.word	0x40021400
 8003150:	40021800 	.word	0x40021800
 8003154:	40021c00 	.word	0x40021c00
 8003158:	40013c00 	.word	0x40013c00

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003178:	e003      	b.n	8003182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	619a      	str	r2, [r3, #24]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e267      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d075      	beq.n	800329a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ae:	4b88      	ldr	r3, [pc, #544]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d00c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ba:	4b85      	ldr	r3, [pc, #532]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d112      	bne.n	80031ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c6:	4b82      	ldr	r3, [pc, #520]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d2:	d10b      	bne.n	80031ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	4b7e      	ldr	r3, [pc, #504]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05b      	beq.n	8003298 <HAL_RCC_OscConfig+0x108>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d157      	bne.n	8003298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e242      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d106      	bne.n	8003204 <HAL_RCC_OscConfig+0x74>
 80031f6:	4b76      	ldr	r3, [pc, #472]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a75      	ldr	r2, [pc, #468]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0xb0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x98>
 800320e:	4b70      	ldr	r3, [pc, #448]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6f      	ldr	r2, [pc, #444]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6c      	ldr	r2, [pc, #432]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0xb0>
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 800322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a65      	ldr	r2, [pc, #404]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7ff f932 	bl	80024b0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003250:	f7ff f92e 	bl	80024b0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e207      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0xc0>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7ff f91e 	bl	80024b0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003278:	f7ff f91a 	bl	80024b0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1f3      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	4b51      	ldr	r3, [pc, #324]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0xe8>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a6:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d11c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b44      	ldr	r3, [pc, #272]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x152>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1c7      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	e03a      	b.n	800336e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7ff f8d3 	bl	80024b0 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330e:	f7ff f8cf 	bl	80024b0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1a8      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4925      	ldr	r1, [pc, #148]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7ff f8b2 	bl	80024b0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003350:	f7ff f8ae 	bl	80024b0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e187      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d036      	beq.n	80033e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_RCC_OscConfig+0x248>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7ff f892 	bl	80024b0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003390:	f7ff f88e 	bl	80024b0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e167      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x240>)
 80033a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x200>
 80033ae:	e01b      	b.n	80033e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_OscConfig+0x248>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7ff f87b 	bl	80024b0 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033bc:	e00e      	b.n	80033dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033be:	f7ff f877 	bl	80024b0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d907      	bls.n	80033dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e150      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
 80033d0:	40023800 	.word	0x40023800
 80033d4:	42470000 	.word	0x42470000
 80033d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ea      	bne.n	80033be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8097 	beq.w	8003524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fa:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	4b7d      	ldr	r3, [pc, #500]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4a7c      	ldr	r2, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
 8003416:	4b7a      	ldr	r3, [pc, #488]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b77      	ldr	r3, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x474>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003432:	4b74      	ldr	r3, [pc, #464]	; (8003604 <HAL_RCC_OscConfig+0x474>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a73      	ldr	r2, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x474>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7ff f837 	bl	80024b0 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003446:	f7ff f833 	bl	80024b0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e10c      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x474>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x2ea>
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a63      	ldr	r2, [pc, #396]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	e01c      	b.n	80034b4 <HAL_RCC_OscConfig+0x324>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x30c>
 8003482:	4b5f      	ldr	r3, [pc, #380]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	4a5e      	ldr	r2, [pc, #376]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
 800348e:	4b5c      	ldr	r3, [pc, #368]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a5b      	ldr	r2, [pc, #364]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0x324>
 800349c:	4b58      	ldr	r3, [pc, #352]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	4a57      	ldr	r2, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	; 0x70
 80034a8:	4b55      	ldr	r3, [pc, #340]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a54      	ldr	r2, [pc, #336]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80034ae:	f023 0304 	bic.w	r3, r3, #4
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe fff8 	bl	80024b0 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fe fff4 	bl	80024b0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e0cb      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	4b49      	ldr	r3, [pc, #292]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ee      	beq.n	80034c4 <HAL_RCC_OscConfig+0x334>
 80034e6:	e014      	b.n	8003512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e8:	f7fe ffe2 	bl	80024b0 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe ffde 	bl	80024b0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0b5      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003506:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ee      	bne.n	80034f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	4a38      	ldr	r2, [pc, #224]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a1 	beq.w	8003670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b08      	cmp	r3, #8
 8003538:	d05c      	beq.n	80035f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d141      	bne.n	80035c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_OscConfig+0x478>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe ffb2 	bl	80024b0 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe ffae 	bl	80024b0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e087      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	3b01      	subs	r3, #1
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	491b      	ldr	r1, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003598:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_RCC_OscConfig+0x478>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe ff87 	bl	80024b0 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe ff83 	bl	80024b0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e05c      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x416>
 80035c4:	e054      	b.n	8003670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <HAL_RCC_OscConfig+0x478>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe ff70 	bl	80024b0 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe ff6c 	bl	80024b0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e045      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_OscConfig+0x470>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x444>
 80035f2:	e03d      	b.n	8003670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e038      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000
 8003608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4ec>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d028      	beq.n	800366c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d121      	bne.n	800366c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	429a      	cmp	r2, r3
 8003634:	d11a      	bne.n	800366c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800363c:	4013      	ands	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003644:	4293      	cmp	r3, r2
 8003646:	d111      	bne.n	800366c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	3b01      	subs	r3, #1
 8003656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d107      	bne.n	800366c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800

08003680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0cc      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003694:	4b68      	ldr	r3, [pc, #416]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d90c      	bls.n	80036bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b8      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	494d      	ldr	r1, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d044      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d119      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d003      	beq.n	800373e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e06f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e067      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4934      	ldr	r1, [pc, #208]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fe fe9e 	bl	80024b0 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe fe9a 	bl	80024b0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e04f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d20c      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e032      	b.n	800382e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4916      	ldr	r1, [pc, #88]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	490e      	ldr	r1, [pc, #56]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003806:	f000 f821 	bl	800384c <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	490a      	ldr	r1, [pc, #40]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	fa22 f303 	lsr.w	r3, r2, r3
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fc64 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023c00 	.word	0x40023c00
 800383c:	40023800 	.word	0x40023800
 8003840:	08008c38 	.word	0x08008c38
 8003844:	20000000 	.word	0x20000000
 8003848:	20000004 	.word	0x20000004

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003850:	b094      	sub	sp, #80	; 0x50
 8003852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	647b      	str	r3, [r7, #68]	; 0x44
 8003858:	2300      	movs	r3, #0
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	2300      	movs	r3, #0
 800385e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003864:	4b79      	ldr	r3, [pc, #484]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d00d      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x40>
 8003870:	2b08      	cmp	r3, #8
 8003872:	f200 80e1 	bhi.w	8003a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x34>
 800387a:	2b04      	cmp	r3, #4
 800387c:	d003      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x3a>
 800387e:	e0db      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003882:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003884:	e0db      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003886:	4b73      	ldr	r3, [pc, #460]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800388a:	e0d8      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388c:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003896:	4b6d      	ldr	r3, [pc, #436]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	2200      	movs	r2, #0
 80038aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038be:	4622      	mov	r2, r4
 80038c0:	462b      	mov	r3, r5
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	0159      	lsls	r1, r3, #5
 80038cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d0:	0150      	lsls	r0, r2, #5
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4621      	mov	r1, r4
 80038d8:	1a51      	subs	r1, r2, r1
 80038da:	6139      	str	r1, [r7, #16]
 80038dc:	4629      	mov	r1, r5
 80038de:	eb63 0301 	sbc.w	r3, r3, r1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f0:	4659      	mov	r1, fp
 80038f2:	018b      	lsls	r3, r1, #6
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fa:	4651      	mov	r1, sl
 80038fc:	018a      	lsls	r2, r1, #6
 80038fe:	4651      	mov	r1, sl
 8003900:	ebb2 0801 	subs.w	r8, r2, r1
 8003904:	4659      	mov	r1, fp
 8003906:	eb63 0901 	sbc.w	r9, r3, r1
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800391a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800391e:	4690      	mov	r8, r2
 8003920:	4699      	mov	r9, r3
 8003922:	4623      	mov	r3, r4
 8003924:	eb18 0303 	adds.w	r3, r8, r3
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	462b      	mov	r3, r5
 800392c:	eb49 0303 	adc.w	r3, r9, r3
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800393e:	4629      	mov	r1, r5
 8003940:	024b      	lsls	r3, r1, #9
 8003942:	4621      	mov	r1, r4
 8003944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003948:	4621      	mov	r1, r4
 800394a:	024a      	lsls	r2, r1, #9
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003952:	2200      	movs	r2, #0
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
 8003956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800395c:	f7fd f8a6 	bl	8000aac <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4613      	mov	r3, r2
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003968:	e058      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	2200      	movs	r2, #0
 8003972:	4618      	mov	r0, r3
 8003974:	4611      	mov	r1, r2
 8003976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003984:	4642      	mov	r2, r8
 8003986:	464b      	mov	r3, r9
 8003988:	f04f 0000 	mov.w	r0, #0
 800398c:	f04f 0100 	mov.w	r1, #0
 8003990:	0159      	lsls	r1, r3, #5
 8003992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003996:	0150      	lsls	r0, r2, #5
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4641      	mov	r1, r8
 800399e:	ebb2 0a01 	subs.w	sl, r2, r1
 80039a2:	4649      	mov	r1, r9
 80039a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039bc:	ebb2 040a 	subs.w	r4, r2, sl
 80039c0:	eb63 050b 	sbc.w	r5, r3, fp
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	00eb      	lsls	r3, r5, #3
 80039ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d2:	00e2      	lsls	r2, r4, #3
 80039d4:	4614      	mov	r4, r2
 80039d6:	461d      	mov	r5, r3
 80039d8:	4643      	mov	r3, r8
 80039da:	18e3      	adds	r3, r4, r3
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	464b      	mov	r3, r9
 80039e0:	eb45 0303 	adc.w	r3, r5, r3
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f2:	4629      	mov	r1, r5
 80039f4:	028b      	lsls	r3, r1, #10
 80039f6:	4621      	mov	r1, r4
 80039f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039fc:	4621      	mov	r1, r4
 80039fe:	028a      	lsls	r2, r1, #10
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a06:	2200      	movs	r2, #0
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	61fa      	str	r2, [r7, #28]
 8003a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a10:	f7fd f84c 	bl	8000aac <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	3301      	adds	r3, #1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a36:	e002      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3750      	adds	r7, #80	; 0x50
 8003a44:	46bd      	mov	sp, r7
 8003a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	00f42400 	.word	0x00f42400
 8003a54:	007a1200 	.word	0x007a1200

08003a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000000 	.word	0x20000000

08003a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a74:	f7ff fff0 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	0a9b      	lsrs	r3, r3, #10
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4903      	ldr	r1, [pc, #12]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	08008c48 	.word	0x08008c48

08003a98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_GetClockConfig+0x5c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0203 	and.w	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_RCC_GetClockConfig+0x60>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0207 	and.w	r2, r3, #7
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	601a      	str	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40023c00 	.word	0x40023c00

08003afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07b      	b.n	8003c06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1e:	d009      	beq.n	8003b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
 8003b26:	e005      	b.n	8003b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fe fa4a 	bl	8001fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	ea42 0103 	orr.w	r1, r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	f003 0104 	and.w	r1, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0210 	and.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e041      	b.n	8003ca4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fe fa1f 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 fa7d 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d001      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e04e      	b.n	8003d62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a23      	ldr	r2, [pc, #140]	; (8003d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d022      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x80>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cee:	d01d      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x80>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d018      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x80>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x80>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00e      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x80>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d009      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x80>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <HAL_TIM_Base_Start_IT+0x80>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d111      	bne.n	8003d50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d010      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4e:	e007      	b.n	8003d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40010400 	.word	0x40010400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40001800 	.word	0x40001800

08003d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0202 	mvn.w	r2, #2
 8003dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f999 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f98b 	bl	80040fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f99c 	bl	8004122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d020      	beq.n	8003e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01b      	beq.n	8003e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0204 	mvn.w	r2, #4
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f973 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f965 	bl	80040fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f976 	bl	8004122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d020      	beq.n	8003e88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01b      	beq.n	8003e88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0208 	mvn.w	r2, #8
 8003e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f94d 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f93f 	bl	80040fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f950 	bl	8004122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d020      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01b      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0210 	mvn.w	r2, #16
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f927 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f919 	bl	80040fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f92a 	bl	8004122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0201 	mvn.w	r2, #1
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fff0 	bl	8001ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fae4 	bl	80044e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8fb 	bl	8004136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0220 	mvn.w	r2, #32
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fab6 	bl	80044d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0b4      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x186>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc0:	d03e      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0xd4>
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	f200 8087 	bhi.w	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	f000 8086 	beq.w	80040de <HAL_TIM_ConfigClockSource+0x172>
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	d87f      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d01a      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0xa6>
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d87b      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d050      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x11a>
 8003fe4:	2b60      	cmp	r3, #96	; 0x60
 8003fe6:	d877      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b50      	cmp	r3, #80	; 0x50
 8003fea:	d03c      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0xfa>
 8003fec:	2b50      	cmp	r3, #80	; 0x50
 8003fee:	d873      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d058      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x13a>
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d86f      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	2b30      	cmp	r3, #48	; 0x30
 8003ffa:	d064      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d86b      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d060      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d867      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05c      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 800400c:	2b10      	cmp	r3, #16
 800400e:	d05a      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	e062      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004022:	f000 f9b9 	bl	8004398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	609a      	str	r2, [r3, #8]
      break;
 800403e:	e04f      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004050:	f000 f9a2 	bl	8004398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004062:	609a      	str	r2, [r3, #8]
      break;
 8004064:	e03c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004072:	461a      	mov	r2, r3
 8004074:	f000 f916 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2150      	movs	r1, #80	; 0x50
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f96f 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8004084:	e02c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004092:	461a      	mov	r2, r3
 8004094:	f000 f935 	bl	8004302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2160      	movs	r1, #96	; 0x60
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f95f 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 80040a4:	e01c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	461a      	mov	r2, r3
 80040b4:	f000 f8f6 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f94f 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 80040c4:	e00c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f000 f946 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 80040d6:	e003      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e000      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a46      	ldr	r2, [pc, #280]	; (8004278 <TIM_Base_SetConfig+0x12c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d00f      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a43      	ldr	r2, [pc, #268]	; (800427c <TIM_Base_SetConfig+0x130>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a42      	ldr	r2, [pc, #264]	; (8004280 <TIM_Base_SetConfig+0x134>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a41      	ldr	r2, [pc, #260]	; (8004284 <TIM_Base_SetConfig+0x138>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a40      	ldr	r2, [pc, #256]	; (8004288 <TIM_Base_SetConfig+0x13c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a35      	ldr	r2, [pc, #212]	; (8004278 <TIM_Base_SetConfig+0x12c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d027      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a32      	ldr	r2, [pc, #200]	; (800427c <TIM_Base_SetConfig+0x130>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d023      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a31      	ldr	r2, [pc, #196]	; (8004280 <TIM_Base_SetConfig+0x134>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a30      	ldr	r2, [pc, #192]	; (8004284 <TIM_Base_SetConfig+0x138>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2f      	ldr	r2, [pc, #188]	; (8004288 <TIM_Base_SetConfig+0x13c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2e      	ldr	r2, [pc, #184]	; (800428c <TIM_Base_SetConfig+0x140>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2d      	ldr	r2, [pc, #180]	; (8004290 <TIM_Base_SetConfig+0x144>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2c      	ldr	r2, [pc, #176]	; (8004294 <TIM_Base_SetConfig+0x148>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <TIM_Base_SetConfig+0x14c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a2a      	ldr	r2, [pc, #168]	; (800429c <TIM_Base_SetConfig+0x150>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <TIM_Base_SetConfig+0x154>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <TIM_Base_SetConfig+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <TIM_Base_SetConfig+0x13c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d105      	bne.n	800426a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	611a      	str	r2, [r3, #16]
  }
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40010400 	.word	0x40010400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800
 8004298:	40001800 	.word	0x40001800
 800429c:	40001c00 	.word	0x40001c00
 80042a0:	40002000 	.word	0x40002000

080042a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 030a 	bic.w	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f023 0210 	bic.w	r2, r3, #16
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800433e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	f043 0307 	orr.w	r3, r3, #7
 8004384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4313      	orrs	r3, r2
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e05a      	b.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a21      	ldr	r2, [pc, #132]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d022      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d01d      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d018      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10c      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4313      	orrs	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40000c00 	.word	0x40000c00
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40001800 	.word	0x40001800

080044d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800450a:	2b84      	cmp	r3, #132	; 0x84
 800450c:	d005      	beq.n	800451a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800450e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	3303      	adds	r3, #3
 8004518:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800451a:	68fb      	ldr	r3, [r7, #12]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800452e:	f3ef 8305 	mrs	r3, IPSR
 8004532:	607b      	str	r3, [r7, #4]
  return(result);
 8004534:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004550:	f001 fc6e 	bl	8005e30 <vTaskStartScheduler>
  
  return osOK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	bd80      	pop	{r7, pc}

0800455a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800455a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455c:	b089      	sub	sp, #36	; 0x24
 800455e:	af04      	add	r7, sp, #16
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <osThreadCreate+0x54>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01c      	beq.n	80045ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685c      	ldr	r4, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691e      	ldr	r6, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ffb6 	bl	80044f8 <makeFreeRtosPriority>
 800458c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004596:	9202      	str	r2, [sp, #8]
 8004598:	9301      	str	r3, [sp, #4]
 800459a:	9100      	str	r1, [sp, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4632      	mov	r2, r6
 80045a0:	4629      	mov	r1, r5
 80045a2:	4620      	mov	r0, r4
 80045a4:	f001 fa7c 	bl	8005aa0 <xTaskCreateStatic>
 80045a8:	4603      	mov	r3, r0
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e01c      	b.n	80045e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685c      	ldr	r4, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ff98 	bl	80044f8 <makeFreeRtosPriority>
 80045c8:	4602      	mov	r2, r0
 80045ca:	f107 030c 	add.w	r3, r7, #12
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	9200      	str	r2, [sp, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	4632      	mov	r2, r6
 80045d6:	4629      	mov	r1, r5
 80045d8:	4620      	mov	r0, r4
 80045da:	f001 fabe 	bl	8005b5a <xTaskCreate>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e000      	b.n	80045ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045e8:	68fb      	ldr	r3, [r7, #12]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <osDelay+0x16>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	e000      	b.n	800460a <osDelay+0x18>
 8004608:	2301      	movs	r3, #1
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fbdc 	bl	8005dc8 <vTaskDelay>
  
  return osOK;
 8004610:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	460b      	mov	r3, r1
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d013      	beq.n	800465a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8004632:	7afb      	ldrb	r3, [r7, #11]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <osTimerCreate+0x20>
 8004638:	2101      	movs	r1, #1
 800463a:	e000      	b.n	800463e <osTimerCreate+0x22>
 800463c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004646:	9201      	str	r2, [sp, #4]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	460a      	mov	r2, r1
 800464e:	2101      	movs	r1, #1
 8004650:	480b      	ldr	r0, [pc, #44]	; (8004680 <osTimerCreate+0x64>)
 8004652:	f002 fab8 	bl	8006bc6 <xTimerCreateStatic>
 8004656:	4603      	mov	r3, r0
 8004658:	e00e      	b.n	8004678 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <osTimerCreate+0x48>
 8004660:	2201      	movs	r2, #1
 8004662:	e000      	b.n	8004666 <osTimerCreate+0x4a>
 8004664:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2101      	movs	r1, #1
 8004670:	4803      	ldr	r0, [pc, #12]	; (8004680 <osTimerCreate+0x64>)
 8004672:	f002 fa87 	bl	8006b84 <xTimerCreate>
 8004676:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08008c1c 	.word	0x08008c1c

08004684 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <osTimerStart+0x20>
    ticks = 1;
 80046a0:	2301      	movs	r3, #1
 80046a2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80046a4:	f7ff ff40 	bl	8004528 <inHandlerMode>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01a      	beq.n	80046e4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	2200      	movs	r2, #0
 80046b4:	9200      	str	r2, [sp, #0]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	2109      	movs	r1, #9
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f002 fafc 	bl	8006cb8 <xTimerGenericCommand>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d002      	beq.n	80046cc <osTimerStart+0x48>
    {
      result = osErrorOS;
 80046c6:	23ff      	movs	r3, #255	; 0xff
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e018      	b.n	80046fe <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d015      	beq.n	80046fe <osTimerStart+0x7a>
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <osTimerStart+0x84>)
 80046d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	e00c      	b.n	80046fe <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80046e4:	2300      	movs	r3, #0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	2104      	movs	r1, #4
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f002 fae2 	bl	8006cb8 <xTimerGenericCommand>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <osTimerStart+0x7a>
      result = osErrorOS;
 80046fa:	23ff      	movs	r3, #255	; 0xff
 80046fc:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	2001      	movs	r0, #1
 8004724:	f000 fb89 	bl	8004e3a <xQueueCreateMutexStatic>
 8004728:	4603      	mov	r3, r0
 800472a:	e003      	b.n	8004734 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800472c:	2001      	movs	r0, #1
 800472e:	f000 fb6c 	bl	8004e0a <xQueueCreateMutex>
 8004732:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <osMutexWait+0x18>
    return osErrorParameter;
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	e03a      	b.n	80047ca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475e:	d103      	bne.n	8004768 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e009      	b.n	800477c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <osMutexWait+0x40>
      ticks = 1;
 8004778:	2301      	movs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800477c:	f7ff fed4 	bl	8004528 <inHandlerMode>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	461a      	mov	r2, r3
 800478c:	2100      	movs	r1, #0
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 ff80 	bl	8005694 <xQueueReceiveFromISR>
 8004794:	4603      	mov	r3, r0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <osMutexWait+0x62>
      return osErrorOS;
 800479a:	23ff      	movs	r3, #255	; 0xff
 800479c:	e015      	b.n	80047ca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d011      	beq.n	80047c8 <osMutexWait+0x8c>
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <osMutexWait+0x98>)
 80047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	e008      	b.n	80047c8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fe5f 	bl	800547c <xQueueSemaphoreTake>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d001      	beq.n	80047c8 <osMutexWait+0x8c>
    return osErrorOS;
 80047c4:	23ff      	movs	r3, #255	; 0xff
 80047c6:	e000      	b.n	80047ca <osMutexWait+0x8e>
  }
  
  return osOK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80047e8:	f7ff fe9e 	bl	8004528 <inHandlerMode>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fcd2 	bl	80051a2 <xQueueGiveFromISR>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <osMutexRelease+0x30>
      return osErrorOS;
 8004804:	23ff      	movs	r3, #255	; 0xff
 8004806:	e017      	b.n	8004838 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <osMutexRelease+0x5e>
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <osMutexRelease+0x68>)
 8004810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	e00a      	b.n	8004836 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004820:	2300      	movs	r3, #0
 8004822:	2200      	movs	r2, #0
 8004824:	2100      	movs	r1, #0
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fb22 	bl	8004e70 <xQueueGenericSend>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d001      	beq.n	8004836 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004832:	23ff      	movs	r3, #255	; 0xff
 8004834:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b085      	sub	sp, #20
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d011      	beq.n	800487a <osMessageCreate+0x36>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2400      	movs	r4, #0
 8004870:	9400      	str	r4, [sp, #0]
 8004872:	f000 f9df 	bl	8004c34 <xQueueGenericCreateStatic>
 8004876:	4603      	mov	r3, r0
 8004878:	e008      	b.n	800488c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	4619      	mov	r1, r3
 8004886:	f000 fa4d 	bl	8004d24 <xQueueGenericCreate>
 800488a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bd90      	pop	{r4, r7, pc}

08004894 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <osMessagePut+0x1e>
    ticks = 1;
 80048ae:	2301      	movs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80048b2:	f7ff fe39 	bl	8004528 <inHandlerMode>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d018      	beq.n	80048ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80048bc:	f107 0210 	add.w	r2, r7, #16
 80048c0:	f107 0108 	add.w	r1, r7, #8
 80048c4:	2300      	movs	r3, #0
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 fbd0 	bl	800506c <xQueueGenericSendFromISR>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d001      	beq.n	80048d6 <osMessagePut+0x42>
      return osErrorOS;
 80048d2:	23ff      	movs	r3, #255	; 0xff
 80048d4:	e018      	b.n	8004908 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d014      	beq.n	8004906 <osMessagePut+0x72>
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <osMessagePut+0x7c>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	e00b      	b.n	8004906 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80048ee:	f107 0108 	add.w	r1, r7, #8
 80048f2:	2300      	movs	r3, #0
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 faba 	bl	8004e70 <xQueueGenericSend>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d001      	beq.n	8004906 <osMessagePut+0x72>
      return osErrorOS;
 8004902:	23ff      	movs	r3, #255	; 0xff
 8004904:	e000      	b.n	8004908 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b08b      	sub	sp, #44	; 0x2c
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	617b      	str	r3, [r7, #20]
    return event;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	461c      	mov	r4, r3
 8004936:	f107 0314 	add.w	r3, r7, #20
 800493a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800493e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004942:	e054      	b.n	80049ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004952:	d103      	bne.n	800495c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
 800495a:	e009      	b.n	8004970 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d006      	beq.n	8004970 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <osMessageGet+0x5c>
      ticks = 1;
 800496c:	2301      	movs	r3, #1
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004970:	f7ff fdda 	bl	8004528 <inHandlerMode>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01c      	beq.n	80049b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800497a:	f107 0220 	add.w	r2, r7, #32
 800497e:	f107 0314 	add.w	r3, r7, #20
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	68b8      	ldr	r0, [r7, #8]
 8004988:	f000 fe84 	bl	8005694 <xQueueReceiveFromISR>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004992:	2310      	movs	r3, #16
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e001      	b.n	800499c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01d      	beq.n	80049de <osMessageGet+0xca>
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <osMessageGet+0xe4>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	e014      	b.n	80049de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	3304      	adds	r3, #4
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	4619      	mov	r1, r3
 80049be:	68b8      	ldr	r0, [r7, #8]
 80049c0:	f000 fc7c 	bl	80052bc <xQueueReceive>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d102      	bne.n	80049d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80049ca:	2310      	movs	r3, #16
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e006      	b.n	80049de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <osMessageGet+0xc6>
 80049d6:	2300      	movs	r3, #0
 80049d8:	e000      	b.n	80049dc <osMessageGet+0xc8>
 80049da:	2340      	movs	r3, #64	; 0x40
 80049dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	461c      	mov	r4, r3
 80049e2:	f107 0314 	add.w	r3, r7, #20
 80049e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	372c      	adds	r7, #44	; 0x2c
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd90      	pop	{r4, r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f103 0208 	add.w	r2, r3, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f103 0208 	add.w	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f103 0208 	add.w	r2, r3, #8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab4:	d103      	bne.n	8004abe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e00c      	b.n	8004ad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e002      	b.n	8004acc <vListInsert+0x2e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d2f6      	bcs.n	8004ac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6892      	ldr	r2, [r2, #8]
 8004b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6852      	ldr	r2, [r2, #4]
 8004b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d103      	bne.n	8004b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1e5a      	subs	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b8e:	f002 fca9 	bl	80074e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	68f9      	ldr	r1, [r7, #12]
 8004b9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	441a      	add	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	441a      	add	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	22ff      	movs	r2, #255	; 0xff
 8004bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d114      	bne.n	8004c0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3310      	adds	r3, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 fba1 	bl	8006338 <xTaskRemoveFromEventList>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <xQueueGenericReset+0xcc>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	e009      	b.n	8004c22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3310      	adds	r3, #16
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fef2 	bl	80049fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3324      	adds	r3, #36	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff feed 	bl	80049fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c22:	f002 fc8f 	bl	8007544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <xQueueGenericCreateStatic+0x52>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <xQueueGenericCreateStatic+0x56>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <xQueueGenericCreateStatic+0x58>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	623b      	str	r3, [r7, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <xQueueGenericCreateStatic+0x7e>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <xQueueGenericCreateStatic+0x82>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <xQueueGenericCreateStatic+0x84>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	61fb      	str	r3, [r7, #28]
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cd2:	2348      	movs	r3, #72	; 0x48
 8004cd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b48      	cmp	r3, #72	; 0x48
 8004cda:	d00a      	beq.n	8004cf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61bb      	str	r3, [r7, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cf2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f83f 	bl	8004d98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3730      	adds	r7, #48	; 0x30
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	613b      	str	r3, [r7, #16]
}
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3348      	adds	r3, #72	; 0x48
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 fce3 	bl	8007728 <pvPortMalloc>
 8004d62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3348      	adds	r3, #72	; 0x48
 8004d72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d7c:	79fa      	ldrb	r2, [r7, #7]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f805 	bl	8004d98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e002      	b.n	8004dba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	69b8      	ldr	r0, [r7, #24]
 8004dca:	f7ff fecb 	bl	8004b64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004df6:	2300      	movs	r3, #0
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f837 	bl	8004e70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b086      	sub	sp, #24
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4603      	mov	r3, r0
 8004e12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e14:	2301      	movs	r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6939      	ldr	r1, [r7, #16]
 8004e22:	6978      	ldr	r0, [r7, #20]
 8004e24:	f7ff ff7e 	bl	8004d24 <xQueueGenericCreate>
 8004e28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff ffd3 	bl	8004dd6 <prvInitialiseMutex>

		return xNewQueue;
 8004e30:	68fb      	ldr	r3, [r7, #12]
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b088      	sub	sp, #32
 8004e3e:	af02      	add	r7, sp, #8
 8004e40:	4603      	mov	r3, r0
 8004e42:	6039      	str	r1, [r7, #0]
 8004e44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e46:	2301      	movs	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2200      	movs	r2, #0
 8004e56:	6939      	ldr	r1, [r7, #16]
 8004e58:	6978      	ldr	r0, [r7, #20]
 8004e5a:	f7ff feeb 	bl	8004c34 <xQueueGenericCreateStatic>
 8004e5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff ffb8 	bl	8004dd6 <prvInitialiseMutex>

		return xNewQueue;
 8004e66:	68fb      	ldr	r3, [r7, #12]
	}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08e      	sub	sp, #56	; 0x38
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <xQueueGenericSend+0x32>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d103      	bne.n	8004eb0 <xQueueGenericSend+0x40>
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <xQueueGenericSend+0x44>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <xQueueGenericSend+0x46>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <xQueueGenericSend+0x60>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d103      	bne.n	8004ede <xQueueGenericSend+0x6e>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <xQueueGenericSend+0x72>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <xQueueGenericSend+0x74>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	623b      	str	r3, [r7, #32]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004efe:	f001 fbd7 	bl	80066b0 <xTaskGetSchedulerState>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <xQueueGenericSend+0x9e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <xQueueGenericSend+0xa2>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <xQueueGenericSend+0xa4>
 8004f12:	2300      	movs	r3, #0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xQueueGenericSend+0xbe>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	61fb      	str	r3, [r7, #28]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f2e:	f002 fad9 	bl	80074e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <xQueueGenericSend+0xd4>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d129      	bne.n	8004f98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4a:	f000 fc3b 	bl	80057c4 <prvCopyDataToQueue>
 8004f4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d010      	beq.n	8004f7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	3324      	adds	r3, #36	; 0x24
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 f9eb 	bl	8006338 <xTaskRemoveFromEventList>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d013      	beq.n	8004f90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f68:	4b3f      	ldr	r3, [pc, #252]	; (8005068 <xQueueGenericSend+0x1f8>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	e00a      	b.n	8004f90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f80:	4b39      	ldr	r3, [pc, #228]	; (8005068 <xQueueGenericSend+0x1f8>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f90:	f002 fad8 	bl	8007544 <vPortExitCritical>
				return pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e063      	b.n	8005060 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f9e:	f002 fad1 	bl	8007544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e05c      	b.n	8005060 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fac:	f107 0314 	add.w	r3, r7, #20
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 fa23 	bl	80063fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fba:	f002 fac3 	bl	8007544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fbe:	f000 ff9d 	bl	8005efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc2:	f002 fa8f 	bl	80074e4 <vPortEnterCritical>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd2:	d103      	bne.n	8004fdc <xQueueGenericSend+0x16c>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe8:	d103      	bne.n	8004ff2 <xQueueGenericSend+0x182>
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff2:	f002 faa7 	bl	8007544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff6:	1d3a      	adds	r2, r7, #4
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 fa12 	bl	8006428 <xTaskCheckForTimeOut>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d124      	bne.n	8005054 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800500a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800500c:	f000 fcd2 	bl	80059b4 <prvIsQueueFull>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	3310      	adds	r3, #16
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f001 f93a 	bl	8006298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005026:	f000 fc5d 	bl	80058e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800502a:	f000 ff75 	bl	8005f18 <xTaskResumeAll>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	f47f af7c 	bne.w	8004f2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <xQueueGenericSend+0x1f8>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	e772      	b.n	8004f2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504a:	f000 fc4b 	bl	80058e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504e:	f000 ff63 	bl	8005f18 <xTaskResumeAll>
 8005052:	e76c      	b.n	8004f2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005056:	f000 fc45 	bl	80058e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800505a:	f000 ff5d 	bl	8005f18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800505e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005060:	4618      	mov	r0, r3
 8005062:	3738      	adds	r7, #56	; 0x38
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b090      	sub	sp, #64	; 0x40
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d103      	bne.n	80050a8 <xQueueGenericSendFromISR+0x3c>
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <xQueueGenericSendFromISR+0x40>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <xQueueGenericSendFromISR+0x42>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d103      	bne.n	80050d6 <xQueueGenericSendFromISR+0x6a>
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <xQueueGenericSendFromISR+0x6e>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueGenericSendFromISR+0x70>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050f6:	f002 fad7 	bl	80076a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050fa:	f3ef 8211 	mrs	r2, BASEPRI
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	61fa      	str	r2, [r7, #28]
 8005110:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005112:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <xQueueGenericSendFromISR+0xbc>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d12f      	bne.n	8005188 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800512e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800513e:	f000 fb41 	bl	80057c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005142:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514a:	d112      	bne.n	8005172 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	d016      	beq.n	8005182 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	3324      	adds	r3, #36	; 0x24
 8005158:	4618      	mov	r0, r3
 800515a:	f001 f8ed 	bl	8006338 <xTaskRemoveFromEventList>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00e      	beq.n	8005182 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e007      	b.n	8005182 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005176:	3301      	adds	r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	b25a      	sxtb	r2, r3
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005182:	2301      	movs	r3, #1
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005186:	e001      	b.n	800518c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005196:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800519a:	4618      	mov	r0, r3
 800519c:	3740      	adds	r7, #64	; 0x40
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b08e      	sub	sp, #56	; 0x38
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	623b      	str	r3, [r7, #32]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <xQueueGiveFromISR+0x48>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	61fb      	str	r3, [r7, #28]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <xQueueGiveFromISR+0x58>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <xQueueGiveFromISR+0x5c>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <xQueueGiveFromISR+0x5e>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	61bb      	str	r3, [r7, #24]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800521a:	f002 fa45 	bl	80076a8 <vPortValidateInterruptPriority>
	__asm volatile
 800521e:	f3ef 8211 	mrs	r2, BASEPRI
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	617a      	str	r2, [r7, #20]
 8005234:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005236:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005246:	429a      	cmp	r2, r3
 8005248:	d22b      	bcs.n	80052a2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800525c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005264:	d112      	bne.n	800528c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	3324      	adds	r3, #36	; 0x24
 8005272:	4618      	mov	r0, r3
 8005274:	f001 f860 	bl	8006338 <xTaskRemoveFromEventList>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e007      	b.n	800529c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800528c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005290:	3301      	adds	r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	b25a      	sxtb	r2, r3
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800529c:	2301      	movs	r3, #1
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
 80052a0:	e001      	b.n	80052a6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f383 8811 	msr	BASEPRI, r3
}
 80052b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3738      	adds	r7, #56	; 0x38
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08c      	sub	sp, #48	; 0x30
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <xQueueReceive+0x30>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	623b      	str	r3, [r7, #32]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <xQueueReceive+0x3e>
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <xQueueReceive+0x42>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <xQueueReceive+0x44>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <xQueueReceive+0x5e>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	61fb      	str	r3, [r7, #28]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800531a:	f001 f9c9 	bl	80066b0 <xTaskGetSchedulerState>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <xQueueReceive+0x6e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <xQueueReceive+0x72>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <xQueueReceive+0x74>
 800532e:	2300      	movs	r3, #0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <xQueueReceive+0x8e>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	61bb      	str	r3, [r7, #24]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800534a:	f002 f8cb 	bl	80074e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01f      	beq.n	800539a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535e:	f000 fa9b 	bl	8005898 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1e5a      	subs	r2, r3, #1
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00f      	beq.n	8005392 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	3310      	adds	r3, #16
 8005376:	4618      	mov	r0, r3
 8005378:	f000 ffde 	bl	8006338 <xTaskRemoveFromEventList>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005382:	4b3d      	ldr	r3, [pc, #244]	; (8005478 <xQueueReceive+0x1bc>)
 8005384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005392:	f002 f8d7 	bl	8007544 <vPortExitCritical>
				return pdPASS;
 8005396:	2301      	movs	r3, #1
 8005398:	e069      	b.n	800546e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053a0:	f002 f8d0 	bl	8007544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e062      	b.n	800546e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053ae:	f107 0310 	add.w	r3, r7, #16
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 f822 	bl	80063fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053bc:	f002 f8c2 	bl	8007544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053c0:	f000 fd9c 	bl	8005efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053c4:	f002 f88e 	bl	80074e4 <vPortEnterCritical>
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ce:	b25b      	sxtb	r3, r3
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d4:	d103      	bne.n	80053de <xQueueReceive+0x122>
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ea:	d103      	bne.n	80053f4 <xQueueReceive+0x138>
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f4:	f002 f8a6 	bl	8007544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053f8:	1d3a      	adds	r2, r7, #4
 80053fa:	f107 0310 	add.w	r3, r7, #16
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f001 f811 	bl	8006428 <xTaskCheckForTimeOut>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d123      	bne.n	8005454 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800540c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540e:	f000 fabb 	bl	8005988 <prvIsQueueEmpty>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d017      	beq.n	8005448 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	3324      	adds	r3, #36	; 0x24
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f000 ff39 	bl	8006298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005428:	f000 fa5c 	bl	80058e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800542c:	f000 fd74 	bl	8005f18 <xTaskResumeAll>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d189      	bne.n	800534a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <xQueueReceive+0x1bc>)
 8005438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	e780      	b.n	800534a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544a:	f000 fa4b 	bl	80058e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800544e:	f000 fd63 	bl	8005f18 <xTaskResumeAll>
 8005452:	e77a      	b.n	800534a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005456:	f000 fa45 	bl	80058e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800545a:	f000 fd5d 	bl	8005f18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800545e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005460:	f000 fa92 	bl	8005988 <prvIsQueueEmpty>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	f43f af6f 	beq.w	800534a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800546c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800546e:	4618      	mov	r0, r3
 8005470:	3730      	adds	r7, #48	; 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08e      	sub	sp, #56	; 0x38
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800548e:	2300      	movs	r3, #0
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	623b      	str	r3, [r7, #32]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	61fb      	str	r3, [r7, #28]
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054cc:	f001 f8f0 	bl	80066b0 <xTaskGetSchedulerState>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <xQueueSemaphoreTake+0x60>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <xQueueSemaphoreTake+0x64>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <xQueueSemaphoreTake+0x66>
 80054e0:	2300      	movs	r3, #0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	61bb      	str	r3, [r7, #24]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054fc:	f001 fff2 	bl	80074e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d024      	beq.n	8005556 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	1e5a      	subs	r2, r3, #1
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800551c:	f001 fa70 	bl	8006a00 <pvTaskIncrementMutexHeldCount>
 8005520:	4602      	mov	r2, r0
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00f      	beq.n	800554e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	3310      	adds	r3, #16
 8005532:	4618      	mov	r0, r3
 8005534:	f000 ff00 	bl	8006338 <xTaskRemoveFromEventList>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800553e:	4b54      	ldr	r3, [pc, #336]	; (8005690 <xQueueSemaphoreTake+0x214>)
 8005540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800554e:	f001 fff9 	bl	8007544 <vPortExitCritical>
				return pdPASS;
 8005552:	2301      	movs	r3, #1
 8005554:	e097      	b.n	8005686 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d111      	bne.n	8005580 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	617b      	str	r3, [r7, #20]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005578:	f001 ffe4 	bl	8007544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800557c:	2300      	movs	r3, #0
 800557e:	e082      	b.n	8005686 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005586:	f107 030c 	add.w	r3, r7, #12
 800558a:	4618      	mov	r0, r3
 800558c:	f000 ff36 	bl	80063fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005590:	2301      	movs	r3, #1
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005594:	f001 ffd6 	bl	8007544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005598:	f000 fcb0 	bl	8005efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800559c:	f001 ffa2 	bl	80074e4 <vPortEnterCritical>
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a6:	b25b      	sxtb	r3, r3
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ac:	d103      	bne.n	80055b6 <xQueueSemaphoreTake+0x13a>
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c2:	d103      	bne.n	80055cc <xQueueSemaphoreTake+0x150>
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055cc:	f001 ffba 	bl	8007544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055d0:	463a      	mov	r2, r7
 80055d2:	f107 030c 	add.w	r3, r7, #12
 80055d6:	4611      	mov	r1, r2
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 ff25 	bl	8006428 <xTaskCheckForTimeOut>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d132      	bne.n	800564a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055e6:	f000 f9cf 	bl	8005988 <prvIsQueueEmpty>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d026      	beq.n	800563e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80055f8:	f001 ff74 	bl	80074e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f001 f873 	bl	80066ec <xTaskPriorityInherit>
 8005606:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005608:	f001 ff9c 	bl	8007544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	3324      	adds	r3, #36	; 0x24
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fe3f 	bl	8006298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800561a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800561c:	f000 f962 	bl	80058e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005620:	f000 fc7a 	bl	8005f18 <xTaskResumeAll>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	f47f af68 	bne.w	80054fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800562c:	4b18      	ldr	r3, [pc, #96]	; (8005690 <xQueueSemaphoreTake+0x214>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	e75e      	b.n	80054fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800563e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005640:	f000 f950 	bl	80058e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005644:	f000 fc68 	bl	8005f18 <xTaskResumeAll>
 8005648:	e758      	b.n	80054fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800564a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800564c:	f000 f94a 	bl	80058e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005650:	f000 fc62 	bl	8005f18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005656:	f000 f997 	bl	8005988 <prvIsQueueEmpty>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	f43f af4d 	beq.w	80054fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005668:	f001 ff3c 	bl	80074e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800566c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800566e:	f000 f891 	bl	8005794 <prvGetDisinheritPriorityAfterTimeout>
 8005672:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800567a:	4618      	mov	r0, r3
 800567c:	f001 f932 	bl	80068e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005680:	f001 ff60 	bl	8007544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005684:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005686:	4618      	mov	r0, r3
 8005688:	3738      	adds	r7, #56	; 0x38
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08e      	sub	sp, #56	; 0x38
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	623b      	str	r3, [r7, #32]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <xQueueReceiveFromISR+0x3a>
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <xQueueReceiveFromISR+0x3e>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueReceiveFromISR+0x40>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	61fb      	str	r3, [r7, #28]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056ee:	f001 ffdb 	bl	80076a8 <vPortValidateInterruptPriority>
	__asm volatile
 80056f2:	f3ef 8211 	mrs	r2, BASEPRI
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	61ba      	str	r2, [r7, #24]
 8005708:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800570a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d02f      	beq.n	800577a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005728:	f000 f8b6 	bl	8005898 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573c:	d112      	bne.n	8005764 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d016      	beq.n	8005774 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	3310      	adds	r3, #16
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fdf4 	bl	8006338 <xTaskRemoveFromEventList>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e007      	b.n	8005774 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005768:	3301      	adds	r3, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	b25a      	sxtb	r2, r3
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	e001      	b.n	800577e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f383 8811 	msr	BASEPRI, r3
}
 8005788:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800578c:	4618      	mov	r0, r3
 800578e:	3738      	adds	r7, #56	; 0x38
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d006      	beq.n	80057b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e001      	b.n	80057b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057b6:	68fb      	ldr	r3, [r7, #12]
	}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d14d      	bne.n	8005886 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fff2 	bl	80067d8 <xTaskPriorityDisinherit>
 80057f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	e043      	b.n	8005886 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d119      	bne.n	8005838 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6858      	ldr	r0, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	461a      	mov	r2, r3
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	f002 fad7 	bl	8007dc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	441a      	add	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	429a      	cmp	r2, r3
 800582c:	d32b      	bcc.n	8005886 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	e026      	b.n	8005886 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68d8      	ldr	r0, [r3, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	461a      	mov	r2, r3
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	f002 fabd 	bl	8007dc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	425b      	negs	r3, r3
 8005852:	441a      	add	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d207      	bcs.n	8005874 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	425b      	negs	r3, r3
 800586e:	441a      	add	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d105      	bne.n	8005886 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	3b01      	subs	r3, #1
 8005884:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800588e:	697b      	ldr	r3, [r7, #20]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d018      	beq.n	80058dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	441a      	add	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d303      	bcc.n	80058cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68d9      	ldr	r1, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	461a      	mov	r2, r3
 80058d6:	6838      	ldr	r0, [r7, #0]
 80058d8:	f002 fa73 	bl	8007dc2 <memcpy>
	}
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058ec:	f001 fdfa 	bl	80074e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058f8:	e011      	b.n	800591e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d012      	beq.n	8005928 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3324      	adds	r3, #36	; 0x24
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fd16 	bl	8006338 <xTaskRemoveFromEventList>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005912:	f000 fdeb 	bl	80064ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	3b01      	subs	r3, #1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800591e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	dce9      	bgt.n	80058fa <prvUnlockQueue+0x16>
 8005926:	e000      	b.n	800592a <prvUnlockQueue+0x46>
					break;
 8005928:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	22ff      	movs	r2, #255	; 0xff
 800592e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005932:	f001 fe07 	bl	8007544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005936:	f001 fdd5 	bl	80074e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005940:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005942:	e011      	b.n	8005968 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d012      	beq.n	8005972 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3310      	adds	r3, #16
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fcf1 	bl	8006338 <xTaskRemoveFromEventList>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800595c:	f000 fdc6 	bl	80064ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	3b01      	subs	r3, #1
 8005964:	b2db      	uxtb	r3, r3
 8005966:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800596c:	2b00      	cmp	r3, #0
 800596e:	dce9      	bgt.n	8005944 <prvUnlockQueue+0x60>
 8005970:	e000      	b.n	8005974 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005972:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	22ff      	movs	r2, #255	; 0xff
 8005978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800597c:	f001 fde2 	bl	8007544 <vPortExitCritical>
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005990:	f001 fda8 	bl	80074e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e001      	b.n	80059a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059a6:	f001 fdcd 	bl	8007544 <vPortExitCritical>

	return xReturn;
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059bc:	f001 fd92 	bl	80074e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d102      	bne.n	80059d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059cc:	2301      	movs	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e001      	b.n	80059d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059d6:	f001 fdb5 	bl	8007544 <vPortExitCritical>

	return xReturn;
 80059da:	68fb      	ldr	r3, [r7, #12]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e014      	b.n	8005a1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059f4:	4a0f      	ldr	r2, [pc, #60]	; (8005a34 <vQueueAddToRegistry+0x50>)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a00:	490c      	ldr	r1, [pc, #48]	; (8005a34 <vQueueAddToRegistry+0x50>)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <vQueueAddToRegistry+0x50>)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a16:	e006      	b.n	8005a26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b07      	cmp	r3, #7
 8005a22:	d9e7      	bls.n	80059f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	200008fc 	.word	0x200008fc

08005a38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a48:	f001 fd4c 	bl	80074e4 <vPortEnterCritical>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a58:	d103      	bne.n	8005a62 <vQueueWaitForMessageRestricted+0x2a>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a6e:	d103      	bne.n	8005a78 <vQueueWaitForMessageRestricted+0x40>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a78:	f001 fd64 	bl	8007544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	3324      	adds	r3, #36	; 0x24
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fc27 	bl	80062e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a92:	6978      	ldr	r0, [r7, #20]
 8005a94:	f7ff ff26 	bl	80058e4 <prvUnlockQueue>
	}
 8005a98:	bf00      	nop
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	; 0x38
 8005aa4:	af04      	add	r7, sp, #16
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	623b      	str	r3, [r7, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	61fb      	str	r3, [r7, #28]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ae6:	2354      	movs	r3, #84	; 0x54
 8005ae8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b54      	cmp	r3, #84	; 0x54
 8005aee:	d00a      	beq.n	8005b06 <xTaskCreateStatic+0x66>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	61bb      	str	r3, [r7, #24]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01e      	beq.n	8005b4c <xTaskCreateStatic+0xac>
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01b      	beq.n	8005b4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2202      	movs	r2, #2
 8005b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b26:	2300      	movs	r3, #0
 8005b28:	9303      	str	r3, [sp, #12]
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	9302      	str	r3, [sp, #8]
 8005b2e:	f107 0314 	add.w	r3, r7, #20
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f850 	bl	8005be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b46:	f000 f8d5 	bl	8005cf4 <prvAddNewTaskToReadyList>
 8005b4a:	e001      	b.n	8005b50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b50:	697b      	ldr	r3, [r7, #20]
	}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3728      	adds	r7, #40	; 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b08c      	sub	sp, #48	; 0x30
 8005b5e:	af04      	add	r7, sp, #16
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 fdda 	bl	8007728 <pvPortMalloc>
 8005b74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00e      	beq.n	8005b9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b7c:	2054      	movs	r0, #84	; 0x54
 8005b7e:	f001 fdd3 	bl	8007728 <pvPortMalloc>
 8005b82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b90:	e005      	b.n	8005b9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b92:	6978      	ldr	r0, [r7, #20]
 8005b94:	f001 fe94 	bl	80078c0 <vPortFree>
 8005b98:	e001      	b.n	8005b9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d017      	beq.n	8005bd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bac:	88fa      	ldrh	r2, [r7, #6]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9303      	str	r3, [sp, #12]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	9302      	str	r3, [sp, #8]
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f80e 	bl	8005be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc8:	69f8      	ldr	r0, [r7, #28]
 8005bca:	f000 f893 	bl	8005cf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	e002      	b.n	8005bda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bda:	69bb      	ldr	r3, [r7, #24]
	}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f023 0307 	bic.w	r3, r3, #7
 8005c0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01f      	beq.n	8005c72 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	e012      	b.n	8005c5e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	7819      	ldrb	r1, [r3, #0]
 8005c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	3334      	adds	r3, #52	; 0x34
 8005c48:	460a      	mov	r2, r1
 8005c4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d006      	beq.n	8005c66 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b0f      	cmp	r3, #15
 8005c62:	d9e9      	bls.n	8005c38 <prvInitialiseNewTask+0x54>
 8005c64:	e000      	b.n	8005c68 <prvInitialiseNewTask+0x84>
			{
				break;
 8005c66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c70:	e003      	b.n	8005c7a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	2b06      	cmp	r3, #6
 8005c7e:	d901      	bls.n	8005c84 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c80:	2306      	movs	r3, #6
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2200      	movs	r2, #0
 8005c94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fece 	bl	8004a3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fec9 	bl	8004a3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f1c3 0207 	rsb	r2, r3, #7
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	68f9      	ldr	r1, [r7, #12]
 8005cd2:	69b8      	ldr	r0, [r7, #24]
 8005cd4:	f001 fada 	bl	800728c <pxPortInitialiseStack>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cea:	bf00      	nop
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cfc:	f001 fbf2 	bl	80074e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <prvAddNewTaskToReadyList+0xb8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	4a29      	ldr	r2, [pc, #164]	; (8005dac <prvAddNewTaskToReadyList+0xb8>)
 8005d08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d0a:	4b29      	ldr	r3, [pc, #164]	; (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d12:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d18:	4b24      	ldr	r3, [pc, #144]	; (8005dac <prvAddNewTaskToReadyList+0xb8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d110      	bne.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d20:	f000 fc08 	bl	8006534 <prvInitialiseTaskLists>
 8005d24:	e00d      	b.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d26:	4b23      	ldr	r3, [pc, #140]	; (8005db4 <prvAddNewTaskToReadyList+0xc0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d802      	bhi.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d42:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <prvAddNewTaskToReadyList+0xc4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3301      	adds	r3, #1
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <prvAddNewTaskToReadyList+0xc4>)
 8005d4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	2201      	movs	r2, #1
 8005d52:	409a      	lsls	r2, r3
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <prvAddNewTaskToReadyList+0xc8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <prvAddNewTaskToReadyList+0xc8>)
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <prvAddNewTaskToReadyList+0xcc>)
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7fe fe6e 	bl	8004a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d7a:	f001 fbe3 	bl	8007544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <prvAddNewTaskToReadyList+0xc0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d207      	bcs.n	8005da4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <prvAddNewTaskToReadyList+0xd0>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000a3c 	.word	0x20000a3c
 8005db0:	2000093c 	.word	0x2000093c
 8005db4:	20000a48 	.word	0x20000a48
 8005db8:	20000a58 	.word	0x20000a58
 8005dbc:	20000a44 	.word	0x20000a44
 8005dc0:	20000940 	.word	0x20000940
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d017      	beq.n	8005e0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <vTaskDelay+0x60>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <vTaskDelay+0x30>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60bb      	str	r3, [r7, #8]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005df8:	f000 f880 	bl	8005efc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fe12 	bl	8006a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e04:	f000 f888 	bl	8005f18 <xTaskResumeAll>
 8005e08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d107      	bne.n	8005e20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <vTaskDelay+0x64>)
 8005e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000a64 	.word	0x20000a64
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e3e:	463a      	mov	r2, r7
 8005e40:	1d39      	adds	r1, r7, #4
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fa ffae 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	9202      	str	r2, [sp, #8]
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	4921      	ldr	r1, [pc, #132]	; (8005ee4 <vTaskStartScheduler+0xb4>)
 8005e60:	4821      	ldr	r0, [pc, #132]	; (8005ee8 <vTaskStartScheduler+0xb8>)
 8005e62:	f7ff fe1d 	bl	8005aa0 <xTaskCreateStatic>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <vTaskStartScheduler+0xbc>)
 8005e6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e6c:	4b1f      	ldr	r3, [pc, #124]	; (8005eec <vTaskStartScheduler+0xbc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e001      	b.n	8005e7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e84:	f000 fe36 	bl	8006af4 <xTimerCreateTimerTask>
 8005e88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d116      	bne.n	8005ebe <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea4:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <vTaskStartScheduler+0xc0>)
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eac:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <vTaskStartScheduler+0xc4>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <vTaskStartScheduler+0xc8>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eb8:	f001 fa72 	bl	80073a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ebc:	e00e      	b.n	8005edc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d10a      	bne.n	8005edc <vTaskStartScheduler+0xac>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60fb      	str	r3, [r7, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <vTaskStartScheduler+0xaa>
}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	08008c20 	.word	0x08008c20
 8005ee8:	08006505 	.word	0x08006505
 8005eec:	20000a60 	.word	0x20000a60
 8005ef0:	20000a5c 	.word	0x20000a5c
 8005ef4:	20000a48 	.word	0x20000a48
 8005ef8:	20000a40 	.word	0x20000a40

08005efc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f00:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <vTaskSuspendAll+0x18>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	4a03      	ldr	r2, [pc, #12]	; (8005f14 <vTaskSuspendAll+0x18>)
 8005f08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20000a64 	.word	0x20000a64

08005f18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f26:	4b41      	ldr	r3, [pc, #260]	; (800602c <xTaskResumeAll+0x114>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	603b      	str	r3, [r7, #0]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f44:	f001 face 	bl	80074e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f48:	4b38      	ldr	r3, [pc, #224]	; (800602c <xTaskResumeAll+0x114>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	4a37      	ldr	r2, [pc, #220]	; (800602c <xTaskResumeAll+0x114>)
 8005f50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f52:	4b36      	ldr	r3, [pc, #216]	; (800602c <xTaskResumeAll+0x114>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d161      	bne.n	800601e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f5a:	4b35      	ldr	r3, [pc, #212]	; (8006030 <xTaskResumeAll+0x118>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d05d      	beq.n	800601e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f62:	e02e      	b.n	8005fc2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f64:	4b33      	ldr	r3, [pc, #204]	; (8006034 <xTaskResumeAll+0x11c>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3318      	adds	r3, #24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe fdcd 	bl	8004b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fdc8 	bl	8004b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	409a      	lsls	r2, r3
 8005f88:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <xTaskResumeAll+0x120>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	4a2a      	ldr	r2, [pc, #168]	; (8006038 <xTaskResumeAll+0x120>)
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a27      	ldr	r2, [pc, #156]	; (800603c <xTaskResumeAll+0x124>)
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f7fe fd54 	bl	8004a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	4b23      	ldr	r3, [pc, #140]	; (8006040 <xTaskResumeAll+0x128>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005fbc:	4b21      	ldr	r3, [pc, #132]	; (8006044 <xTaskResumeAll+0x12c>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <xTaskResumeAll+0x11c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1cc      	bne.n	8005f64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fd0:	f000 fb4e 	bl	8006670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fd4:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <xTaskResumeAll+0x130>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d010      	beq.n	8006002 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fe0:	f000 f846 	bl	8006070 <xTaskIncrementTick>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005fea:	4b16      	ldr	r3, [pc, #88]	; (8006044 <xTaskResumeAll+0x12c>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f1      	bne.n	8005fe0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ffc:	4b12      	ldr	r3, [pc, #72]	; (8006048 <xTaskResumeAll+0x130>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <xTaskResumeAll+0x12c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800600a:	2301      	movs	r3, #1
 800600c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <xTaskResumeAll+0x134>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800601e:	f001 fa91 	bl	8007544 <vPortExitCritical>

	return xAlreadyYielded;
 8006022:	68bb      	ldr	r3, [r7, #8]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000a64 	.word	0x20000a64
 8006030:	20000a3c 	.word	0x20000a3c
 8006034:	200009fc 	.word	0x200009fc
 8006038:	20000a44 	.word	0x20000a44
 800603c:	20000940 	.word	0x20000940
 8006040:	2000093c 	.word	0x2000093c
 8006044:	20000a50 	.word	0x20000a50
 8006048:	20000a4c 	.word	0x20000a4c
 800604c:	e000ed04 	.word	0xe000ed04

08006050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <xTaskGetTickCount+0x1c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800605c:	687b      	ldr	r3, [r7, #4]
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000a40 	.word	0x20000a40

08006070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800607a:	4b4e      	ldr	r3, [pc, #312]	; (80061b4 <xTaskIncrementTick+0x144>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 808e 	bne.w	80061a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006084:	4b4c      	ldr	r3, [pc, #304]	; (80061b8 <xTaskIncrementTick+0x148>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800608c:	4a4a      	ldr	r2, [pc, #296]	; (80061b8 <xTaskIncrementTick+0x148>)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d120      	bne.n	80060da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006098:	4b48      	ldr	r3, [pc, #288]	; (80061bc <xTaskIncrementTick+0x14c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	603b      	str	r3, [r7, #0]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xTaskIncrementTick+0x46>
 80060b8:	4b40      	ldr	r3, [pc, #256]	; (80061bc <xTaskIncrementTick+0x14c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <xTaskIncrementTick+0x150>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3e      	ldr	r2, [pc, #248]	; (80061bc <xTaskIncrementTick+0x14c>)
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4a3e      	ldr	r2, [pc, #248]	; (80061c0 <xTaskIncrementTick+0x150>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4b3d      	ldr	r3, [pc, #244]	; (80061c4 <xTaskIncrementTick+0x154>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	4a3c      	ldr	r2, [pc, #240]	; (80061c4 <xTaskIncrementTick+0x154>)
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	f000 facb 	bl	8006670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060da:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <xTaskIncrementTick+0x158>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d348      	bcc.n	8006176 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e4:	4b35      	ldr	r3, [pc, #212]	; (80061bc <xTaskIncrementTick+0x14c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ee:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <xTaskIncrementTick+0x158>)
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060f4:	601a      	str	r2, [r3, #0]
					break;
 80060f6:	e03e      	b.n	8006176 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f8:	4b30      	ldr	r3, [pc, #192]	; (80061bc <xTaskIncrementTick+0x14c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	d203      	bcs.n	8006118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006110:	4a2d      	ldr	r2, [pc, #180]	; (80061c8 <xTaskIncrementTick+0x158>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006116:	e02e      	b.n	8006176 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fcf7 	bl	8004b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	3318      	adds	r3, #24
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe fcee 	bl	8004b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	2201      	movs	r2, #1
 800613a:	409a      	lsls	r2, r3
 800613c:	4b23      	ldr	r3, [pc, #140]	; (80061cc <xTaskIncrementTick+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4313      	orrs	r3, r2
 8006142:	4a22      	ldr	r2, [pc, #136]	; (80061cc <xTaskIncrementTick+0x15c>)
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <xTaskIncrementTick+0x160>)
 8006154:	441a      	add	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7fe fc7a 	bl	8004a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <xTaskIncrementTick+0x164>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	429a      	cmp	r2, r3
 800616e:	d3b9      	bcc.n	80060e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006174:	e7b6      	b.n	80060e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006176:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <xTaskIncrementTick+0x164>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	4914      	ldr	r1, [pc, #80]	; (80061d0 <xTaskIncrementTick+0x160>)
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d901      	bls.n	8006192 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800618e:	2301      	movs	r3, #1
 8006190:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <xTaskIncrementTick+0x168>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800619a:	2301      	movs	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e004      	b.n	80061aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061a0:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <xTaskIncrementTick+0x16c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <xTaskIncrementTick+0x16c>)
 80061a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061aa:	697b      	ldr	r3, [r7, #20]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000a64 	.word	0x20000a64
 80061b8:	20000a40 	.word	0x20000a40
 80061bc:	200009f4 	.word	0x200009f4
 80061c0:	200009f8 	.word	0x200009f8
 80061c4:	20000a54 	.word	0x20000a54
 80061c8:	20000a5c 	.word	0x20000a5c
 80061cc:	20000a44 	.word	0x20000a44
 80061d0:	20000940 	.word	0x20000940
 80061d4:	2000093c 	.word	0x2000093c
 80061d8:	20000a50 	.word	0x20000a50
 80061dc:	20000a4c 	.word	0x20000a4c

080061e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061e6:	4b27      	ldr	r3, [pc, #156]	; (8006284 <vTaskSwitchContext+0xa4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ee:	4b26      	ldr	r3, [pc, #152]	; (8006288 <vTaskSwitchContext+0xa8>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061f4:	e03f      	b.n	8006276 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80061f6:	4b24      	ldr	r3, [pc, #144]	; (8006288 <vTaskSwitchContext+0xa8>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061fc:	4b23      	ldr	r3, [pc, #140]	; (800628c <vTaskSwitchContext+0xac>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	fab3 f383 	clz	r3, r3
 8006208:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800620a:	7afb      	ldrb	r3, [r7, #11]
 800620c:	f1c3 031f 	rsb	r3, r3, #31
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	491f      	ldr	r1, [pc, #124]	; (8006290 <vTaskSwitchContext+0xb0>)
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	607b      	str	r3, [r7, #4]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <vTaskSwitchContext+0x5a>
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <vTaskSwitchContext+0xb0>)
 8006248:	4413      	add	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3308      	adds	r3, #8
 800625e:	429a      	cmp	r2, r3
 8006260:	d104      	bne.n	800626c <vTaskSwitchContext+0x8c>
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	4a08      	ldr	r2, [pc, #32]	; (8006294 <vTaskSwitchContext+0xb4>)
 8006274:	6013      	str	r3, [r2, #0]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000a64 	.word	0x20000a64
 8006288:	20000a50 	.word	0x20000a50
 800628c:	20000a44 	.word	0x20000a44
 8006290:	20000940 	.word	0x20000940
 8006294:	2000093c 	.word	0x2000093c

08006298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <vTaskPlaceOnEventList+0x44>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3318      	adds	r3, #24
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fe fbe9 	bl	8004a9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062cc:	2101      	movs	r1, #1
 80062ce:	6838      	ldr	r0, [r7, #0]
 80062d0:	f000 fbaa 	bl	8006a28 <prvAddCurrentTaskToDelayedList>
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	2000093c 	.word	0x2000093c

080062e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	617b      	str	r3, [r7, #20]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <vTaskPlaceOnEventListRestricted+0x54>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3318      	adds	r3, #24
 800630e:	4619      	mov	r1, r3
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7fe fba0 	bl	8004a56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006320:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	68b8      	ldr	r0, [r7, #8]
 8006326:	f000 fb7f 	bl	8006a28 <prvAddCurrentTaskToDelayedList>
	}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2000093c 	.word	0x2000093c

08006338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60fb      	str	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3318      	adds	r3, #24
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fbd1 	bl	8004b10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636e:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <xTaskRemoveFromEventList+0xac>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d11c      	bne.n	80063b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	3304      	adds	r3, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fbc8 	bl	8004b10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	2201      	movs	r2, #1
 8006386:	409a      	lsls	r2, r3
 8006388:	4b17      	ldr	r3, [pc, #92]	; (80063e8 <xTaskRemoveFromEventList+0xb0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4313      	orrs	r3, r2
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <xTaskRemoveFromEventList+0xb0>)
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4a13      	ldr	r2, [pc, #76]	; (80063ec <xTaskRemoveFromEventList+0xb4>)
 80063a0:	441a      	add	r2, r3
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4619      	mov	r1, r3
 80063a8:	4610      	mov	r0, r2
 80063aa:	f7fe fb54 	bl	8004a56 <vListInsertEnd>
 80063ae:	e005      	b.n	80063bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	3318      	adds	r3, #24
 80063b4:	4619      	mov	r1, r3
 80063b6:	480e      	ldr	r0, [pc, #56]	; (80063f0 <xTaskRemoveFromEventList+0xb8>)
 80063b8:	f7fe fb4d 	bl	8004a56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <xTaskRemoveFromEventList+0xbc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d905      	bls.n	80063d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063ca:	2301      	movs	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <xTaskRemoveFromEventList+0xc0>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e001      	b.n	80063da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063da:	697b      	ldr	r3, [r7, #20]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20000a64 	.word	0x20000a64
 80063e8:	20000a44 	.word	0x20000a44
 80063ec:	20000940 	.word	0x20000940
 80063f0:	200009fc 	.word	0x200009fc
 80063f4:	2000093c 	.word	0x2000093c
 80063f8:	20000a50 	.word	0x20000a50

080063fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <vTaskInternalSetTimeOutState+0x24>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <vTaskInternalSetTimeOutState+0x28>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	605a      	str	r2, [r3, #4]
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000a54 	.word	0x20000a54
 8006424:	20000a40 	.word	0x20000a40

08006428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	613b      	str	r3, [r7, #16]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800646a:	f001 f83b 	bl	80074e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800646e:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <xTaskCheckForTimeOut+0xbc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006486:	d102      	bne.n	800648e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006488:	2300      	movs	r3, #0
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	e023      	b.n	80064d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <xTaskCheckForTimeOut+0xc0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d007      	beq.n	80064aa <xTaskCheckForTimeOut+0x82>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d302      	bcc.n	80064aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	e015      	b.n	80064d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d20b      	bcs.n	80064cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ff9b 	bl	80063fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	e004      	b.n	80064d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064d6:	f001 f835 	bl	8007544 <vPortExitCritical>

	return xReturn;
 80064da:	69fb      	ldr	r3, [r7, #28]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000a40 	.word	0x20000a40
 80064e8:	20000a54 	.word	0x20000a54

080064ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064f0:	4b03      	ldr	r3, [pc, #12]	; (8006500 <vTaskMissedYield+0x14>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
}
 80064f6:	bf00      	nop
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20000a50 	.word	0x20000a50

08006504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800650c:	f000 f852 	bl	80065b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <prvIdleTask+0x28>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d9f9      	bls.n	800650c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <prvIdleTask+0x2c>)
 800651a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006528:	e7f0      	b.n	800650c <prvIdleTask+0x8>
 800652a:	bf00      	nop
 800652c:	20000940 	.word	0x20000940
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800653a:	2300      	movs	r3, #0
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	e00c      	b.n	800655a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <prvInitialiseTaskLists+0x60>)
 800654c:	4413      	add	r3, r2
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fa54 	bl	80049fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3301      	adds	r3, #1
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b06      	cmp	r3, #6
 800655e:	d9ef      	bls.n	8006540 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006560:	480d      	ldr	r0, [pc, #52]	; (8006598 <prvInitialiseTaskLists+0x64>)
 8006562:	f7fe fa4b 	bl	80049fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006566:	480d      	ldr	r0, [pc, #52]	; (800659c <prvInitialiseTaskLists+0x68>)
 8006568:	f7fe fa48 	bl	80049fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800656c:	480c      	ldr	r0, [pc, #48]	; (80065a0 <prvInitialiseTaskLists+0x6c>)
 800656e:	f7fe fa45 	bl	80049fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006572:	480c      	ldr	r0, [pc, #48]	; (80065a4 <prvInitialiseTaskLists+0x70>)
 8006574:	f7fe fa42 	bl	80049fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006578:	480b      	ldr	r0, [pc, #44]	; (80065a8 <prvInitialiseTaskLists+0x74>)
 800657a:	f7fe fa3f 	bl	80049fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800657e:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <prvInitialiseTaskLists+0x78>)
 8006580:	4a05      	ldr	r2, [pc, #20]	; (8006598 <prvInitialiseTaskLists+0x64>)
 8006582:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <prvInitialiseTaskLists+0x7c>)
 8006586:	4a05      	ldr	r2, [pc, #20]	; (800659c <prvInitialiseTaskLists+0x68>)
 8006588:	601a      	str	r2, [r3, #0]
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000940 	.word	0x20000940
 8006598:	200009cc 	.word	0x200009cc
 800659c:	200009e0 	.word	0x200009e0
 80065a0:	200009fc 	.word	0x200009fc
 80065a4:	20000a10 	.word	0x20000a10
 80065a8:	20000a28 	.word	0x20000a28
 80065ac:	200009f4 	.word	0x200009f4
 80065b0:	200009f8 	.word	0x200009f8

080065b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ba:	e019      	b.n	80065f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065bc:	f000 ff92 	bl	80074e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c0:	4b10      	ldr	r3, [pc, #64]	; (8006604 <prvCheckTasksWaitingTermination+0x50>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe fa9f 	bl	8004b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <prvCheckTasksWaitingTermination+0x54>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	4a0b      	ldr	r2, [pc, #44]	; (8006608 <prvCheckTasksWaitingTermination+0x54>)
 80065da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <prvCheckTasksWaitingTermination+0x58>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <prvCheckTasksWaitingTermination+0x58>)
 80065e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065e6:	f000 ffad 	bl	8007544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f810 	bl	8006610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <prvCheckTasksWaitingTermination+0x58>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e1      	bne.n	80065bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000a10 	.word	0x20000a10
 8006608:	20000a3c 	.word	0x20000a3c
 800660c:	20000a24 	.word	0x20000a24

08006610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	4618      	mov	r0, r3
 8006628:	f001 f94a 	bl	80078c0 <vPortFree>
				vPortFree( pxTCB );
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 f947 	bl	80078c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006632:	e018      	b.n	8006666 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800663a:	2b01      	cmp	r3, #1
 800663c:	d103      	bne.n	8006646 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 f93e 	bl	80078c0 <vPortFree>
	}
 8006644:	e00f      	b.n	8006666 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800664c:	2b02      	cmp	r3, #2
 800664e:	d00a      	beq.n	8006666 <prvDeleteTCB+0x56>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60fb      	str	r3, [r7, #12]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <prvDeleteTCB+0x54>
	}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvResetNextTaskUnblockTime+0x38>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <prvResetNextTaskUnblockTime+0x3c>)
 8006682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006688:	e008      	b.n	800669c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <prvResetNextTaskUnblockTime+0x38>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	4a04      	ldr	r2, [pc, #16]	; (80066ac <prvResetNextTaskUnblockTime+0x3c>)
 800669a:	6013      	str	r3, [r2, #0]
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	200009f4 	.word	0x200009f4
 80066ac:	20000a5c 	.word	0x20000a5c

080066b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <xTaskGetSchedulerState+0x34>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066be:	2301      	movs	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	e008      	b.n	80066d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <xTaskGetSchedulerState+0x38>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066cc:	2302      	movs	r3, #2
 80066ce:	607b      	str	r3, [r7, #4]
 80066d0:	e001      	b.n	80066d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066d6:	687b      	ldr	r3, [r7, #4]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	20000a48 	.word	0x20000a48
 80066e8:	20000a64 	.word	0x20000a64

080066ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d05e      	beq.n	80067c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	4b31      	ldr	r3, [pc, #196]	; (80067cc <xTaskPriorityInherit+0xe0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	429a      	cmp	r2, r3
 800670e:	d24e      	bcs.n	80067ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	db06      	blt.n	8006726 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006718:	4b2c      	ldr	r3, [pc, #176]	; (80067cc <xTaskPriorityInherit+0xe0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	f1c3 0207 	rsb	r2, r3, #7
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6959      	ldr	r1, [r3, #20]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <xTaskPriorityInherit+0xe4>)
 8006738:	4413      	add	r3, r2
 800673a:	4299      	cmp	r1, r3
 800673c:	d12f      	bne.n	800679e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3304      	adds	r3, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe f9e4 	bl	8004b10 <uxListRemove>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	2201      	movs	r2, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	43da      	mvns	r2, r3
 800675a:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <xTaskPriorityInherit+0xe8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4013      	ands	r3, r2
 8006760:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <xTaskPriorityInherit+0xe8>)
 8006762:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006764:	4b19      	ldr	r3, [pc, #100]	; (80067cc <xTaskPriorityInherit+0xe0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	2201      	movs	r2, #1
 8006774:	409a      	lsls	r2, r3
 8006776:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <xTaskPriorityInherit+0xe8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <xTaskPriorityInherit+0xe8>)
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <xTaskPriorityInherit+0xe4>)
 800678e:	441a      	add	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fe f95d 	bl	8004a56 <vListInsertEnd>
 800679c:	e004      	b.n	80067a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <xTaskPriorityInherit+0xe0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e008      	b.n	80067c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <xTaskPriorityInherit+0xe0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d201      	bcs.n	80067c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80067bc:	2301      	movs	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067c0:	68fb      	ldr	r3, [r7, #12]
	}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000093c 	.word	0x2000093c
 80067d0:	20000940 	.word	0x20000940
 80067d4:	20000a44 	.word	0x20000a44

080067d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d06e      	beq.n	80068cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067ee:	4b3a      	ldr	r3, [pc, #232]	; (80068d8 <xTaskPriorityDisinherit+0x100>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d00a      	beq.n	800680e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60bb      	str	r3, [r7, #8]
}
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006830:	1e5a      	subs	r2, r3, #1
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	429a      	cmp	r2, r3
 8006840:	d044      	beq.n	80068cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006846:	2b00      	cmp	r3, #0
 8006848:	d140      	bne.n	80068cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3304      	adds	r3, #4
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe f95e 	bl	8004b10 <uxListRemove>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d115      	bne.n	8006886 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	491f      	ldr	r1, [pc, #124]	; (80068dc <xTaskPriorityDisinherit+0x104>)
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <xTaskPriorityDisinherit+0xae>
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	2201      	movs	r2, #1
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	43da      	mvns	r2, r3
 800687c:	4b18      	ldr	r3, [pc, #96]	; (80068e0 <xTaskPriorityDisinherit+0x108>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4013      	ands	r3, r2
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <xTaskPriorityDisinherit+0x108>)
 8006884:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	f1c3 0207 	rsb	r2, r3, #7
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	2201      	movs	r2, #1
 80068a0:	409a      	lsls	r2, r3
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <xTaskPriorityDisinherit+0x108>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <xTaskPriorityDisinherit+0x108>)
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4a08      	ldr	r2, [pc, #32]	; (80068dc <xTaskPriorityDisinherit+0x104>)
 80068ba:	441a      	add	r2, r3
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f7fe f8c7 	bl	8004a56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068c8:	2301      	movs	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068cc:	697b      	ldr	r3, [r7, #20]
	}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2000093c 	.word	0x2000093c
 80068dc:	20000940 	.word	0x20000940
 80068e0:	20000a44 	.word	0x20000a44

080068e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80068f2:	2301      	movs	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d077      	beq.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	60fb      	str	r3, [r7, #12]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d902      	bls.n	800692a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e002      	b.n	8006930 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	429a      	cmp	r2, r3
 8006938:	d058      	beq.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	d153      	bne.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006944:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	429a      	cmp	r2, r3
 800694c:	d10a      	bne.n	8006964 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60bb      	str	r3, [r7, #8]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	db04      	blt.n	8006982 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f1c3 0207 	rsb	r2, r3, #7
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	6959      	ldr	r1, [r3, #20]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006992:	4413      	add	r3, r2
 8006994:	4299      	cmp	r1, r3
 8006996:	d129      	bne.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	3304      	adds	r3, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe f8b7 	bl	8004b10 <uxListRemove>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	2201      	movs	r2, #1
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43da      	mvns	r2, r3
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	4a10      	ldr	r2, [pc, #64]	; (80069fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80069bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	2201      	movs	r2, #1
 80069c4:	409a      	lsls	r2, r3
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	4a0b      	ldr	r2, [pc, #44]	; (80069fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4a06      	ldr	r2, [pc, #24]	; (80069f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80069de:	441a      	add	r2, r3
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f7fe f835 	bl	8004a56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ec:	bf00      	nop
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	2000093c 	.word	0x2000093c
 80069f8:	20000940 	.word	0x20000940
 80069fc:	20000a44 	.word	0x20000a44

08006a00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a12:	3201      	adds	r2, #1
 8006a14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006a16:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a18:	681b      	ldr	r3, [r3, #0]
	}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	2000093c 	.word	0x2000093c

08006a28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a32:	4b29      	ldr	r3, [pc, #164]	; (8006ad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a38:	4b28      	ldr	r3, [pc, #160]	; (8006adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe f866 	bl	8004b10 <uxListRemove>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a4a:	4b24      	ldr	r3, [pc, #144]	; (8006adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	2201      	movs	r2, #1
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43da      	mvns	r2, r3
 8006a58:	4b21      	ldr	r3, [pc, #132]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a68:	d10a      	bne.n	8006a80 <prvAddCurrentTaskToDelayedList+0x58>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a70:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	481a      	ldr	r0, [pc, #104]	; (8006ae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a7a:	f7fd ffec 	bl	8004a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a7e:	e026      	b.n	8006ace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a88:	4b14      	ldr	r3, [pc, #80]	; (8006adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d209      	bcs.n	8006aac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a98:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f7fd fffa 	bl	8004a9e <vListInsert>
}
 8006aaa:	e010      	b.n	8006ace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <prvAddCurrentTaskToDelayedList+0xc4>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4610      	mov	r0, r2
 8006aba:	f7fd fff0 	bl	8004a9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d202      	bcs.n	8006ace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ac8:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6013      	str	r3, [r2, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000a40 	.word	0x20000a40
 8006adc:	2000093c 	.word	0x2000093c
 8006ae0:	20000a44 	.word	0x20000a44
 8006ae4:	20000a28 	.word	0x20000a28
 8006ae8:	200009f8 	.word	0x200009f8
 8006aec:	200009f4 	.word	0x200009f4
 8006af0:	20000a5c 	.word	0x20000a5c

08006af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006afe:	f000 fb85 	bl	800720c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <xTimerCreateTimerTask+0x80>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d021      	beq.n	8006b4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b12:	1d3a      	adds	r2, r7, #4
 8006b14:	f107 0108 	add.w	r1, r7, #8
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fa f95d 	bl	8000ddc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	9202      	str	r2, [sp, #8]
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	460a      	mov	r2, r1
 8006b34:	4910      	ldr	r1, [pc, #64]	; (8006b78 <xTimerCreateTimerTask+0x84>)
 8006b36:	4811      	ldr	r0, [pc, #68]	; (8006b7c <xTimerCreateTimerTask+0x88>)
 8006b38:	f7fe ffb2 	bl	8005aa0 <xTaskCreateStatic>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <xTimerCreateTimerTask+0x8c>)
 8006b40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <xTimerCreateTimerTask+0x8c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	613b      	str	r3, [r7, #16]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b6a:	697b      	ldr	r3, [r7, #20]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000a98 	.word	0x20000a98
 8006b78:	08008c28 	.word	0x08008c28
 8006b7c:	08006ded 	.word	0x08006ded
 8006b80:	20000a9c 	.word	0x20000a9c

08006b84 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006b92:	2028      	movs	r0, #40	; 0x28
 8006b94:	f000 fdc8 	bl	8007728 <pvPortMalloc>
 8006b98:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f843 	bl	8006c42 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006bbc:	697b      	ldr	r3, [r7, #20]
	}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08a      	sub	sp, #40	; 0x28
 8006bca:	af02      	add	r7, sp, #8
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006bd4:	2328      	movs	r3, #40	; 0x28
 8006bd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b28      	cmp	r3, #40	; 0x28
 8006bdc:	d00a      	beq.n	8006bf4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	61bb      	str	r3, [r7, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xTimerCreateStatic+0x4c>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	617b      	str	r3, [r7, #20]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00d      	beq.n	8006c38 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 f805 	bl	8006c42 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006c38:	69fb      	ldr	r3, [r7, #28]
	}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617b      	str	r3, [r7, #20]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01e      	beq.n	8006cb0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006c72:	f000 facb 	bl	800720c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd fed2 	bl	8004a3c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d008      	beq.n	8006cb0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	623b      	str	r3, [r7, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d02a      	beq.n	8006d44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	dc18      	bgt.n	8006d32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d00:	f7ff fcd6 	bl	80066b0 <xTaskGetSchedulerState>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d109      	bne.n	8006d1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	f107 0114 	add.w	r1, r7, #20
 8006d12:	2300      	movs	r3, #0
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	f7fe f8ab 	bl	8004e70 <xQueueGenericSend>
 8006d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d1c:	e012      	b.n	8006d44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f107 0114 	add.w	r1, r7, #20
 8006d26:	2300      	movs	r3, #0
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f7fe f8a1 	bl	8004e70 <xQueueGenericSend>
 8006d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d30:	e008      	b.n	8006d44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d32:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f107 0114 	add.w	r1, r7, #20
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	f7fe f995 	bl	800506c <xQueueGenericSendFromISR>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3728      	adds	r7, #40	; 0x28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000a98 	.word	0x20000a98

08006d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d5e:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <prvProcessExpiredTimer+0x94>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd fecf 	bl	8004b10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d022      	beq.n	8006dc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	699a      	ldr	r2, [r3, #24]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	18d1      	adds	r1, r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	6978      	ldr	r0, [r7, #20]
 8006d8e:	f000 f8d1 	bl	8006f34 <prvInsertTimerInActiveList>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01f      	beq.n	8006dd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d98:	2300      	movs	r3, #0
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	2100      	movs	r1, #0
 8006da2:	6978      	ldr	r0, [r7, #20]
 8006da4:	f7ff ff88 	bl	8006cb8 <xTimerGenericCommand>
 8006da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d113      	bne.n	8006dd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	6978      	ldr	r0, [r7, #20]
 8006dde:	4798      	blx	r3
}
 8006de0:	bf00      	nop
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000a90 	.word	0x20000a90

08006dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006df4:	f107 0308 	add.w	r3, r7, #8
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f857 	bl	8006eac <prvGetNextExpireTime>
 8006dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4619      	mov	r1, r3
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 f803 	bl	8006e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e0a:	f000 f8d5 	bl	8006fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e0e:	e7f1      	b.n	8006df4 <prvTimerTask+0x8>

08006e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e1a:	f7ff f86f 	bl	8005efc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e1e:	f107 0308 	add.w	r3, r7, #8
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f866 	bl	8006ef4 <prvSampleTimeNow>
 8006e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d130      	bne.n	8006e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <prvProcessTimerOrBlockTask+0x3c>
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d806      	bhi.n	8006e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e3e:	f7ff f86b 	bl	8005f18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e42:	68f9      	ldr	r1, [r7, #12]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff85 	bl	8006d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e4a:	e024      	b.n	8006e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e52:	4b13      	ldr	r3, [pc, #76]	; (8006ea0 <prvProcessTimerOrBlockTask+0x90>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <prvProcessTimerOrBlockTask+0x50>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <prvProcessTimerOrBlockTask+0x52>
 8006e60:	2300      	movs	r3, #0
 8006e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <prvProcessTimerOrBlockTask+0x94>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7fe fde1 	bl	8005a38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e76:	f7ff f84f 	bl	8005f18 <xTaskResumeAll>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <prvProcessTimerOrBlockTask+0x98>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
}
 8006e90:	e001      	b.n	8006e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e92:	f7ff f841 	bl	8005f18 <xTaskResumeAll>
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000a94 	.word	0x20000a94
 8006ea4:	20000a98 	.word	0x20000a98
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <prvGetNextExpireTime+0x44>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <prvGetNextExpireTime+0x16>
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	e000      	b.n	8006ec4 <prvGetNextExpireTime+0x18>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d105      	bne.n	8006edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <prvGetNextExpireTime+0x44>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e001      	b.n	8006ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000a90 	.word	0x20000a90

08006ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006efc:	f7ff f8a8 	bl	8006050 <xTaskGetTickCount>
 8006f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <prvSampleTimeNow+0x3c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d205      	bcs.n	8006f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f0c:	f000 f91a 	bl	8007144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e002      	b.n	8006f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f1e:	4a04      	ldr	r2, [pc, #16]	; (8006f30 <prvSampleTimeNow+0x3c>)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000aa0 	.word	0x20000aa0

08006f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d812      	bhi.n	8006f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d302      	bcc.n	8006f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	e01b      	b.n	8006fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <prvInsertTimerInActiveList+0x7c>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7fd fd90 	bl	8004a9e <vListInsert>
 8006f7e:	e012      	b.n	8006fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d206      	bcs.n	8006f96 <prvInsertTimerInActiveList+0x62>
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d302      	bcc.n	8006f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e007      	b.n	8006fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <prvInsertTimerInActiveList+0x80>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fd fd7c 	bl	8004a9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fa6:	697b      	ldr	r3, [r7, #20]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000a94 	.word	0x20000a94
 8006fb4:	20000a90 	.word	0x20000a90

08006fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08c      	sub	sp, #48	; 0x30
 8006fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fbe:	e0ae      	b.n	800711e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f2c0 80ab 	blt.w	800711e <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fd fd99 	bl	8004b10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fde:	1d3b      	adds	r3, r7, #4
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff ff87 	bl	8006ef4 <prvSampleTimeNow>
 8006fe6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b09      	cmp	r3, #9
 8006fec:	f200 8096 	bhi.w	800711c <prvProcessReceivedCommands+0x164>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <prvProcessReceivedCommands+0x40>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007021 	.word	0x08007021
 8007004:	08007095 	.word	0x08007095
 8007008:	080070a9 	.word	0x080070a9
 800700c:	080070f3 	.word	0x080070f3
 8007010:	08007021 	.word	0x08007021
 8007014:	08007021 	.word	0x08007021
 8007018:	08007095 	.word	0x08007095
 800701c:	080070a9 	.word	0x080070a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	18d1      	adds	r1, r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a3a      	ldr	r2, [r7, #32]
 800703e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007040:	f7ff ff78 	bl	8006f34 <prvInsertTimerInActiveList>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d069      	beq.n	800711e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007050:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d05e      	beq.n	800711e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	441a      	add	r2, r3
 8007068:	2300      	movs	r3, #0
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2300      	movs	r3, #0
 800706e:	2100      	movs	r1, #0
 8007070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007072:	f7ff fe21 	bl	8006cb8 <xTimerGenericCommand>
 8007076:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d14f      	bne.n	800711e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	61bb      	str	r3, [r7, #24]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80070a6:	e03a      	b.n	800711e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <prvProcessReceivedCommands+0x126>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	617b      	str	r3, [r7, #20]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	18d1      	adds	r1, r2, r3
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	6a3a      	ldr	r2, [r7, #32]
 80070ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ec:	f7ff ff22 	bl	8006f34 <prvInsertTimerInActiveList>
					break;
 80070f0:	e015      	b.n	800711e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8007100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007102:	f000 fbdd 	bl	80078c0 <vPortFree>
 8007106:	e00a      	b.n	800711e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	b2da      	uxtb	r2, r3
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800711a:	e000      	b.n	800711e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800711c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800711e:	4b08      	ldr	r3, [pc, #32]	; (8007140 <prvProcessReceivedCommands+0x188>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f107 0108 	add.w	r1, r7, #8
 8007126:	2200      	movs	r2, #0
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe f8c7 	bl	80052bc <xQueueReceive>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	f47f af45 	bne.w	8006fc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000a98 	.word	0x20000a98

08007144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800714a:	e048      	b.n	80071de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800714c:	4b2d      	ldr	r3, [pc, #180]	; (8007204 <prvSwitchTimerLists+0xc0>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007156:	4b2b      	ldr	r3, [pc, #172]	; (8007204 <prvSwitchTimerLists+0xc0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3304      	adds	r3, #4
 8007164:	4618      	mov	r0, r3
 8007166:	f7fd fcd3 	bl	8004b10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02e      	beq.n	80071de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4413      	add	r3, r2
 8007188:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	429a      	cmp	r2, r3
 8007190:	d90e      	bls.n	80071b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800719e:	4b19      	ldr	r3, [pc, #100]	; (8007204 <prvSwitchTimerLists+0xc0>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4619      	mov	r1, r3
 80071a8:	4610      	mov	r0, r2
 80071aa:	f7fd fc78 	bl	8004a9e <vListInsert>
 80071ae:	e016      	b.n	80071de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071b0:	2300      	movs	r3, #0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	2100      	movs	r1, #0
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7ff fd7c 	bl	8006cb8 <xTimerGenericCommand>
 80071c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	603b      	str	r3, [r7, #0]
}
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <prvSwitchTimerLists+0xc0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1b1      	bne.n	800714c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <prvSwitchTimerLists+0xc0>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071ee:	4b06      	ldr	r3, [pc, #24]	; (8007208 <prvSwitchTimerLists+0xc4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a04      	ldr	r2, [pc, #16]	; (8007204 <prvSwitchTimerLists+0xc0>)
 80071f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071f6:	4a04      	ldr	r2, [pc, #16]	; (8007208 <prvSwitchTimerLists+0xc4>)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6013      	str	r3, [r2, #0]
}
 80071fc:	bf00      	nop
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000a90 	.word	0x20000a90
 8007208:	20000a94 	.word	0x20000a94

0800720c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007212:	f000 f967 	bl	80074e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <prvCheckForValidListAndQueue+0x60>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d120      	bne.n	8007260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800721e:	4814      	ldr	r0, [pc, #80]	; (8007270 <prvCheckForValidListAndQueue+0x64>)
 8007220:	f7fd fbec 	bl	80049fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007224:	4813      	ldr	r0, [pc, #76]	; (8007274 <prvCheckForValidListAndQueue+0x68>)
 8007226:	f7fd fbe9 	bl	80049fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <prvCheckForValidListAndQueue+0x6c>)
 800722c:	4a10      	ldr	r2, [pc, #64]	; (8007270 <prvCheckForValidListAndQueue+0x64>)
 800722e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007230:	4b12      	ldr	r3, [pc, #72]	; (800727c <prvCheckForValidListAndQueue+0x70>)
 8007232:	4a10      	ldr	r2, [pc, #64]	; (8007274 <prvCheckForValidListAndQueue+0x68>)
 8007234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007236:	2300      	movs	r3, #0
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4b11      	ldr	r3, [pc, #68]	; (8007280 <prvCheckForValidListAndQueue+0x74>)
 800723c:	4a11      	ldr	r2, [pc, #68]	; (8007284 <prvCheckForValidListAndQueue+0x78>)
 800723e:	210c      	movs	r1, #12
 8007240:	200a      	movs	r0, #10
 8007242:	f7fd fcf7 	bl	8004c34 <xQueueGenericCreateStatic>
 8007246:	4603      	mov	r3, r0
 8007248:	4a08      	ldr	r2, [pc, #32]	; (800726c <prvCheckForValidListAndQueue+0x60>)
 800724a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <prvCheckForValidListAndQueue+0x60>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <prvCheckForValidListAndQueue+0x60>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	490b      	ldr	r1, [pc, #44]	; (8007288 <prvCheckForValidListAndQueue+0x7c>)
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fbc2 	bl	80059e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007260:	f000 f970 	bl	8007544 <vPortExitCritical>
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000a98 	.word	0x20000a98
 8007270:	20000a68 	.word	0x20000a68
 8007274:	20000a7c 	.word	0x20000a7c
 8007278:	20000a90 	.word	0x20000a90
 800727c:	20000a94 	.word	0x20000a94
 8007280:	20000b1c 	.word	0x20000b1c
 8007284:	20000aa4 	.word	0x20000aa4
 8007288:	08008c30 	.word	0x08008c30

0800728c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3b04      	subs	r3, #4
 800729c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3b04      	subs	r3, #4
 80072aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f023 0201 	bic.w	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3b04      	subs	r3, #4
 80072ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072bc:	4a0c      	ldr	r2, [pc, #48]	; (80072f0 <pxPortInitialiseStack+0x64>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3b14      	subs	r3, #20
 80072c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f06f 0202 	mvn.w	r2, #2
 80072da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3b20      	subs	r3, #32
 80072e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072e2:	68fb      	ldr	r3, [r7, #12]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	080072f5 	.word	0x080072f5

080072f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <prvTaskExitError+0x54>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007306:	d00a      	beq.n	800731e <prvTaskExitError+0x2a>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <prvTaskExitError+0x28>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	60bb      	str	r3, [r7, #8]
}
 8007330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007332:	bf00      	nop
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0fc      	beq.n	8007334 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	2000000c 	.word	0x2000000c
 800734c:	00000000 	.word	0x00000000

08007350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <pxCurrentTCBConst2>)
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	f380 8809 	msr	PSP, r0
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	4770      	bx	lr
 800736c:	f3af 8000 	nop.w

08007370 <pxCurrentTCBConst2>:
 8007370:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007378:	4808      	ldr	r0, [pc, #32]	; (800739c <prvPortStartFirstTask+0x24>)
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f380 8808 	msr	MSP, r0
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8814 	msr	CONTROL, r0
 800738a:	b662      	cpsie	i
 800738c:	b661      	cpsie	f
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	df00      	svc	0
 8007398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800739a:	bf00      	nop
 800739c:	e000ed08 	.word	0xe000ed08

080073a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073a6:	4b46      	ldr	r3, [pc, #280]	; (80074c0 <xPortStartScheduler+0x120>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a46      	ldr	r2, [pc, #280]	; (80074c4 <xPortStartScheduler+0x124>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10a      	bne.n	80073c6 <xPortStartScheduler+0x26>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	613b      	str	r3, [r7, #16]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073c6:	4b3e      	ldr	r3, [pc, #248]	; (80074c0 <xPortStartScheduler+0x120>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3f      	ldr	r2, [pc, #252]	; (80074c8 <xPortStartScheduler+0x128>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d10a      	bne.n	80073e6 <xPortStartScheduler+0x46>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60fb      	str	r3, [r7, #12]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073e6:	4b39      	ldr	r3, [pc, #228]	; (80074cc <xPortStartScheduler+0x12c>)
 80073e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4b31      	ldr	r3, [pc, #196]	; (80074d0 <xPortStartScheduler+0x130>)
 800740c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800740e:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <xPortStartScheduler+0x134>)
 8007410:	2207      	movs	r2, #7
 8007412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007414:	e009      	b.n	800742a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007416:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <xPortStartScheduler+0x134>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3b01      	subs	r3, #1
 800741c:	4a2d      	ldr	r2, [pc, #180]	; (80074d4 <xPortStartScheduler+0x134>)
 800741e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	b2db      	uxtb	r3, r3
 8007428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d0ef      	beq.n	8007416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007436:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <xPortStartScheduler+0x134>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f1c3 0307 	rsb	r3, r3, #7
 800743e:	2b04      	cmp	r3, #4
 8007440:	d00a      	beq.n	8007458 <xPortStartScheduler+0xb8>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	60bb      	str	r3, [r7, #8]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <xPortStartScheduler+0x134>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <xPortStartScheduler+0x134>)
 8007460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007462:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <xPortStartScheduler+0x134>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800746a:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <xPortStartScheduler+0x134>)
 800746c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	b2da      	uxtb	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <xPortStartScheduler+0x138>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <xPortStartScheduler+0x138>)
 800747c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007482:	4b15      	ldr	r3, [pc, #84]	; (80074d8 <xPortStartScheduler+0x138>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <xPortStartScheduler+0x138>)
 8007488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800748c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800748e:	f000 f8dd 	bl	800764c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007492:	4b12      	ldr	r3, [pc, #72]	; (80074dc <xPortStartScheduler+0x13c>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007498:	f000 f8fc 	bl	8007694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800749c:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <xPortStartScheduler+0x140>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0f      	ldr	r2, [pc, #60]	; (80074e0 <xPortStartScheduler+0x140>)
 80074a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074a8:	f7ff ff66 	bl	8007378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074ac:	f7fe fe98 	bl	80061e0 <vTaskSwitchContext>
	prvTaskExitError();
 80074b0:	f7ff ff20 	bl	80072f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000ed00 	.word	0xe000ed00
 80074c4:	410fc271 	.word	0x410fc271
 80074c8:	410fc270 	.word	0x410fc270
 80074cc:	e000e400 	.word	0xe000e400
 80074d0:	20000b64 	.word	0x20000b64
 80074d4:	20000b68 	.word	0x20000b68
 80074d8:	e000ed20 	.word	0xe000ed20
 80074dc:	2000000c 	.word	0x2000000c
 80074e0:	e000ef34 	.word	0xe000ef34

080074e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	607b      	str	r3, [r7, #4]
}
 80074fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074fe:	4b0f      	ldr	r3, [pc, #60]	; (800753c <vPortEnterCritical+0x58>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	4a0d      	ldr	r2, [pc, #52]	; (800753c <vPortEnterCritical+0x58>)
 8007506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007508:	4b0c      	ldr	r3, [pc, #48]	; (800753c <vPortEnterCritical+0x58>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d10f      	bne.n	8007530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <vPortEnterCritical+0x5c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <vPortEnterCritical+0x4c>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	603b      	str	r3, [r7, #0]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <vPortEnterCritical+0x4a>
	}
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	2000000c 	.word	0x2000000c
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800754a:	4b12      	ldr	r3, [pc, #72]	; (8007594 <vPortExitCritical+0x50>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <vPortExitCritical+0x24>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	607b      	str	r3, [r7, #4]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007568:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <vPortExitCritical+0x50>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3b01      	subs	r3, #1
 800756e:	4a09      	ldr	r2, [pc, #36]	; (8007594 <vPortExitCritical+0x50>)
 8007570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <vPortExitCritical+0x50>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <vPortExitCritical+0x42>
 800757a:	2300      	movs	r3, #0
 800757c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	f383 8811 	msr	BASEPRI, r3
}
 8007584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000000c 	.word	0x2000000c
	...

080075a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075a0:	f3ef 8009 	mrs	r0, PSP
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	4b15      	ldr	r3, [pc, #84]	; (8007600 <pxCurrentTCBConst>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f01e 0f10 	tst.w	lr, #16
 80075b0:	bf08      	it	eq
 80075b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	6010      	str	r0, [r2, #0]
 80075bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075c4:	f380 8811 	msr	BASEPRI, r0
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f7fe fe06 	bl	80061e0 <vTaskSwitchContext>
 80075d4:	f04f 0000 	mov.w	r0, #0
 80075d8:	f380 8811 	msr	BASEPRI, r0
 80075dc:	bc09      	pop	{r0, r3}
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	6808      	ldr	r0, [r1, #0]
 80075e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e6:	f01e 0f10 	tst.w	lr, #16
 80075ea:	bf08      	it	eq
 80075ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075f0:	f380 8809 	msr	PSP, r0
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w

08007600 <pxCurrentTCBConst>:
 8007600:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop

08007608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
}
 8007620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007622:	f7fe fd25 	bl	8006070 <xTaskIncrementTick>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800762c:	4b06      	ldr	r3, [pc, #24]	; (8007648 <SysTick_Handler+0x40>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f383 8811 	msr	BASEPRI, r3
}
 800763e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <vPortSetupTimerInterrupt+0x34>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <vPortSetupTimerInterrupt+0x38>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <vPortSetupTimerInterrupt+0x3c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0a      	ldr	r2, [pc, #40]	; (800768c <vPortSetupTimerInterrupt+0x40>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	099b      	lsrs	r3, r3, #6
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <vPortSetupTimerInterrupt+0x44>)
 800766a:	3b01      	subs	r3, #1
 800766c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800766e:	4b04      	ldr	r3, [pc, #16]	; (8007680 <vPortSetupTimerInterrupt+0x34>)
 8007670:	2207      	movs	r2, #7
 8007672:	601a      	str	r2, [r3, #0]
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e000e010 	.word	0xe000e010
 8007684:	e000e018 	.word	0xe000e018
 8007688:	20000000 	.word	0x20000000
 800768c:	10624dd3 	.word	0x10624dd3
 8007690:	e000e014 	.word	0xe000e014

08007694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076a4 <vPortEnableVFP+0x10>
 8007698:	6801      	ldr	r1, [r0, #0]
 800769a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800769e:	6001      	str	r1, [r0, #0]
 80076a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076a2:	bf00      	nop
 80076a4:	e000ed88 	.word	0xe000ed88

080076a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076ae:	f3ef 8305 	mrs	r3, IPSR
 80076b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d914      	bls.n	80076e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ba:	4a17      	ldr	r2, [pc, #92]	; (8007718 <vPortValidateInterruptPriority+0x70>)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076c4:	4b15      	ldr	r3, [pc, #84]	; (800771c <vPortValidateInterruptPriority+0x74>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	7afa      	ldrb	r2, [r7, #11]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d20a      	bcs.n	80076e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076e4:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <vPortValidateInterruptPriority+0x78>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <vPortValidateInterruptPriority+0x7c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d90a      	bls.n	800770a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	603b      	str	r3, [r7, #0]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <vPortValidateInterruptPriority+0x60>
	}
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	e000e3f0 	.word	0xe000e3f0
 800771c:	20000b64 	.word	0x20000b64
 8007720:	e000ed0c 	.word	0xe000ed0c
 8007724:	20000b68 	.word	0x20000b68

08007728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007734:	f7fe fbe2 	bl	8005efc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007738:	4b5b      	ldr	r3, [pc, #364]	; (80078a8 <pvPortMalloc+0x180>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007740:	f000 f920 	bl	8007984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007744:	4b59      	ldr	r3, [pc, #356]	; (80078ac <pvPortMalloc+0x184>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	f040 8093 	bne.w	8007878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01d      	beq.n	8007794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007758:	2208      	movs	r2, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f023 0307 	bic.w	r3, r3, #7
 8007770:	3308      	adds	r3, #8
 8007772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <pvPortMalloc+0x6c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	617b      	str	r3, [r7, #20]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d06e      	beq.n	8007878 <pvPortMalloc+0x150>
 800779a:	4b45      	ldr	r3, [pc, #276]	; (80078b0 <pvPortMalloc+0x188>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d869      	bhi.n	8007878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077a4:	4b43      	ldr	r3, [pc, #268]	; (80078b4 <pvPortMalloc+0x18c>)
 80077a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077a8:	4b42      	ldr	r3, [pc, #264]	; (80078b4 <pvPortMalloc+0x18c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ae:	e004      	b.n	80077ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d903      	bls.n	80077cc <pvPortMalloc+0xa4>
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f1      	bne.n	80077b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077cc:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <pvPortMalloc+0x180>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d050      	beq.n	8007878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2208      	movs	r2, #8
 80077dc:	4413      	add	r3, r2
 80077de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	2308      	movs	r3, #8
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d91f      	bls.n	8007838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <pvPortMalloc+0xf8>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	613b      	str	r3, [r7, #16]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	1ad2      	subs	r2, r2, r3
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007832:	69b8      	ldr	r0, [r7, #24]
 8007834:	f000 f908 	bl	8007a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007838:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <pvPortMalloc+0x188>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	4a1b      	ldr	r2, [pc, #108]	; (80078b0 <pvPortMalloc+0x188>)
 8007844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007846:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <pvPortMalloc+0x188>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b1b      	ldr	r3, [pc, #108]	; (80078b8 <pvPortMalloc+0x190>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d203      	bcs.n	800785a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007852:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <pvPortMalloc+0x188>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a18      	ldr	r2, [pc, #96]	; (80078b8 <pvPortMalloc+0x190>)
 8007858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <pvPortMalloc+0x184>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	431a      	orrs	r2, r3
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <pvPortMalloc+0x194>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <pvPortMalloc+0x194>)
 8007876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007878:	f7fe fb4e 	bl	8005f18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <pvPortMalloc+0x174>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60fb      	str	r3, [r7, #12]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <pvPortMalloc+0x172>
	return pvReturn;
 800789c:	69fb      	ldr	r3, [r7, #28]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3728      	adds	r7, #40	; 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20004774 	.word	0x20004774
 80078ac:	20004788 	.word	0x20004788
 80078b0:	20004778 	.word	0x20004778
 80078b4:	2000476c 	.word	0x2000476c
 80078b8:	2000477c 	.word	0x2000477c
 80078bc:	20004780 	.word	0x20004780

080078c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d04d      	beq.n	800796e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078d2:	2308      	movs	r3, #8
 80078d4:	425b      	negs	r3, r3
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4413      	add	r3, r2
 80078da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	4b24      	ldr	r3, [pc, #144]	; (8007978 <vPortFree+0xb8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <vPortFree+0x44>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60fb      	str	r3, [r7, #12]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <vPortFree+0x62>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	60bb      	str	r3, [r7, #8]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <vPortFree+0xb8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01e      	beq.n	800796e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11a      	bne.n	800796e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <vPortFree+0xb8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	43db      	mvns	r3, r3
 8007942:	401a      	ands	r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007948:	f7fe fad8 	bl	8005efc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <vPortFree+0xbc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4413      	add	r3, r2
 8007956:	4a09      	ldr	r2, [pc, #36]	; (800797c <vPortFree+0xbc>)
 8007958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800795a:	6938      	ldr	r0, [r7, #16]
 800795c:	f000 f874 	bl	8007a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <vPortFree+0xc0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	4a06      	ldr	r2, [pc, #24]	; (8007980 <vPortFree+0xc0>)
 8007968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800796a:	f7fe fad5 	bl	8005f18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800796e:	bf00      	nop
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20004788 	.word	0x20004788
 800797c:	20004778 	.word	0x20004778
 8007980:	20004784 	.word	0x20004784

08007984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800798a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800798e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007990:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <prvHeapInit+0xac>)
 8007992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00c      	beq.n	80079b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3307      	adds	r3, #7
 80079a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0307 	bic.w	r3, r3, #7
 80079aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <prvHeapInit+0xac>)
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <prvHeapInit+0xb0>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079c2:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <prvHeapInit+0xb0>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	4413      	add	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079d0:	2208      	movs	r2, #8
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1a9b      	subs	r3, r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4a15      	ldr	r2, [pc, #84]	; (8007a38 <prvHeapInit+0xb4>)
 80079e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <prvHeapInit+0xb4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2200      	movs	r2, #0
 80079ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079ee:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <prvHeapInit+0xb4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <prvHeapInit+0xb4>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <prvHeapInit+0xb8>)
 8007a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <prvHeapInit+0xbc>)
 8007a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a1c:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <prvHeapInit+0xc0>)
 8007a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	20000b6c 	.word	0x20000b6c
 8007a34:	2000476c 	.word	0x2000476c
 8007a38:	20004774 	.word	0x20004774
 8007a3c:	2000477c 	.word	0x2000477c
 8007a40:	20004778 	.word	0x20004778
 8007a44:	20004788 	.word	0x20004788

08007a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a50:	4b28      	ldr	r3, [pc, #160]	; (8007af4 <prvInsertBlockIntoFreeList+0xac>)
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e002      	b.n	8007a5c <prvInsertBlockIntoFreeList+0x14>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d8f7      	bhi.n	8007a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4413      	add	r3, r2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d108      	bne.n	8007a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	441a      	add	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d118      	bne.n	8007ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <prvInsertBlockIntoFreeList+0xb0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d00d      	beq.n	8007ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	e008      	b.n	8007ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e003      	b.n	8007ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d002      	beq.n	8007ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	2000476c 	.word	0x2000476c
 8007af8:	20004774 	.word	0x20004774

08007afc <srand>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <srand+0x44>)
 8007b00:	681d      	ldr	r5, [r3, #0]
 8007b02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007b04:	4604      	mov	r4, r0
 8007b06:	b9b3      	cbnz	r3, 8007b36 <srand+0x3a>
 8007b08:	2018      	movs	r0, #24
 8007b0a:	f000 f987 	bl	8007e1c <malloc>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6328      	str	r0, [r5, #48]	; 0x30
 8007b12:	b920      	cbnz	r0, 8007b1e <srand+0x22>
 8007b14:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <srand+0x48>)
 8007b16:	480c      	ldr	r0, [pc, #48]	; (8007b48 <srand+0x4c>)
 8007b18:	2146      	movs	r1, #70	; 0x46
 8007b1a:	f000 f961 	bl	8007de0 <__assert_func>
 8007b1e:	490b      	ldr	r1, [pc, #44]	; (8007b4c <srand+0x50>)
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <srand+0x54>)
 8007b22:	e9c0 1300 	strd	r1, r3, [r0]
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <srand+0x58>)
 8007b28:	6083      	str	r3, [r0, #8]
 8007b2a:	230b      	movs	r3, #11
 8007b2c:	8183      	strh	r3, [r0, #12]
 8007b2e:	2100      	movs	r1, #0
 8007b30:	2001      	movs	r0, #1
 8007b32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007b36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007b38:	2200      	movs	r2, #0
 8007b3a:	611c      	str	r4, [r3, #16]
 8007b3c:	615a      	str	r2, [r3, #20]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	20000068 	.word	0x20000068
 8007b44:	08008c50 	.word	0x08008c50
 8007b48:	08008c67 	.word	0x08008c67
 8007b4c:	abcd330e 	.word	0xabcd330e
 8007b50:	e66d1234 	.word	0xe66d1234
 8007b54:	0005deec 	.word	0x0005deec

08007b58 <rand>:
 8007b58:	4b16      	ldr	r3, [pc, #88]	; (8007bb4 <rand+0x5c>)
 8007b5a:	b510      	push	{r4, lr}
 8007b5c:	681c      	ldr	r4, [r3, #0]
 8007b5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b60:	b9b3      	cbnz	r3, 8007b90 <rand+0x38>
 8007b62:	2018      	movs	r0, #24
 8007b64:	f000 f95a 	bl	8007e1c <malloc>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6320      	str	r0, [r4, #48]	; 0x30
 8007b6c:	b920      	cbnz	r0, 8007b78 <rand+0x20>
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <rand+0x60>)
 8007b70:	4812      	ldr	r0, [pc, #72]	; (8007bbc <rand+0x64>)
 8007b72:	2152      	movs	r1, #82	; 0x52
 8007b74:	f000 f934 	bl	8007de0 <__assert_func>
 8007b78:	4911      	ldr	r1, [pc, #68]	; (8007bc0 <rand+0x68>)
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <rand+0x6c>)
 8007b7c:	e9c0 1300 	strd	r1, r3, [r0]
 8007b80:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <rand+0x70>)
 8007b82:	6083      	str	r3, [r0, #8]
 8007b84:	230b      	movs	r3, #11
 8007b86:	8183      	strh	r3, [r0, #12]
 8007b88:	2100      	movs	r1, #0
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007b90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007b92:	480e      	ldr	r0, [pc, #56]	; (8007bcc <rand+0x74>)
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	694c      	ldr	r4, [r1, #20]
 8007b98:	4a0d      	ldr	r2, [pc, #52]	; (8007bd0 <rand+0x78>)
 8007b9a:	4358      	muls	r0, r3
 8007b9c:	fb02 0004 	mla	r0, r2, r4, r0
 8007ba0:	fba3 3202 	umull	r3, r2, r3, r2
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	eb40 0002 	adc.w	r0, r0, r2
 8007baa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007bae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007bb2:	bd10      	pop	{r4, pc}
 8007bb4:	20000068 	.word	0x20000068
 8007bb8:	08008c50 	.word	0x08008c50
 8007bbc:	08008c67 	.word	0x08008c67
 8007bc0:	abcd330e 	.word	0xabcd330e
 8007bc4:	e66d1234 	.word	0xe66d1234
 8007bc8:	0005deec 	.word	0x0005deec
 8007bcc:	5851f42d 	.word	0x5851f42d
 8007bd0:	4c957f2d 	.word	0x4c957f2d

08007bd4 <std>:
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	4604      	mov	r4, r0
 8007bda:	e9c0 3300 	strd	r3, r3, [r0]
 8007bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007be2:	6083      	str	r3, [r0, #8]
 8007be4:	8181      	strh	r1, [r0, #12]
 8007be6:	6643      	str	r3, [r0, #100]	; 0x64
 8007be8:	81c2      	strh	r2, [r0, #14]
 8007bea:	6183      	str	r3, [r0, #24]
 8007bec:	4619      	mov	r1, r3
 8007bee:	2208      	movs	r2, #8
 8007bf0:	305c      	adds	r0, #92	; 0x5c
 8007bf2:	f000 f8b1 	bl	8007d58 <memset>
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <std+0x58>)
 8007bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <std+0x5c>)
 8007bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <std+0x60>)
 8007c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <std+0x64>)
 8007c04:	6323      	str	r3, [r4, #48]	; 0x30
 8007c06:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <std+0x68>)
 8007c08:	6224      	str	r4, [r4, #32]
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d006      	beq.n	8007c1c <std+0x48>
 8007c0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c12:	4294      	cmp	r4, r2
 8007c14:	d002      	beq.n	8007c1c <std+0x48>
 8007c16:	33d0      	adds	r3, #208	; 0xd0
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d105      	bne.n	8007c28 <std+0x54>
 8007c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	f000 b8ca 	b.w	8007dbc <__retarget_lock_init_recursive>
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	bf00      	nop
 8007c2c:	080080e1 	.word	0x080080e1
 8007c30:	08008103 	.word	0x08008103
 8007c34:	0800813b 	.word	0x0800813b
 8007c38:	0800815f 	.word	0x0800815f
 8007c3c:	2000478c 	.word	0x2000478c

08007c40 <stdio_exit_handler>:
 8007c40:	4a02      	ldr	r2, [pc, #8]	; (8007c4c <stdio_exit_handler+0xc>)
 8007c42:	4903      	ldr	r1, [pc, #12]	; (8007c50 <stdio_exit_handler+0x10>)
 8007c44:	4803      	ldr	r0, [pc, #12]	; (8007c54 <stdio_exit_handler+0x14>)
 8007c46:	f000 b869 	b.w	8007d1c <_fwalk_sglue>
 8007c4a:	bf00      	nop
 8007c4c:	20000010 	.word	0x20000010
 8007c50:	08008079 	.word	0x08008079
 8007c54:	2000001c 	.word	0x2000001c

08007c58 <cleanup_stdio>:
 8007c58:	6841      	ldr	r1, [r0, #4]
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <cleanup_stdio+0x34>)
 8007c5c:	4299      	cmp	r1, r3
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	4604      	mov	r4, r0
 8007c62:	d001      	beq.n	8007c68 <cleanup_stdio+0x10>
 8007c64:	f000 fa08 	bl	8008078 <_fflush_r>
 8007c68:	68a1      	ldr	r1, [r4, #8]
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <cleanup_stdio+0x38>)
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	d002      	beq.n	8007c76 <cleanup_stdio+0x1e>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fa01 	bl	8008078 <_fflush_r>
 8007c76:	68e1      	ldr	r1, [r4, #12]
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <cleanup_stdio+0x3c>)
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d004      	beq.n	8007c88 <cleanup_stdio+0x30>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c84:	f000 b9f8 	b.w	8008078 <_fflush_r>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2000478c 	.word	0x2000478c
 8007c90:	200047f4 	.word	0x200047f4
 8007c94:	2000485c 	.word	0x2000485c

08007c98 <global_stdio_init.part.0>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <global_stdio_init.part.0+0x30>)
 8007c9c:	4c0b      	ldr	r4, [pc, #44]	; (8007ccc <global_stdio_init.part.0+0x34>)
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <global_stdio_init.part.0+0x38>)
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2104      	movs	r1, #4
 8007ca8:	f7ff ff94 	bl	8007bd4 <std>
 8007cac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	2109      	movs	r1, #9
 8007cb4:	f7ff ff8e 	bl	8007bd4 <std>
 8007cb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc2:	2112      	movs	r1, #18
 8007cc4:	f7ff bf86 	b.w	8007bd4 <std>
 8007cc8:	200048c4 	.word	0x200048c4
 8007ccc:	2000478c 	.word	0x2000478c
 8007cd0:	08007c41 	.word	0x08007c41

08007cd4 <__sfp_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sfp_lock_acquire+0x8>)
 8007cd6:	f000 b872 	b.w	8007dbe <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	200048c9 	.word	0x200048c9

08007ce0 <__sfp_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sfp_lock_release+0x8>)
 8007ce2:	f000 b86d 	b.w	8007dc0 <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	200048c9 	.word	0x200048c9

08007cec <__sinit>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	4604      	mov	r4, r0
 8007cf0:	f7ff fff0 	bl	8007cd4 <__sfp_lock_acquire>
 8007cf4:	6a23      	ldr	r3, [r4, #32]
 8007cf6:	b11b      	cbz	r3, 8007d00 <__sinit+0x14>
 8007cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfc:	f7ff bff0 	b.w	8007ce0 <__sfp_lock_release>
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <__sinit+0x28>)
 8007d02:	6223      	str	r3, [r4, #32]
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <__sinit+0x2c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f5      	bne.n	8007cf8 <__sinit+0xc>
 8007d0c:	f7ff ffc4 	bl	8007c98 <global_stdio_init.part.0>
 8007d10:	e7f2      	b.n	8007cf8 <__sinit+0xc>
 8007d12:	bf00      	nop
 8007d14:	08007c59 	.word	0x08007c59
 8007d18:	200048c4 	.word	0x200048c4

08007d1c <_fwalk_sglue>:
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4607      	mov	r7, r0
 8007d22:	4688      	mov	r8, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	2600      	movs	r6, #0
 8007d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d30:	d505      	bpl.n	8007d3e <_fwalk_sglue+0x22>
 8007d32:	6824      	ldr	r4, [r4, #0]
 8007d34:	2c00      	cmp	r4, #0
 8007d36:	d1f7      	bne.n	8007d28 <_fwalk_sglue+0xc>
 8007d38:	4630      	mov	r0, r6
 8007d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d907      	bls.n	8007d54 <_fwalk_sglue+0x38>
 8007d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	d003      	beq.n	8007d54 <_fwalk_sglue+0x38>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c0      	blx	r8
 8007d52:	4306      	orrs	r6, r0
 8007d54:	3568      	adds	r5, #104	; 0x68
 8007d56:	e7e9      	b.n	8007d2c <_fwalk_sglue+0x10>

08007d58 <memset>:
 8007d58:	4402      	add	r2, r0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d100      	bne.n	8007d62 <memset+0xa>
 8007d60:	4770      	bx	lr
 8007d62:	f803 1b01 	strb.w	r1, [r3], #1
 8007d66:	e7f9      	b.n	8007d5c <memset+0x4>

08007d68 <__errno>:
 8007d68:	4b01      	ldr	r3, [pc, #4]	; (8007d70 <__errno+0x8>)
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000068 	.word	0x20000068

08007d74 <__libc_init_array>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4d0d      	ldr	r5, [pc, #52]	; (8007dac <__libc_init_array+0x38>)
 8007d78:	4c0d      	ldr	r4, [pc, #52]	; (8007db0 <__libc_init_array+0x3c>)
 8007d7a:	1b64      	subs	r4, r4, r5
 8007d7c:	10a4      	asrs	r4, r4, #2
 8007d7e:	2600      	movs	r6, #0
 8007d80:	42a6      	cmp	r6, r4
 8007d82:	d109      	bne.n	8007d98 <__libc_init_array+0x24>
 8007d84:	4d0b      	ldr	r5, [pc, #44]	; (8007db4 <__libc_init_array+0x40>)
 8007d86:	4c0c      	ldr	r4, [pc, #48]	; (8007db8 <__libc_init_array+0x44>)
 8007d88:	f000 fedc 	bl	8008b44 <_init>
 8007d8c:	1b64      	subs	r4, r4, r5
 8007d8e:	10a4      	asrs	r4, r4, #2
 8007d90:	2600      	movs	r6, #0
 8007d92:	42a6      	cmp	r6, r4
 8007d94:	d105      	bne.n	8007da2 <__libc_init_array+0x2e>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9c:	4798      	blx	r3
 8007d9e:	3601      	adds	r6, #1
 8007da0:	e7ee      	b.n	8007d80 <__libc_init_array+0xc>
 8007da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da6:	4798      	blx	r3
 8007da8:	3601      	adds	r6, #1
 8007daa:	e7f2      	b.n	8007d92 <__libc_init_array+0x1e>
 8007dac:	08008d38 	.word	0x08008d38
 8007db0:	08008d38 	.word	0x08008d38
 8007db4:	08008d38 	.word	0x08008d38
 8007db8:	08008d3c 	.word	0x08008d3c

08007dbc <__retarget_lock_init_recursive>:
 8007dbc:	4770      	bx	lr

08007dbe <__retarget_lock_acquire_recursive>:
 8007dbe:	4770      	bx	lr

08007dc0 <__retarget_lock_release_recursive>:
 8007dc0:	4770      	bx	lr

08007dc2 <memcpy>:
 8007dc2:	440a      	add	r2, r1
 8007dc4:	4291      	cmp	r1, r2
 8007dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007dca:	d100      	bne.n	8007dce <memcpy+0xc>
 8007dcc:	4770      	bx	lr
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dd8:	4291      	cmp	r1, r2
 8007dda:	d1f9      	bne.n	8007dd0 <memcpy+0xe>
 8007ddc:	bd10      	pop	{r4, pc}
	...

08007de0 <__assert_func>:
 8007de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007de2:	4614      	mov	r4, r2
 8007de4:	461a      	mov	r2, r3
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <__assert_func+0x2c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4605      	mov	r5, r0
 8007dec:	68d8      	ldr	r0, [r3, #12]
 8007dee:	b14c      	cbz	r4, 8007e04 <__assert_func+0x24>
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <__assert_func+0x30>)
 8007df2:	9100      	str	r1, [sp, #0]
 8007df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007df8:	4906      	ldr	r1, [pc, #24]	; (8007e14 <__assert_func+0x34>)
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	f000 f9b4 	bl	8008168 <fiprintf>
 8007e00:	f000 fa1a 	bl	8008238 <abort>
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <__assert_func+0x38>)
 8007e06:	461c      	mov	r4, r3
 8007e08:	e7f3      	b.n	8007df2 <__assert_func+0x12>
 8007e0a:	bf00      	nop
 8007e0c:	20000068 	.word	0x20000068
 8007e10:	08008cbf 	.word	0x08008cbf
 8007e14:	08008ccc 	.word	0x08008ccc
 8007e18:	08008cfa 	.word	0x08008cfa

08007e1c <malloc>:
 8007e1c:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <malloc+0xc>)
 8007e1e:	4601      	mov	r1, r0
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	f000 b823 	b.w	8007e6c <_malloc_r>
 8007e26:	bf00      	nop
 8007e28:	20000068 	.word	0x20000068

08007e2c <sbrk_aligned>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	4e0e      	ldr	r6, [pc, #56]	; (8007e68 <sbrk_aligned+0x3c>)
 8007e30:	460c      	mov	r4, r1
 8007e32:	6831      	ldr	r1, [r6, #0]
 8007e34:	4605      	mov	r5, r0
 8007e36:	b911      	cbnz	r1, 8007e3e <sbrk_aligned+0x12>
 8007e38:	f000 f9dc 	bl	80081f4 <_sbrk_r>
 8007e3c:	6030      	str	r0, [r6, #0]
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4628      	mov	r0, r5
 8007e42:	f000 f9d7 	bl	80081f4 <_sbrk_r>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	d00a      	beq.n	8007e60 <sbrk_aligned+0x34>
 8007e4a:	1cc4      	adds	r4, r0, #3
 8007e4c:	f024 0403 	bic.w	r4, r4, #3
 8007e50:	42a0      	cmp	r0, r4
 8007e52:	d007      	beq.n	8007e64 <sbrk_aligned+0x38>
 8007e54:	1a21      	subs	r1, r4, r0
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 f9cc 	bl	80081f4 <_sbrk_r>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d101      	bne.n	8007e64 <sbrk_aligned+0x38>
 8007e60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007e64:	4620      	mov	r0, r4
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	200048d0 	.word	0x200048d0

08007e6c <_malloc_r>:
 8007e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e70:	1ccd      	adds	r5, r1, #3
 8007e72:	f025 0503 	bic.w	r5, r5, #3
 8007e76:	3508      	adds	r5, #8
 8007e78:	2d0c      	cmp	r5, #12
 8007e7a:	bf38      	it	cc
 8007e7c:	250c      	movcc	r5, #12
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	4607      	mov	r7, r0
 8007e82:	db01      	blt.n	8007e88 <_malloc_r+0x1c>
 8007e84:	42a9      	cmp	r1, r5
 8007e86:	d905      	bls.n	8007e94 <_malloc_r+0x28>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	4630      	mov	r0, r6
 8007e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f68 <_malloc_r+0xfc>
 8007e98:	f000 f916 	bl	80080c8 <__malloc_lock>
 8007e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea0:	461c      	mov	r4, r3
 8007ea2:	bb5c      	cbnz	r4, 8007efc <_malloc_r+0x90>
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	f7ff ffc0 	bl	8007e2c <sbrk_aligned>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	4604      	mov	r4, r0
 8007eb0:	d155      	bne.n	8007f5e <_malloc_r+0xf2>
 8007eb2:	f8d8 4000 	ldr.w	r4, [r8]
 8007eb6:	4626      	mov	r6, r4
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	d145      	bne.n	8007f48 <_malloc_r+0xdc>
 8007ebc:	2c00      	cmp	r4, #0
 8007ebe:	d048      	beq.n	8007f52 <_malloc_r+0xe6>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	eb04 0903 	add.w	r9, r4, r3
 8007eca:	f000 f993 	bl	80081f4 <_sbrk_r>
 8007ece:	4581      	cmp	r9, r0
 8007ed0:	d13f      	bne.n	8007f52 <_malloc_r+0xe6>
 8007ed2:	6821      	ldr	r1, [r4, #0]
 8007ed4:	1a6d      	subs	r5, r5, r1
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff ffa7 	bl	8007e2c <sbrk_aligned>
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d037      	beq.n	8007f52 <_malloc_r+0xe6>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	442b      	add	r3, r5
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d038      	beq.n	8007f62 <_malloc_r+0xf6>
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	42a2      	cmp	r2, r4
 8007ef4:	d12b      	bne.n	8007f4e <_malloc_r+0xe2>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	e00f      	b.n	8007f1c <_malloc_r+0xb0>
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	1b52      	subs	r2, r2, r5
 8007f00:	d41f      	bmi.n	8007f42 <_malloc_r+0xd6>
 8007f02:	2a0b      	cmp	r2, #11
 8007f04:	d917      	bls.n	8007f36 <_malloc_r+0xca>
 8007f06:	1961      	adds	r1, r4, r5
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	6025      	str	r5, [r4, #0]
 8007f0c:	bf18      	it	ne
 8007f0e:	6059      	strne	r1, [r3, #4]
 8007f10:	6863      	ldr	r3, [r4, #4]
 8007f12:	bf08      	it	eq
 8007f14:	f8c8 1000 	streq.w	r1, [r8]
 8007f18:	5162      	str	r2, [r4, r5]
 8007f1a:	604b      	str	r3, [r1, #4]
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f104 060b 	add.w	r6, r4, #11
 8007f22:	f000 f8d7 	bl	80080d4 <__malloc_unlock>
 8007f26:	f026 0607 	bic.w	r6, r6, #7
 8007f2a:	1d23      	adds	r3, r4, #4
 8007f2c:	1af2      	subs	r2, r6, r3
 8007f2e:	d0ae      	beq.n	8007e8e <_malloc_r+0x22>
 8007f30:	1b9b      	subs	r3, r3, r6
 8007f32:	50a3      	str	r3, [r4, r2]
 8007f34:	e7ab      	b.n	8007e8e <_malloc_r+0x22>
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	6862      	ldr	r2, [r4, #4]
 8007f3a:	d1dd      	bne.n	8007ef8 <_malloc_r+0x8c>
 8007f3c:	f8c8 2000 	str.w	r2, [r8]
 8007f40:	e7ec      	b.n	8007f1c <_malloc_r+0xb0>
 8007f42:	4623      	mov	r3, r4
 8007f44:	6864      	ldr	r4, [r4, #4]
 8007f46:	e7ac      	b.n	8007ea2 <_malloc_r+0x36>
 8007f48:	4634      	mov	r4, r6
 8007f4a:	6876      	ldr	r6, [r6, #4]
 8007f4c:	e7b4      	b.n	8007eb8 <_malloc_r+0x4c>
 8007f4e:	4613      	mov	r3, r2
 8007f50:	e7cc      	b.n	8007eec <_malloc_r+0x80>
 8007f52:	230c      	movs	r3, #12
 8007f54:	603b      	str	r3, [r7, #0]
 8007f56:	4638      	mov	r0, r7
 8007f58:	f000 f8bc 	bl	80080d4 <__malloc_unlock>
 8007f5c:	e797      	b.n	8007e8e <_malloc_r+0x22>
 8007f5e:	6025      	str	r5, [r4, #0]
 8007f60:	e7dc      	b.n	8007f1c <_malloc_r+0xb0>
 8007f62:	605b      	str	r3, [r3, #4]
 8007f64:	deff      	udf	#255	; 0xff
 8007f66:	bf00      	nop
 8007f68:	200048cc 	.word	0x200048cc

08007f6c <__sflush_r>:
 8007f6c:	898a      	ldrh	r2, [r1, #12]
 8007f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f72:	4605      	mov	r5, r0
 8007f74:	0710      	lsls	r0, r2, #28
 8007f76:	460c      	mov	r4, r1
 8007f78:	d458      	bmi.n	800802c <__sflush_r+0xc0>
 8007f7a:	684b      	ldr	r3, [r1, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dc05      	bgt.n	8007f8c <__sflush_r+0x20>
 8007f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dc02      	bgt.n	8007f8c <__sflush_r+0x20>
 8007f86:	2000      	movs	r0, #0
 8007f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	d0f9      	beq.n	8007f86 <__sflush_r+0x1a>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f98:	682f      	ldr	r7, [r5, #0]
 8007f9a:	6a21      	ldr	r1, [r4, #32]
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	d032      	beq.n	8008006 <__sflush_r+0x9a>
 8007fa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	075a      	lsls	r2, r3, #29
 8007fa6:	d505      	bpl.n	8007fb4 <__sflush_r+0x48>
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	1ac0      	subs	r0, r0, r3
 8007fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fae:	b10b      	cbz	r3, 8007fb4 <__sflush_r+0x48>
 8007fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fb2:	1ac0      	subs	r0, r0, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fba:	6a21      	ldr	r1, [r4, #32]
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b0      	blx	r6
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	d106      	bne.n	8007fd4 <__sflush_r+0x68>
 8007fc6:	6829      	ldr	r1, [r5, #0]
 8007fc8:	291d      	cmp	r1, #29
 8007fca:	d82b      	bhi.n	8008024 <__sflush_r+0xb8>
 8007fcc:	4a29      	ldr	r2, [pc, #164]	; (8008074 <__sflush_r+0x108>)
 8007fce:	410a      	asrs	r2, r1
 8007fd0:	07d6      	lsls	r6, r2, #31
 8007fd2:	d427      	bmi.n	8008024 <__sflush_r+0xb8>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	6062      	str	r2, [r4, #4]
 8007fd8:	04d9      	lsls	r1, r3, #19
 8007fda:	6922      	ldr	r2, [r4, #16]
 8007fdc:	6022      	str	r2, [r4, #0]
 8007fde:	d504      	bpl.n	8007fea <__sflush_r+0x7e>
 8007fe0:	1c42      	adds	r2, r0, #1
 8007fe2:	d101      	bne.n	8007fe8 <__sflush_r+0x7c>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b903      	cbnz	r3, 8007fea <__sflush_r+0x7e>
 8007fe8:	6560      	str	r0, [r4, #84]	; 0x54
 8007fea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fec:	602f      	str	r7, [r5, #0]
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d0c9      	beq.n	8007f86 <__sflush_r+0x1a>
 8007ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	d002      	beq.n	8008000 <__sflush_r+0x94>
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f000 f924 	bl	8008248 <_free_r>
 8008000:	2000      	movs	r0, #0
 8008002:	6360      	str	r0, [r4, #52]	; 0x34
 8008004:	e7c0      	b.n	8007f88 <__sflush_r+0x1c>
 8008006:	2301      	movs	r3, #1
 8008008:	4628      	mov	r0, r5
 800800a:	47b0      	blx	r6
 800800c:	1c41      	adds	r1, r0, #1
 800800e:	d1c8      	bne.n	8007fa2 <__sflush_r+0x36>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0c5      	beq.n	8007fa2 <__sflush_r+0x36>
 8008016:	2b1d      	cmp	r3, #29
 8008018:	d001      	beq.n	800801e <__sflush_r+0xb2>
 800801a:	2b16      	cmp	r3, #22
 800801c:	d101      	bne.n	8008022 <__sflush_r+0xb6>
 800801e:	602f      	str	r7, [r5, #0]
 8008020:	e7b1      	b.n	8007f86 <__sflush_r+0x1a>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	e7ad      	b.n	8007f88 <__sflush_r+0x1c>
 800802c:	690f      	ldr	r7, [r1, #16]
 800802e:	2f00      	cmp	r7, #0
 8008030:	d0a9      	beq.n	8007f86 <__sflush_r+0x1a>
 8008032:	0793      	lsls	r3, r2, #30
 8008034:	680e      	ldr	r6, [r1, #0]
 8008036:	bf08      	it	eq
 8008038:	694b      	ldreq	r3, [r1, #20]
 800803a:	600f      	str	r7, [r1, #0]
 800803c:	bf18      	it	ne
 800803e:	2300      	movne	r3, #0
 8008040:	eba6 0807 	sub.w	r8, r6, r7
 8008044:	608b      	str	r3, [r1, #8]
 8008046:	f1b8 0f00 	cmp.w	r8, #0
 800804a:	dd9c      	ble.n	8007f86 <__sflush_r+0x1a>
 800804c:	6a21      	ldr	r1, [r4, #32]
 800804e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008050:	4643      	mov	r3, r8
 8008052:	463a      	mov	r2, r7
 8008054:	4628      	mov	r0, r5
 8008056:	47b0      	blx	r6
 8008058:	2800      	cmp	r0, #0
 800805a:	dc06      	bgt.n	800806a <__sflush_r+0xfe>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008068:	e78e      	b.n	8007f88 <__sflush_r+0x1c>
 800806a:	4407      	add	r7, r0
 800806c:	eba8 0800 	sub.w	r8, r8, r0
 8008070:	e7e9      	b.n	8008046 <__sflush_r+0xda>
 8008072:	bf00      	nop
 8008074:	dfbffffe 	.word	0xdfbffffe

08008078 <_fflush_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	690b      	ldr	r3, [r1, #16]
 800807c:	4605      	mov	r5, r0
 800807e:	460c      	mov	r4, r1
 8008080:	b913      	cbnz	r3, 8008088 <_fflush_r+0x10>
 8008082:	2500      	movs	r5, #0
 8008084:	4628      	mov	r0, r5
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	b118      	cbz	r0, 8008092 <_fflush_r+0x1a>
 800808a:	6a03      	ldr	r3, [r0, #32]
 800808c:	b90b      	cbnz	r3, 8008092 <_fflush_r+0x1a>
 800808e:	f7ff fe2d 	bl	8007cec <__sinit>
 8008092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0f3      	beq.n	8008082 <_fflush_r+0xa>
 800809a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800809c:	07d0      	lsls	r0, r2, #31
 800809e:	d404      	bmi.n	80080aa <_fflush_r+0x32>
 80080a0:	0599      	lsls	r1, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_fflush_r+0x32>
 80080a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a6:	f7ff fe8a 	bl	8007dbe <__retarget_lock_acquire_recursive>
 80080aa:	4628      	mov	r0, r5
 80080ac:	4621      	mov	r1, r4
 80080ae:	f7ff ff5d 	bl	8007f6c <__sflush_r>
 80080b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080b4:	07da      	lsls	r2, r3, #31
 80080b6:	4605      	mov	r5, r0
 80080b8:	d4e4      	bmi.n	8008084 <_fflush_r+0xc>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	059b      	lsls	r3, r3, #22
 80080be:	d4e1      	bmi.n	8008084 <_fflush_r+0xc>
 80080c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080c2:	f7ff fe7d 	bl	8007dc0 <__retarget_lock_release_recursive>
 80080c6:	e7dd      	b.n	8008084 <_fflush_r+0xc>

080080c8 <__malloc_lock>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__malloc_lock+0x8>)
 80080ca:	f7ff be78 	b.w	8007dbe <__retarget_lock_acquire_recursive>
 80080ce:	bf00      	nop
 80080d0:	200048c8 	.word	0x200048c8

080080d4 <__malloc_unlock>:
 80080d4:	4801      	ldr	r0, [pc, #4]	; (80080dc <__malloc_unlock+0x8>)
 80080d6:	f7ff be73 	b.w	8007dc0 <__retarget_lock_release_recursive>
 80080da:	bf00      	nop
 80080dc:	200048c8 	.word	0x200048c8

080080e0 <__sread>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	460c      	mov	r4, r1
 80080e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e8:	f000 f872 	bl	80081d0 <_read_r>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	bfab      	itete	ge
 80080f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080f2:	89a3      	ldrhlt	r3, [r4, #12]
 80080f4:	181b      	addge	r3, r3, r0
 80080f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080fa:	bfac      	ite	ge
 80080fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80080fe:	81a3      	strhlt	r3, [r4, #12]
 8008100:	bd10      	pop	{r4, pc}

08008102 <__swrite>:
 8008102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008106:	461f      	mov	r7, r3
 8008108:	898b      	ldrh	r3, [r1, #12]
 800810a:	05db      	lsls	r3, r3, #23
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	4616      	mov	r6, r2
 8008112:	d505      	bpl.n	8008120 <__swrite+0x1e>
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	2302      	movs	r3, #2
 800811a:	2200      	movs	r2, #0
 800811c:	f000 f846 	bl	80081ac <_lseek_r>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	4632      	mov	r2, r6
 800812e:	463b      	mov	r3, r7
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	f000 b86d 	b.w	8008214 <_write_r>

0800813a <__sseek>:
 800813a:	b510      	push	{r4, lr}
 800813c:	460c      	mov	r4, r1
 800813e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008142:	f000 f833 	bl	80081ac <_lseek_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	bf15      	itete	ne
 800814c:	6560      	strne	r0, [r4, #84]	; 0x54
 800814e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008156:	81a3      	strheq	r3, [r4, #12]
 8008158:	bf18      	it	ne
 800815a:	81a3      	strhne	r3, [r4, #12]
 800815c:	bd10      	pop	{r4, pc}

0800815e <__sclose>:
 800815e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008162:	f000 b813 	b.w	800818c <_close_r>
	...

08008168 <fiprintf>:
 8008168:	b40e      	push	{r1, r2, r3}
 800816a:	b503      	push	{r0, r1, lr}
 800816c:	4601      	mov	r1, r0
 800816e:	ab03      	add	r3, sp, #12
 8008170:	4805      	ldr	r0, [pc, #20]	; (8008188 <fiprintf+0x20>)
 8008172:	f853 2b04 	ldr.w	r2, [r3], #4
 8008176:	6800      	ldr	r0, [r0, #0]
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	f000 f8db 	bl	8008334 <_vfiprintf_r>
 800817e:	b002      	add	sp, #8
 8008180:	f85d eb04 	ldr.w	lr, [sp], #4
 8008184:	b003      	add	sp, #12
 8008186:	4770      	bx	lr
 8008188:	20000068 	.word	0x20000068

0800818c <_close_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	; (80081a8 <_close_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7fa f8ad 	bl	80022f6 <_close>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_close_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_close_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200048d4 	.word	0x200048d4

080081ac <_lseek_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d07      	ldr	r5, [pc, #28]	; (80081cc <_lseek_r+0x20>)
 80081b0:	4604      	mov	r4, r0
 80081b2:	4608      	mov	r0, r1
 80081b4:	4611      	mov	r1, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	602a      	str	r2, [r5, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	f7fa f8c2 	bl	8002344 <_lseek>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d102      	bne.n	80081ca <_lseek_r+0x1e>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b103      	cbz	r3, 80081ca <_lseek_r+0x1e>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	200048d4 	.word	0x200048d4

080081d0 <_read_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_read_r+0x20>)
 80081d4:	4604      	mov	r4, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	602a      	str	r2, [r5, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7fa f850 	bl	8002284 <_read>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_read_r+0x1e>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_read_r+0x1e>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	200048d4 	.word	0x200048d4

080081f4 <_sbrk_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d06      	ldr	r5, [pc, #24]	; (8008210 <_sbrk_r+0x1c>)
 80081f8:	2300      	movs	r3, #0
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	602b      	str	r3, [r5, #0]
 8008200:	f7fa f8ae 	bl	8002360 <_sbrk>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_sbrk_r+0x1a>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_sbrk_r+0x1a>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	200048d4 	.word	0x200048d4

08008214 <_write_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d07      	ldr	r5, [pc, #28]	; (8008234 <_write_r+0x20>)
 8008218:	4604      	mov	r4, r0
 800821a:	4608      	mov	r0, r1
 800821c:	4611      	mov	r1, r2
 800821e:	2200      	movs	r2, #0
 8008220:	602a      	str	r2, [r5, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f7fa f84b 	bl	80022be <_write>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_write_r+0x1e>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_write_r+0x1e>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	200048d4 	.word	0x200048d4

08008238 <abort>:
 8008238:	b508      	push	{r3, lr}
 800823a:	2006      	movs	r0, #6
 800823c:	f000 fc66 	bl	8008b0c <raise>
 8008240:	2001      	movs	r0, #1
 8008242:	f7fa f815 	bl	8002270 <_exit>
	...

08008248 <_free_r>:
 8008248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800824a:	2900      	cmp	r1, #0
 800824c:	d044      	beq.n	80082d8 <_free_r+0x90>
 800824e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008252:	9001      	str	r0, [sp, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	f1a1 0404 	sub.w	r4, r1, #4
 800825a:	bfb8      	it	lt
 800825c:	18e4      	addlt	r4, r4, r3
 800825e:	f7ff ff33 	bl	80080c8 <__malloc_lock>
 8008262:	4a1e      	ldr	r2, [pc, #120]	; (80082dc <_free_r+0x94>)
 8008264:	9801      	ldr	r0, [sp, #4]
 8008266:	6813      	ldr	r3, [r2, #0]
 8008268:	b933      	cbnz	r3, 8008278 <_free_r+0x30>
 800826a:	6063      	str	r3, [r4, #4]
 800826c:	6014      	str	r4, [r2, #0]
 800826e:	b003      	add	sp, #12
 8008270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008274:	f7ff bf2e 	b.w	80080d4 <__malloc_unlock>
 8008278:	42a3      	cmp	r3, r4
 800827a:	d908      	bls.n	800828e <_free_r+0x46>
 800827c:	6825      	ldr	r5, [r4, #0]
 800827e:	1961      	adds	r1, r4, r5
 8008280:	428b      	cmp	r3, r1
 8008282:	bf01      	itttt	eq
 8008284:	6819      	ldreq	r1, [r3, #0]
 8008286:	685b      	ldreq	r3, [r3, #4]
 8008288:	1949      	addeq	r1, r1, r5
 800828a:	6021      	streq	r1, [r4, #0]
 800828c:	e7ed      	b.n	800826a <_free_r+0x22>
 800828e:	461a      	mov	r2, r3
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	b10b      	cbz	r3, 8008298 <_free_r+0x50>
 8008294:	42a3      	cmp	r3, r4
 8008296:	d9fa      	bls.n	800828e <_free_r+0x46>
 8008298:	6811      	ldr	r1, [r2, #0]
 800829a:	1855      	adds	r5, r2, r1
 800829c:	42a5      	cmp	r5, r4
 800829e:	d10b      	bne.n	80082b8 <_free_r+0x70>
 80082a0:	6824      	ldr	r4, [r4, #0]
 80082a2:	4421      	add	r1, r4
 80082a4:	1854      	adds	r4, r2, r1
 80082a6:	42a3      	cmp	r3, r4
 80082a8:	6011      	str	r1, [r2, #0]
 80082aa:	d1e0      	bne.n	800826e <_free_r+0x26>
 80082ac:	681c      	ldr	r4, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	6053      	str	r3, [r2, #4]
 80082b2:	440c      	add	r4, r1
 80082b4:	6014      	str	r4, [r2, #0]
 80082b6:	e7da      	b.n	800826e <_free_r+0x26>
 80082b8:	d902      	bls.n	80082c0 <_free_r+0x78>
 80082ba:	230c      	movs	r3, #12
 80082bc:	6003      	str	r3, [r0, #0]
 80082be:	e7d6      	b.n	800826e <_free_r+0x26>
 80082c0:	6825      	ldr	r5, [r4, #0]
 80082c2:	1961      	adds	r1, r4, r5
 80082c4:	428b      	cmp	r3, r1
 80082c6:	bf04      	itt	eq
 80082c8:	6819      	ldreq	r1, [r3, #0]
 80082ca:	685b      	ldreq	r3, [r3, #4]
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	bf04      	itt	eq
 80082d0:	1949      	addeq	r1, r1, r5
 80082d2:	6021      	streq	r1, [r4, #0]
 80082d4:	6054      	str	r4, [r2, #4]
 80082d6:	e7ca      	b.n	800826e <_free_r+0x26>
 80082d8:	b003      	add	sp, #12
 80082da:	bd30      	pop	{r4, r5, pc}
 80082dc:	200048cc 	.word	0x200048cc

080082e0 <__sfputc_r>:
 80082e0:	6893      	ldr	r3, [r2, #8]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	b410      	push	{r4}
 80082e8:	6093      	str	r3, [r2, #8]
 80082ea:	da08      	bge.n	80082fe <__sfputc_r+0x1e>
 80082ec:	6994      	ldr	r4, [r2, #24]
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	db01      	blt.n	80082f6 <__sfputc_r+0x16>
 80082f2:	290a      	cmp	r1, #10
 80082f4:	d103      	bne.n	80082fe <__sfputc_r+0x1e>
 80082f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082fa:	f000 bac5 	b.w	8008888 <__swbuf_r>
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	1c58      	adds	r0, r3, #1
 8008302:	6010      	str	r0, [r2, #0]
 8008304:	7019      	strb	r1, [r3, #0]
 8008306:	4608      	mov	r0, r1
 8008308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800830c:	4770      	bx	lr

0800830e <__sfputs_r>:
 800830e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008310:	4606      	mov	r6, r0
 8008312:	460f      	mov	r7, r1
 8008314:	4614      	mov	r4, r2
 8008316:	18d5      	adds	r5, r2, r3
 8008318:	42ac      	cmp	r4, r5
 800831a:	d101      	bne.n	8008320 <__sfputs_r+0x12>
 800831c:	2000      	movs	r0, #0
 800831e:	e007      	b.n	8008330 <__sfputs_r+0x22>
 8008320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008324:	463a      	mov	r2, r7
 8008326:	4630      	mov	r0, r6
 8008328:	f7ff ffda 	bl	80082e0 <__sfputc_r>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d1f3      	bne.n	8008318 <__sfputs_r+0xa>
 8008330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008334 <_vfiprintf_r>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	460d      	mov	r5, r1
 800833a:	b09d      	sub	sp, #116	; 0x74
 800833c:	4614      	mov	r4, r2
 800833e:	4698      	mov	r8, r3
 8008340:	4606      	mov	r6, r0
 8008342:	b118      	cbz	r0, 800834c <_vfiprintf_r+0x18>
 8008344:	6a03      	ldr	r3, [r0, #32]
 8008346:	b90b      	cbnz	r3, 800834c <_vfiprintf_r+0x18>
 8008348:	f7ff fcd0 	bl	8007cec <__sinit>
 800834c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800834e:	07d9      	lsls	r1, r3, #31
 8008350:	d405      	bmi.n	800835e <_vfiprintf_r+0x2a>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	059a      	lsls	r2, r3, #22
 8008356:	d402      	bmi.n	800835e <_vfiprintf_r+0x2a>
 8008358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835a:	f7ff fd30 	bl	8007dbe <__retarget_lock_acquire_recursive>
 800835e:	89ab      	ldrh	r3, [r5, #12]
 8008360:	071b      	lsls	r3, r3, #28
 8008362:	d501      	bpl.n	8008368 <_vfiprintf_r+0x34>
 8008364:	692b      	ldr	r3, [r5, #16]
 8008366:	b99b      	cbnz	r3, 8008390 <_vfiprintf_r+0x5c>
 8008368:	4629      	mov	r1, r5
 800836a:	4630      	mov	r0, r6
 800836c:	f000 faca 	bl	8008904 <__swsetup_r>
 8008370:	b170      	cbz	r0, 8008390 <_vfiprintf_r+0x5c>
 8008372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008374:	07dc      	lsls	r4, r3, #31
 8008376:	d504      	bpl.n	8008382 <_vfiprintf_r+0x4e>
 8008378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800837c:	b01d      	add	sp, #116	; 0x74
 800837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	0598      	lsls	r0, r3, #22
 8008386:	d4f7      	bmi.n	8008378 <_vfiprintf_r+0x44>
 8008388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800838a:	f7ff fd19 	bl	8007dc0 <__retarget_lock_release_recursive>
 800838e:	e7f3      	b.n	8008378 <_vfiprintf_r+0x44>
 8008390:	2300      	movs	r3, #0
 8008392:	9309      	str	r3, [sp, #36]	; 0x24
 8008394:	2320      	movs	r3, #32
 8008396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800839a:	f8cd 800c 	str.w	r8, [sp, #12]
 800839e:	2330      	movs	r3, #48	; 0x30
 80083a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008554 <_vfiprintf_r+0x220>
 80083a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083a8:	f04f 0901 	mov.w	r9, #1
 80083ac:	4623      	mov	r3, r4
 80083ae:	469a      	mov	sl, r3
 80083b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b4:	b10a      	cbz	r2, 80083ba <_vfiprintf_r+0x86>
 80083b6:	2a25      	cmp	r2, #37	; 0x25
 80083b8:	d1f9      	bne.n	80083ae <_vfiprintf_r+0x7a>
 80083ba:	ebba 0b04 	subs.w	fp, sl, r4
 80083be:	d00b      	beq.n	80083d8 <_vfiprintf_r+0xa4>
 80083c0:	465b      	mov	r3, fp
 80083c2:	4622      	mov	r2, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7ff ffa1 	bl	800830e <__sfputs_r>
 80083cc:	3001      	adds	r0, #1
 80083ce:	f000 80a9 	beq.w	8008524 <_vfiprintf_r+0x1f0>
 80083d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083d4:	445a      	add	r2, fp
 80083d6:	9209      	str	r2, [sp, #36]	; 0x24
 80083d8:	f89a 3000 	ldrb.w	r3, [sl]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80a1 	beq.w	8008524 <_vfiprintf_r+0x1f0>
 80083e2:	2300      	movs	r3, #0
 80083e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ec:	f10a 0a01 	add.w	sl, sl, #1
 80083f0:	9304      	str	r3, [sp, #16]
 80083f2:	9307      	str	r3, [sp, #28]
 80083f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083f8:	931a      	str	r3, [sp, #104]	; 0x68
 80083fa:	4654      	mov	r4, sl
 80083fc:	2205      	movs	r2, #5
 80083fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008402:	4854      	ldr	r0, [pc, #336]	; (8008554 <_vfiprintf_r+0x220>)
 8008404:	f7f7 fee4 	bl	80001d0 <memchr>
 8008408:	9a04      	ldr	r2, [sp, #16]
 800840a:	b9d8      	cbnz	r0, 8008444 <_vfiprintf_r+0x110>
 800840c:	06d1      	lsls	r1, r2, #27
 800840e:	bf44      	itt	mi
 8008410:	2320      	movmi	r3, #32
 8008412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008416:	0713      	lsls	r3, r2, #28
 8008418:	bf44      	itt	mi
 800841a:	232b      	movmi	r3, #43	; 0x2b
 800841c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008420:	f89a 3000 	ldrb.w	r3, [sl]
 8008424:	2b2a      	cmp	r3, #42	; 0x2a
 8008426:	d015      	beq.n	8008454 <_vfiprintf_r+0x120>
 8008428:	9a07      	ldr	r2, [sp, #28]
 800842a:	4654      	mov	r4, sl
 800842c:	2000      	movs	r0, #0
 800842e:	f04f 0c0a 	mov.w	ip, #10
 8008432:	4621      	mov	r1, r4
 8008434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008438:	3b30      	subs	r3, #48	; 0x30
 800843a:	2b09      	cmp	r3, #9
 800843c:	d94d      	bls.n	80084da <_vfiprintf_r+0x1a6>
 800843e:	b1b0      	cbz	r0, 800846e <_vfiprintf_r+0x13a>
 8008440:	9207      	str	r2, [sp, #28]
 8008442:	e014      	b.n	800846e <_vfiprintf_r+0x13a>
 8008444:	eba0 0308 	sub.w	r3, r0, r8
 8008448:	fa09 f303 	lsl.w	r3, r9, r3
 800844c:	4313      	orrs	r3, r2
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	46a2      	mov	sl, r4
 8008452:	e7d2      	b.n	80083fa <_vfiprintf_r+0xc6>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	1d19      	adds	r1, r3, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	9103      	str	r1, [sp, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfbb      	ittet	lt
 8008460:	425b      	neglt	r3, r3
 8008462:	f042 0202 	orrlt.w	r2, r2, #2
 8008466:	9307      	strge	r3, [sp, #28]
 8008468:	9307      	strlt	r3, [sp, #28]
 800846a:	bfb8      	it	lt
 800846c:	9204      	strlt	r2, [sp, #16]
 800846e:	7823      	ldrb	r3, [r4, #0]
 8008470:	2b2e      	cmp	r3, #46	; 0x2e
 8008472:	d10c      	bne.n	800848e <_vfiprintf_r+0x15a>
 8008474:	7863      	ldrb	r3, [r4, #1]
 8008476:	2b2a      	cmp	r3, #42	; 0x2a
 8008478:	d134      	bne.n	80084e4 <_vfiprintf_r+0x1b0>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	9203      	str	r2, [sp, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	bfb8      	it	lt
 8008486:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800848a:	3402      	adds	r4, #2
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008564 <_vfiprintf_r+0x230>
 8008492:	7821      	ldrb	r1, [r4, #0]
 8008494:	2203      	movs	r2, #3
 8008496:	4650      	mov	r0, sl
 8008498:	f7f7 fe9a 	bl	80001d0 <memchr>
 800849c:	b138      	cbz	r0, 80084ae <_vfiprintf_r+0x17a>
 800849e:	9b04      	ldr	r3, [sp, #16]
 80084a0:	eba0 000a 	sub.w	r0, r0, sl
 80084a4:	2240      	movs	r2, #64	; 0x40
 80084a6:	4082      	lsls	r2, r0
 80084a8:	4313      	orrs	r3, r2
 80084aa:	3401      	adds	r4, #1
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b2:	4829      	ldr	r0, [pc, #164]	; (8008558 <_vfiprintf_r+0x224>)
 80084b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084b8:	2206      	movs	r2, #6
 80084ba:	f7f7 fe89 	bl	80001d0 <memchr>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d03f      	beq.n	8008542 <_vfiprintf_r+0x20e>
 80084c2:	4b26      	ldr	r3, [pc, #152]	; (800855c <_vfiprintf_r+0x228>)
 80084c4:	bb1b      	cbnz	r3, 800850e <_vfiprintf_r+0x1da>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	3307      	adds	r3, #7
 80084ca:	f023 0307 	bic.w	r3, r3, #7
 80084ce:	3308      	adds	r3, #8
 80084d0:	9303      	str	r3, [sp, #12]
 80084d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d4:	443b      	add	r3, r7
 80084d6:	9309      	str	r3, [sp, #36]	; 0x24
 80084d8:	e768      	b.n	80083ac <_vfiprintf_r+0x78>
 80084da:	fb0c 3202 	mla	r2, ip, r2, r3
 80084de:	460c      	mov	r4, r1
 80084e0:	2001      	movs	r0, #1
 80084e2:	e7a6      	b.n	8008432 <_vfiprintf_r+0xfe>
 80084e4:	2300      	movs	r3, #0
 80084e6:	3401      	adds	r4, #1
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	4619      	mov	r1, r3
 80084ec:	f04f 0c0a 	mov.w	ip, #10
 80084f0:	4620      	mov	r0, r4
 80084f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084f6:	3a30      	subs	r2, #48	; 0x30
 80084f8:	2a09      	cmp	r2, #9
 80084fa:	d903      	bls.n	8008504 <_vfiprintf_r+0x1d0>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0c6      	beq.n	800848e <_vfiprintf_r+0x15a>
 8008500:	9105      	str	r1, [sp, #20]
 8008502:	e7c4      	b.n	800848e <_vfiprintf_r+0x15a>
 8008504:	fb0c 2101 	mla	r1, ip, r1, r2
 8008508:	4604      	mov	r4, r0
 800850a:	2301      	movs	r3, #1
 800850c:	e7f0      	b.n	80084f0 <_vfiprintf_r+0x1bc>
 800850e:	ab03      	add	r3, sp, #12
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	462a      	mov	r2, r5
 8008514:	4b12      	ldr	r3, [pc, #72]	; (8008560 <_vfiprintf_r+0x22c>)
 8008516:	a904      	add	r1, sp, #16
 8008518:	4630      	mov	r0, r6
 800851a:	f3af 8000 	nop.w
 800851e:	4607      	mov	r7, r0
 8008520:	1c78      	adds	r0, r7, #1
 8008522:	d1d6      	bne.n	80084d2 <_vfiprintf_r+0x19e>
 8008524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008526:	07d9      	lsls	r1, r3, #31
 8008528:	d405      	bmi.n	8008536 <_vfiprintf_r+0x202>
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	059a      	lsls	r2, r3, #22
 800852e:	d402      	bmi.n	8008536 <_vfiprintf_r+0x202>
 8008530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008532:	f7ff fc45 	bl	8007dc0 <__retarget_lock_release_recursive>
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	065b      	lsls	r3, r3, #25
 800853a:	f53f af1d 	bmi.w	8008378 <_vfiprintf_r+0x44>
 800853e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008540:	e71c      	b.n	800837c <_vfiprintf_r+0x48>
 8008542:	ab03      	add	r3, sp, #12
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	462a      	mov	r2, r5
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <_vfiprintf_r+0x22c>)
 800854a:	a904      	add	r1, sp, #16
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f879 	bl	8008644 <_printf_i>
 8008552:	e7e4      	b.n	800851e <_vfiprintf_r+0x1ea>
 8008554:	08008cfb 	.word	0x08008cfb
 8008558:	08008d05 	.word	0x08008d05
 800855c:	00000000 	.word	0x00000000
 8008560:	0800830f 	.word	0x0800830f
 8008564:	08008d01 	.word	0x08008d01

08008568 <_printf_common>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	4616      	mov	r6, r2
 800856e:	4699      	mov	r9, r3
 8008570:	688a      	ldr	r2, [r1, #8]
 8008572:	690b      	ldr	r3, [r1, #16]
 8008574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008578:	4293      	cmp	r3, r2
 800857a:	bfb8      	it	lt
 800857c:	4613      	movlt	r3, r2
 800857e:	6033      	str	r3, [r6, #0]
 8008580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008584:	4607      	mov	r7, r0
 8008586:	460c      	mov	r4, r1
 8008588:	b10a      	cbz	r2, 800858e <_printf_common+0x26>
 800858a:	3301      	adds	r3, #1
 800858c:	6033      	str	r3, [r6, #0]
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	0699      	lsls	r1, r3, #26
 8008592:	bf42      	ittt	mi
 8008594:	6833      	ldrmi	r3, [r6, #0]
 8008596:	3302      	addmi	r3, #2
 8008598:	6033      	strmi	r3, [r6, #0]
 800859a:	6825      	ldr	r5, [r4, #0]
 800859c:	f015 0506 	ands.w	r5, r5, #6
 80085a0:	d106      	bne.n	80085b0 <_printf_common+0x48>
 80085a2:	f104 0a19 	add.w	sl, r4, #25
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	6832      	ldr	r2, [r6, #0]
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dc26      	bgt.n	80085fe <_printf_common+0x96>
 80085b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085b4:	1e13      	subs	r3, r2, #0
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	bf18      	it	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	0692      	lsls	r2, r2, #26
 80085be:	d42b      	bmi.n	8008618 <_printf_common+0xb0>
 80085c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c4:	4649      	mov	r1, r9
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c0      	blx	r8
 80085ca:	3001      	adds	r0, #1
 80085cc:	d01e      	beq.n	800860c <_printf_common+0xa4>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6922      	ldr	r2, [r4, #16]
 80085d2:	f003 0306 	and.w	r3, r3, #6
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	bf02      	ittt	eq
 80085da:	68e5      	ldreq	r5, [r4, #12]
 80085dc:	6833      	ldreq	r3, [r6, #0]
 80085de:	1aed      	subeq	r5, r5, r3
 80085e0:	68a3      	ldr	r3, [r4, #8]
 80085e2:	bf0c      	ite	eq
 80085e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e8:	2500      	movne	r5, #0
 80085ea:	4293      	cmp	r3, r2
 80085ec:	bfc4      	itt	gt
 80085ee:	1a9b      	subgt	r3, r3, r2
 80085f0:	18ed      	addgt	r5, r5, r3
 80085f2:	2600      	movs	r6, #0
 80085f4:	341a      	adds	r4, #26
 80085f6:	42b5      	cmp	r5, r6
 80085f8:	d11a      	bne.n	8008630 <_printf_common+0xc8>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e008      	b.n	8008610 <_printf_common+0xa8>
 80085fe:	2301      	movs	r3, #1
 8008600:	4652      	mov	r2, sl
 8008602:	4649      	mov	r1, r9
 8008604:	4638      	mov	r0, r7
 8008606:	47c0      	blx	r8
 8008608:	3001      	adds	r0, #1
 800860a:	d103      	bne.n	8008614 <_printf_common+0xac>
 800860c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008614:	3501      	adds	r5, #1
 8008616:	e7c6      	b.n	80085a6 <_printf_common+0x3e>
 8008618:	18e1      	adds	r1, r4, r3
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	2030      	movs	r0, #48	; 0x30
 800861e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008622:	4422      	add	r2, r4
 8008624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800862c:	3302      	adds	r3, #2
 800862e:	e7c7      	b.n	80085c0 <_printf_common+0x58>
 8008630:	2301      	movs	r3, #1
 8008632:	4622      	mov	r2, r4
 8008634:	4649      	mov	r1, r9
 8008636:	4638      	mov	r0, r7
 8008638:	47c0      	blx	r8
 800863a:	3001      	adds	r0, #1
 800863c:	d0e6      	beq.n	800860c <_printf_common+0xa4>
 800863e:	3601      	adds	r6, #1
 8008640:	e7d9      	b.n	80085f6 <_printf_common+0x8e>
	...

08008644 <_printf_i>:
 8008644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	7e0f      	ldrb	r7, [r1, #24]
 800864a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800864c:	2f78      	cmp	r7, #120	; 0x78
 800864e:	4691      	mov	r9, r2
 8008650:	4680      	mov	r8, r0
 8008652:	460c      	mov	r4, r1
 8008654:	469a      	mov	sl, r3
 8008656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800865a:	d807      	bhi.n	800866c <_printf_i+0x28>
 800865c:	2f62      	cmp	r7, #98	; 0x62
 800865e:	d80a      	bhi.n	8008676 <_printf_i+0x32>
 8008660:	2f00      	cmp	r7, #0
 8008662:	f000 80d4 	beq.w	800880e <_printf_i+0x1ca>
 8008666:	2f58      	cmp	r7, #88	; 0x58
 8008668:	f000 80c0 	beq.w	80087ec <_printf_i+0x1a8>
 800866c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008674:	e03a      	b.n	80086ec <_printf_i+0xa8>
 8008676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800867a:	2b15      	cmp	r3, #21
 800867c:	d8f6      	bhi.n	800866c <_printf_i+0x28>
 800867e:	a101      	add	r1, pc, #4	; (adr r1, 8008684 <_printf_i+0x40>)
 8008680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008684:	080086dd 	.word	0x080086dd
 8008688:	080086f1 	.word	0x080086f1
 800868c:	0800866d 	.word	0x0800866d
 8008690:	0800866d 	.word	0x0800866d
 8008694:	0800866d 	.word	0x0800866d
 8008698:	0800866d 	.word	0x0800866d
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	0800866d 	.word	0x0800866d
 80086a4:	0800866d 	.word	0x0800866d
 80086a8:	0800866d 	.word	0x0800866d
 80086ac:	0800866d 	.word	0x0800866d
 80086b0:	080087f5 	.word	0x080087f5
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	080087af 	.word	0x080087af
 80086bc:	0800866d 	.word	0x0800866d
 80086c0:	0800866d 	.word	0x0800866d
 80086c4:	08008817 	.word	0x08008817
 80086c8:	0800866d 	.word	0x0800866d
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800866d 	.word	0x0800866d
 80086d4:	0800866d 	.word	0x0800866d
 80086d8:	080087b7 	.word	0x080087b7
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	1d1a      	adds	r2, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	602a      	str	r2, [r5, #0]
 80086e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ec:	2301      	movs	r3, #1
 80086ee:	e09f      	b.n	8008830 <_printf_i+0x1ec>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	0607      	lsls	r7, r0, #24
 80086f6:	f103 0104 	add.w	r1, r3, #4
 80086fa:	6029      	str	r1, [r5, #0]
 80086fc:	d501      	bpl.n	8008702 <_printf_i+0xbe>
 80086fe:	681e      	ldr	r6, [r3, #0]
 8008700:	e003      	b.n	800870a <_printf_i+0xc6>
 8008702:	0646      	lsls	r6, r0, #25
 8008704:	d5fb      	bpl.n	80086fe <_printf_i+0xba>
 8008706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800870a:	2e00      	cmp	r6, #0
 800870c:	da03      	bge.n	8008716 <_printf_i+0xd2>
 800870e:	232d      	movs	r3, #45	; 0x2d
 8008710:	4276      	negs	r6, r6
 8008712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008716:	485a      	ldr	r0, [pc, #360]	; (8008880 <_printf_i+0x23c>)
 8008718:	230a      	movs	r3, #10
 800871a:	e012      	b.n	8008742 <_printf_i+0xfe>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	6029      	str	r1, [r5, #0]
 8008724:	0605      	lsls	r5, r0, #24
 8008726:	d501      	bpl.n	800872c <_printf_i+0xe8>
 8008728:	681e      	ldr	r6, [r3, #0]
 800872a:	e002      	b.n	8008732 <_printf_i+0xee>
 800872c:	0641      	lsls	r1, r0, #25
 800872e:	d5fb      	bpl.n	8008728 <_printf_i+0xe4>
 8008730:	881e      	ldrh	r6, [r3, #0]
 8008732:	4853      	ldr	r0, [pc, #332]	; (8008880 <_printf_i+0x23c>)
 8008734:	2f6f      	cmp	r7, #111	; 0x6f
 8008736:	bf0c      	ite	eq
 8008738:	2308      	moveq	r3, #8
 800873a:	230a      	movne	r3, #10
 800873c:	2100      	movs	r1, #0
 800873e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008742:	6865      	ldr	r5, [r4, #4]
 8008744:	60a5      	str	r5, [r4, #8]
 8008746:	2d00      	cmp	r5, #0
 8008748:	bfa2      	ittt	ge
 800874a:	6821      	ldrge	r1, [r4, #0]
 800874c:	f021 0104 	bicge.w	r1, r1, #4
 8008750:	6021      	strge	r1, [r4, #0]
 8008752:	b90e      	cbnz	r6, 8008758 <_printf_i+0x114>
 8008754:	2d00      	cmp	r5, #0
 8008756:	d04b      	beq.n	80087f0 <_printf_i+0x1ac>
 8008758:	4615      	mov	r5, r2
 800875a:	fbb6 f1f3 	udiv	r1, r6, r3
 800875e:	fb03 6711 	mls	r7, r3, r1, r6
 8008762:	5dc7      	ldrb	r7, [r0, r7]
 8008764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008768:	4637      	mov	r7, r6
 800876a:	42bb      	cmp	r3, r7
 800876c:	460e      	mov	r6, r1
 800876e:	d9f4      	bls.n	800875a <_printf_i+0x116>
 8008770:	2b08      	cmp	r3, #8
 8008772:	d10b      	bne.n	800878c <_printf_i+0x148>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	07de      	lsls	r6, r3, #31
 8008778:	d508      	bpl.n	800878c <_printf_i+0x148>
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	6861      	ldr	r1, [r4, #4]
 800877e:	4299      	cmp	r1, r3
 8008780:	bfde      	ittt	le
 8008782:	2330      	movle	r3, #48	; 0x30
 8008784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008788:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800878c:	1b52      	subs	r2, r2, r5
 800878e:	6122      	str	r2, [r4, #16]
 8008790:	f8cd a000 	str.w	sl, [sp]
 8008794:	464b      	mov	r3, r9
 8008796:	aa03      	add	r2, sp, #12
 8008798:	4621      	mov	r1, r4
 800879a:	4640      	mov	r0, r8
 800879c:	f7ff fee4 	bl	8008568 <_printf_common>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d14a      	bne.n	800883a <_printf_i+0x1f6>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a8:	b004      	add	sp, #16
 80087aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	f043 0320 	orr.w	r3, r3, #32
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	4833      	ldr	r0, [pc, #204]	; (8008884 <_printf_i+0x240>)
 80087b8:	2778      	movs	r7, #120	; 0x78
 80087ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	6829      	ldr	r1, [r5, #0]
 80087c2:	061f      	lsls	r7, r3, #24
 80087c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087c8:	d402      	bmi.n	80087d0 <_printf_i+0x18c>
 80087ca:	065f      	lsls	r7, r3, #25
 80087cc:	bf48      	it	mi
 80087ce:	b2b6      	uxthmi	r6, r6
 80087d0:	07df      	lsls	r7, r3, #31
 80087d2:	bf48      	it	mi
 80087d4:	f043 0320 	orrmi.w	r3, r3, #32
 80087d8:	6029      	str	r1, [r5, #0]
 80087da:	bf48      	it	mi
 80087dc:	6023      	strmi	r3, [r4, #0]
 80087de:	b91e      	cbnz	r6, 80087e8 <_printf_i+0x1a4>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	f023 0320 	bic.w	r3, r3, #32
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	2310      	movs	r3, #16
 80087ea:	e7a7      	b.n	800873c <_printf_i+0xf8>
 80087ec:	4824      	ldr	r0, [pc, #144]	; (8008880 <_printf_i+0x23c>)
 80087ee:	e7e4      	b.n	80087ba <_printf_i+0x176>
 80087f0:	4615      	mov	r5, r2
 80087f2:	e7bd      	b.n	8008770 <_printf_i+0x12c>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	6826      	ldr	r6, [r4, #0]
 80087f8:	6961      	ldr	r1, [r4, #20]
 80087fa:	1d18      	adds	r0, r3, #4
 80087fc:	6028      	str	r0, [r5, #0]
 80087fe:	0635      	lsls	r5, r6, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	d501      	bpl.n	8008808 <_printf_i+0x1c4>
 8008804:	6019      	str	r1, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0x1ca>
 8008808:	0670      	lsls	r0, r6, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0x1c0>
 800880c:	8019      	strh	r1, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	4615      	mov	r5, r2
 8008814:	e7bc      	b.n	8008790 <_printf_i+0x14c>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	602a      	str	r2, [r5, #0]
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	2100      	movs	r1, #0
 8008822:	4628      	mov	r0, r5
 8008824:	f7f7 fcd4 	bl	80001d0 <memchr>
 8008828:	b108      	cbz	r0, 800882e <_printf_i+0x1ea>
 800882a:	1b40      	subs	r0, r0, r5
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008838:	e7aa      	b.n	8008790 <_printf_i+0x14c>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	462a      	mov	r2, r5
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d0ad      	beq.n	80087a4 <_printf_i+0x160>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d413      	bmi.n	8008876 <_printf_i+0x232>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	bfb8      	it	lt
 8008856:	4618      	movlt	r0, r3
 8008858:	e7a6      	b.n	80087a8 <_printf_i+0x164>
 800885a:	2301      	movs	r3, #1
 800885c:	4632      	mov	r2, r6
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d09d      	beq.n	80087a4 <_printf_i+0x160>
 8008868:	3501      	adds	r5, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9903      	ldr	r1, [sp, #12]
 800886e:	1a5b      	subs	r3, r3, r1
 8008870:	42ab      	cmp	r3, r5
 8008872:	dcf2      	bgt.n	800885a <_printf_i+0x216>
 8008874:	e7eb      	b.n	800884e <_printf_i+0x20a>
 8008876:	2500      	movs	r5, #0
 8008878:	f104 0619 	add.w	r6, r4, #25
 800887c:	e7f5      	b.n	800886a <_printf_i+0x226>
 800887e:	bf00      	nop
 8008880:	08008d0c 	.word	0x08008d0c
 8008884:	08008d1d 	.word	0x08008d1d

08008888 <__swbuf_r>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	460e      	mov	r6, r1
 800888c:	4614      	mov	r4, r2
 800888e:	4605      	mov	r5, r0
 8008890:	b118      	cbz	r0, 800889a <__swbuf_r+0x12>
 8008892:	6a03      	ldr	r3, [r0, #32]
 8008894:	b90b      	cbnz	r3, 800889a <__swbuf_r+0x12>
 8008896:	f7ff fa29 	bl	8007cec <__sinit>
 800889a:	69a3      	ldr	r3, [r4, #24]
 800889c:	60a3      	str	r3, [r4, #8]
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	071a      	lsls	r2, r3, #28
 80088a2:	d525      	bpl.n	80088f0 <__swbuf_r+0x68>
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	b31b      	cbz	r3, 80088f0 <__swbuf_r+0x68>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	6922      	ldr	r2, [r4, #16]
 80088ac:	1a98      	subs	r0, r3, r2
 80088ae:	6963      	ldr	r3, [r4, #20]
 80088b0:	b2f6      	uxtb	r6, r6
 80088b2:	4283      	cmp	r3, r0
 80088b4:	4637      	mov	r7, r6
 80088b6:	dc04      	bgt.n	80088c2 <__swbuf_r+0x3a>
 80088b8:	4621      	mov	r1, r4
 80088ba:	4628      	mov	r0, r5
 80088bc:	f7ff fbdc 	bl	8008078 <_fflush_r>
 80088c0:	b9e0      	cbnz	r0, 80088fc <__swbuf_r+0x74>
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	60a3      	str	r3, [r4, #8]
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	701e      	strb	r6, [r3, #0]
 80088d0:	6962      	ldr	r2, [r4, #20]
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d004      	beq.n	80088e2 <__swbuf_r+0x5a>
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	07db      	lsls	r3, r3, #31
 80088dc:	d506      	bpl.n	80088ec <__swbuf_r+0x64>
 80088de:	2e0a      	cmp	r6, #10
 80088e0:	d104      	bne.n	80088ec <__swbuf_r+0x64>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	f7ff fbc7 	bl	8008078 <_fflush_r>
 80088ea:	b938      	cbnz	r0, 80088fc <__swbuf_r+0x74>
 80088ec:	4638      	mov	r0, r7
 80088ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f0:	4621      	mov	r1, r4
 80088f2:	4628      	mov	r0, r5
 80088f4:	f000 f806 	bl	8008904 <__swsetup_r>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d0d5      	beq.n	80088a8 <__swbuf_r+0x20>
 80088fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008900:	e7f4      	b.n	80088ec <__swbuf_r+0x64>
	...

08008904 <__swsetup_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4b2a      	ldr	r3, [pc, #168]	; (80089b0 <__swsetup_r+0xac>)
 8008908:	4605      	mov	r5, r0
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	460c      	mov	r4, r1
 800890e:	b118      	cbz	r0, 8008918 <__swsetup_r+0x14>
 8008910:	6a03      	ldr	r3, [r0, #32]
 8008912:	b90b      	cbnz	r3, 8008918 <__swsetup_r+0x14>
 8008914:	f7ff f9ea 	bl	8007cec <__sinit>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800891e:	0718      	lsls	r0, r3, #28
 8008920:	d422      	bmi.n	8008968 <__swsetup_r+0x64>
 8008922:	06d9      	lsls	r1, r3, #27
 8008924:	d407      	bmi.n	8008936 <__swsetup_r+0x32>
 8008926:	2309      	movs	r3, #9
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008934:	e034      	b.n	80089a0 <__swsetup_r+0x9c>
 8008936:	0758      	lsls	r0, r3, #29
 8008938:	d512      	bpl.n	8008960 <__swsetup_r+0x5c>
 800893a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800893c:	b141      	cbz	r1, 8008950 <__swsetup_r+0x4c>
 800893e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008942:	4299      	cmp	r1, r3
 8008944:	d002      	beq.n	800894c <__swsetup_r+0x48>
 8008946:	4628      	mov	r0, r5
 8008948:	f7ff fc7e 	bl	8008248 <_free_r>
 800894c:	2300      	movs	r3, #0
 800894e:	6363      	str	r3, [r4, #52]	; 0x34
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	2300      	movs	r3, #0
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f043 0308 	orr.w	r3, r3, #8
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	b94b      	cbnz	r3, 8008980 <__swsetup_r+0x7c>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008976:	d003      	beq.n	8008980 <__swsetup_r+0x7c>
 8008978:	4621      	mov	r1, r4
 800897a:	4628      	mov	r0, r5
 800897c:	f000 f840 	bl	8008a00 <__smakebuf_r>
 8008980:	89a0      	ldrh	r0, [r4, #12]
 8008982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008986:	f010 0301 	ands.w	r3, r0, #1
 800898a:	d00a      	beq.n	80089a2 <__swsetup_r+0x9e>
 800898c:	2300      	movs	r3, #0
 800898e:	60a3      	str	r3, [r4, #8]
 8008990:	6963      	ldr	r3, [r4, #20]
 8008992:	425b      	negs	r3, r3
 8008994:	61a3      	str	r3, [r4, #24]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	b943      	cbnz	r3, 80089ac <__swsetup_r+0xa8>
 800899a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800899e:	d1c4      	bne.n	800892a <__swsetup_r+0x26>
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	0781      	lsls	r1, r0, #30
 80089a4:	bf58      	it	pl
 80089a6:	6963      	ldrpl	r3, [r4, #20]
 80089a8:	60a3      	str	r3, [r4, #8]
 80089aa:	e7f4      	b.n	8008996 <__swsetup_r+0x92>
 80089ac:	2000      	movs	r0, #0
 80089ae:	e7f7      	b.n	80089a0 <__swsetup_r+0x9c>
 80089b0:	20000068 	.word	0x20000068

080089b4 <__swhatbuf_r>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	460c      	mov	r4, r1
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	2900      	cmp	r1, #0
 80089be:	b096      	sub	sp, #88	; 0x58
 80089c0:	4615      	mov	r5, r2
 80089c2:	461e      	mov	r6, r3
 80089c4:	da0d      	bge.n	80089e2 <__swhatbuf_r+0x2e>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80089cc:	f04f 0100 	mov.w	r1, #0
 80089d0:	bf0c      	ite	eq
 80089d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80089d6:	2340      	movne	r3, #64	; 0x40
 80089d8:	2000      	movs	r0, #0
 80089da:	6031      	str	r1, [r6, #0]
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	b016      	add	sp, #88	; 0x58
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	466a      	mov	r2, sp
 80089e4:	f000 f848 	bl	8008a78 <_fstat_r>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	dbec      	blt.n	80089c6 <__swhatbuf_r+0x12>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089f6:	4259      	negs	r1, r3
 80089f8:	4159      	adcs	r1, r3
 80089fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fe:	e7eb      	b.n	80089d8 <__swhatbuf_r+0x24>

08008a00 <__smakebuf_r>:
 8008a00:	898b      	ldrh	r3, [r1, #12]
 8008a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a04:	079d      	lsls	r5, r3, #30
 8008a06:	4606      	mov	r6, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	d507      	bpl.n	8008a1c <__smakebuf_r+0x1c>
 8008a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	2301      	movs	r3, #1
 8008a16:	6163      	str	r3, [r4, #20]
 8008a18:	b002      	add	sp, #8
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	ab01      	add	r3, sp, #4
 8008a1e:	466a      	mov	r2, sp
 8008a20:	f7ff ffc8 	bl	80089b4 <__swhatbuf_r>
 8008a24:	9900      	ldr	r1, [sp, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7ff fa1f 	bl	8007e6c <_malloc_r>
 8008a2e:	b948      	cbnz	r0, 8008a44 <__smakebuf_r+0x44>
 8008a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a34:	059a      	lsls	r2, r3, #22
 8008a36:	d4ef      	bmi.n	8008a18 <__smakebuf_r+0x18>
 8008a38:	f023 0303 	bic.w	r3, r3, #3
 8008a3c:	f043 0302 	orr.w	r3, r3, #2
 8008a40:	81a3      	strh	r3, [r4, #12]
 8008a42:	e7e3      	b.n	8008a0c <__smakebuf_r+0xc>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	6020      	str	r0, [r4, #0]
 8008a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	9b00      	ldr	r3, [sp, #0]
 8008a50:	6163      	str	r3, [r4, #20]
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	6120      	str	r0, [r4, #16]
 8008a56:	b15b      	cbz	r3, 8008a70 <__smakebuf_r+0x70>
 8008a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 f81d 	bl	8008a9c <_isatty_r>
 8008a62:	b128      	cbz	r0, 8008a70 <__smakebuf_r+0x70>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	f043 0301 	orr.w	r3, r3, #1
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	431d      	orrs	r5, r3
 8008a74:	81a5      	strh	r5, [r4, #12]
 8008a76:	e7cf      	b.n	8008a18 <__smakebuf_r+0x18>

08008a78 <_fstat_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_fstat_r+0x20>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f7f9 fc42 	bl	800230e <_fstat>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d102      	bne.n	8008a94 <_fstat_r+0x1c>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	b103      	cbz	r3, 8008a94 <_fstat_r+0x1c>
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	200048d4 	.word	0x200048d4

08008a9c <_isatty_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	; (8008ab8 <_isatty_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f9 fc41 	bl	800232e <_isatty>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_isatty_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_isatty_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	200048d4 	.word	0x200048d4

08008abc <_raise_r>:
 8008abc:	291f      	cmp	r1, #31
 8008abe:	b538      	push	{r3, r4, r5, lr}
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	d904      	bls.n	8008ad0 <_raise_r+0x14>
 8008ac6:	2316      	movs	r3, #22
 8008ac8:	6003      	str	r3, [r0, #0]
 8008aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ad2:	b112      	cbz	r2, 8008ada <_raise_r+0x1e>
 8008ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad8:	b94b      	cbnz	r3, 8008aee <_raise_r+0x32>
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 f830 	bl	8008b40 <_getpid_r>
 8008ae0:	462a      	mov	r2, r5
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aea:	f000 b817 	b.w	8008b1c <_kill_r>
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d00a      	beq.n	8008b08 <_raise_r+0x4c>
 8008af2:	1c59      	adds	r1, r3, #1
 8008af4:	d103      	bne.n	8008afe <_raise_r+0x42>
 8008af6:	2316      	movs	r3, #22
 8008af8:	6003      	str	r3, [r0, #0]
 8008afa:	2001      	movs	r0, #1
 8008afc:	e7e7      	b.n	8008ace <_raise_r+0x12>
 8008afe:	2400      	movs	r4, #0
 8008b00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b04:	4628      	mov	r0, r5
 8008b06:	4798      	blx	r3
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7e0      	b.n	8008ace <_raise_r+0x12>

08008b0c <raise>:
 8008b0c:	4b02      	ldr	r3, [pc, #8]	; (8008b18 <raise+0xc>)
 8008b0e:	4601      	mov	r1, r0
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	f7ff bfd3 	b.w	8008abc <_raise_r>
 8008b16:	bf00      	nop
 8008b18:	20000068 	.word	0x20000068

08008b1c <_kill_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d07      	ldr	r5, [pc, #28]	; (8008b3c <_kill_r+0x20>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	f7f9 fb91 	bl	8002250 <_kill>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d102      	bne.n	8008b38 <_kill_r+0x1c>
 8008b32:	682b      	ldr	r3, [r5, #0]
 8008b34:	b103      	cbz	r3, 8008b38 <_kill_r+0x1c>
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	bd38      	pop	{r3, r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200048d4 	.word	0x200048d4

08008b40 <_getpid_r>:
 8008b40:	f7f9 bb7e 	b.w	8002240 <_getpid>

08008b44 <_init>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr

08008b50 <_fini>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr
