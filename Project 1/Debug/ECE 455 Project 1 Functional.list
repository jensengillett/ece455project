
ECE 455 Project 1 Functional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000088bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008a4c  08008a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c4c  08008c4c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c54  08008c54  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004870  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200048dc  200048dc  0002006c  2**0
=======
  1 .text         00007794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b10  08007b10  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b18  08007b18  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004280  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042ec  200042ec  0002006c  2**0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 14 .debug_info   00014eab  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000343a  00000000  00000000  00034f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001428  00000000  00000000  000383c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f83  00000000  00000000  000397f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025271  00000000  00000000  0003a773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015d83  00000000  00000000  0005f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2996  00000000  00000000  00075767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e68  00000000  00000000  00158100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0015df68  2**0
=======
 14 .debug_info   00014d23  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003284  00000000  00000000  00034e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001310  00000000  00000000  00038088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eaa  00000000  00000000  00039398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000251ab  00000000  00000000  0003a242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001595a  00000000  00000000  0005f3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2476  00000000  00000000  00074d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000059d0  00000000  00000000  001571c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0015cb90  2**0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001b0:	08008a34 	.word	0x08008a34
=======
 80001b0:	0800790c 	.word	0x0800790c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
<<<<<<< HEAD
 80001cc:	08008a34 	.word	0x08008a34
=======
 80001cc:	0800790c 	.word	0x0800790c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000088 	.word	0x20000088
 8000dd8:	20000128 	.word	0x20000128

08000ddc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <vApplicationGetTimerTaskMemory+0x2c>)
 8000dec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <vApplicationGetTimerTaskMemory+0x30>)
 8000df2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	200002dc 	.word	0x200002dc
 8000e0c:	20000330 	.word	0x20000330

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b0d0      	sub	sp, #320	; 0x140
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	srand(314159);
<<<<<<< HEAD
 8000e16:	48ab      	ldr	r0, [pc, #684]	; (80010c4 <main+0x2b4>)
 8000e18:	f006 fde8 	bl	80079ec <srand>
=======
 8000de2:	4870      	ldr	r0, [pc, #448]	; (8000fa4 <main+0x1c8>)
 8000de4:	f005 fd1a 	bl	800681c <srand>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000e1c:	f001 faca 	bl	80023b4 <HAL_Init>
=======
 8000de8:	f001 f84a 	bl	8001e80 <HAL_Init>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f98a 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fb1a 	bl	800145c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e28:	f000 fa42 	bl	80012b0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000e2c:	f000 f9ee 	bl	800120c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e30:	f000 fa74 	bl	800131c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e34:	f000 fac4 	bl	80013c0 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of cars_array_mutex */
  osMutexDef(cars_array_mutex);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  cars_array_mutexHandle = osMutexCreate(osMutex(cars_array_mutex));
<<<<<<< HEAD
 8000e44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fbd3 	bl	80045f4 <osMutexCreate>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a9d      	ldr	r2, [pc, #628]	; (80010c8 <main+0x2b8>)
 8000e52:	6013      	str	r3, [r2, #0]
=======
 8000e08:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 ff4e 	bl	8003cae <osMutexCreate>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a64      	ldr	r2, [pc, #400]	; (8000fa8 <main+0x1cc>)
 8000e16:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of traffic_rate_2_mutex */
  osMutexDef(traffic_rate_2_mutex);
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  traffic_rate_2_mutexHandle = osMutexCreate(osMutex(traffic_rate_2_mutex));
<<<<<<< HEAD
 8000e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fbc5 	bl	80045f4 <osMutexCreate>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a97      	ldr	r2, [pc, #604]	; (80010cc <main+0x2bc>)
 8000e6e:	6013      	str	r3, [r2, #0]
=======
 8000e24:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 ff40 	bl	8003cae <osMutexCreate>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a5e      	ldr	r2, [pc, #376]	; (8000fac <main+0x1d0>)
 8000e32:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of light_status_mutex */
  osMutexDef(light_status_mutex);
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  light_status_mutexHandle = osMutexCreate(osMutex(light_status_mutex));
<<<<<<< HEAD
 8000e7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fbb7 	bl	80045f4 <osMutexCreate>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a91      	ldr	r2, [pc, #580]	; (80010d0 <main+0x2c0>)
 8000e8a:	6013      	str	r3, [r2, #0]
=======
 8000e40:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 ff32 	bl	8003cae <osMutexCreate>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a58      	ldr	r2, [pc, #352]	; (8000fb0 <main+0x1d4>)
 8000e4e:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of traffic_rate_1_mutex */
  osMutexDef(traffic_rate_1_mutex);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  traffic_rate_1_mutexHandle = osMutexCreate(osMutex(traffic_rate_1_mutex));
<<<<<<< HEAD
 8000e98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fba9 	bl	80045f4 <osMutexCreate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a8b      	ldr	r2, [pc, #556]	; (80010d4 <main+0x2c4>)
 8000ea6:	6013      	str	r3, [r2, #0]

  /* definition and creation of car_timing_mutex */
  osMutexDef(car_timing_mutex);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  car_timing_mutexHandle = osMutexCreate(osMutex(car_timing_mutex));
 8000eb4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fb9b 	bl	80045f4 <osMutexCreate>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a85      	ldr	r2, [pc, #532]	; (80010d8 <main+0x2c8>)
 8000ec2:	6013      	str	r3, [r2, #0]

  /* definition and creation of pot_timer_mutex */
  osMutexDef(pot_timer_mutex);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  pot_timer_mutexHandle = osMutexCreate(osMutex(pot_timer_mutex));
 8000ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fb8d 	bl	80045f4 <osMutexCreate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a7f      	ldr	r2, [pc, #508]	; (80010dc <main+0x2cc>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_timer_mutex */
  osMutexDef(light_timer_mutex);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  light_timer_mutexHandle = osMutexCreate(osMutex(light_timer_mutex));
 8000eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fb7f 	bl	80045f4 <osMutexCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a79      	ldr	r2, [pc, #484]	; (80010e0 <main+0x2d0>)
 8000efa:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of car_movement_timer */
  osTimerDef(car_movement_timer, car_movement_callback);
 8000efc:	4b79      	ldr	r3, [pc, #484]	; (80010e4 <main+0x2d4>)
 8000efe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  car_movement_timerHandle = osTimerCreate(osTimer(car_movement_timer), osTimerPeriodic, NULL);
 8000f08:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fb3b 	bl	800458c <osTimerCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a73      	ldr	r2, [pc, #460]	; (80010e8 <main+0x2d8>)
 8000f1a:	6013      	str	r3, [r2, #0]
=======
 8000e5c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 ff24 	bl	8003cae <osMutexCreate>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <main+0x1d8>)
 8000e6a:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of traffic_queue_1 */
  osMessageQDef(traffic_queue_1, 16, uint16_t);
 8000f1c:	4b73      	ldr	r3, [pc, #460]	; (80010ec <main+0x2dc>)
 8000f1e:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_1Handle = osMessageCreate(osMessageQ(traffic_queue_1), NULL);
<<<<<<< HEAD
 8000f28:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fbfc 	bl	800472c <osMessageCreate>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a6e      	ldr	r2, [pc, #440]	; (80010f0 <main+0x2e0>)
 8000f38:	6013      	str	r3, [r2, #0]
=======
 8000e78:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 ffb2 	bl	8003de8 <osMessageCreate>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <main+0x1e0>)
 8000e88:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of traffic_queue_2 */
  osMessageQDef(traffic_queue_2, 16, uint16_t);
 8000f3a:	4b6c      	ldr	r3, [pc, #432]	; (80010ec <main+0x2dc>)
 8000f3c:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  traffic_queue_2Handle = osMessageCreate(osMessageQ(traffic_queue_2), NULL);
<<<<<<< HEAD
 8000f46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fbed 	bl	800472c <osMessageCreate>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a67      	ldr	r2, [pc, #412]	; (80010f4 <main+0x2e4>)
 8000f56:	6013      	str	r3, [r2, #0]
=======
 8000e96:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 ffa3 	bl	8003de8 <osMessageCreate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <main+0x1e4>)
 8000ea6:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of cars_array_queue */
  osMessageQDef(cars_array_queue, 16, uint32_t);
 8000f58:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <main+0x2e8>)
 8000f5a:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cars_array_queueHandle = osMessageCreate(osMessageQ(cars_array_queue), NULL);
<<<<<<< HEAD
 8000f64:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fbde 	bl	800472c <osMessageCreate>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a62      	ldr	r2, [pc, #392]	; (80010fc <main+0x2ec>)
 8000f74:	6013      	str	r3, [r2, #0]
=======
 8000eb4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 ff94 	bl	8003de8 <osMessageCreate>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <main+0x1ec>)
 8000ec4:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of light_status_queue */
  osMessageQDef(light_status_queue, 16, uint16_t);
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <main+0x2dc>)
 8000f78:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_status_queueHandle = osMessageCreate(osMessageQ(light_status_queue), NULL);
<<<<<<< HEAD
 8000f82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fbcf 	bl	800472c <osMessageCreate>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a5b      	ldr	r2, [pc, #364]	; (8001100 <main+0x2f0>)
 8000f92:	6013      	str	r3, [r2, #0]

  /* definition and creation of car_timer_queue */
  osMessageQDef(car_timer_queue, 16, uint16_t);
 8000f94:	4b55      	ldr	r3, [pc, #340]	; (80010ec <main+0x2dc>)
 8000f96:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  car_timer_queueHandle = osMessageCreate(osMessageQ(car_timer_queue), NULL);
 8000fa0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fbc0 	bl	800472c <osMessageCreate>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a55      	ldr	r2, [pc, #340]	; (8001104 <main+0x2f4>)
 8000fb0:	6013      	str	r3, [r2, #0]

  /* definition and creation of pot_timer_queue */
  osMessageQDef(pot_timer_queue, 16, uint16_t);
 8000fb2:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <main+0x2dc>)
 8000fb4:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pot_timer_queueHandle = osMessageCreate(osMessageQ(pot_timer_queue), NULL);
 8000fbe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 fbb1 	bl	800472c <osMessageCreate>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <main+0x2f8>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* definition and creation of light_timer_queue */
  osMessageQDef(light_timer_queue, 16, uint16_t);
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <main+0x2dc>)
 8000fd2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_timer_queueHandle = osMessageCreate(osMessageQ(light_timer_queue), NULL);
 8000fdc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fba2 	bl	800472c <osMessageCreate>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a48      	ldr	r2, [pc, #288]	; (800110c <main+0x2fc>)
 8000fec:	6013      	str	r3, [r2, #0]
=======
 8000ed2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 ff85 	bl	8003de8 <osMessageCreate>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <main+0x1f0>)
 8000ee2:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fee:	4b48      	ldr	r3, [pc, #288]	; (8001110 <main+0x300>)
 8000ff0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
<<<<<<< HEAD
 8001002:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f003 fa5e 	bl	80044ca <osThreadCreate>
 800100e:	4603      	mov	r3, r0
 8001010:	4a40      	ldr	r2, [pc, #256]	; (8001114 <main+0x304>)
 8001012:	6013      	str	r3, [r2, #0]
=======
 8000ef8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fe75 	bl	8003bee <osThreadCreate>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <main+0x1f8>)
 8000f08:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of traffic_generat */
  osThreadDef(traffic_generat, TrafficGeneration, osPriorityIdle, 0, 128);
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <main+0x308>)
 8001016:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800101a:	461d      	mov	r5, r3
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001024:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  traffic_generatHandle = osThreadCreate(osThread(traffic_generat), NULL);
<<<<<<< HEAD
 8001028:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fa4b 	bl	80044ca <osThreadCreate>
 8001034:	4603      	mov	r3, r0
 8001036:	4a39      	ldr	r2, [pc, #228]	; (800111c <main+0x30c>)
 8001038:	6013      	str	r3, [r2, #0]
=======
 8000f1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 fe62 	bl	8003bee <osThreadCreate>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <main+0x200>)
 8000f2e:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of adjust_flow */
  osThreadDef(adjust_flow, AdjustFlow, osPriorityIdle, 0, 128);
 800103a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800103e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001042:	4a37      	ldr	r2, [pc, #220]	; (8001120 <main+0x310>)
 8001044:	461c      	mov	r4, r3
 8001046:	4615      	mov	r5, r2
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adjust_flowHandle = osThreadCreate(osThread(adjust_flow), NULL);
<<<<<<< HEAD
 8001054:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fa35 	bl	80044ca <osThreadCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <main+0x314>)
 8001064:	6013      	str	r3, [r2, #0]
=======
 8000f44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fe4f 	bl	8003bee <osThreadCreate>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <main+0x208>)
 8000f54:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of light_state */
  osThreadDef(light_state, LightState, osPriorityIdle, 0, 128);
 8001066:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800106a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <main+0x318>)
 8001070:	461c      	mov	r4, r3
 8001072:	4615      	mov	r5, r2
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  light_stateHandle = osThreadCreate(osThread(light_state), NULL);
<<<<<<< HEAD
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fa1f 	bl	80044ca <osThreadCreate>
 800108c:	4603      	mov	r3, r0
 800108e:	4a27      	ldr	r2, [pc, #156]	; (800112c <main+0x31c>)
 8001090:	6013      	str	r3, [r2, #0]
=======
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fe3c 	bl	8003bee <osThreadCreate>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <main+0x210>)
 8000f7a:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* definition and creation of sys_manage */
  osThreadDef(sys_manage, SysManage, osPriorityIdle, 0, 128);
 8001092:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001096:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <main+0x320>)
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sys_manageHandle = osThreadCreate(osThread(sys_manage), NULL);
<<<<<<< HEAD
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fa0a 	bl	80044ca <osThreadCreate>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <main+0x324>)
 80010ba:	6013      	str	r3, [r2, #0]
=======
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fe2b 	bl	8003bee <osThreadCreate>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <main+0x218>)
 8000f9c:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 80010bc:	f003 f9fe 	bl	80044bc <osKernelStart>
=======
 8000f9e:	f002 fe1f 	bl	8003be0 <osKernelStart>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
<<<<<<< HEAD
 80010c0:	e7fe      	b.n	80010c0 <main+0x2b0>
 80010c2:	bf00      	nop
 80010c4:	0004cb2f 	.word	0x0004cb2f
 80010c8:	20000894 	.word	0x20000894
 80010cc:	20000898 	.word	0x20000898
 80010d0:	2000089c 	.word	0x2000089c
 80010d4:	200008a0 	.word	0x200008a0
 80010d8:	200008a4 	.word	0x200008a4
 80010dc:	200008a8 	.word	0x200008a8
 80010e0:	200008ac 	.word	0x200008ac
 80010e4:	08001da9 	.word	0x08001da9
 80010e8:	20000890 	.word	0x20000890
 80010ec:	08008a4c 	.word	0x08008a4c
 80010f0:	20000874 	.word	0x20000874
 80010f4:	20000878 	.word	0x20000878
 80010f8:	08008a5c 	.word	0x08008a5c
 80010fc:	2000087c 	.word	0x2000087c
 8001100:	20000880 	.word	0x20000880
 8001104:	20000884 	.word	0x20000884
 8001108:	20000888 	.word	0x20000888
 800110c:	2000088c 	.word	0x2000088c
 8001110:	08008a78 	.word	0x08008a78
 8001114:	20000860 	.word	0x20000860
 8001118:	08008aa4 	.word	0x08008aa4
 800111c:	20000864 	.word	0x20000864
 8001120:	08008acc 	.word	0x08008acc
 8001124:	20000868 	.word	0x20000868
 8001128:	08008af4 	.word	0x08008af4
 800112c:	2000086c 	.word	0x2000086c
 8001130:	08008b1c 	.word	0x08008b1c
 8001134:	20000870 	.word	0x20000870

08001138 <SystemClock_Config>:
=======
 8000fa2:	e7fe      	b.n	8000fa2 <main+0x1c6>
 8000fa4:	0004cb2f 	.word	0x0004cb2f
 8000fa8:	200003ec 	.word	0x200003ec
 8000fac:	200003f0 	.word	0x200003f0
 8000fb0:	200003f4 	.word	0x200003f4
 8000fb4:	200003f8 	.word	0x200003f8
 8000fb8:	08007924 	.word	0x08007924
 8000fbc:	200003dc 	.word	0x200003dc
 8000fc0:	200003e0 	.word	0x200003e0
 8000fc4:	08007934 	.word	0x08007934
 8000fc8:	200003e4 	.word	0x200003e4
 8000fcc:	200003e8 	.word	0x200003e8
 8000fd0:	08007950 	.word	0x08007950
 8000fd4:	200003c8 	.word	0x200003c8
 8000fd8:	0800797c 	.word	0x0800797c
 8000fdc:	200003cc 	.word	0x200003cc
 8000fe0:	080079a4 	.word	0x080079a4
 8000fe4:	200003d0 	.word	0x200003d0
 8000fe8:	080079cc 	.word	0x080079cc
 8000fec:	200003d4 	.word	0x200003d4
 8000ff0:	080079f4 	.word	0x080079f4
 8000ff4:	200003d8 	.word	0x200003d8

08000ff8 <SystemClock_Config>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f006 fd7e 	bl	8007c48 <memset>
=======
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f005 fd79 	bl	8006afe <memset>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <SystemClock_Config+0xcc>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xd0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a8:	2308      	movs	r3, #8
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ff9e 	bl	8003100 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ca:	f000 fe4f 	bl	8001e6c <Error_Handler>
=======
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fda4 	bl	8002bcc <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800108a:	f000 fc9d 	bl	80019c8 <Error_Handler>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
<<<<<<< HEAD
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2105      	movs	r1, #5
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 f9ff 	bl	80035f0 <HAL_RCC_ClockConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f8:	f000 fe38 	bl	8001e6c <Error_Handler>
=======
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2105      	movs	r1, #5
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 f805 	bl	80030bc <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b8:	f000 fc86 	bl	80019c8 <Error_Handler>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
}
 80011fc:	bf00      	nop
 80011fe:	3750      	adds	r7, #80	; 0x50
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC1_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC1_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC1_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC1_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
<<<<<<< HEAD
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC1_Init+0x98>)
 800126e:	f001 f8e3 	bl	8002438 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 fdf8 	bl	8001e6c <Error_Handler>
=======
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_ADC1_Init+0x98>)
 800112e:	f000 fee9 	bl	8001f04 <HAL_ADC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001138:	f000 fc46 	bl	80019c8 <Error_Handler>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800127c:	230d      	movs	r3, #13
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
<<<<<<< HEAD
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC1_Init+0x98>)
 800128e:	f001 fa81 	bl	8002794 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 fde8 	bl	8001e6c <Error_Handler>
=======
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_ADC1_Init+0x98>)
 800114e:	f001 f887 	bl	8002260 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 fc36 	bl	80019c8 <Error_Handler>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000730 	.word	0x20000730
 80012a8:	40012000 	.word	0x40012000
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <MX_SPI1_Init>:
=======
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000328 	.word	0x20000328
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_SPI1_Init>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_SPI1_Init+0x64>)
 80012b6:	4a18      	ldr	r2, [pc, #96]	; (8001318 <MX_SPI1_Init+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_SPI1_Init+0x64>)
 80012bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_SPI1_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_SPI1_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_SPI1_Init+0x64>)
 80012dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_SPI1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_SPI1_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_SPI1_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_SPI1_Init+0x64>)
 80012fc:	220a      	movs	r2, #10
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
<<<<<<< HEAD
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_SPI1_Init+0x64>)
 8001302:	f002 fbb3 	bl	8003a6c <HAL_SPI_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800130c:	f000 fdae 	bl	8001e6c <Error_Handler>
=======
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_SPI1_Init+0x64>)
 80011c2:	f002 f9b9 	bl	8003538 <HAL_SPI_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011cc:	f000 fbfc 	bl	80019c8 <Error_Handler>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000778 	.word	0x20000778
 8001318:	40013000 	.word	0x40013000

0800131c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_TIM1_Init+0x9c>)
 800133a:	4a20      	ldr	r2, [pc, #128]	; (80013bc <MX_TIM1_Init+0xa0>)
 800133c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_TIM1_Init+0x9c>)
 8001340:	f242 720f 	movw	r2, #9999	; 0x270f
 8001344:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_TIM1_Init+0x9c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8599;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_TIM1_Init+0x9c>)
 800134e:	f242 1297 	movw	r2, #8599	; 0x2197
 8001352:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM1_Init+0x9c>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_TIM1_Init+0x9c>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM1_Init+0x9c>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_TIM1_Init+0x9c>)
 8001368:	f002 fc09 	bl	8003b7e <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001372:	f000 fd7b 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_TIM1_Init+0x9c>)
 8001384:	f002 fdaa 	bl	8003edc <HAL_TIM_ConfigClockSource>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800138e:	f000 fd6d 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_TIM1_Init+0x9c>)
 80013a0:	f002 ffd2 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80013aa:	f000 fd5f 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200007d0 	.word	0x200007d0
 80013bc:	40010000 	.word	0x40010000

080013c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM3_Init+0x94>)
 80013de:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <MX_TIM3_Init+0x98>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8599;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM3_Init+0x94>)
 80013e4:	f242 1297 	movw	r2, #8599	; 0x2197
 80013e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM3_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_TIM3_Init+0x94>)
 80013f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM3_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM3_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_TIM3_Init+0x94>)
 8001406:	f002 fbba 	bl	8003b7e <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001410:	f000 fd2c 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM3_Init+0x94>)
 8001422:	f002 fd5b 	bl	8003edc <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 fd1e 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM3_Init+0x94>)
 800143e:	f002 ff83 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001448:	f000 fd10 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
=======
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000370 	.word	0x20000370
 80011d8:	40013000 	.word	0x40013000
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000818 	.word	0x20000818
 8001458:	40000400 	.word	0x40000400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <MX_GPIO_Init+0x134>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a45      	ldr	r2, [pc, #276]	; (8001590 <MX_GPIO_Init+0x134>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <MX_GPIO_Init+0x134>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <MX_GPIO_Init+0x134>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <MX_GPIO_Init+0x134>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <MX_GPIO_Init+0x134>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_GPIO_Init+0x134>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a37      	ldr	r2, [pc, #220]	; (8001590 <MX_GPIO_Init+0x134>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b35      	ldr	r3, [pc, #212]	; (8001590 <MX_GPIO_Init+0x134>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_GPIO_Init+0x134>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <MX_GPIO_Init+0x134>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_GPIO_Init+0x134>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <MX_GPIO_Init+0x134>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a29      	ldr	r2, [pc, #164]	; (8001590 <MX_GPIO_Init+0x134>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <MX_GPIO_Init+0x134>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
<<<<<<< HEAD
 80014fe:	2200      	movs	r2, #0
 8001500:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001504:	4823      	ldr	r0, [pc, #140]	; (8001594 <MX_GPIO_Init+0x138>)
 8001506:	f001 fde1 	bl	80030cc <HAL_GPIO_WritePin>
=======
 800127e:	2200      	movs	r2, #0
 8001280:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001284:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_GPIO_Init+0x138>)
 8001286:	f001 fc87 	bl	8002b98 <HAL_GPIO_WritePin>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <MX_GPIO_Init+0x13c>)
 8001512:	f001 fddb 	bl	80030cc <HAL_GPIO_WritePin>
=======
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001290:	4821      	ldr	r0, [pc, #132]	; (8001318 <MX_GPIO_Init+0x13c>)
 8001292:	f001 fc81 	bl	8002b98 <HAL_GPIO_WritePin>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /*Configure GPIO pins : Red_Light_Pin Amber_Light_Pin Green_Light_Pin Shift_Reg_Data_Pin
                           Shift_Reg_Clock_Pin Shift_Reg_Reset_Pin */
  GPIO_InitStruct.Pin = Red_Light_Pin|Amber_Light_Pin|Green_Light_Pin|Shift_Reg_Data_Pin
 8001516:	f240 13c7 	movw	r3, #455	; 0x1c7
 800151a:	617b      	str	r3, [r7, #20]
                          |Shift_Reg_Clock_Pin|Shift_Reg_Reset_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4819      	ldr	r0, [pc, #100]	; (8001594 <MX_GPIO_Init+0x138>)
 8001530:	f001 fc30 	bl	8002d94 <HAL_GPIO_Init>
=======
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4819      	ldr	r0, [pc, #100]	; (8001314 <MX_GPIO_Init+0x138>)
 80012b0:	f001 fad6 	bl	8002860 <HAL_GPIO_Init>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001534:	2304      	movs	r3, #4
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <MX_GPIO_Init+0x140>)
 8001548:	f001 fc24 	bl	8002d94 <HAL_GPIO_Init>
=======
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4815      	ldr	r0, [pc, #84]	; (800131c <MX_GPIO_Init+0x140>)
 80012c8:	f001 faca 	bl	8002860 <HAL_GPIO_Init>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800154c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
<<<<<<< HEAD
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_GPIO_Init+0x13c>)
 8001566:	f001 fc15 	bl	8002d94 <HAL_GPIO_Init>
=======
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_GPIO_Init+0x13c>)
 80012e6:	f001 fabb 	bl	8002860 <HAL_GPIO_Init>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001570:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_GPIO_Init+0x138>)
 8001582:	f001 fc07 	bl	8002d94 <HAL_GPIO_Init>
=======
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_GPIO_Init+0x138>)
 8001302:	f001 faad 	bl	8002860 <HAL_GPIO_Init>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40020400 	.word	0x40020400

080015a0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
<<<<<<< HEAD
 80015a8:	2001      	movs	r0, #1
 80015aa:	f002 ffda 	bl	8004562 <osDelay>
 80015ae:	e7fb      	b.n	80015a8 <StartDefaultTask+0x8>
=======
 8001328:	2001      	movs	r0, #1
 800132a:	f002 fcac 	bl	8003c86 <osDelay>
 800132e:	e7fb      	b.n	8001328 <StartDefaultTask+0x8>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

080015b0 <TrafficGeneration>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TrafficGeneration */
void TrafficGeneration(void const * argument)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TrafficGeneration */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
<<<<<<< HEAD
 80015b8:	2001      	movs	r0, #1
 80015ba:	f002 ffd2 	bl	8004562 <osDelay>
 80015be:	e7fb      	b.n	80015b8 <TrafficGeneration+0x8>
=======
 8001338:	2001      	movs	r0, #1
 800133a:	f002 fca4 	bl	8003c86 <osDelay>
 800133e:	e7fb      	b.n	8001338 <TrafficGeneration+0x8>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

080015c0 <AdjustFlow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AdjustFlow */
void AdjustFlow(void const * argument)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN AdjustFlow */
	uint16_t raw = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	84fb      	strh	r3, [r7, #38]	; 0x26
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(pot_timer_mutexHandle, osWaitForever);
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <AdjustFlow+0xdc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 f825 	bl	8004624 <osMutexWait>
		osEvent event = osMessageGet(pot_timer_queueHandle, 0);
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <AdjustFlow+0xe0>)
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	2200      	movs	r2, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 f909 	bl	80047fc <osMessageGet>
		osMutexRelease(pot_timer_mutexHandle);
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <AdjustFlow+0xdc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 f866 	bl	80046c0 <osMutexRelease>
		if(event.status != osEventMessage){
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d14d      	bne.n	8001696 <AdjustFlow+0xd6>
			continue;
		}
		HAL_ADC_Start(&hadc1);
<<<<<<< HEAD
 80015fa:	482a      	ldr	r0, [pc, #168]	; (80016a4 <AdjustFlow+0xe4>)
 80015fc:	f000 ff60 	bl	80024c0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001604:	4827      	ldr	r0, [pc, #156]	; (80016a4 <AdjustFlow+0xe4>)
 8001606:	f001 f82d 	bl	8002664 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 800160a:	4826      	ldr	r0, [pc, #152]	; (80016a4 <AdjustFlow+0xe4>)
 800160c:	f001 f8b5 	bl	800277a <HAL_ADC_GetValue>
 8001610:	4603      	mov	r3, r0
 8001612:	84fb      	strh	r3, [r7, #38]	; 0x26
=======
 800134c:	4826      	ldr	r0, [pc, #152]	; (80013e8 <AdjustFlow+0xa8>)
 800134e:	f000 fe1d 	bl	8001f8c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001352:	f04f 31ff 	mov.w	r1, #4294967295
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <AdjustFlow+0xa8>)
 8001358:	f000 feea 	bl	8002130 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <AdjustFlow+0xa8>)
 800135e:	f000 ff72 	bl	8002246 <HAL_ADC_GetValue>
 8001362:	4603      	mov	r3, r0
 8001364:	83fb      	strh	r3, [r7, #30]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		if(raw > 2400){
 8001614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001616:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800161a:	d902      	bls.n	8001622 <AdjustFlow+0x62>
			raw = 2400;
 800161c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8001620:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
<<<<<<< HEAD
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <AdjustFlow+0xe8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800162a:	4618      	mov	r0, r3
 800162c:	f002 fffa 	bl	8004624 <osMutexWait>
		osMessageGet(traffic_queue_1Handle, 0);
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <AdjustFlow+0xec>)
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f003 f8df 	bl	80047fc <osMessageGet>
		osMessagePut(traffic_queue_1Handle, raw, osWaitForever);
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <AdjustFlow+0xec>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001648:	4618      	mov	r0, r3
 800164a:	f003 f897 	bl	800477c <osMessagePut>
		osMutexRelease(traffic_rate_1_mutexHandle);
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <AdjustFlow+0xe8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f003 f834 	bl	80046c0 <osMutexRelease>

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <AdjustFlow+0xf0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001660:	4618      	mov	r0, r3
 8001662:	f002 ffdf 	bl	8004624 <osMutexWait>
		osMessageGet(traffic_queue_2Handle, 0);
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <AdjustFlow+0xf4>)
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f8c4 	bl	80047fc <osMessageGet>
		osMessagePut(traffic_queue_2Handle, raw, osWaitForever);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <AdjustFlow+0xf4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800167a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800167e:	4618      	mov	r0, r3
 8001680:	f003 f87c 	bl	800477c <osMessagePut>
		osMutexRelease(traffic_rate_2_mutexHandle);
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <AdjustFlow+0xf0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f003 f819 	bl	80046c0 <osMutexRelease>
		osDelay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f002 ff67 	bl	8004562 <osDelay>
 8001694:	e79a      	b.n	80015cc <AdjustFlow+0xc>
			continue;
 8001696:	bf00      	nop
	{
 8001698:	e798      	b.n	80015cc <AdjustFlow+0xc>
 800169a:	bf00      	nop
 800169c:	200008a8 	.word	0x200008a8
 80016a0:	20000888 	.word	0x20000888
 80016a4:	20000730 	.word	0x20000730
 80016a8:	200008a0 	.word	0x200008a0
 80016ac:	20000874 	.word	0x20000874
 80016b0:	20000898 	.word	0x20000898
 80016b4:	20000878 	.word	0x20000878

080016b8 <trafficGenerated>:
=======
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <AdjustFlow+0xac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fcaf 	bl	8003ce0 <osMutexWait>
		osMessageGet(traffic_queue_1Handle, 0);
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <AdjustFlow+0xb0>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fd94 	bl	8003eb8 <osMessageGet>
		osMessagePut(traffic_queue_1Handle, raw, osWaitForever);
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <AdjustFlow+0xb0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	8bf9      	ldrh	r1, [r7, #30]
 8001396:	f04f 32ff 	mov.w	r2, #4294967295
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fd4c 	bl	8003e38 <osMessagePut>
		osMutexRelease(traffic_rate_1_mutexHandle);
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <AdjustFlow+0xac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fce9 	bl	8003d7c <osMutexRelease>

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <AdjustFlow+0xb4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f04f 31ff 	mov.w	r1, #4294967295
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fc94 	bl	8003ce0 <osMutexWait>
		osMessageGet(traffic_queue_2Handle, 0);
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <AdjustFlow+0xb8>)
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fd79 	bl	8003eb8 <osMessageGet>
		osMessagePut(traffic_queue_2Handle, raw, osWaitForever);
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <AdjustFlow+0xb8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	8bf9      	ldrh	r1, [r7, #30]
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fd31 	bl	8003e38 <osMessagePut>
		osMutexRelease(traffic_rate_2_mutexHandle);
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <AdjustFlow+0xb4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fcce 	bl	8003d7c <osMutexRelease>
		osDelay(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f002 fc50 	bl	8003c86 <osDelay>
		HAL_ADC_Start(&hadc1);
 80013e6:	e7b1      	b.n	800134c <AdjustFlow+0xc>
 80013e8:	20000328 	.word	0x20000328
 80013ec:	200003f8 	.word	0x200003f8
 80013f0:	200003dc 	.word	0x200003dc
 80013f4:	200003f0 	.word	0x200003f0
 80013f8:	200003e0 	.word	0x200003e0

080013fc <trafficGenerated>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/**
 * @brief Function implementing the light_state thread.
 * @param argument: Not used
 * @retval None
 */
int trafficGenerated(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
	uint16_t traffic = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	82fb      	strh	r3, [r7, #22]
	float scaled = 0;
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
	osMutexWait(traffic_rate_1_mutexHandle, osWaitForever);
<<<<<<< HEAD
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <trafficGenerated+0xb4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 ffa7 	bl	8004624 <osMutexWait>
	//int traffic = traffic_rate; //TODO: traffic_queue_0
	osEvent event = osMessageGet(traffic_queue_1Handle, 0);
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <trafficGenerated+0xb8>)
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 f88c 	bl	80047fc <osMessageGet>
=======
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <trafficGenerated+0xb4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fc63 	bl	8003ce0 <osMutexWait>
	//int traffic = traffic_rate; //TODO: traffic_queue_0
	osEvent event = osMessageGet(traffic_queue_1Handle, 0);
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <trafficGenerated+0xb8>)
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fd48 	bl	8003eb8 <osMessageGet>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	if(event.status == osEventMessage){
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d101      	bne.n	80016ee <trafficGenerated+0x36>
		traffic = event.value.v;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	82fb      	strh	r3, [r7, #22]
	}
	osMutexRelease(traffic_rate_1_mutexHandle);
<<<<<<< HEAD
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <trafficGenerated+0xb4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 ffe4 	bl	80046c0 <osMutexRelease>
=======
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <trafficGenerated+0xb4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fca0 	bl	8003d7c <osMutexRelease>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	scaled = traffic / 2400.0;
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff0a 	bl	8000514 <__aeabi_i2d>
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <trafficGenerated+0xbc>)
 8001706:	f7ff f899 	bl	800083c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff f97b 	bl	8000a0c <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	613b      	str	r3, [r7, #16]
	// modulate traffic rate from 1 to 10

	float random = (float)(rand() % 10);
<<<<<<< HEAD
 800171a:	f006 f995 	bl	8007a48 <rand>
 800171e:	4602      	mov	r2, r0
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <trafficGenerated+0xc0>)
 8001722:	fb83 1302 	smull	r1, r3, r3, r2
 8001726:	1099      	asrs	r1, r3, #2
 8001728:	17d3      	asrs	r3, r2, #31
 800172a:	1ac9      	subs	r1, r1, r3
 800172c:	460b      	mov	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	1ad1      	subs	r1, r2, r3
 8001736:	ee07 1a90 	vmov	s15, r1
 800173a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173e:	edc7 7a03 	vstr	s15, [r7, #12]
=======
 800145e:	f005 fa0b 	bl	8006878 <rand>
 8001462:	4602      	mov	r2, r0
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <trafficGenerated+0xc0>)
 8001466:	fb83 1302 	smull	r1, r3, r3, r2
 800146a:	1099      	asrs	r1, r3, #2
 800146c:	17d3      	asrs	r3, r2, #31
 800146e:	1ac9      	subs	r1, r1, r3
 8001470:	460b      	mov	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	1ad1      	subs	r1, r2, r3
 800147a:	ee07 1a90 	vmov	s15, r1
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	edc7 7a03 	vstr	s15, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	if (random < scaled*10) {
 8001742:	edd7 7a04 	vldr	s15, [r7, #16]
 8001746:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800174a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	d501      	bpl.n	8001760 <trafficGenerated+0xa8>
		return 1;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <trafficGenerated+0xaa>
	}
	return 0;
 8001760:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200008a0 	.word	0x200008a0
 8001770:	20000874 	.word	0x20000874
 8001774:	40a2c000 	.word	0x40a2c000
 8001778:	66666667 	.word	0x66666667

0800177c <LightState>:
=======
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003f8 	.word	0x200003f8
 80014b4:	200003dc 	.word	0x200003dc
 80014b8:	40a2c000 	.word	0x40a2c000
 80014bc:	66666667 	.word	0x66666667

080014c0 <LightState>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/* USER CODE END Header_LightState */
void LightState(void const * argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN LightState */
	uint16_t rate = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	86fb      	strh	r3, [r7, #54]	; 0x36
	float scaled = 0;
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int scale_cap = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
	int scale_count = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
	/* Infinite loop */
	for(;;)
	{
		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
<<<<<<< HEAD
 8001796:	4b74      	ldr	r3, [pc, #464]	; (8001968 <LightState+0x1ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 ff40 	bl	8004624 <osMutexWait>
		// int rate = traffic_rate; // TODO: traffic_queue_1
		osEvent event = osMessageGet(traffic_queue_2Handle, 0);
 80017a4:	4b71      	ldr	r3, [pc, #452]	; (800196c <LightState+0x1f0>)
 80017a6:	6819      	ldr	r1, [r3, #0]
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	2200      	movs	r2, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 f824 	bl	80047fc <osMessageGet>
=======
 80014d2:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <LightState+0x1e8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f04f 31ff 	mov.w	r1, #4294967295
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fc00 	bl	8003ce0 <osMutexWait>
		// int rate = traffic_rate; // TODO: traffic_queue_1
		osEvent event = osMessageGet(traffic_queue_2Handle, 0);
 80014e0:	4b72      	ldr	r3, [pc, #456]	; (80016ac <LightState+0x1ec>)
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fce4 	bl	8003eb8 <osMessageGet>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		if(event.status == osEventMessage){
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d101      	bne.n	80017be <LightState+0x42>
			rate = event.value.v;
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
<<<<<<< HEAD
 80017be:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <LightState+0x1ec>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 ff7c 	bl	80046c0 <osMutexRelease>
=======
 80014fa:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <LightState+0x1e8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fc3c 	bl	8003d7c <osMutexRelease>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		scaled = rate / 2400.0;
 80017c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fea2 	bl	8000514 <__aeabi_i2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b66      	ldr	r3, [pc, #408]	; (8001970 <LightState+0x1f4>)
 80017d6:	f7ff f831 	bl	800083c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f913 	bl	8000a0c <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		// turn green LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 80017ea:	2200      	movs	r2, #0
 80017ec:	2101      	movs	r1, #1
 80017ee:	4861      	ldr	r0, [pc, #388]	; (8001974 <LightState+0x1f8>)
 80017f0:	f001 fc6c 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2102      	movs	r1, #2
 80017f8:	485e      	ldr	r0, [pc, #376]	; (8001974 <LightState+0x1f8>)
 80017fa:	f001 fc67 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2104      	movs	r1, #4
 8001802:	485c      	ldr	r0, [pc, #368]	; (8001974 <LightState+0x1f8>)
 8001804:	f001 fc62 	bl	80030cc <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001808:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <LightState+0x1fc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001810:	4618      	mov	r0, r3
 8001812:	f002 ff07 	bl	8004624 <osMutexWait>
		osMessagePut(light_status_queueHandle, 2, osWaitForever);
 8001816:	4b59      	ldr	r3, [pc, #356]	; (800197c <LightState+0x200>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800181e:	2102      	movs	r1, #2
 8001820:	4618      	mov	r0, r3
 8001822:	f002 ffab 	bl	800477c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001826:	4b54      	ldr	r3, [pc, #336]	; (8001978 <LightState+0x1fc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f002 ff48 	bl	80046c0 <osMutexRelease>
		// light_status = 2; //TODO: light_queue_0
		// modulate traffic rate to 1
		// osDelay((uint32_t)(3000 + 3000 * scaled));
		scale_cap = (int)(3000 + 3000 * scaled)/500;
 8001830:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001834:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001980 <LightState+0x204>
 8001838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001980 <LightState+0x204>
 8001840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001848:	ee17 1a90 	vmov	r1, s15
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <LightState+0x208>)
 800184e:	fb83 2301 	smull	r2, r3, r3, r1
 8001852:	115a      	asrs	r2, r3, #5
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
		osMutexWait(light_timer_mutexHandle, osWaitForever);
 800185a:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <LightState+0x20c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fede 	bl	8004624 <osMutexWait>
		event = osMessageGet(light_timer_queueHandle, 0);
 8001868:	4b48      	ldr	r3, [pc, #288]	; (800198c <LightState+0x210>)
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	463b      	mov	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f002 ffc3 	bl	80047fc <osMessageGet>
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	463a      	mov	r2, r7
 800187c:	ca07      	ldmia	r2, {r0, r1, r2}
 800187e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(pot_timer_mutexHandle);
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <LightState+0x214>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 ff1a 	bl	80046c0 <osMutexRelease>
		while(scale_count < scale_cap){
 800188c:	e021      	b.n	80018d2 <LightState+0x156>
			if (event.status == osEventMessage){
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	2b10      	cmp	r3, #16
 8001892:	d103      	bne.n	800189c <LightState+0x120>
				scale_count ++;
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	3301      	adds	r3, #1
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
 800189a:	e001      	b.n	80018a0 <LightState+0x124>
			}
			else {
				scale_count = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
			}
			osMutexWait(light_timer_mutexHandle, osWaitForever);
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <LightState+0x20c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 febb 	bl	8004624 <osMutexWait>
			event = osMessageGet(light_timer_queueHandle, 0);
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <LightState+0x210>)
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	463b      	mov	r3, r7
 80018b4:	2200      	movs	r2, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 ffa0 	bl	80047fc <osMessageGet>
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	463a      	mov	r2, r7
 80018c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(light_timer_mutexHandle);
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <LightState+0x20c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fef7 	bl	80046c0 <osMutexRelease>
		while(scale_count < scale_cap){
 80018d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbd9      	blt.n	800188e <LightState+0x112>
		}

		// turn yellow LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	4825      	ldr	r0, [pc, #148]	; (8001974 <LightState+0x1f8>)
 80018e0:	f001 fbf4 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2102      	movs	r1, #2
 80018e8:	4822      	ldr	r0, [pc, #136]	; (8001974 <LightState+0x1f8>)
 80018ea:	f001 fbef 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2104      	movs	r1, #4
 80018f2:	4820      	ldr	r0, [pc, #128]	; (8001974 <LightState+0x1f8>)
 80018f4:	f001 fbea 	bl	80030cc <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <LightState+0x1fc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fe8f 	bl	8004624 <osMutexWait>
		osMessagePut(light_status_queueHandle, 1, osWaitForever);
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <LightState+0x200>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800190e:	2101      	movs	r1, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f002 ff33 	bl	800477c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <LightState+0x1fc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fed0 	bl	80046c0 <osMutexRelease>
		// light_status = 1;
		scale_cap = 2;
 8001920:	2302      	movs	r3, #2
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
		osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <LightState+0x20c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fe79 	bl	8004624 <osMutexWait>
		event = osMessageGet(light_timer_queueHandle, 0);
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <LightState+0x210>)
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f002 ff5e 	bl	80047fc <osMessageGet>
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	463a      	mov	r2, r7
 8001946:	ca07      	ldmia	r2, {r0, r1, r2}
 8001948:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(pot_timer_mutexHandle);
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <LightState+0x214>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 feb5 	bl	80046c0 <osMutexRelease>
		while(scale_count < scale_cap){
 8001956:	e038      	b.n	80019ca <LightState+0x24e>
			if (event.status == osEventMessage){
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d11a      	bne.n	8001994 <LightState+0x218>
				scale_count ++;
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	3301      	adds	r3, #1
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
 8001964:	e018      	b.n	8001998 <LightState+0x21c>
 8001966:	bf00      	nop
 8001968:	20000898 	.word	0x20000898
 800196c:	20000878 	.word	0x20000878
 8001970:	40a2c000 	.word	0x40a2c000
 8001974:	40020800 	.word	0x40020800
 8001978:	2000089c 	.word	0x2000089c
 800197c:	20000880 	.word	0x20000880
 8001980:	453b8000 	.word	0x453b8000
 8001984:	10624dd3 	.word	0x10624dd3
 8001988:	200008ac 	.word	0x200008ac
 800198c:	2000088c 	.word	0x2000088c
 8001990:	200008a8 	.word	0x200008a8
			}
			else {
				scale_count = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
			}
			osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001998:	4b64      	ldr	r3, [pc, #400]	; (8001b2c <LightState+0x3b0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fe3f 	bl	8004624 <osMutexWait>
			event = osMessageGet(light_timer_queueHandle, 0);
 80019a6:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <LightState+0x3b4>)
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 ff24 	bl	80047fc <osMessageGet>
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	463a      	mov	r2, r7
 80019ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80019bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(pot_timer_mutexHandle);
 80019c0:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <LightState+0x3b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fe7b 	bl	80046c0 <osMutexRelease>
		while(scale_count < scale_cap){
 80019ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbc2      	blt.n	8001958 <LightState+0x1dc>
		}

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80019d2:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <LightState+0x3bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fe22 	bl	8004624 <osMutexWait>
		event = osMessageGet(traffic_queue_2Handle, 0); //TODO: traffic_queue_1
 80019e0:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <LightState+0x3c0>)
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 ff07 	bl	80047fc <osMessageGet>
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	463a      	mov	r2, r7
 80019f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
=======
 8001526:	2200      	movs	r2, #0
 8001528:	2101      	movs	r1, #1
 800152a:	4862      	ldr	r0, [pc, #392]	; (80016b4 <LightState+0x1f4>)
 800152c:	f001 fb34 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2102      	movs	r1, #2
 8001534:	485f      	ldr	r0, [pc, #380]	; (80016b4 <LightState+0x1f4>)
 8001536:	f001 fb2f 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2104      	movs	r1, #4
 800153e:	485d      	ldr	r0, [pc, #372]	; (80016b4 <LightState+0x1f4>)
 8001540:	f001 fb2a 	bl	8002b98 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001544:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <LightState+0x1f8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fbc7 	bl	8003ce0 <osMutexWait>
		osMessagePut(light_status_queueHandle, 2, osWaitForever);
 8001552:	4b5a      	ldr	r3, [pc, #360]	; (80016bc <LightState+0x1fc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f04f 32ff 	mov.w	r2, #4294967295
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fc6b 	bl	8003e38 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001562:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <LightState+0x1f8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fc08 	bl	8003d7c <osMutexRelease>
		// light_status = 2; //TODO: light_queue_0
		// modulate traffic rate to 1
		osDelay((uint32_t)(3000 + 3000 * scaled));
 800156c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001570:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80016c0 <LightState+0x200>
 8001574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001578:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80016c0 <LightState+0x200>
 800157c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001584:	ee17 0a90 	vmov	r0, s15
 8001588:	f002 fb7d 	bl	8003c86 <osDelay>

		// turn yellow LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2101      	movs	r1, #1
 8001590:	4848      	ldr	r0, [pc, #288]	; (80016b4 <LightState+0x1f4>)
 8001592:	f001 fb01 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	4846      	ldr	r0, [pc, #280]	; (80016b4 <LightState+0x1f4>)
 800159c:	f001 fafc 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2104      	movs	r1, #4
 80015a4:	4843      	ldr	r0, [pc, #268]	; (80016b4 <LightState+0x1f4>)
 80015a6:	f001 faf7 	bl	8002b98 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 80015aa:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <LightState+0x1f8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f04f 31ff 	mov.w	r1, #4294967295
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fb94 	bl	8003ce0 <osMutexWait>
		osMessagePut(light_status_queueHandle, 1, osWaitForever);
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <LightState+0x1fc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	2101      	movs	r1, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fc38 	bl	8003e38 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 80015c8:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <LightState+0x1f8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 fbd5 	bl	8003d7c <osMutexRelease>
		// light_status = 1;
		osDelay(1000);
 80015d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d6:	f002 fb56 	bl	8003c86 <osDelay>

		osMutexWait(traffic_rate_2_mutexHandle, osWaitForever);
 80015da:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <LightState+0x1e8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 31ff 	mov.w	r1, #4294967295
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fb7c 	bl	8003ce0 <osMutexWait>
		event = osMessageGet(traffic_queue_2Handle, 0); //TODO: traffic_queue_1
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <LightState+0x1ec>)
 80015ea:	6819      	ldr	r1, [r3, #0]
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fc61 	bl	8003eb8 <osMessageGet>
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	463a      	mov	r2, r7
 80015fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80015fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		if(event.status == osEventMessage){
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d101      	bne.n	8001a04 <LightState+0x288>
			rate = event.value.v;
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		osMutexRelease(traffic_rate_2_mutexHandle);
<<<<<<< HEAD
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <LightState+0x3bc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fe59 	bl	80046c0 <osMutexRelease>
=======
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <LightState+0x1e8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fbb3 	bl	8003d7c <osMutexRelease>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		scaled = rate / 2400.0;
 8001a0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd7f 	bl	8000514 <__aeabi_i2d>
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <LightState+0x3c4>)
 8001a1c:	f7fe ff0e 	bl	800083c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7fe fff0 	bl	8000a0c <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		// turn red LED on
		HAL_GPIO_WritePin(GPIOC, Red_Light_Pin, GPIO_PIN_SET);
<<<<<<< HEAD
 8001a30:	2201      	movs	r2, #1
 8001a32:	2101      	movs	r1, #1
 8001a34:	4843      	ldr	r0, [pc, #268]	; (8001b44 <LightState+0x3c8>)
 8001a36:	f001 fb49 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	4841      	ldr	r0, [pc, #260]	; (8001b44 <LightState+0x3c8>)
 8001a40:	f001 fb44 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2104      	movs	r1, #4
 8001a48:	483e      	ldr	r0, [pc, #248]	; (8001b44 <LightState+0x3c8>)
 8001a4a:	f001 fb3f 	bl	80030cc <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <LightState+0x3cc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fde4 	bl	8004624 <osMutexWait>
		osMessagePut(light_status_queueHandle, 0, osWaitForever);
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <LightState+0x3d0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fe88 	bl	800477c <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <LightState+0x3cc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fe25 	bl	80046c0 <osMutexRelease>
		// light_status = 0;
		// modulate traffic rate to 1
		// osDelay((uint32_t)(3000 + 3000 * (1-scaled)));
		scale_cap = (int)(3000 + 3000 * (1 - scaled))/500;
 8001a76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a7a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a82:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b50 <LightState+0x3d4>
 8001a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001b50 <LightState+0x3d4>
 8001a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a96:	ee17 1a90 	vmov	r1, s15
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <LightState+0x3d8>)
 8001a9c:	fb83 2301 	smull	r2, r3, r3, r1
 8001aa0:	115a      	asrs	r2, r3, #5
 8001aa2:	17cb      	asrs	r3, r1, #31
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
		osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <LightState+0x3b0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fdb7 	bl	8004624 <osMutexWait>
		event = osMessageGet(light_timer_queueHandle, 0);
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <LightState+0x3b4>)
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fe9c 	bl	80047fc <osMessageGet>
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	463a      	mov	r2, r7
 8001aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(pot_timer_mutexHandle);
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <LightState+0x3b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fdf3 	bl	80046c0 <osMutexRelease>
		while(scale_count < scale_cap){
 8001ada:	e021      	b.n	8001b20 <LightState+0x3a4>
			if (event.status == osEventMessage){
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d103      	bne.n	8001aea <LightState+0x36e>
				scale_count ++;
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae8:	e001      	b.n	8001aee <LightState+0x372>
			}
			else {
				scale_count = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <LightState+0x3b0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fd94 	bl	8004624 <osMutexWait>
			event = osMessageGet(light_timer_queueHandle, 0);
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <LightState+0x3b4>)
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	463b      	mov	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe79 	bl	80047fc <osMessageGet>
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	463a      	mov	r2, r7
 8001b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(pot_timer_mutexHandle);
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <LightState+0x3b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 fdd0 	bl	80046c0 <osMutexRelease>
		while(scale_count < scale_cap){
 8001b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbd9      	blt.n	8001adc <LightState+0x360>
	{
 8001b28:	e635      	b.n	8001796 <LightState+0x1a>
 8001b2a:	bf00      	nop
 8001b2c:	200008ac 	.word	0x200008ac
 8001b30:	2000088c 	.word	0x2000088c
 8001b34:	200008a8 	.word	0x200008a8
 8001b38:	20000898 	.word	0x20000898
 8001b3c:	20000878 	.word	0x20000878
 8001b40:	40a2c000 	.word	0x40a2c000
 8001b44:	40020800 	.word	0x40020800
 8001b48:	2000089c 	.word	0x2000089c
 8001b4c:	20000880 	.word	0x20000880
 8001b50:	453b8000 	.word	0x453b8000
 8001b54:	10624dd3 	.word	0x10624dd3

08001b58 <SysManage>:
=======
 8001638:	2201      	movs	r2, #1
 800163a:	2101      	movs	r1, #1
 800163c:	481d      	ldr	r0, [pc, #116]	; (80016b4 <LightState+0x1f4>)
 800163e:	f001 faab 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Amber_Light_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2102      	movs	r1, #2
 8001646:	481b      	ldr	r0, [pc, #108]	; (80016b4 <LightState+0x1f4>)
 8001648:	f001 faa6 	bl	8002b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Green_Light_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2104      	movs	r1, #4
 8001650:	4818      	ldr	r0, [pc, #96]	; (80016b4 <LightState+0x1f4>)
 8001652:	f001 faa1 	bl	8002b98 <HAL_GPIO_WritePin>

		osMutexWait(light_status_mutexHandle, osWaitForever);
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <LightState+0x1f8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f04f 31ff 	mov.w	r1, #4294967295
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fb3e 	bl	8003ce0 <osMutexWait>
		osMessagePut(light_status_queueHandle, 0, osWaitForever);
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <LightState+0x1fc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fbe2 	bl	8003e38 <osMessagePut>
		osMutexRelease(light_status_mutexHandle);
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <LightState+0x1f8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fb7f 	bl	8003d7c <osMutexRelease>
		// light_status = 0;
		// modulate traffic rate to 1
		osDelay((uint32_t)(3000 + 3000 * (1-scaled)));
 800167e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001682:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80016c0 <LightState+0x200>
 800168e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001692:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016c0 <LightState+0x200>
 8001696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800169a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800169e:	ee17 0a90 	vmov	r0, s15
 80016a2:	f002 faf0 	bl	8003c86 <osDelay>
	{
 80016a6:	e714      	b.n	80014d2 <LightState+0x12>
 80016a8:	200003f0 	.word	0x200003f0
 80016ac:	200003e0 	.word	0x200003e0
 80016b0:	40a2c000 	.word	0x40a2c000
 80016b4:	40020800 	.word	0x40020800
 80016b8:	200003f4 	.word	0x200003f4
 80016bc:	200003e8 	.word	0x200003e8
 80016c0:	453b8000 	.word	0x453b8000

080016c4 <SysManage>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	return converted_number;
}

/* USER CODE END Header_SysManage */
void SysManage(void const * argument)
{
<<<<<<< HEAD
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b09e      	sub	sp, #120	; 0x78
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6178      	str	r0, [r7, #20]
=======
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0b0      	sub	sp, #192	; 0xc0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN SysManage */
	/* Infinite loop */
	int i;
	int cars[19] = {};
<<<<<<< HEAD
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	224c      	movs	r2, #76	; 0x4c
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f006 f86d 	bl	8007c48 <memset>
	int light_colour = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	673b      	str	r3, [r7, #112]	; 0x70
=======
 80016cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016d0:	224c      	movs	r2, #76	; 0x4c
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 fa12 	bl	8006afe <memset>
	int cars_padded[21] = {};
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	2254      	movs	r2, #84	; 0x54
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 fa0b 	bl	8006afe <memset>
	int light_colour = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	for(;;)
	{
		osMutexWait(car_timing_mutexHandle, osWaitForever);
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <SysManage+0x23c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fd52 	bl	8004624 <osMutexWait>
		osEvent event = osMessageGet(car_timer_queueHandle, 0);
 8001b80:	4b85      	ldr	r3, [pc, #532]	; (8001d98 <SysManage+0x240>)
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fe36 	bl	80047fc <osMessageGet>
		osMutexRelease(car_timing_mutexHandle);
 8001b90:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <SysManage+0x23c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fd93 	bl	80046c0 <osMutexRelease>
		if(event.status != osEventMessage){
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	f040 80f7 	bne.w	8001d90 <SysManage+0x238>
			continue;
		}

		osMutexWait(light_status_mutexHandle, osWaitForever);
<<<<<<< HEAD
 8001ba2:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <SysManage+0x244>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fd3a 	bl	8004624 <osMutexWait>
		event = osMessageGet(light_status_queueHandle, 0); //TODO: light_queue_0
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <SysManage+0x248>)
 8001bb2:	6819      	ldr	r1, [r3, #0]
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fe1f 	bl	80047fc <osMessageGet>
 8001bbe:	f107 0318 	add.w	r3, r7, #24
 8001bc2:	463a      	mov	r2, r7
 8001bc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d101      	bne.n	8001bd4 <SysManage+0x7c>
			light_colour = event.value.v;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	673b      	str	r3, [r7, #112]	; 0x70
		}
		osMutexRelease(light_status_mutexHandle);
 8001bd4:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <SysManage+0x244>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fd71 	bl	80046c0 <osMutexRelease>

		// osMutexWait(cars_array_mutexHandle); //TODO: cars_queue_0
		for (i = 18; i>0; i--){
 8001bde:	2312      	movs	r3, #18
 8001be0:	677b      	str	r3, [r7, #116]	; 0x74
 8001be2:	e08e      	b.n	8001d02 <SysManage+0x1aa>
			if (light_colour == 2) { //green
 8001be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d115      	bne.n	8001c16 <SysManage+0xbe>
				cars[i] = cars[i-1];
 8001bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bec:	3b01      	subs	r3, #1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	3378      	adds	r3, #120	; 0x78
 8001bf2:	443b      	add	r3, r7
 8001bf4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3378      	adds	r3, #120	; 0x78
 8001bfe:	443b      	add	r3, r7
 8001c00:	f843 2c54 	str.w	r2, [r3, #-84]
				cars[i - 1] = 0;
 8001c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c06:	3b01      	subs	r3, #1
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	3378      	adds	r3, #120	; 0x78
 8001c0c:	443b      	add	r3, r7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f843 2c54 	str.w	r2, [r3, #-84]
 8001c14:	e072      	b.n	8001cfc <SysManage+0x1a4>
			}
			else if (light_colour == 1) { //yellow
 8001c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d136      	bne.n	8001c8a <SysManage+0x132>
				if (i > 8) {
 8001c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	dd15      	ble.n	8001c4e <SysManage+0xf6>
					cars[i] = cars[i-1];
 8001c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c24:	3b01      	subs	r3, #1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	3378      	adds	r3, #120	; 0x78
 8001c2a:	443b      	add	r3, r7
 8001c2c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3378      	adds	r3, #120	; 0x78
 8001c36:	443b      	add	r3, r7
 8001c38:	f843 2c54 	str.w	r2, [r3, #-84]
					cars[i-1] = 0;
 8001c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	3378      	adds	r3, #120	; 0x78
 8001c44:	443b      	add	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	f843 2c54 	str.w	r2, [r3, #-84]
 8001c4c:	e056      	b.n	8001cfc <SysManage+0x1a4>
				}
				else {
					if (!cars[i]){
 8001c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	3378      	adds	r3, #120	; 0x78
 8001c54:	443b      	add	r3, r7
 8001c56:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d14e      	bne.n	8001cfc <SysManage+0x1a4>
						cars[i] = cars[i-1];
 8001c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c60:	3b01      	subs	r3, #1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	3378      	adds	r3, #120	; 0x78
 8001c66:	443b      	add	r3, r7
 8001c68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3378      	adds	r3, #120	; 0x78
 8001c72:	443b      	add	r3, r7
 8001c74:	f843 2c54 	str.w	r2, [r3, #-84]
						cars[i-1] = 0;
 8001c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3378      	adds	r3, #120	; 0x78
 8001c80:	443b      	add	r3, r7
 8001c82:	2200      	movs	r2, #0
 8001c84:	f843 2c54 	str.w	r2, [r3, #-84]
 8001c88:	e038      	b.n	8001cfc <SysManage+0x1a4>
=======
 80016ee:	4baa      	ldr	r3, [pc, #680]	; (8001998 <SysManage+0x2d4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 31ff 	mov.w	r1, #4294967295
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 faf2 	bl	8003ce0 <osMutexWait>
		osEvent event = osMessageGet(light_status_queueHandle, 0); //TODO: light_queue_0
 80016fc:	4ba7      	ldr	r3, [pc, #668]	; (800199c <SysManage+0x2d8>)
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fbd6 	bl	8003eb8 <osMessageGet>
		if(event.status == osEventMessage){
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d102      	bne.n	8001718 <SysManage+0x54>
			light_colour = event.value.v;
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		}
		osMutexRelease(light_status_mutexHandle);
 8001718:	4b9f      	ldr	r3, [pc, #636]	; (8001998 <SysManage+0x2d4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fb2d 	bl	8003d7c <osMutexRelease>

		// osMutexWait(cars_array_mutexHandle); //TODO: cars_queue_0
		for (i = 18; i>0; i--){
 8001722:	2312      	movs	r3, #18
 8001724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001728:	e0a6      	b.n	8001878 <SysManage+0x1b4>
			if (light_colour == 2) { //green
 800172a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800172e:	2b02      	cmp	r3, #2
 8001730:	d118      	bne.n	8001764 <SysManage+0xa0>
				cars[i] = cars[i-1];
 8001732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001736:	3b01      	subs	r3, #1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	33c0      	adds	r3, #192	; 0xc0
 800173c:	443b      	add	r3, r7
 800173e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	33c0      	adds	r3, #192	; 0xc0
 800174a:	443b      	add	r3, r7
 800174c:	f843 2c54 	str.w	r2, [r3, #-84]
				cars[i - 1] = 0;
 8001750:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001754:	3b01      	subs	r3, #1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	33c0      	adds	r3, #192	; 0xc0
 800175a:	443b      	add	r3, r7
 800175c:	2200      	movs	r2, #0
 800175e:	f843 2c54 	str.w	r2, [r3, #-84]
 8001762:	e084      	b.n	800186e <SysManage+0x1aa>
			}
			else if (light_colour == 1) { //yellow
 8001764:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001768:	2b01      	cmp	r3, #1
 800176a:	d13e      	bne.n	80017ea <SysManage+0x126>
				if (i > 8) {
 800176c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001770:	2b08      	cmp	r3, #8
 8001772:	dd18      	ble.n	80017a6 <SysManage+0xe2>
					cars[i] = cars[i-1];
 8001774:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001778:	3b01      	subs	r3, #1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	33c0      	adds	r3, #192	; 0xc0
 800177e:	443b      	add	r3, r7
 8001780:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	33c0      	adds	r3, #192	; 0xc0
 800178c:	443b      	add	r3, r7
 800178e:	f843 2c54 	str.w	r2, [r3, #-84]
					cars[i-1] = 0;
 8001792:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001796:	3b01      	subs	r3, #1
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	33c0      	adds	r3, #192	; 0xc0
 800179c:	443b      	add	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	f843 2c54 	str.w	r2, [r3, #-84]
 80017a4:	e063      	b.n	800186e <SysManage+0x1aa>
				}
				else {
					if (!cars[i]){
 80017a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	33c0      	adds	r3, #192	; 0xc0
 80017ae:	443b      	add	r3, r7
 80017b0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d15a      	bne.n	800186e <SysManage+0x1aa>
						cars[i] = cars[i-1];
 80017b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017bc:	3b01      	subs	r3, #1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	33c0      	adds	r3, #192	; 0xc0
 80017c2:	443b      	add	r3, r7
 80017c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80017c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	33c0      	adds	r3, #192	; 0xc0
 80017d0:	443b      	add	r3, r7
 80017d2:	f843 2c54 	str.w	r2, [r3, #-84]
						cars[i-1] = 0;
 80017d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017da:	3b01      	subs	r3, #1
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	33c0      	adds	r3, #192	; 0xc0
 80017e0:	443b      	add	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	f843 2c54 	str.w	r2, [r3, #-84]
 80017e8:	e041      	b.n	800186e <SysManage+0x1aa>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					}
				}
			}
			else { //red
				if (i > 11){
<<<<<<< HEAD
 8001c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c8c:	2b0b      	cmp	r3, #11
 8001c8e:	dd15      	ble.n	8001cbc <SysManage+0x164>
					cars[i] = cars[i-1];
 8001c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c92:	3b01      	subs	r3, #1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	3378      	adds	r3, #120	; 0x78
 8001c98:	443b      	add	r3, r7
 8001c9a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	3378      	adds	r3, #120	; 0x78
 8001ca4:	443b      	add	r3, r7
 8001ca6:	f843 2c54 	str.w	r2, [r3, #-84]
					cars[i-1] = 0;
 8001caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cac:	3b01      	subs	r3, #1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	3378      	adds	r3, #120	; 0x78
 8001cb2:	443b      	add	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f843 2c54 	str.w	r2, [r3, #-84]
 8001cba:	e01f      	b.n	8001cfc <SysManage+0x1a4>
				}
				else if (i < 8){
 8001cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	dc1c      	bgt.n	8001cfc <SysManage+0x1a4>
					if (!cars[i]) {
 8001cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	3378      	adds	r3, #120	; 0x78
 8001cc8:	443b      	add	r3, r7
 8001cca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d114      	bne.n	8001cfc <SysManage+0x1a4>
						cars[i] = cars[i-1];
 8001cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3378      	adds	r3, #120	; 0x78
 8001cda:	443b      	add	r3, r7
 8001cdc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	3378      	adds	r3, #120	; 0x78
 8001ce6:	443b      	add	r3, r7
 8001ce8:	f843 2c54 	str.w	r2, [r3, #-84]
						cars[i-1] = 0;
 8001cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	3378      	adds	r3, #120	; 0x78
 8001cf4:	443b      	add	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f843 2c54 	str.w	r2, [r3, #-84]
		for (i = 18; i>0; i--){
 8001cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	677b      	str	r3, [r7, #116]	; 0x74
 8001d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f73f af6d 	bgt.w	8001be4 <SysManage+0x8c>
=======
 80017ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017ee:	2b0b      	cmp	r3, #11
 80017f0:	dd18      	ble.n	8001824 <SysManage+0x160>
					cars[i] = cars[i-1];
 80017f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017f6:	3b01      	subs	r3, #1
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	33c0      	adds	r3, #192	; 0xc0
 80017fc:	443b      	add	r3, r7
 80017fe:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	33c0      	adds	r3, #192	; 0xc0
 800180a:	443b      	add	r3, r7
 800180c:	f843 2c54 	str.w	r2, [r3, #-84]
					cars[i-1] = 0;
 8001810:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001814:	3b01      	subs	r3, #1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	33c0      	adds	r3, #192	; 0xc0
 800181a:	443b      	add	r3, r7
 800181c:	2200      	movs	r2, #0
 800181e:	f843 2c54 	str.w	r2, [r3, #-84]
 8001822:	e024      	b.n	800186e <SysManage+0x1aa>
				}
				else if (i < 8){
 8001824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001828:	2b07      	cmp	r3, #7
 800182a:	dc20      	bgt.n	800186e <SysManage+0x1aa>
					if (!cars[i]) {
 800182c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	33c0      	adds	r3, #192	; 0xc0
 8001834:	443b      	add	r3, r7
 8001836:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d117      	bne.n	800186e <SysManage+0x1aa>
						cars[i] = cars[i-1];
 800183e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001842:	3b01      	subs	r3, #1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	33c0      	adds	r3, #192	; 0xc0
 8001848:	443b      	add	r3, r7
 800184a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800184e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	33c0      	adds	r3, #192	; 0xc0
 8001856:	443b      	add	r3, r7
 8001858:	f843 2c54 	str.w	r2, [r3, #-84]
						cars[i-1] = 0;
 800185c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001860:	3b01      	subs	r3, #1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	33c0      	adds	r3, #192	; 0xc0
 8001866:	443b      	add	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	f843 2c54 	str.w	r2, [r3, #-84]
		for (i = 18; i>0; i--){
 800186e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001872:	3b01      	subs	r3, #1
 8001874:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800187c:	2b00      	cmp	r3, #0
 800187e:	f73f af54 	bgt.w	800172a <SysManage+0x66>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					}
				}
			}
		}
		if (trafficGenerated()){
<<<<<<< HEAD
 8001d0a:	f7ff fcd5 	bl	80016b8 <trafficGenerated>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <SysManage+0x1c2>
			cars[0] = 1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
 8001d18:	e001      	b.n	8001d1e <SysManage+0x1c6>
		}
		else {
			cars[0] = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
		//osMutexWait(cars_array_mutexHandle, osWaitForever);
		// int* mail = (int *)osMailAlloc(cars_array_queueHandle, osWaitForever);
=======
 8001882:	f7ff fdbb 	bl	80013fc <trafficGenerated>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <SysManage+0x1ce>
			cars[0] = 1;
 800188c:	2301      	movs	r3, #1
 800188e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001890:	e001      	b.n	8001896 <SysManage+0x1d2>
		}
		else {
			cars[0] = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	66fb      	str	r3, [r7, #108]	; 0x6c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		//osMailPut(cars_array_queueHandle, cars);
		//osMessagePut(cars_array_queueHandle, cars_int, osWaitForever);
		//osMutexRelease(cars_array_mutexHandle);

		// Pad the shift registers with extra data in the 8th bit for each.
		for(i = 0; i < 19; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800189c:	e03a      	b.n	8001914 <SysManage+0x250>
			if(i >= 14){
 800189e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018a2:	2b0d      	cmp	r3, #13
 80018a4:	dd0f      	ble.n	80018c6 <SysManage+0x202>
				cars_padded[i+2] = cars[i];
 80018a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018aa:	1c99      	adds	r1, r3, #2
 80018ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	33c0      	adds	r3, #192	; 0xc0
 80018b4:	443b      	add	r3, r7
 80018b6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	33c0      	adds	r3, #192	; 0xc0
 80018be:	443b      	add	r3, r7
 80018c0:	f843 2ca8 	str.w	r2, [r3, #-168]
 80018c4:	e021      	b.n	800190a <SysManage+0x246>
			} else if(i >= 7){
 80018c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	dd0f      	ble.n	80018ee <SysManage+0x22a>
				cars_padded[i+1] = cars[i];
 80018ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	33c0      	adds	r3, #192	; 0xc0
 80018dc:	443b      	add	r3, r7
 80018de:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	33c0      	adds	r3, #192	; 0xc0
 80018e6:	443b      	add	r3, r7
 80018e8:	f843 2ca8 	str.w	r2, [r3, #-168]
 80018ec:	e00d      	b.n	800190a <SysManage+0x246>
			} else {
				cars_padded[i] = cars[i];
 80018ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	33c0      	adds	r3, #192	; 0xc0
 80018f6:	443b      	add	r3, r7
 80018f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	33c0      	adds	r3, #192	; 0xc0
 8001904:	443b      	add	r3, r7
 8001906:	f843 2ca8 	str.w	r2, [r3, #-168]
		for(i = 0; i < 19; i++){
 800190a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800190e:	3301      	adds	r3, #1
 8001910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001918:	2b12      	cmp	r3, #18
 800191a:	ddc0      	ble.n	800189e <SysManage+0x1da>
			}
		}

		HAL_GPIO_WritePin(GPIOC, Shift_Reg_Reset_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d24:	481f      	ldr	r0, [pc, #124]	; (8001da4 <SysManage+0x24c>)
 8001d26:	f001 f9d1 	bl	80030cc <HAL_GPIO_WritePin>
		osDelay(1);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f002 fc19 	bl	8004562 <osDelay>
		HAL_GPIO_WritePin(GPIOC, Shift_Reg_Reset_Pin, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d36:	481b      	ldr	r0, [pc, #108]	; (8001da4 <SysManage+0x24c>)
 8001d38:	f001 f9c8 	bl	80030cc <HAL_GPIO_WritePin>
		//osDelay(1);
		for(i = 18; i >= 0; i--){
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	677b      	str	r3, [r7, #116]	; 0x74
 8001d40:	e01e      	b.n	8001d80 <SysManage+0x228>
			if(cars[i] != 0){
 8001d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3378      	adds	r3, #120	; 0x78
 8001d48:	443b      	add	r3, r7
 8001d4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <SysManage+0x204>
				HAL_GPIO_WritePin(GPIOC, Shift_Reg_Data_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	4813      	ldr	r0, [pc, #76]	; (8001da4 <SysManage+0x24c>)
 8001d58:	f001 f9b8 	bl	80030cc <HAL_GPIO_WritePin>
			}
			//osDelay(1);
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Clock_Pin, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	4810      	ldr	r0, [pc, #64]	; (8001da4 <SysManage+0x24c>)
 8001d62:	f001 f9b3 	bl	80030cc <HAL_GPIO_WritePin>
			//osDelay(1);
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Clock_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	480e      	ldr	r0, [pc, #56]	; (8001da4 <SysManage+0x24c>)
 8001d6c:	f001 f9ae 	bl	80030cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Data_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2140      	movs	r1, #64	; 0x40
 8001d74:	480b      	ldr	r0, [pc, #44]	; (8001da4 <SysManage+0x24c>)
 8001d76:	f001 f9a9 	bl	80030cc <HAL_GPIO_WritePin>
		for(i = 18; i >= 0; i--){
 8001d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	677b      	str	r3, [r7, #116]	; 0x74
 8001d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	dadd      	bge.n	8001d42 <SysManage+0x1ea>
			//osDelay(1);
		}
		osDelay(500);
 8001d86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d8a:	f002 fbea 	bl	8004562 <osDelay>
 8001d8e:	e6f0      	b.n	8001b72 <SysManage+0x1a>
			continue;
 8001d90:	bf00      	nop
	{
 8001d92:	e6ee      	b.n	8001b72 <SysManage+0x1a>
 8001d94:	200008a4 	.word	0x200008a4
 8001d98:	20000884 	.word	0x20000884
 8001d9c:	2000089c 	.word	0x2000089c
 8001da0:	20000880 	.word	0x20000880
 8001da4:	40020800 	.word	0x40020800

08001da8 <car_movement_callback>:
  /* USER CODE END SysManage */
}

/* car_movement_callback function */
void car_movement_callback(void const * argument)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN car_movement_callback */
	osMutexWait(car_timing_mutexHandle, osWaitForever);
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <car_movement_callback+0x88>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fc33 	bl	8004624 <osMutexWait>
	osMutexWait(pot_timer_mutexHandle, osWaitForever);
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <car_movement_callback+0x8c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fc2c 	bl	8004624 <osMutexWait>
	osMutexWait(light_timer_mutexHandle, osWaitForever);
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <car_movement_callback+0x90>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fc25 	bl	8004624 <osMutexWait>

	osMessagePut(car_timer_queueHandle, 1, osWaitForever);
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <car_movement_callback+0x94>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fcc9 	bl	800477c <osMessagePut>
	osMessagePut(pot_timer_queueHandle, 1, osWaitForever);
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <car_movement_callback+0x98>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df2:	2101      	movs	r1, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fcc1 	bl	800477c <osMessagePut>
	osMessagePut(light_timer_queueHandle, 1, osWaitForever);
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <car_movement_callback+0x9c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e02:	2101      	movs	r1, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 fcb9 	bl	800477c <osMessagePut>

	osMutexRelease(light_timer_mutexHandle);
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <car_movement_callback+0x90>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 fc56 	bl	80046c0 <osMutexRelease>
	osMutexRelease(pot_timer_mutexHandle);
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <car_movement_callback+0x8c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 fc51 	bl	80046c0 <osMutexRelease>
	osMutexRelease(car_timing_mutexHandle);
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <car_movement_callback+0x88>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fc4c 	bl	80046c0 <osMutexRelease>
  /* USER CODE END car_movement_callback */
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200008a4 	.word	0x200008a4
 8001e34:	200008a8 	.word	0x200008a8
 8001e38:	200008ac 	.word	0x200008ac
 8001e3c:	20000884 	.word	0x20000884
 8001e40:	20000888 	.word	0x20000888
 8001e44:	2000088c 	.word	0x2000088c

08001e48 <HAL_TIM_PeriodElapsedCallback>:
=======
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	481f      	ldr	r0, [pc, #124]	; (80019a0 <SysManage+0x2dc>)
 8001924:	f001 f938 	bl	8002b98 <HAL_GPIO_WritePin>
		osDelay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f002 f9ac 	bl	8003c86 <osDelay>
		HAL_GPIO_WritePin(GPIOC, Shift_Reg_Reset_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001934:	481a      	ldr	r0, [pc, #104]	; (80019a0 <SysManage+0x2dc>)
 8001936:	f001 f92f 	bl	8002b98 <HAL_GPIO_WritePin>
		//osDelay(1);
		for(i =20; i >= 0; i--){
 800193a:	2314      	movs	r3, #20
 800193c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001940:	e021      	b.n	8001986 <SysManage+0x2c2>

			if(cars_padded[i] != 0){
 8001942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	33c0      	adds	r3, #192	; 0xc0
 800194a:	443b      	add	r3, r7
 800194c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <SysManage+0x29a>
				HAL_GPIO_WritePin(GPIOC, Shift_Reg_Data_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	4811      	ldr	r0, [pc, #68]	; (80019a0 <SysManage+0x2dc>)
 800195a:	f001 f91d 	bl	8002b98 <HAL_GPIO_WritePin>
			}
			//osDelay(1);
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Clock_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <SysManage+0x2dc>)
 8001964:	f001 f918 	bl	8002b98 <HAL_GPIO_WritePin>
			//osDelay(1);
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Clock_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <SysManage+0x2dc>)
 800196e:	f001 f913 	bl	8002b98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, Shift_Reg_Data_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	2140      	movs	r1, #64	; 0x40
 8001976:	480a      	ldr	r0, [pc, #40]	; (80019a0 <SysManage+0x2dc>)
 8001978:	f001 f90e 	bl	8002b98 <HAL_GPIO_WritePin>
		for(i =20; i >= 0; i--){
 800197c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001980:	3b01      	subs	r3, #1
 8001982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800198a:	2b00      	cmp	r3, #0
 800198c:	dad9      	bge.n	8001942 <SysManage+0x27e>
			//osDelay(1);
		}
		osDelay(500);
 800198e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001992:	f002 f978 	bl	8003c86 <osDelay>
	{
 8001996:	e6aa      	b.n	80016ee <SysManage+0x2a>
 8001998:	200003f4 	.word	0x200003f4
 800199c:	200003e8 	.word	0x200003e8
 80019a0:	40020800 	.word	0x40020800

080019a4 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
=======
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
<<<<<<< HEAD
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e5a:	f000 facd 	bl	80023f8 <HAL_IncTick>
=======
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019b6:	f000 fa85 	bl	8001ec4 <HAL_IncTick>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40000800 	.word	0x40000800

08001e6c <Error_Handler>:
=======
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40000800 	.word	0x40000800

080019c8 <Error_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
=======
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
=======
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
<<<<<<< HEAD
 8001e74:	e7fe      	b.n	8001e74 <Error_Handler+0x8>
	...

08001e78 <HAL_MspInit>:
=======
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>
	...

080019d4 <HAL_MspInit>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
=======
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_MspInit+0x54>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_MspInit+0x54>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_MspInit+0x54>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_MspInit+0x54>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_MspInit+0x54>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_MspInit+0x54>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
=======
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_MspInit+0x54>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_MspInit+0x54>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_MspInit+0x54>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_MspInit+0x54>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_MspInit+0x54>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_MspInit+0x54>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	210f      	movs	r1, #15
 8001eba:	f06f 0001 	mvn.w	r0, #1
 8001ebe:	f000 ff3f 	bl	8002d40 <HAL_NVIC_SetPriority>
=======
 8001a12:	2200      	movs	r2, #0
 8001a14:	210f      	movs	r1, #15
 8001a16:	f06f 0001 	mvn.w	r0, #1
 8001a1a:	f000 fef7 	bl	800280c <HAL_NVIC_SetPriority>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_ADC_MspInit>:
=======
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_ADC_MspInit>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_ADC_MspInit+0x7c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d127      	bne.n	8001f42 <HAL_ADC_MspInit+0x72>
=======
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_ADC_MspInit+0x7c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d127      	bne.n	8001a9e <HAL_ADC_MspInit+0x72>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <HAL_ADC_MspInit+0x80>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <HAL_ADC_MspInit+0x80>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_ADC_MspInit+0x80>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_ADC_MspInit+0x80>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_ADC_MspInit+0x80>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_ADC_MspInit+0x80>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
=======
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_ADC_MspInit+0x80>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_ADC_MspInit+0x80>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_ADC_MspInit+0x80>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_ADC_MspInit+0x80>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_ADC_MspInit+0x80>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_ADC_MspInit+0x80>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Pot_In_Pin;
<<<<<<< HEAD
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_In_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	; (8001f54 <HAL_ADC_MspInit+0x84>)
 8001f3e:	f000 ff29 	bl	8002d94 <HAL_GPIO_Init>
=======
 8001a86:	2308      	movs	r3, #8
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_In_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_ADC_MspInit+0x84>)
 8001a9a:	f000 fee1 	bl	8002860 <HAL_GPIO_Init>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020800 	.word	0x40020800

08001f58 <HAL_SPI_MspInit>:
=======
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020800 	.word	0x40020800

08001ab4 <HAL_SPI_MspInit>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_SPI_MspInit+0x84>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12b      	bne.n	8001fd2 <HAL_SPI_MspInit+0x7a>
=======
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_SPI_MspInit+0x84>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12b      	bne.n	8001b2e <HAL_SPI_MspInit+0x7a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_SPI_MspInit+0x88>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
=======
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_SPI_MspInit+0x88>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_SPI_MspInit+0x88>)
 8001ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_SPI_MspInit+0x88>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_SPI_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_SPI_MspInit+0x88>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_SPI_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
<<<<<<< HEAD
 8001fb2:	23e0      	movs	r3, #224	; 0xe0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <HAL_SPI_MspInit+0x8c>)
 8001fce:	f000 fee1 	bl	8002d94 <HAL_GPIO_Init>
=======
 8001b0e:	23e0      	movs	r3, #224	; 0xe0
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_SPI_MspInit+0x8c>)
 8001b2a:	f000 fe99 	bl	8002860 <HAL_GPIO_Init>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40013000 	.word	0x40013000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_TIM_Base_MspInit+0x70>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_TIM_Base_MspInit+0x74>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_TIM_Base_MspInit+0x74>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_TIM_Base_MspInit+0x74>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002016:	e01a      	b.n	800204e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_TIM_Base_MspInit+0x78>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d115      	bne.n	800204e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_TIM_Base_MspInit+0x74>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <HAL_TIM_Base_MspInit+0x74>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_TIM_Base_MspInit+0x74>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2105      	movs	r1, #5
 8002042:	201d      	movs	r0, #29
 8002044:	f000 fe7c 	bl	8002d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002048:	201d      	movs	r0, #29
 800204a:	f000 fe95 	bl	8002d78 <HAL_NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40010000 	.word	0x40010000
 800205c:	40023800 	.word	0x40023800
 8002060:	40000400 	.word	0x40000400

08002064 <HAL_InitTick>:
=======
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40013000 	.word	0x40013000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_InitTick>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002064:	b580      	push	{r7, lr}
 8002066:	b08e      	sub	sp, #56	; 0x38
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
<<<<<<< HEAD
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_InitTick+0xe4>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_InitTick+0xe4>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6413      	str	r3, [r2, #64]	; 0x40
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_InitTick+0xe4>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002090:	f107 0210 	add.w	r2, r7, #16
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fcb4 	bl	8003a08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020aa:	f001 fc99 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80020ae:	6378      	str	r0, [r7, #52]	; 0x34
 80020b0:	e004      	b.n	80020bc <HAL_InitTick+0x58>
=======
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_InitTick+0xe4>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_InitTick+0xe4>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6413      	str	r3, [r2, #64]	; 0x40
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_InitTick+0xe4>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b70:	f107 0210 	add.w	r2, r7, #16
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fcaa 	bl	80034d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b8a:	f001 fc8f 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8001b8e:	6378      	str	r0, [r7, #52]	; 0x34
 8001b90:	e004      	b.n	8001b9c <HAL_InitTick+0x58>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 80020b2:	f001 fc95 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80020b6:	4603      	mov	r3, r0
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8001b92:	f001 fc8b 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8001b96:	4603      	mov	r3, r0
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
<<<<<<< HEAD
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	4a23      	ldr	r2, [pc, #140]	; (800214c <HAL_InitTick+0xe8>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	0c9b      	lsrs	r3, r3, #18
 80020c6:	3b01      	subs	r3, #1
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_InitTick+0xec>)
 80020cc:	4a21      	ldr	r2, [pc, #132]	; (8002154 <HAL_InitTick+0xf0>)
 80020ce:	601a      	str	r2, [r3, #0]
=======
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9e:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <HAL_InitTick+0xe8>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_InitTick+0xec>)
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_InitTick+0xf0>)
 8001bae:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_InitTick+0xec>)
 80020d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020d6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_InitTick+0xec>)
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_InitTick+0xec>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_InitTick+0xec>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_InitTick+0xec>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80020f0:	4817      	ldr	r0, [pc, #92]	; (8002150 <HAL_InitTick+0xec>)
 80020f2:	f001 fd44 	bl	8003b7e <HAL_TIM_Base_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80020fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11b      	bne.n	800213c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002104:	4812      	ldr	r0, [pc, #72]	; (8002150 <HAL_InitTick+0xec>)
 8002106:	f001 fd89 	bl	8003c1c <HAL_TIM_Base_Start_IT>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002110:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002114:	2b00      	cmp	r3, #0
 8002116:	d111      	bne.n	800213c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002118:	201e      	movs	r0, #30
 800211a:	f000 fe2d 	bl	8002d78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d808      	bhi.n	8002136 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	201e      	movs	r0, #30
 800212a:	f000 fe09 	bl	8002d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_InitTick+0xf4>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e002      	b.n	800213c <HAL_InitTick+0xd8>
=======
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_InitTick+0xec>)
 8001bb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_InitTick+0xec>)
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_InitTick+0xec>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_InitTick+0xec>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_InitTick+0xec>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <HAL_InitTick+0xec>)
 8001bd2:	f001 fd3a 	bl	800364a <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d11b      	bne.n	8001c1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001be4:	4812      	ldr	r0, [pc, #72]	; (8001c30 <HAL_InitTick+0xec>)
 8001be6:	f001 fd89 	bl	80036fc <HAL_TIM_Base_Start_IT>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d111      	bne.n	8001c1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf8:	201e      	movs	r0, #30
 8001bfa:	f000 fe23 	bl	8002844 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d808      	bhi.n	8001c16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	201e      	movs	r0, #30
 8001c0a:	f000 fdff 	bl	800280c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_InitTick+0xf4>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e002      	b.n	8001c1c <HAL_InitTick+0xd8>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< HEAD
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
=======
 8001c16:	2301      	movs	r3, #1
 8001c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< HEAD
 800213c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002140:	4618      	mov	r0, r3
 8002142:	3738      	adds	r7, #56	; 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	431bde83 	.word	0x431bde83
 8002150:	200008b0 	.word	0x200008b0
 8002154:	40000800 	.word	0x40000800
 8002158:	20000004 	.word	0x20000004

0800215c <NMI_Handler>:
=======
 8001c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3738      	adds	r7, #56	; 0x38
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	431bde83 	.word	0x431bde83
 8001c30:	200003fc 	.word	0x200003fc
 8001c34:	40000800 	.word	0x40000800
 8001c38:	20000004 	.word	0x20000004

08001c3c <NMI_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
=======
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:
=======
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
=======
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:
=======
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
=======
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:
=======
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
=======
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:
=======
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
=======
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <DebugMon_Handler>:
=======
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <DebugMon_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
=======
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM3_IRQHandler+0x10>)
 800218e:	f001 fdb5 	bl	8003cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000818 	.word	0x20000818

0800219c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <TIM4_IRQHandler+0x10>)
 80021a2:	f001 fdab 	bl	8003cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200008b0 	.word	0x200008b0

080021b0 <_getpid>:
=======
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <TIM4_IRQHandler+0x10>)
 8001c6e:	f001 fdb5 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200003fc 	.word	0x200003fc

08001c7c <_getpid>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_kill>:

int _kill(int pid, int sig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ca:	f005 fd45 	bl	8007c58 <__errno>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2216      	movs	r2, #22
 80021d2:	601a      	str	r2, [r3, #0]
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_exit>:

void _exit (int status)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffe7 	bl	80021c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f2:	e7fe      	b.n	80021f2 <_exit+0x12>

080021f4 <_read>:
=======
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c96:	f004 ffd7 	bl	8006c48 <__errno>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffe7 	bl	8001c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cbe:	e7fe      	b.n	8001cbe <_exit+0x12>

08001cc0 <_read>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
=======
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e00a      	b.n	800221c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002206:	f3af 8000 	nop.w
 800220a:	4601      	mov	r1, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbf0      	blt.n	8002206 <_read+0x12>
  }

  return len;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
=======
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e00a      	b.n	8001ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd2:	f3af 8000 	nop.w
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	b2ca      	uxtb	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf0      	blt.n	8001cd2 <_read+0x12>
  }

  return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e009      	b.n	8002254 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	dbf1      	blt.n	8002240 <_write+0x12>
  }
  return len;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_close>:

int _close(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_fstat>:
=======
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e009      	b.n	8001d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf1      	blt.n	8001d0c <_write+0x12>
  }
  return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_close>:

int _close(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_fstat>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228e:	605a      	str	r2, [r3, #4]
  return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_isatty>:

int _isatty(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
=======
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_isatty>:

int _isatty(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <_sbrk>:
=======
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_sbrk>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
=======
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
=======
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
=======
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f005 fcaa 	bl	8007c58 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20020000 	.word	0x20020000
 8002330:	00000400 	.word	0x00000400
 8002334:	200008f8 	.word	0x200008f8
 8002338:	200048e0 	.word	0x200048e0

0800233c <SystemInit>:
=======
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f004 ff3c 	bl	8006c48 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20020000 	.word	0x20020000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	20000444 	.word	0x20000444
 8001e04:	200042f0 	.word	0x200042f0

08001e08 <SystemInit>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <SystemInit+0x20>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <SystemInit+0x20>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <Reset_Handler>:
=======
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002364:	f7ff ffea 	bl	800233c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800236a:	490d      	ldr	r1, [pc, #52]	; (80023a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002370:	e002      	b.n	8002378 <LoopCopyDataInit>

08002372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002376:	3304      	adds	r3, #4

08002378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800237c:	d3f9      	bcc.n	8002372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002380:	4c0a      	ldr	r4, [pc, #40]	; (80023ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002384:	e001      	b.n	800238a <LoopFillZerobss>

08002386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002388:	3204      	adds	r2, #4

0800238a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800238e:	f005 fc69 	bl	8007c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002392:	f7fe fd3d 	bl	8000e10 <main>
  bx  lr    
 8002396:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800239c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023a4:	08008c5c 	.word	0x08008c5c
  ldr r2, =_sbss
 80023a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023ac:	200048dc 	.word	0x200048dc

080023b0 <ADC_IRQHandler>:
=======
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e30:	f7ff ffea 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	; (8001e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f004 fefb 	bl	8006c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5e:	f7fe ffbd 	bl	8000ddc <main>
  bx  lr    
 8001e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e70:	08007b20 	.word	0x08007b20
  ldr r2, =_sbss
 8001e74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e78:	200042ec 	.word	0x200042ec

08001e7c <ADC_IRQHandler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 80023b0:	e7fe      	b.n	80023b0 <ADC_IRQHandler>
	...

080023b4 <HAL_Init>:
=======
 8001e7c:	e7fe      	b.n	8001e7c <ADC_IRQHandler>
	...

08001e80 <HAL_Init>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <HAL_Init+0x40>)
 80023be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c2:	6013      	str	r3, [r2, #0]
=======
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <HAL_Init+0x40>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8e:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_Init+0x40>)
 80023ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ce:	6013      	str	r3, [r2, #0]
=======
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_Init+0x40>)
 8001e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e9a:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_Init+0x40>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023da:	6013      	str	r3, [r2, #0]
=======
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_Init+0x40>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80023dc:	2003      	movs	r0, #3
 80023de:	f000 fca4 	bl	8002d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e2:	200f      	movs	r0, #15
 80023e4:	f7ff fe3e 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e8:	f7ff fd46 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00

080023f8 <HAL_IncTick>:
=======
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 fca4 	bl	80027f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eae:	200f      	movs	r0, #15
 8001eb0:	f7ff fe48 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb4:	f7ff fd8e 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <HAL_IncTick>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000008 	.word	0x20000008
 800241c:	200008fc 	.word	0x200008fc

08002420 <HAL_GetTick>:
=======
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x20>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_IncTick+0x24>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_IncTick+0x24>)
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000448 	.word	0x20000448

08001eec <HAL_GetTick>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200008fc 	.word	0x200008fc

08002438 <HAL_ADC_Init>:
=======
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_GetTick+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000448 	.word	0x20000448

08001f04 <HAL_ADC_Init>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e033      	b.n	80024b6 <HAL_ADC_Init+0x7e>
=======
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e033      	b.n	8001f82 <HAL_ADC_Init+0x7e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_ADC_Init+0x32>
=======
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_ADC_Init+0x32>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fd3a 	bl	8001ed0 <HAL_ADC_MspInit>
=======
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fd82 	bl	8001a2c <HAL_ADC_MspInit>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800247e:	f023 0302 	bic.w	r3, r3, #2
 8002482:	f043 0202 	orr.w	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f4a:	f023 0302 	bic.w	r3, r3, #2
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 faa4 	bl	80029d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
 80024a6:	e001      	b.n	80024ac <HAL_ADC_Init+0x74>
=======
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 faa4 	bl	80024a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
 8001f72:	e001      	b.n	8001f78 <HAL_ADC_Init+0x74>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
=======
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_ADC_Start>:
=======
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_ADC_Start>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
=======
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Start+0x1a>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0b2      	b.n	8002640 <HAL_ADC_Start+0x180>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Start+0x1a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0b2      	b.n	800210c <HAL_ADC_Start+0x180>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d018      	beq.n	8002522 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	609a      	str	r2, [r3, #8]
=======
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d018      	beq.n	8001fee <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	609a      	str	r2, [r3, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8002500:	4b52      	ldr	r3, [pc, #328]	; (800264c <HAL_ADC_Start+0x18c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_ADC_Start+0x190>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9a      	lsrs	r2, r3, #18
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002514:	e002      	b.n	800251c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3b01      	subs	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f9      	bne.n	8002516 <HAL_ADC_Start+0x56>
=======
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_ADC_Start+0x18c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_ADC_Start+0x190>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9a      	lsrs	r2, r3, #18
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001fe0:	e002      	b.n	8001fe8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f9      	bne.n	8001fe2 <HAL_ADC_Start+0x56>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d17a      	bne.n	8002626 <HAL_ADC_Start+0x166>
=======
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d17a      	bne.n	80020f2 <HAL_ADC_Start+0x166>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800255a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002026:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256e:	d106      	bne.n	800257e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f023 0206 	bic.w	r2, r3, #6
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
 800257c:	e002      	b.n	8002584 <HAL_ADC_Start+0xc4>
=======
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	d106      	bne.n	800204a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f023 0206 	bic.w	r2, r3, #6
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
 8002048:	e002      	b.n	8002050 <HAL_ADC_Start+0xc4>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_ADC_Start+0x194>)
 800258e:	60fb      	str	r3, [r7, #12]
=======
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_ADC_Start+0x194>)
 800205a:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002598:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d12a      	bne.n	80025fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <HAL_ADC_Start+0x198>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d015      	beq.n	80025dc <HAL_ADC_Start+0x11c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <HAL_ADC_Start+0x19c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d105      	bne.n	80025c6 <HAL_ADC_Start+0x106>
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_ADC_Start+0x194>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a25      	ldr	r2, [pc, #148]	; (8002660 <HAL_ADC_Start+0x1a0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d136      	bne.n	800263e <HAL_ADC_Start+0x17e>
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_ADC_Start+0x194>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d130      	bne.n	800263e <HAL_ADC_Start+0x17e>
=======
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002064:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	2b00      	cmp	r3, #0
 8002070:	d12a      	bne.n	80020c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <HAL_ADC_Start+0x198>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d015      	beq.n	80020a8 <HAL_ADC_Start+0x11c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_ADC_Start+0x19c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d105      	bne.n	8002092 <HAL_ADC_Start+0x106>
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_ADC_Start+0x194>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a25      	ldr	r2, [pc, #148]	; (800212c <HAL_ADC_Start+0x1a0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d136      	bne.n	800210a <HAL_ADC_Start+0x17e>
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_ADC_Start+0x194>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d130      	bne.n	800210a <HAL_ADC_Start+0x17e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
<<<<<<< HEAD
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d129      	bne.n	800263e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	e020      	b.n	800263e <HAL_ADC_Start+0x17e>
=======
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d129      	bne.n	800210a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	e020      	b.n	800210a <HAL_ADC_Start+0x17e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <HAL_ADC_Start+0x198>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d11b      	bne.n	800263e <HAL_ADC_Start+0x17e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d114      	bne.n	800263e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	e00b      	b.n	800263e <HAL_ADC_Start+0x17e>
=======
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <HAL_ADC_Start+0x198>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d11b      	bne.n	800210a <HAL_ADC_Start+0x17e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d114      	bne.n	800210a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e00b      	b.n	800210a <HAL_ADC_Start+0x17e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000000 	.word	0x20000000
 8002650:	431bde83 	.word	0x431bde83
 8002654:	40012300 	.word	0x40012300
 8002658:	40012000 	.word	0x40012000
 800265c:	40012100 	.word	0x40012100
 8002660:	40012200 	.word	0x40012200

08002664 <HAL_ADC_PollForConversion>:
=======
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83
 8002120:	40012300 	.word	0x40012300
 8002124:	40012000 	.word	0x40012000
 8002128:	40012100 	.word	0x40012100
 800212c:	40012200 	.word	0x40012200

08002130 <HAL_ADC_PollForConversion>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
<<<<<<< HEAD
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
=======
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< HEAD
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002680:	d113      	bne.n	80026aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800268c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002690:	d10b      	bne.n	80026aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e063      	b.n	8002772 <HAL_ADC_PollForConversion+0x10e>
=======
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214c:	d113      	bne.n	8002176 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215c:	d10b      	bne.n	8002176 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e063      	b.n	800223e <HAL_ADC_PollForConversion+0x10e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Get tick */
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 80026aa:	f7ff feb9 	bl	8002420 <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026b0:	e021      	b.n	80026f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b8:	d01d      	beq.n	80026f6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_ADC_PollForConversion+0x6c>
 80026c0:	f7ff feae 	bl	8002420 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d212      	bcs.n	80026f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d00b      	beq.n	80026f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0204 	orr.w	r2, r3, #4
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e03d      	b.n	8002772 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d1d6      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x4e>
=======
 8002176:	f7ff feb9 	bl	8001eec <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800217c:	e021      	b.n	80021c2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d01d      	beq.n	80021c2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_ADC_PollForConversion+0x6c>
 800218c:	f7ff feae 	bl	8001eec <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d212      	bcs.n	80021c2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d00b      	beq.n	80021c2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f043 0204 	orr.w	r2, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e03d      	b.n	800223e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d1d6      	bne.n	800217e <HAL_ADC_PollForConversion+0x4e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0212 	mvn.w	r2, #18
 800270c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0212 	mvn.w	r2, #18
 80021d8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d123      	bne.n	8002770 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11f      	bne.n	8002770 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d123      	bne.n	800223c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d11f      	bne.n	800223c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002214:	2b00      	cmp	r3, #0
 8002216:	d111      	bne.n	800223c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }

  /* Return ADC state */
  return HAL_OK;
<<<<<<< HEAD
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_ADC_GetValue>:
=======
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_ADC_GetValue>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_ADC_ConfigChannel>:
=======
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADC_ConfigChannel>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
=======
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1c>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e105      	b.n	80029bc <HAL_ADC_ConfigChannel+0x228>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d925      	bls.n	800280c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68d9      	ldr	r1, [r3, #12]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	3b1e      	subs	r3, #30
 80027d6:	2207      	movs	r2, #7
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68d9      	ldr	r1, [r3, #12]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	4603      	mov	r3, r0
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4403      	add	r3, r0
 80027fe:	3b1e      	subs	r3, #30
 8002800:	409a      	lsls	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	e022      	b.n	8002852 <HAL_ADC_ConfigChannel+0xbe>
=======
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x1c>
 8002278:	2302      	movs	r3, #2
 800227a:	e105      	b.n	8002488 <HAL_ADC_ConfigChannel+0x228>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d925      	bls.n	80022d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43da      	mvns	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	400a      	ands	r2, r1
 80022b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68d9      	ldr	r1, [r3, #12]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	4603      	mov	r3, r0
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4403      	add	r3, r0
 80022ca:	3b1e      	subs	r3, #30
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	e022      	b.n	800231e <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6919      	ldr	r1, [r3, #16]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	2207      	movs	r2, #7
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6919      	ldr	r1, [r3, #16]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	4603      	mov	r3, r0
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4403      	add	r3, r0
 8002848:	409a      	lsls	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	611a      	str	r2, [r3, #16]
=======
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	2207      	movs	r2, #7
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	400a      	ands	r2, r1
 80022fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	4603      	mov	r3, r0
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	409a      	lsls	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d824      	bhi.n	80028a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	3b05      	subs	r3, #5
 800286c:	221f      	movs	r2, #31
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	400a      	ands	r2, r1
 800287a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	4618      	mov	r0, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	3b05      	subs	r3, #5
 8002896:	fa00 f203 	lsl.w	r2, r0, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
 80028a2:	e04c      	b.n	800293e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d824      	bhi.n	80028f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	3b23      	subs	r3, #35	; 0x23
 80028be:	221f      	movs	r2, #31
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43da      	mvns	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	400a      	ands	r2, r1
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b23      	subs	r3, #35	; 0x23
 80028e8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
 80028f4:	e023      	b.n	800293e <HAL_ADC_ConfigChannel+0x1aa>
=======
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d824      	bhi.n	8002370 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	3b05      	subs	r3, #5
 8002338:	221f      	movs	r2, #31
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	3b05      	subs	r3, #5
 8002362:	fa00 f203 	lsl.w	r2, r0, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	635a      	str	r2, [r3, #52]	; 0x34
 800236e:	e04c      	b.n	800240a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d824      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b23      	subs	r3, #35	; 0x23
 800238a:	221f      	movs	r2, #31
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43da      	mvns	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	400a      	ands	r2, r1
 8002398:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b23      	subs	r3, #35	; 0x23
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
 80023c0:	e023      	b.n	800240a <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b41      	subs	r3, #65	; 0x41
 8002908:	221f      	movs	r2, #31
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	400a      	ands	r2, r1
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b41      	subs	r3, #65	; 0x41
 8002932:	fa00 f203 	lsl.w	r2, r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b41      	subs	r3, #65	; 0x41
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b41      	subs	r3, #65	; 0x41
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_ADC_ConfigChannel+0x234>)
 8002940:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a21      	ldr	r2, [pc, #132]	; (80029cc <HAL_ADC_ConfigChannel+0x238>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d109      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1cc>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b12      	cmp	r3, #18
 8002952:	d105      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1cc>
=======
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_ADC_ConfigChannel+0x234>)
 800240c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_ADC_ConfigChannel+0x238>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d109      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1cc>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b12      	cmp	r3, #18
 800241e:	d105      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	605a      	str	r2, [r3, #4]
=======
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_ADC_ConfigChannel+0x238>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d123      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x21e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b10      	cmp	r3, #16
 8002970:	d003      	beq.n	800297a <HAL_ADC_ConfigChannel+0x1e6>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b11      	cmp	r3, #17
 8002978:	d11b      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x21e>
=======
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_ADC_ConfigChannel+0x238>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d123      	bne.n	800247e <HAL_ADC_ConfigChannel+0x21e>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d003      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x1e6>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b11      	cmp	r3, #17
 8002444:	d11b      	bne.n	800247e <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b10      	cmp	r3, #16
 800298c:	d111      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x21e>
=======
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b10      	cmp	r3, #16
 8002458:	d111      	bne.n	800247e <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_ADC_ConfigChannel+0x240>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	0c9a      	lsrs	r2, r3, #18
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029a4:	e002      	b.n	80029ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x212>
=======
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_ADC_ConfigChannel+0x23c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <HAL_ADC_ConfigChannel+0x240>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9a      	lsrs	r2, r3, #18
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002470:	e002      	b.n	8002478 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x212>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40012300 	.word	0x40012300
 80029cc:	40012000 	.word	0x40012000
 80029d0:	20000000 	.word	0x20000000
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <ADC_Init>:
=======
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40012300 	.word	0x40012300
 8002498:	40012000 	.word	0x40012000
 800249c:	20000000 	.word	0x20000000
 80024a0:	431bde83 	.word	0x431bde83

080024a4 <ADC_Init>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
=======
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80029e0:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <ADC_Init+0x1f0>)
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	021a      	lsls	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
=======
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <ADC_Init+0x1f0>)
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	021a      	lsls	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <ADC_Init+0x1f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e00f      	b.n	8002ad6 <ADC_Init+0xfe>
=======
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	4a58      	ldr	r2, [pc, #352]	; (8002698 <ADC_Init+0x1f4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800256c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	e00f      	b.n	80025a2 <ADC_Init+0xfe>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad4:	609a      	str	r2, [r3, #8]
=======
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a0:	609a      	str	r2, [r3, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0202 	bic.w	r2, r2, #2
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
 8002af0:	005a      	lsls	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <ADC_Init+0x164>
=======
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0202 	bic.w	r2, r2, #2
 80025b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7e1b      	ldrb	r3, [r3, #24]
 80025bc:	005a      	lsls	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <ADC_Init+0x164>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	035a      	lsls	r2, r3, #13
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e007      	b.n	8002b4c <ADC_Init+0x174>
=======
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	3b01      	subs	r3, #1
 80025fc:	035a      	lsls	r2, r3, #13
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	e007      	b.n	8002618 <ADC_Init+0x174>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4a:	605a      	str	r2, [r3, #4]
=======
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002616:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	051a      	lsls	r2, r3, #20
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8e:	025a      	lsls	r2, r3, #9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	029a      	lsls	r2, r3, #10
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	0f000001 	.word	0x0f000001

08002bd0 <__NVIC_SetPriorityGrouping>:
=======
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	3b01      	subs	r3, #1
 8002634:	051a      	lsls	r2, r3, #20
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800264c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800265a:	025a      	lsls	r2, r3, #9
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	029a      	lsls	r2, r3, #10
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40012300 	.word	0x40012300
 8002698:	0f000001 	.word	0x0f000001

0800269c <__NVIC_SetPriorityGrouping>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60d3      	str	r3, [r2, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_GetPriorityGrouping>:
=======
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_EnableIRQ>:
=======
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db0b      	blt.n	8002c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <__NVIC_EnableIRQ+0x38>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2001      	movs	r0, #1
 8002c56:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <__NVIC_SetPriority>:
=======
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	; (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db0a      	blt.n	8002c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	490c      	ldr	r1, [pc, #48]	; (8002cbc <__NVIC_SetPriority+0x4c>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	440b      	add	r3, r1
 8002c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002c98:	e00a      	b.n	8002cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <__NVIC_SetPriority+0x50>)
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	761a      	strb	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <NVIC_EncodePriority>:
=======
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	; (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	; 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	61fb      	str	r3, [r7, #28]
=======
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f1c3 0307 	rsb	r3, r3, #7
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	bf28      	it	cs
 8002ce2:	2304      	movcs	r3, #4
 8002ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d902      	bls.n	8002cf4 <NVIC_EncodePriority+0x30>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	e000      	b.n	8002cf6 <NVIC_EncodePriority+0x32>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	401a      	ands	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43d9      	mvns	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	4313      	orrs	r3, r2
         );
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_NVIC_SetPriorityGrouping>:
=======
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
=======
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff4c 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_NVIC_SetPriority>:
=======
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff4c 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_NVIC_SetPriority>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
=======
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002d52:	f7ff ff61 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	6978      	ldr	r0, [r7, #20]
 8002d5e:	f7ff ffb1 	bl	8002cc4 <NVIC_EncodePriority>
 8002d62:	4602      	mov	r2, r0
 8002d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ff80 	bl	8002c70 <__NVIC_SetPriority>
}
 8002d70:	bf00      	nop
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_NVIC_EnableIRQ>:
=======
 800281e:	f7ff ff61 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002822:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	6978      	ldr	r0, [r7, #20]
 800282a:	f7ff ffb1 	bl	8002790 <NVIC_EncodePriority>
 800282e:	4602      	mov	r2, r0
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff80 	bl	800273c <__NVIC_SetPriority>
}
 800283c:	bf00      	nop
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_NVIC_EnableIRQ>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
=======
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff54 	bl	8002c34 <__NVIC_EnableIRQ>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_GPIO_Init>:
=======
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff54 	bl	8002700 <__NVIC_EnableIRQ>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_GPIO_Init>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
=======
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e16b      	b.n	8003088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002db0:	2201      	movs	r2, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	f040 815a 	bne.w	8003082 <HAL_GPIO_Init+0x2ee>
=======
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e16b      	b.n	8002b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 815a 	bne.w	8002b4e <HAL_GPIO_Init+0x2ee>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d005      	beq.n	8002de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d130      	bne.n	8002e48 <HAL_GPIO_Init+0xb4>
=======
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb4>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0201 	and.w	r2, r3, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d017      	beq.n	8002e84 <HAL_GPIO_Init+0xf0>
=======
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	60da      	str	r2, [r3, #12]
=======
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d123      	bne.n	8002ed8 <HAL_GPIO_Init+0x144>
=======
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	08da      	lsrs	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0203 	and.w	r2, r3, #3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	601a      	str	r2, [r3, #0]
=======
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80b4 	beq.w	8003082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b60      	ldr	r3, [pc, #384]	; (80030a0 <HAL_GPIO_Init+0x30c>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a5f      	ldr	r2, [pc, #380]	; (80030a0 <HAL_GPIO_Init+0x30c>)
 8002f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	; (80030a0 <HAL_GPIO_Init+0x30c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f36:	4a5b      	ldr	r2, [pc, #364]	; (80030a4 <HAL_GPIO_Init+0x310>)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_GPIO_Init+0x314>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d02b      	beq.n	8002fba <HAL_GPIO_Init+0x226>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a51      	ldr	r2, [pc, #324]	; (80030ac <HAL_GPIO_Init+0x318>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d025      	beq.n	8002fb6 <HAL_GPIO_Init+0x222>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_GPIO_Init+0x31c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01f      	beq.n	8002fb2 <HAL_GPIO_Init+0x21e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x320>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d019      	beq.n	8002fae <HAL_GPIO_Init+0x21a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_GPIO_Init+0x324>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0x216>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_GPIO_Init+0x328>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00d      	beq.n	8002fa6 <HAL_GPIO_Init+0x212>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_GPIO_Init+0x32c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <HAL_GPIO_Init+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_GPIO_Init+0x330>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_GPIO_Init+0x20a>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e00e      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	e00c      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	e00a      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002faa:	2304      	movs	r3, #4
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fcc:	4935      	ldr	r1, [pc, #212]	; (80030a4 <HAL_GPIO_Init+0x310>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffe:	4a32      	ldr	r2, [pc, #200]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003028:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <HAL_GPIO_Init+0x334>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_GPIO_Init+0x334>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_GPIO_Init+0x334>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f67f ae90 	bls.w	8002db0 <HAL_GPIO_Init+0x1c>
=======
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80b4 	beq.w	8002b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <HAL_GPIO_Init+0x30c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a5f      	ldr	r2, [pc, #380]	; (8002b6c <HAL_GPIO_Init+0x30c>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_GPIO_Init+0x30c>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a5b      	ldr	r2, [pc, #364]	; (8002b70 <HAL_GPIO_Init+0x310>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_GPIO_Init+0x314>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_Init+0x226>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a51      	ldr	r2, [pc, #324]	; (8002b78 <HAL_GPIO_Init+0x318>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_Init+0x222>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a50      	ldr	r2, [pc, #320]	; (8002b7c <HAL_GPIO_Init+0x31c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_Init+0x21e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4f      	ldr	r2, [pc, #316]	; (8002b80 <HAL_GPIO_Init+0x320>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x21a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4e      	ldr	r2, [pc, #312]	; (8002b84 <HAL_GPIO_Init+0x324>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x216>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <HAL_GPIO_Init+0x328>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x212>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4c      	ldr	r2, [pc, #304]	; (8002b8c <HAL_GPIO_Init+0x32c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x20a>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00e      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e00c      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00a      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a98:	4935      	ldr	r1, [pc, #212]	; (8002b70 <HAL_GPIO_Init+0x310>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <HAL_GPIO_Init+0x334>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f ae90 	bls.w	800287c <HAL_GPIO_Init+0x1c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
  }
}
<<<<<<< HEAD
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40020400 	.word	0x40020400
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40021400 	.word	0x40021400
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40021c00 	.word	0x40021c00
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_GPIO_WritePin>:
=======
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40021800 	.word	0x40021800
 8002b90:	40021c00 	.word	0x40021c00
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_GPIO_WritePin>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
=======
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
=======
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 80030e8:	e003      	b.n	80030f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_RCC_OscConfig>:
=======
 8002bb4:	e003      	b.n	8002bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	041a      	lsls	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_RCC_OscConfig>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
=======
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e267      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
=======
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e267      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d075      	beq.n	800320a <HAL_RCC_OscConfig+0x10a>
=======
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d075      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 800311e:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b04      	cmp	r3, #4
 8003128:	d00c      	beq.n	8003144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312a:	4b85      	ldr	r3, [pc, #532]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003132:	2b08      	cmp	r3, #8
 8003134:	d112      	bne.n	800315c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003136:	4b82      	ldr	r3, [pc, #520]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003142:	d10b      	bne.n	800315c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003144:	4b7e      	ldr	r3, [pc, #504]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05b      	beq.n	8003208 <HAL_RCC_OscConfig+0x108>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d157      	bne.n	8003208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e242      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
=======
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d00c      	beq.n	8002c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d112      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c02:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c10:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x108>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d157      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e242      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d106      	bne.n	8003174 <HAL_RCC_OscConfig+0x74>
 8003166:	4b76      	ldr	r3, [pc, #472]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a75      	ldr	r2, [pc, #468]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xb0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x98>
 800317e:	4b70      	ldr	r3, [pc, #448]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6f      	ldr	r2, [pc, #444]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b6d      	ldr	r3, [pc, #436]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6c      	ldr	r2, [pc, #432]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xb0>
 8003198:	4b69      	ldr	r3, [pc, #420]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a68      	ldr	r2, [pc, #416]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7ff f932 	bl	8002420 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff f92e 	bl	8002420 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e207      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xc0>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x10a>
=======
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x74>
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a75      	ldr	r2, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xb0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x98>
 8002c4a:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6f      	ldr	r2, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6c      	ldr	r2, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xb0>
 8002c64:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a68      	ldr	r2, [pc, #416]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff f932 	bl	8001eec <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f92e 	bl	8001eec <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e207      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b5b      	ldr	r3, [pc, #364]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xc0>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80031e0:	f7ff f91e 	bl	8002420 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7ff f91a 	bl	8002420 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1f3      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b51      	ldr	r3, [pc, #324]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0xe8>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
=======
 8002cac:	f7ff f91e 	bl	8001eec <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff f91a 	bl	8001eec <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1f3      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xe8>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_OscConfig+0x1de>
=======
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d063      	beq.n	8002daa <HAL_RCC_OscConfig+0x1de>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8003216:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003222:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11c      	bne.n	8003268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322e:	4b44      	ldr	r3, [pc, #272]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x152>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e1c7      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
=======
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfa:	4b44      	ldr	r3, [pc, #272]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x152>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1c7      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4937      	ldr	r1, [pc, #220]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e03a      	b.n	80032de <HAL_RCC_OscConfig+0x1de>
=======
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4937      	ldr	r1, [pc, #220]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e03a      	b.n	8002daa <HAL_RCC_OscConfig+0x1de>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b34      	ldr	r3, [pc, #208]	; (8003344 <HAL_RCC_OscConfig+0x244>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7ff f8d3 	bl	8002420 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327e:	f7ff f8cf 	bl	8002420 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1a8      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x17e>
=======
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x244>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7ff f8d3 	bl	8001eec <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7ff f8cf 	bl	8001eec <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1a8      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x17e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4925      	ldr	r1, [pc, #148]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x1de>
=======
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4925      	ldr	r1, [pc, #148]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x1de>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCC_OscConfig+0x244>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7ff f8b2 	bl	8002420 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c0:	f7ff f8ae 	bl	8002420 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e187      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1c0>
=======
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCC_OscConfig+0x244>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7ff f8b2 	bl	8001eec <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7ff f8ae 	bl	8001eec <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e187      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d036      	beq.n	8003358 <HAL_RCC_OscConfig+0x258>
=======
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d036      	beq.n	8002e24 <HAL_RCC_OscConfig+0x258>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_RCC_OscConfig+0x248>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7ff f892 	bl	8002420 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003300:	f7ff f88e 	bl	8002420 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e167      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_OscConfig+0x240>)
 8003314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x200>
 800331e:	e01b      	b.n	8003358 <HAL_RCC_OscConfig+0x258>
=======
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x248>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7ff f892 	bl	8001eec <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff f88e 	bl	8001eec <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e167      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_OscConfig+0x240>)
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x200>
 8002dea:	e01b      	b.n	8002e24 <HAL_RCC_OscConfig+0x258>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x248>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003326:	f7ff f87b 	bl	8002420 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	e00e      	b.n	800334c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332e:	f7ff f877 	bl	8002420 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d907      	bls.n	800334c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e150      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
 8003340:	40023800 	.word	0x40023800
 8003344:	42470000 	.word	0x42470000
 8003348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ea      	bne.n	800332e <HAL_RCC_OscConfig+0x22e>
=======
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_OscConfig+0x248>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df2:	f7ff f87b 	bl	8001eec <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	e00e      	b.n	8002e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfa:	f7ff f877 	bl	8001eec <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d907      	bls.n	8002e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e150      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	42470000 	.word	0x42470000
 8002e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ea      	bne.n	8002dfa <HAL_RCC_OscConfig+0x22e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8097 	beq.w	8003494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]
=======
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8097 	beq.w	8002f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800336a:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a7c      	ldr	r2, [pc, #496]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b77      	ldr	r3, [pc, #476]	; (8003574 <HAL_RCC_OscConfig+0x474>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b74      	ldr	r3, [pc, #464]	; (8003574 <HAL_RCC_OscConfig+0x474>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a73      	ldr	r2, [pc, #460]	; (8003574 <HAL_RCC_OscConfig+0x474>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7ff f837 	bl	8002420 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7ff f833 	bl	8002420 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e10c      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <HAL_RCC_OscConfig+0x474>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2b6>
=======
 8002e36:	4b81      	ldr	r3, [pc, #516]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	4b7d      	ldr	r3, [pc, #500]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a7c      	ldr	r2, [pc, #496]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b7a      	ldr	r3, [pc, #488]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b77      	ldr	r3, [pc, #476]	; (8003040 <HAL_RCC_OscConfig+0x474>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6e:	4b74      	ldr	r3, [pc, #464]	; (8003040 <HAL_RCC_OscConfig+0x474>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a73      	ldr	r2, [pc, #460]	; (8003040 <HAL_RCC_OscConfig+0x474>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7ff f837 	bl	8001eec <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7ff f833 	bl	8001eec <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e10c      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCC_OscConfig+0x474>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x2ea>
 80033dc:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	4a63      	ldr	r2, [pc, #396]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6713      	str	r3, [r2, #112]	; 0x70
 80033e8:	e01c      	b.n	8003424 <HAL_RCC_OscConfig+0x324>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x30c>
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a5e      	ldr	r2, [pc, #376]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033f8:	f043 0304 	orr.w	r3, r3, #4
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	4b5c      	ldr	r3, [pc, #368]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a5b      	ldr	r2, [pc, #364]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0x324>
 800340c:	4b58      	ldr	r3, [pc, #352]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a57      	ldr	r2, [pc, #348]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
 8003418:	4b55      	ldr	r3, [pc, #340]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a54      	ldr	r2, [pc, #336]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800341e:	f023 0304 	bic.w	r3, r3, #4
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d015      	beq.n	8003458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe fff8 	bl	8002420 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe fff4 	bl	8002420 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0cb      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	4b49      	ldr	r3, [pc, #292]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ee      	beq.n	8003434 <HAL_RCC_OscConfig+0x334>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x382>
=======
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2ea>
 8002ea8:	4b64      	ldr	r3, [pc, #400]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a63      	ldr	r2, [pc, #396]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e01c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x324>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x30c>
 8002ebe:	4b5f      	ldr	r3, [pc, #380]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a5e      	ldr	r2, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	4b5c      	ldr	r3, [pc, #368]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a5b      	ldr	r2, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x324>
 8002ed8:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	4b55      	ldr	r3, [pc, #340]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a54      	ldr	r2, [pc, #336]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d015      	beq.n	8002f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fff8 	bl	8001eec <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7fe fff4 	bl	8001eec <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0cb      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ee      	beq.n	8002f00 <HAL_RCC_OscConfig+0x334>
 8002f22:	e014      	b.n	8002f4e <HAL_RCC_OscConfig+0x382>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003458:	f7fe ffe2 	bl	8002420 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7fe ffde 	bl	8002420 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e0b5      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ee      	bne.n	8003460 <HAL_RCC_OscConfig+0x360>
=======
 8002f24:	f7fe ffe2 	bl	8001eec <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fe ffde 	bl	8001eec <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0b5      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ee      	bne.n	8002f2c <HAL_RCC_OscConfig+0x360>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	4a38      	ldr	r2, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800348e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003492:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	4a38      	ldr	r2, [pc, #224]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80a1 	beq.w	80035e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d05c      	beq.n	8003564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d141      	bne.n	8003536 <HAL_RCC_OscConfig+0x436>
=======
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a1 	beq.w	80030ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d05c      	beq.n	8003030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d141      	bne.n	8003002 <HAL_RCC_OscConfig+0x436>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_RCC_OscConfig+0x478>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe ffb2 	bl	8002420 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe ffae 	bl	8002420 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e087      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	4b27      	ldr	r3, [pc, #156]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x3c0>
=======
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_OscConfig+0x478>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe ffb2 	bl	8001eec <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe ffae 	bl	8001eec <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e087      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	3b01      	subs	r3, #1
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	061b      	lsls	r3, r3, #24
 8003502:	491b      	ldr	r1, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
=======
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	491b      	ldr	r1, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <HAL_RCC_OscConfig+0x478>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe ff87 	bl	8002420 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe ff83 	bl	8002420 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e05c      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x416>
 8003534:	e054      	b.n	80035e0 <HAL_RCC_OscConfig+0x4e0>
=======
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x478>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fe ff87 	bl	8001eec <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe ff83 	bl	8001eec <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e05c      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x416>
 8003000:	e054      	b.n	80030ac <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x478>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe ff70 	bl	8002420 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe ff6c 	bl	8002420 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e045      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x444>
 8003562:	e03d      	b.n	80035e0 <HAL_RCC_OscConfig+0x4e0>
=======
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x478>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe ff70 	bl	8001eec <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe ff6c 	bl	8001eec <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e045      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x470>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x444>
 800302e:	e03d      	b.n	80030ac <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e038      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
 8003570:	40023800 	.word	0x40023800
 8003574:	40007000 	.word	0x40007000
 8003578:	42470060 	.word	0x42470060
=======
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e038      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
 800303c:	40023800 	.word	0x40023800
 8003040:	40007000 	.word	0x40007000
 8003044:	42470060 	.word	0x42470060
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x4ec>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	60fb      	str	r3, [r7, #12]
=======
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <HAL_RCC_OscConfig+0x4ec>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d028      	beq.n	80035dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d121      	bne.n	80035dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d11a      	bne.n	80035dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d111      	bne.n	80035dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	3b01      	subs	r3, #1
 80035c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x4e2>
=======
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d028      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d121      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d11a      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003080:	4293      	cmp	r3, r2
 8003082:	d111      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	3b01      	subs	r3, #1
 8003092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800

080035f0 <HAL_RCC_ClockConfig>:
=======
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800

080030bc <HAL_RCC_ClockConfig>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
=======
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0cc      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
=======
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0cc      	b.n	800326a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003604:	4b68      	ldr	r3, [pc, #416]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d90c      	bls.n	800362c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
=======
 80030d0:	4b68      	ldr	r3, [pc, #416]	; (8003274 <HAL_RCC_ClockConfig+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d90c      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b65      	ldr	r3, [pc, #404]	; (8003274 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800361a:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0b8      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
=======
 80030e6:	4b63      	ldr	r3, [pc, #396]	; (8003274 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0b8      	b.n	800326a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_ClockConfig+0x8a>
=======
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800365c:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003666:	6093      	str	r3, [r2, #8]
=======
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003110:	4b59      	ldr	r3, [pc, #356]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a58      	ldr	r2, [pc, #352]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800311a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003128:	4b53      	ldr	r3, [pc, #332]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a52      	ldr	r2, [pc, #328]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003132:	6093      	str	r3, [r2, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003668:	4b50      	ldr	r3, [pc, #320]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	494d      	ldr	r1, [pc, #308]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
=======
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	494d      	ldr	r1, [pc, #308]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d044      	beq.n	8003710 <HAL_RCC_ClockConfig+0x120>
=======
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d044      	beq.n	80031dc <HAL_RCC_ClockConfig+0x120>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d119      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
=======
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d119      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07f      	b.n	800326a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
=======
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d003      	beq.n	800317a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003176:	2b03      	cmp	r3, #3
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317a:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06f      	b.n	800326a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80036be:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e067      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
=======
 800318a:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e067      	b.n	800326a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 0203 	bic.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4934      	ldr	r1, [pc, #208]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e0:	f7fe fe9e 	bl	8002420 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fe fe9a 	bl	8002420 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e04f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 020c 	and.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	429a      	cmp	r2, r3
 800370e:	d1eb      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xf8>
=======
 800319a:	4b37      	ldr	r3, [pc, #220]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4934      	ldr	r1, [pc, #208]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ac:	f7fe fe9e 	bl	8001eec <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7fe fe9a 	bl	8001eec <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e04f      	b.n	800326a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d20c      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
=======
 80031dc:	4b25      	ldr	r3, [pc, #148]	; (8003274 <HAL_RCC_ClockConfig+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d20c      	bcs.n	8003204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e032      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
=======
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e032      	b.n	800326a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4916      	ldr	r1, [pc, #88]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
=======
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4916      	ldr	r1, [pc, #88]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	490e      	ldr	r1, [pc, #56]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
=======
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	490e      	ldr	r1, [pc, #56]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003776:	f000 f821 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 800377a:	4602      	mov	r2, r0
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	490a      	ldr	r1, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	5ccb      	ldrb	r3, [r1, r3]
 800378a:	fa22 f303 	lsr.w	r3, r2, r3
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fc64 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08008b54 	.word	0x08008b54
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20000004 	.word	0x20000004

080037bc <HAL_RCC_GetSysClockFreq>:
=======
 8003242:	f000 f821 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003246:	4602      	mov	r2, r0
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	490a      	ldr	r1, [pc, #40]	; (800327c <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	5ccb      	ldrb	r3, [r1, r3]
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	4a09      	ldr	r2, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fc6e 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023c00 	.word	0x40023c00
 8003278:	40023800 	.word	0x40023800
 800327c:	08007a18 	.word	0x08007a18
 8003280:	20000000 	.word	0x20000000
 8003284:	20000004 	.word	0x20000004

08003288 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80037bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c0:	b094      	sub	sp, #80	; 0x50
 80037c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	647b      	str	r3, [r7, #68]	; 0x44
 80037c8:	2300      	movs	r3, #0
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037cc:	2300      	movs	r3, #0
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d4:	4b79      	ldr	r3, [pc, #484]	; (80039bc <HAL_RCC_GetSysClockFreq+0x200>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d00d      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x40>
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	f200 80e1 	bhi.w	80039a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ee:	e0db      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8003288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800328c:	b094      	sub	sp, #80	; 0x50
 800328e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	647b      	str	r3, [r7, #68]	; 0x44
 8003294:	2300      	movs	r3, #0
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003298:	2300      	movs	r3, #0
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a0:	4b79      	ldr	r3, [pc, #484]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d00d      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x40>
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	f200 80e1 	bhi.w	8003474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x34>
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ba:	e0db      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80037f0:	4b73      	ldr	r3, [pc, #460]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037f4:	e0db      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80032bc:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_GetSysClockFreq+0x204>)
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032c0:	e0db      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80037f6:	4b73      	ldr	r3, [pc, #460]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80037f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037fa:	e0d8      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80032c2:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_GetSysClockFreq+0x208>)
 80032c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032c6:	e0d8      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 80037fc:	4b6f      	ldr	r3, [pc, #444]	; (80039bc <HAL_RCC_GetSysClockFreq+0x200>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003806:	4b6d      	ldr	r3, [pc, #436]	; (80039bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003812:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	2200      	movs	r2, #0
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38
 800381c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
 8003826:	2300      	movs	r3, #0
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
 800382a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800382e:	4622      	mov	r2, r4
 8003830:	462b      	mov	r3, r5
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003840:	0150      	lsls	r0, r2, #5
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4621      	mov	r1, r4
 8003848:	1a51      	subs	r1, r2, r1
 800384a:	6139      	str	r1, [r7, #16]
 800384c:	4629      	mov	r1, r5
 800384e:	eb63 0301 	sbc.w	r3, r3, r1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003860:	4659      	mov	r1, fp
 8003862:	018b      	lsls	r3, r1, #6
 8003864:	4651      	mov	r1, sl
 8003866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800386a:	4651      	mov	r1, sl
 800386c:	018a      	lsls	r2, r1, #6
 800386e:	4651      	mov	r1, sl
 8003870:	ebb2 0801 	subs.w	r8, r2, r1
 8003874:	4659      	mov	r1, fp
 8003876:	eb63 0901 	sbc.w	r9, r3, r1
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800388e:	4690      	mov	r8, r2
 8003890:	4699      	mov	r9, r3
 8003892:	4623      	mov	r3, r4
 8003894:	eb18 0303 	adds.w	r3, r8, r3
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	462b      	mov	r3, r5
 800389c:	eb49 0303 	adc.w	r3, r9, r3
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ae:	4629      	mov	r1, r5
 80038b0:	024b      	lsls	r3, r1, #9
 80038b2:	4621      	mov	r1, r4
 80038b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038b8:	4621      	mov	r1, r4
 80038ba:	024a      	lsls	r2, r1, #9
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	2200      	movs	r2, #0
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038cc:	f7fd f8ee 	bl	8000aac <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4613      	mov	r3, r2
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	e058      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 80032c8:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d2:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d063      	beq.n	80033a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	2200      	movs	r2, #0
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
 80032f2:	2300      	movs	r3, #0
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
 80032f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032fa:	4622      	mov	r2, r4
 80032fc:	462b      	mov	r3, r5
 80032fe:	f04f 0000 	mov.w	r0, #0
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	0159      	lsls	r1, r3, #5
 8003308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330c:	0150      	lsls	r0, r2, #5
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4621      	mov	r1, r4
 8003314:	1a51      	subs	r1, r2, r1
 8003316:	6139      	str	r1, [r7, #16]
 8003318:	4629      	mov	r1, r5
 800331a:	eb63 0301 	sbc.w	r3, r3, r1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800332c:	4659      	mov	r1, fp
 800332e:	018b      	lsls	r3, r1, #6
 8003330:	4651      	mov	r1, sl
 8003332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003336:	4651      	mov	r1, sl
 8003338:	018a      	lsls	r2, r1, #6
 800333a:	4651      	mov	r1, sl
 800333c:	ebb2 0801 	subs.w	r8, r2, r1
 8003340:	4659      	mov	r1, fp
 8003342:	eb63 0901 	sbc.w	r9, r3, r1
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800335a:	4690      	mov	r8, r2
 800335c:	4699      	mov	r9, r3
 800335e:	4623      	mov	r3, r4
 8003360:	eb18 0303 	adds.w	r3, r8, r3
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	462b      	mov	r3, r5
 8003368:	eb49 0303 	adc.w	r3, r9, r3
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800337a:	4629      	mov	r1, r5
 800337c:	024b      	lsls	r3, r1, #9
 800337e:	4621      	mov	r1, r4
 8003380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003384:	4621      	mov	r1, r4
 8003386:	024a      	lsls	r2, r1, #9
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338e:	2200      	movs	r2, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
 8003392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003398:	f7fd fb88 	bl	8000aac <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a4:	e058      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <HAL_RCC_GetSysClockFreq+0x200>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	2200      	movs	r2, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	4611      	mov	r1, r2
 80038e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	f04f 0000 	mov.w	r0, #0
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	0159      	lsls	r1, r3, #5
 8003902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003906:	0150      	lsls	r0, r2, #5
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4641      	mov	r1, r8
 800390e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003912:	4649      	mov	r1, r9
 8003914:	eb63 0b01 	sbc.w	fp, r3, r1
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800392c:	ebb2 040a 	subs.w	r4, r2, sl
 8003930:	eb63 050b 	sbc.w	r5, r3, fp
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	00eb      	lsls	r3, r5, #3
 800393e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003942:	00e2      	lsls	r2, r4, #3
 8003944:	4614      	mov	r4, r2
 8003946:	461d      	mov	r5, r3
 8003948:	4643      	mov	r3, r8
 800394a:	18e3      	adds	r3, r4, r3
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	464b      	mov	r3, r9
 8003950:	eb45 0303 	adc.w	r3, r5, r3
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003962:	4629      	mov	r1, r5
 8003964:	028b      	lsls	r3, r1, #10
 8003966:	4621      	mov	r1, r4
 8003968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800396c:	4621      	mov	r1, r4
 800396e:	028a      	lsls	r2, r1, #10
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	2200      	movs	r2, #0
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	61fa      	str	r2, [r7, #28]
 800397c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003980:	f7fd f894 	bl	8000aac <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_GetSysClockFreq+0x200>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	3301      	adds	r3, #1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800399c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800399e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a6:	e002      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	2200      	movs	r2, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	4611      	mov	r1, r2
 80033b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
 80033bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c0:	4642      	mov	r2, r8
 80033c2:	464b      	mov	r3, r9
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	0159      	lsls	r1, r3, #5
 80033ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d2:	0150      	lsls	r0, r2, #5
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4641      	mov	r1, r8
 80033da:	ebb2 0a01 	subs.w	sl, r2, r1
 80033de:	4649      	mov	r1, r9
 80033e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f8:	ebb2 040a 	subs.w	r4, r2, sl
 80033fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	00eb      	lsls	r3, r5, #3
 800340a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340e:	00e2      	lsls	r2, r4, #3
 8003410:	4614      	mov	r4, r2
 8003412:	461d      	mov	r5, r3
 8003414:	4643      	mov	r3, r8
 8003416:	18e3      	adds	r3, r4, r3
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	464b      	mov	r3, r9
 800341c:	eb45 0303 	adc.w	r3, r5, r3
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342e:	4629      	mov	r1, r5
 8003430:	028b      	lsls	r3, r1, #10
 8003432:	4621      	mov	r1, r4
 8003434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003438:	4621      	mov	r1, r4
 800343a:	028a      	lsls	r2, r1, #10
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	61fa      	str	r2, [r7, #28]
 8003448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800344c:	f7fd fb2e 	bl	8000aac <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetSysClockFreq+0x200>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003472:	e002      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3750      	adds	r7, #80	; 0x50
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	007a1200 	.word	0x007a1200

080039c8 <HAL_RCC_GetHCLKFreq>:
=======
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetSysClockFreq+0x204>)
 8003476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800347c:	4618      	mov	r0, r3
 800347e:	3750      	adds	r7, #80	; 0x50
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	007a1200 	.word	0x007a1200

08003494 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000000 	.word	0x20000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
=======
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000000 	.word	0x20000000

080034ac <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e4:	f7ff fff0 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0a9b      	lsrs	r3, r3, #10
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800
 8003a04:	08008b64 	.word	0x08008b64

08003a08 <HAL_RCC_GetClockConfig>:
=======
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08007a28 	.word	0x08007a28

080034d4 <HAL_RCC_GetClockConfig>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	220f      	movs	r2, #15
 8003a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0203 	and.w	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCC_GetClockConfig+0x5c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_RCC_GetClockConfig+0x5c>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_GetClockConfig+0x5c>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <HAL_RCC_GetClockConfig+0x60>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	601a      	str	r2, [r3, #0]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40023c00 	.word	0x40023c00

08003a6c <HAL_SPI_Init>:
=======
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	220f      	movs	r2, #15
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_RCC_GetClockConfig+0x5c>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCC_GetClockConfig+0x5c>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_RCC_GetClockConfig+0x5c>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_GetClockConfig+0x5c>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	08db      	lsrs	r3, r3, #3
 800350e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_RCC_GetClockConfig+0x60>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0207 	and.w	r2, r3, #7
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40023c00 	.word	0x40023c00

08003538 <HAL_SPI_Init>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07b      	b.n	8003b76 <HAL_SPI_Init+0x10a>
=======
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07b      	b.n	8003642 <HAL_SPI_Init+0x10a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_SPI_Init+0x2c>
=======
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_SPI_Init+0x2c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8e:	d009      	beq.n	8003aa4 <HAL_SPI_Init+0x38>
=======
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355a:	d009      	beq.n	8003570 <HAL_SPI_Init+0x38>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_SPI_Init+0x38>
=======
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
 8003562:	e005      	b.n	8003570 <HAL_SPI_Init+0x38>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
=======
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	615a      	str	r2, [r3, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe fa4a 	bl	8001f58 <HAL_SPI_MspInit>
=======
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe fa92 	bl	8001ab4 <HAL_SPI_MspInit>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ada:	601a      	str	r2, [r3, #0]
=======
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a6:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	ea42 0103 	orr.w	r1, r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
=======
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	ea42 0103 	orr.w	r1, r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0104 	and.w	r1, r3, #4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	f003 0210 	and.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
=======
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	f003 0104 	and.w	r1, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	f003 0210 	and.w	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003630:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e041      	b.n	80036e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f839 	bl	80036e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f000 f9bf 	bl	8003a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d001      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04e      	b.n	80037b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d01d      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_TIM_Base_Start_IT+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d111      	bne.n	80037a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d010      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379e:	e007      	b.n	80037b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
  }
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e041      	b.n	8003c14 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fe fa1f 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
=======
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40010400 	.word	0x40010400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40001800 	.word	0x40001800

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d020      	beq.n	8003840 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0202 	mvn.w	r2, #2
 8003810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8d2 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8c4 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8d5 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d020      	beq.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8ac 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f89e 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8af 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0208 	mvn.w	r2, #8
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f886 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f878 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f889 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0210 	mvn.w	r2, #16
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2208      	movs	r2, #8
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f860 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f852 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f863 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0201 	mvn.w	r2, #1
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe f82e 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f906 	bl	8003b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f834 	bl	80039f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0220 	mvn.w	r2, #32
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8d8 	bl	8003b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2a:	d00f      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <TIM_Base_SetConfig+0x130>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a42      	ldr	r2, [pc, #264]	; (8003b40 <TIM_Base_SetConfig+0x134>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a41      	ldr	r2, [pc, #260]	; (8003b44 <TIM_Base_SetConfig+0x138>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <TIM_Base_SetConfig+0x13c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d108      	bne.n	8003a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a35      	ldr	r2, [pc, #212]	; (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02b      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d027      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <TIM_Base_SetConfig+0x130>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d023      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a31      	ldr	r2, [pc, #196]	; (8003b40 <TIM_Base_SetConfig+0x134>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <TIM_Base_SetConfig+0x138>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01b      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <TIM_Base_SetConfig+0x13c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d017      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2e      	ldr	r2, [pc, #184]	; (8003b4c <TIM_Base_SetConfig+0x140>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <TIM_Base_SetConfig+0x144>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00f      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <TIM_Base_SetConfig+0x148>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <TIM_Base_SetConfig+0x14c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2a      	ldr	r2, [pc, #168]	; (8003b5c <TIM_Base_SetConfig+0x150>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <TIM_Base_SetConfig+0x154>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a10      	ldr	r2, [pc, #64]	; (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0xf8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <TIM_Base_SetConfig+0x13c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	611a      	str	r2, [r3, #16]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40010400 	.word	0x40010400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800
 8003b58:	40001800 	.word	0x40001800
 8003b5c:	40001c00 	.word	0x40001c00
 8003b60:	40002000 	.word	0x40002000

08003b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b9e:	2b84      	cmp	r3, #132	; 0x84
 8003ba0:	d005      	beq.n	8003bae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ba2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3303      	adds	r3, #3
 8003bac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <inHandlerMode>:
#endif
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f000 fa7d 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

<<<<<<< HEAD
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
=======
/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

<<<<<<< HEAD
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e04e      	b.n	8003cd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d01d      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <HAL_TIM_Base_Start_IT+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d111      	bne.n	8003cc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d010      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbe:	e007      	b.n	8003cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40010400 	.word	0x40010400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40001800 	.word	0x40001800

08003cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d020      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01b      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0202 	mvn.w	r2, #2
 8003d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f999 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f98b 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f99c 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d020      	beq.n	8003dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01b      	beq.n	8003dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0204 	mvn.w	r2, #4
 8003d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f973 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003d98:	e005      	b.n	8003da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f965 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f976 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d020      	beq.n	8003df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01b      	beq.n	8003df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0208 	mvn.w	r2, #8
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f94d 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f93f 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f950 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d020      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0210 	mvn.w	r2, #16
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f927 	bl	800407e <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f919 	bl	800406a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f92a 	bl	8004092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00c      	beq.n	8003e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0201 	mvn.w	r2, #1
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd fff0 	bl	8001e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00c      	beq.n	8003e8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fae4 	bl	8004454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00c      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f8fb 	bl	80040a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0220 	mvn.w	r2, #32
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fab6 	bl	8004440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e0b4      	b.n	8004062 <HAL_TIM_ConfigClockSource+0x186>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f30:	d03e      	beq.n	8003fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f36:	f200 8087 	bhi.w	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3e:	f000 8086 	beq.w	800404e <HAL_TIM_ConfigClockSource+0x172>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d87f      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b70      	cmp	r3, #112	; 0x70
 8003f4a:	d01a      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xa6>
 8003f4c:	2b70      	cmp	r3, #112	; 0x70
 8003f4e:	d87b      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b60      	cmp	r3, #96	; 0x60
 8003f52:	d050      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f54:	2b60      	cmp	r3, #96	; 0x60
 8003f56:	d877      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b50      	cmp	r3, #80	; 0x50
 8003f5a:	d03c      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f5c:	2b50      	cmp	r3, #80	; 0x50
 8003f5e:	d873      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d058      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x13a>
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d86f      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b30      	cmp	r3, #48	; 0x30
 8003f6a:	d064      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f6c:	2b30      	cmp	r3, #48	; 0x30
 8003f6e:	d86b      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d060      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d867      	bhi.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d05c      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d05a      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	e062      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f92:	f000 f9b9 	bl	8004308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	609a      	str	r2, [r3, #8]
      break;
 8003fae:	e04f      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc0:	f000 f9a2 	bl	8004308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd2:	609a      	str	r2, [r3, #8]
      break;
 8003fd4:	e03c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f000 f916 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2150      	movs	r1, #80	; 0x50
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f96f 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e02c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004002:	461a      	mov	r2, r3
 8004004:	f000 f935 	bl	8004272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2160      	movs	r1, #96	; 0x60
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f95f 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8004014:	e01c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004022:	461a      	mov	r2, r3
 8004024:	f000 f8f6 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2140      	movs	r1, #64	; 0x40
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f94f 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8004034:	e00c      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f000 f946 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8004046:	e003      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e000      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800404e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a43      	ldr	r2, [pc, #268]	; (80041ec <TIM_Base_SetConfig+0x130>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a42      	ldr	r2, [pc, #264]	; (80041f0 <TIM_Base_SetConfig+0x134>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a41      	ldr	r2, [pc, #260]	; (80041f4 <TIM_Base_SetConfig+0x138>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <TIM_Base_SetConfig+0x13c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a35      	ldr	r2, [pc, #212]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d027      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a32      	ldr	r2, [pc, #200]	; (80041ec <TIM_Base_SetConfig+0x130>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d023      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <TIM_Base_SetConfig+0x134>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a30      	ldr	r2, [pc, #192]	; (80041f4 <TIM_Base_SetConfig+0x138>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <TIM_Base_SetConfig+0x13c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d017      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <TIM_Base_SetConfig+0x140>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2d      	ldr	r2, [pc, #180]	; (8004200 <TIM_Base_SetConfig+0x144>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00f      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <TIM_Base_SetConfig+0x148>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <TIM_Base_SetConfig+0x14c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <TIM_Base_SetConfig+0x150>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <TIM_Base_SetConfig+0x154>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0xf8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <TIM_Base_SetConfig+0x13c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d103      	bne.n	80041bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f023 0201 	bic.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	611a      	str	r2, [r3, #16]
  }
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40010400 	.word	0x40010400
 80041fc:	40014000 	.word	0x40014000
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800
 8004208:	40001800 	.word	0x40001800
 800420c:	40001c00 	.word	0x40001c00
 8004210:	40002000 	.word	0x40002000

08004214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800423e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 030a 	bic.w	r3, r3, #10
 8004250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004272:	b480      	push	{r7}
 8004274:	b087      	sub	sp, #28
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f023 0210 	bic.w	r2, r3, #16
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800429c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f043 0307 	orr.w	r3, r3, #7
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	431a      	orrs	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e05a      	b.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a21      	ldr	r2, [pc, #132]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ac:	d01d      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d018      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10c      	bne.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40010400 	.word	0x40010400
 8004438:	40014000 	.word	0x40014000
 800443c:	40001800 	.word	0x40001800

08004440 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800447a:	2b84      	cmp	r3, #132	; 0x84
 800447c:	d005      	beq.n	800448a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800447e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	3303      	adds	r3, #3
 8004488:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800449e:	f3ef 8305 	mrs	r3, IPSR
 80044a2:	607b      	str	r3, [r7, #4]
  return(result);
 80044a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <osKernelStart>:
=======
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc2:	f3ef 8305 	mrs	r3, IPSR
 8003bc6:	607b      	str	r3, [r7, #4]
  return(result);
 8003bc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <osKernelStart>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< HEAD
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044c0:	f001 fc2a 	bl	8005d18 <vTaskStartScheduler>
  
  return osOK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	bd80      	pop	{r7, pc}

080044ca <osThreadCreate>:
=======
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003be4:	f001 fbae 	bl	8005344 <vTaskStartScheduler>
  
  return osOK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	bd80      	pop	{r7, pc}

08003bee <osThreadCreate>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< HEAD
 80044ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044cc:	b089      	sub	sp, #36	; 0x24
 80044ce:	af04      	add	r7, sp, #16
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
=======
 8003bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf0:	b089      	sub	sp, #36	; 0x24
 8003bf2:	af04      	add	r7, sp, #16
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< HEAD
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <osThreadCreate+0x54>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01c      	beq.n	800451e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685c      	ldr	r4, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691e      	ldr	r6, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffb6 	bl	8004468 <makeFreeRtosPriority>
 80044fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004506:	9202      	str	r2, [sp, #8]
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	9100      	str	r1, [sp, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	4632      	mov	r2, r6
 8004510:	4629      	mov	r1, r5
 8004512:	4620      	mov	r0, r4
 8004514:	f001 fa38 	bl	8005988 <xTaskCreateStatic>
 8004518:	4603      	mov	r3, r0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e01c      	b.n	8004558 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685c      	ldr	r4, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff98 	bl	8004468 <makeFreeRtosPriority>
 8004538:	4602      	mov	r2, r0
 800453a:	f107 030c 	add.w	r3, r7, #12
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	9200      	str	r2, [sp, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	4632      	mov	r2, r6
 8004546:	4629      	mov	r1, r5
 8004548:	4620      	mov	r0, r4
 800454a:	f001 fa7a 	bl	8005a42 <xTaskCreate>
 800454e:	4603      	mov	r3, r0
 8004550:	2b01      	cmp	r3, #1
 8004552:	d001      	beq.n	8004558 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <osThreadCreate+0x90>
=======
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <osThreadCreate+0x54>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01c      	beq.n	8003c42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685c      	ldr	r4, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691e      	ldr	r6, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ffb6 	bl	8003b8c <makeFreeRtosPriority>
 8003c20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c2a:	9202      	str	r2, [sp, #8]
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	9100      	str	r1, [sp, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4632      	mov	r2, r6
 8003c34:	4629      	mov	r1, r5
 8003c36:	4620      	mov	r0, r4
 8003c38:	f001 f9a6 	bl	8004f88 <xTaskCreateStatic>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e01c      	b.n	8003c7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685c      	ldr	r4, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ff98 	bl	8003b8c <makeFreeRtosPriority>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f001 f9e8 	bl	8005042 <xTaskCreate>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <osThreadCreate+0x90>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< HEAD
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004562 <osDelay>:
=======
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c86 <osDelay>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
<<<<<<< HEAD
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <osDelay+0x16>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	e000      	b.n	800457a <osDelay+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fb98 	bl	8005cb0 <vTaskDelay>
  
  return osOK;
 8004580:	2300      	movs	r3, #0
=======
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <osDelay+0x16>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	e000      	b.n	8003c9e <osDelay+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 fb1c 	bl	80052dc <vTaskDelay>
  
  return osOK;
 8003ca4:	2300      	movs	r3, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
<<<<<<< HEAD
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	460b      	mov	r3, r1
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d013      	beq.n	80045ca <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80045a2:	7afb      	ldrb	r3, [r7, #11]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <osTimerCreate+0x20>
 80045a8:	2101      	movs	r1, #1
 80045aa:	e000      	b.n	80045ae <osTimerCreate+0x22>
 80045ac:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80045b6:	9201      	str	r2, [sp, #4]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	460a      	mov	r2, r1
 80045be:	2101      	movs	r1, #1
 80045c0:	480b      	ldr	r0, [pc, #44]	; (80045f0 <osTimerCreate+0x64>)
 80045c2:	f002 fa74 	bl	8006aae <xTimerCreateStatic>
 80045c6:	4603      	mov	r3, r0
 80045c8:	e00e      	b.n	80045e8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80045ca:	7afb      	ldrb	r3, [r7, #11]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <osTimerCreate+0x48>
 80045d0:	2201      	movs	r2, #1
 80045d2:	e000      	b.n	80045d6 <osTimerCreate+0x4a>
 80045d4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2101      	movs	r1, #1
 80045e0:	4803      	ldr	r0, [pc, #12]	; (80045f0 <osTimerCreate+0x64>)
 80045e2:	f002 fa43 	bl	8006a6c <xTimerCreate>
 80045e6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	08008b38 	.word	0x08008b38

080045f4 <osMutexCreate>:
=======
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <osMutexCreate>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
<<<<<<< HEAD
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
=======
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
<<<<<<< HEAD
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4619      	mov	r1, r3
 800460a:	2001      	movs	r0, #1
 800460c:	f000 fb89 	bl	8004d22 <xQueueCreateMutexStatic>
 8004610:	4603      	mov	r3, r0
 8004612:	e003      	b.n	800461c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004614:	2001      	movs	r0, #1
 8004616:	f000 fb6c 	bl	8004cf2 <xQueueCreateMutex>
 800461a:	4603      	mov	r3, r0
=======
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f000 fb8a 	bl	80043de <xQueueCreateMutexStatic>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	e003      	b.n	8003cd6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f000 fb6d 	bl	80043ae <xQueueCreateMutex>
 8003cd4:	4603      	mov	r3, r0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
<<<<<<< HEAD
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <osMutexWait>:
=======
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <osMutexWait>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
<<<<<<< HEAD
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <osMutexWait+0x18>
    return osErrorParameter;
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	e03a      	b.n	80046b2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004646:	d103      	bne.n	8004650 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e009      	b.n	8004664 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <osMutexWait+0x40>
      ticks = 1;
 8004660:	2301      	movs	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
=======
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <osMutexWait+0x18>
    return osErrorParameter;
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	e03a      	b.n	8003d6e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d103      	bne.n	8003d0c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e009      	b.n	8003d20 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <osMutexWait+0x40>
      ticks = 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }
  
  if (inHandlerMode()) {
<<<<<<< HEAD
 8004664:	f7ff ff18 	bl	8004498 <inHandlerMode>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d017      	beq.n	800469e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	461a      	mov	r2, r3
 8004674:	2100      	movs	r1, #0
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ff80 	bl	800557c <xQueueReceiveFromISR>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <osMutexWait+0x62>
      return osErrorOS;
 8004682:	23ff      	movs	r3, #255	; 0xff
 8004684:	e015      	b.n	80046b2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d011      	beq.n	80046b0 <osMutexWait+0x8c>
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <osMutexWait+0x98>)
 800468e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	e008      	b.n	80046b0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fe5f 	bl	8005364 <xQueueSemaphoreTake>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <osMutexWait+0x8c>
    return osErrorOS;
 80046ac:	23ff      	movs	r3, #255	; 0xff
 80046ae:	e000      	b.n	80046b2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <osMutexRelease>:
=======
 8003d20:	f7ff ff4c 	bl	8003bbc <inHandlerMode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d017      	beq.n	8003d5a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2100      	movs	r1, #0
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 ff80 	bl	8004c38 <xQueueReceiveFromISR>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d001      	beq.n	8003d42 <osMutexWait+0x62>
      return osErrorOS;
 8003d3e:	23ff      	movs	r3, #255	; 0xff
 8003d40:	e015      	b.n	8003d6e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <osMutexWait+0x8c>
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <osMutexWait+0x98>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	e008      	b.n	8003d6c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fe5f 	bl	8004a20 <xQueueSemaphoreTake>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d001      	beq.n	8003d6c <osMutexWait+0x8c>
    return osErrorOS;
 8003d68:	23ff      	movs	r3, #255	; 0xff
 8003d6a:	e000      	b.n	8003d6e <osMutexWait+0x8e>
  }
  
  return osOK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <osMutexRelease>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
<<<<<<< HEAD
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80046d0:	f7ff fee2 	bl	8004498 <inHandlerMode>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fcd2 	bl	800508a <xQueueGiveFromISR>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <osMutexRelease+0x30>
      return osErrorOS;
 80046ec:	23ff      	movs	r3, #255	; 0xff
 80046ee:	e017      	b.n	8004720 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d013      	beq.n	800471e <osMutexRelease+0x5e>
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <osMutexRelease+0x68>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	e00a      	b.n	800471e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004708:	2300      	movs	r3, #0
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fb22 	bl	8004d58 <xQueueGenericSend>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800471a:	23ff      	movs	r3, #255	; 0xff
 800471c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800471e:	68fb      	ldr	r3, [r7, #12]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <osMessageCreate>:
=======
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003d8c:	f7ff ff16 	bl	8003bbc <inHandlerMode>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003d96:	f107 0308 	add.w	r3, r7, #8
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fcd2 	bl	8004746 <xQueueGiveFromISR>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <osMutexRelease+0x30>
      return osErrorOS;
 8003da8:	23ff      	movs	r3, #255	; 0xff
 8003daa:	e017      	b.n	8003ddc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d013      	beq.n	8003dda <osMutexRelease+0x5e>
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <osMutexRelease+0x68>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	e00a      	b.n	8003dda <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2100      	movs	r1, #0
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fb22 	bl	8004414 <xQueueGenericSend>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003dd6:	23ff      	movs	r3, #255	; 0xff
 8003dd8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003dda:	68fb      	ldr	r3, [r7, #12]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <osMessageCreate>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
<<<<<<< HEAD
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b085      	sub	sp, #20
 8004730:	af02      	add	r7, sp, #8
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
=======
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
<<<<<<< HEAD
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d011      	beq.n	8004762 <osMessageCreate+0x36>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2400      	movs	r4, #0
 8004758:	9400      	str	r4, [sp, #0]
 800475a:	f000 f9df 	bl	8004b1c <xQueueGenericCreateStatic>
 800475e:	4603      	mov	r3, r0
 8004760:	e008      	b.n	8004774 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	4619      	mov	r1, r3
 800476e:	f000 fa4d 	bl	8004c0c <xQueueGenericCreate>
 8004772:	4603      	mov	r3, r0
=======
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <osMessageCreate+0x36>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2400      	movs	r4, #0
 8003e14:	9400      	str	r4, [sp, #0]
 8003e16:	f000 f9df 	bl	80041d8 <xQueueGenericCreateStatic>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	e008      	b.n	8003e30 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f000 fa4d 	bl	80042c8 <xQueueGenericCreate>
 8003e2e:	4603      	mov	r3, r0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
<<<<<<< HEAD
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}

0800477c <osMessagePut>:
=======
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <osMessagePut>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
<<<<<<< HEAD
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <osMessagePut+0x1e>
    ticks = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800479a:	f7ff fe7d 	bl	8004498 <inHandlerMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d018      	beq.n	80047d6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80047a4:	f107 0210 	add.w	r2, r7, #16
 80047a8:	f107 0108 	add.w	r1, r7, #8
 80047ac:	2300      	movs	r3, #0
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fbd0 	bl	8004f54 <xQueueGenericSendFromISR>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <osMessagePut+0x42>
      return osErrorOS;
 80047ba:	23ff      	movs	r3, #255	; 0xff
 80047bc:	e018      	b.n	80047f0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d014      	beq.n	80047ee <osMessagePut+0x72>
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <osMessagePut+0x7c>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	e00b      	b.n	80047ee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80047d6:	f107 0108 	add.w	r1, r7, #8
 80047da:	2300      	movs	r3, #0
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 faba 	bl	8004d58 <xQueueGenericSend>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d001      	beq.n	80047ee <osMessagePut+0x72>
      return osErrorOS;
 80047ea:	23ff      	movs	r3, #255	; 0xff
 80047ec:	e000      	b.n	80047f0 <osMessagePut+0x74>
=======
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <osMessagePut+0x1e>
    ticks = 1;
 8003e52:	2301      	movs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003e56:	f7ff feb1 	bl	8003bbc <inHandlerMode>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d018      	beq.n	8003e92 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003e60:	f107 0210 	add.w	r2, r7, #16
 8003e64:	f107 0108 	add.w	r1, r7, #8
 8003e68:	2300      	movs	r3, #0
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fbd0 	bl	8004610 <xQueueGenericSendFromISR>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d001      	beq.n	8003e7a <osMessagePut+0x42>
      return osErrorOS;
 8003e76:	23ff      	movs	r3, #255	; 0xff
 8003e78:	e018      	b.n	8003eac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d014      	beq.n	8003eaa <osMessagePut+0x72>
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <osMessagePut+0x7c>)
 8003e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	e00b      	b.n	8003eaa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003e92:	f107 0108 	add.w	r1, r7, #8
 8003e96:	2300      	movs	r3, #0
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 faba 	bl	8004414 <xQueueGenericSend>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d001      	beq.n	8003eaa <osMessagePut+0x72>
      return osErrorOS;
 8003ea6:	23ff      	movs	r3, #255	; 0xff
 8003ea8:	e000      	b.n	8003eac <osMessagePut+0x74>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }
  
  return osOK;
<<<<<<< HEAD
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <osMessageGet>:
=======
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <osMessageGet>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
<<<<<<< HEAD
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b08b      	sub	sp, #44	; 0x2c
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
=======
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b08b      	sub	sp, #44	; 0x2c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
<<<<<<< HEAD
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	617b      	str	r3, [r7, #20]
    return event;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	461c      	mov	r4, r3
 800481e:	f107 0314 	add.w	r3, r7, #20
 8004822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800482a:	e054      	b.n	80048d6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483a:	d103      	bne.n	8004844 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800483c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	e009      	b.n	8004858 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <osMessageGet+0x5c>
      ticks = 1;
 8004854:	2301      	movs	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	617b      	str	r3, [r7, #20]
    return event;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	461c      	mov	r4, r3
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ee6:	e054      	b.n	8003f92 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d103      	bne.n	8003f00 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
 8003efe:	e009      	b.n	8003f14 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <osMessageGet+0x5c>
      ticks = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }
  
  if (inHandlerMode()) {
<<<<<<< HEAD
 8004858:	f7ff fe1e 	bl	8004498 <inHandlerMode>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01c      	beq.n	800489c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004862:	f107 0220 	add.w	r2, r7, #32
 8004866:	f107 0314 	add.w	r3, r7, #20
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	68b8      	ldr	r0, [r7, #8]
 8004870:	f000 fe84 	bl	800557c <xQueueReceiveFromISR>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d102      	bne.n	8004880 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800487a:	2310      	movs	r3, #16
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e001      	b.n	8004884 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01d      	beq.n	80048c6 <osMessageGet+0xca>
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <osMessageGet+0xe4>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	e014      	b.n	80048c6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	3304      	adds	r3, #4
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	4619      	mov	r1, r3
 80048a6:	68b8      	ldr	r0, [r7, #8]
 80048a8:	f000 fc7c 	bl	80051a4 <xQueueReceive>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d102      	bne.n	80048b8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80048b2:	2310      	movs	r3, #16
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e006      	b.n	80048c6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <osMessageGet+0xc6>
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <osMessageGet+0xc8>
 80048c2:	2340      	movs	r3, #64	; 0x40
 80048c4:	617b      	str	r3, [r7, #20]
=======
 8003f14:	f7ff fe52 	bl	8003bbc <inHandlerMode>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01c      	beq.n	8003f58 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003f1e:	f107 0220 	add.w	r2, r7, #32
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68b8      	ldr	r0, [r7, #8]
 8003f2c:	f000 fe84 	bl	8004c38 <xQueueReceiveFromISR>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003f36:	2310      	movs	r3, #16
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e001      	b.n	8003f40 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01d      	beq.n	8003f82 <osMessageGet+0xca>
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <osMessageGet+0xe4>)
 8003f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	e014      	b.n	8003f82 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	4619      	mov	r1, r3
 8003f62:	68b8      	ldr	r0, [r7, #8]
 8003f64:	f000 fc7c 	bl	8004860 <xQueueReceive>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003f6e:	2310      	movs	r3, #16
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e006      	b.n	8003f82 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <osMessageGet+0xc6>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <osMessageGet+0xc8>
 8003f7e:	2340      	movs	r3, #64	; 0x40
 8003f80:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
    }
  }
  
  return event;
<<<<<<< HEAD
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	461c      	mov	r4, r3
 80048ca:	f107 0314 	add.w	r3, r7, #20
 80048ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	372c      	adds	r7, #44	; 0x2c
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}
 80048de:	bf00      	nop
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <vListInitialise>:
=======
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	461c      	mov	r4, r3
 8003f86:	f107 0314 	add.w	r3, r7, #20
 8003f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	372c      	adds	r7, #44	; 0x2c
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd90      	pop	{r4, r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <vListInitialise>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
=======
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f103 0208 	add.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]
=======
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f103 0208 	add.w	r2, r3, #8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048fc:	609a      	str	r2, [r3, #8]
=======
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	609a      	str	r2, [r3, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f103 0208 	add.w	r2, r3, #8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f103 0208 	add.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
=======
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f103 0208 	add.w	r2, r3, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f103 0208 	add.w	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <vListInitialiseItem>:
=======
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <vListInitialiseItem>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
=======
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <vListInsertEnd>:
=======
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <vListInsertEnd>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
=======
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	609a      	str	r2, [r3, #8]
=======
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	609a      	str	r2, [r3, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <vListInsert>:
=======
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <vListInsert>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60bb      	str	r3, [r7, #8]
=======
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60bb      	str	r3, [r7, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499c:	d103      	bne.n	80049a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e00c      	b.n	80049c0 <vListInsert+0x3a>
=======
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d103      	bne.n	8004062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e00c      	b.n	800407c <vListInsert+0x3a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3308      	adds	r3, #8
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e002      	b.n	80049b4 <vListInsert+0x2e>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d2f6      	bcs.n	80049ae <vListInsert+0x28>
=======
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3308      	adds	r3, #8
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e002      	b.n	8004070 <vListInsert+0x2e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	429a      	cmp	r2, r3
 800407a:	d2f6      	bcs.n	800406a <vListInsert+0x28>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	605a      	str	r2, [r3, #4]
=======
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <uxListRemove>:
=======
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <uxListRemove>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6892      	ldr	r2, [r2, #8]
 8004a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6852      	ldr	r2, [r2, #4]
 8004a18:	605a      	str	r2, [r3, #4]
=======
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6892      	ldr	r2, [r2, #8]
 80040ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6852      	ldr	r2, [r2, #4]
 80040d4:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d103      	bne.n	8004a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]
=======
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d103      	bne.n	80040e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <xQueueGenericReset>:
=======
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <xQueueGenericReset>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xQueueGenericReset+0x2a>
=======
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xQueueGenericReset+0x2a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60bb      	str	r3, [r7, #8]
=======
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	60bb      	str	r3, [r7, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a76:	f002 fcad 	bl	80073d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	441a      	add	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	22ff      	movs	r2, #255	; 0xff
 8004aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d114      	bne.n	8004af6 <xQueueGenericReset+0xaa>
=======
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004132:	f002 f867 	bl	8006204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	441a      	add	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	3b01      	subs	r3, #1
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	441a      	add	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	22ff      	movs	r2, #255	; 0xff
 800417e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d114      	bne.n	80041b2 <xQueueGenericReset+0xaa>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01a      	beq.n	8004b0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fba1 	bl	8006220 <xTaskRemoveFromEventList>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <xQueueGenericReset+0xcc>)
 8004ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	e009      	b.n	8004b0a <xQueueGenericReset+0xbe>
=======
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01a      	beq.n	80041c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3310      	adds	r3, #16
 8004194:	4618      	mov	r0, r3
 8004196:	f001 fb27 	bl	80057e8 <xTaskRemoveFromEventList>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d012      	beq.n	80041c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <xQueueGenericReset+0xcc>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	e009      	b.n	80041c6 <xQueueGenericReset+0xbe>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3310      	adds	r3, #16
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fef2 	bl	80048e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff feed 	bl	80048e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b0a:	f002 fc93 	bl	8007434 <vPortExitCritical>
=======
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3310      	adds	r3, #16
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fef2 	bl	8003fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3324      	adds	r3, #36	; 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff feed 	bl	8003fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041c6:	f002 f84d 	bl	8006264 <vPortExitCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <xQueueGenericCreateStatic>:
=======
 80041ca:	2301      	movs	r3, #1
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <xQueueGenericCreateStatic>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08e      	sub	sp, #56	; 0x38
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueGenericCreateStatic+0x28>
=======
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08e      	sub	sp, #56	; 0x38
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <xQueueGenericCreateStatic+0x28>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericCreateStatic+0x44>
=======
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericCreateStatic+0x44>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <xQueueGenericCreateStatic+0x52>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <xQueueGenericCreateStatic+0x56>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericCreateStatic+0x58>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	623b      	str	r3, [r7, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <xQueueGenericCreateStatic+0x7e>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericCreateStatic+0x82>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericCreateStatic+0x84>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61fb      	str	r3, [r7, #28]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xQueueGenericCreateStatic+0x9c>
=======
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <xQueueGenericCreateStatic+0x52>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <xQueueGenericCreateStatic+0x56>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <xQueueGenericCreateStatic+0x58>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	623b      	str	r3, [r7, #32]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <xQueueGenericCreateStatic+0x7e>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <xQueueGenericCreateStatic+0x82>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <xQueueGenericCreateStatic+0x84>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	61fb      	str	r3, [r7, #28]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xQueueGenericCreateStatic+0x9c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 8004bba:	2348      	movs	r3, #72	; 0x48
 8004bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b48      	cmp	r3, #72	; 0x48
 8004bc2:	d00a      	beq.n	8004bda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	61bb      	str	r3, [r7, #24]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bda:	697b      	ldr	r3, [r7, #20]
=======
 8004276:	2348      	movs	r3, #72	; 0x48
 8004278:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b48      	cmp	r3, #72	; 0x48
 800427e:	d00a      	beq.n	8004296 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	61bb      	str	r3, [r7, #24]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004296:	697b      	ldr	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <xQueueGenericCreateStatic+0xe6>
=======
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <xQueueGenericCreateStatic+0xe6>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8004bee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f83f 	bl	8004c80 <prvInitialiseNewQueue>
=======
 80042aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f83f 	bl	800433c <prvInitialiseNewQueue>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3730      	adds	r7, #48	; 0x30
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xQueueGenericCreate>:
=======
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3730      	adds	r7, #48	; 0x30
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <xQueueGenericCreate>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
=======
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	71fb      	strb	r3, [r7, #7]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueGenericCreate+0x28>
=======
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	613b      	str	r3, [r7, #16]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericCreate+0x28>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
=======
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	61fb      	str	r3, [r7, #28]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3348      	adds	r3, #72	; 0x48
 8004c44:	4618      	mov	r0, r3
 8004c46:	f002 fce7 	bl	8007618 <pvPortMalloc>
 8004c4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d011      	beq.n	8004c76 <xQueueGenericCreate+0x6a>
=======
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3348      	adds	r3, #72	; 0x48
 8004300:	4618      	mov	r0, r3
 8004302:	f002 f8a1 	bl	8006448 <pvPortMalloc>
 8004306:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d011      	beq.n	8004332 <xQueueGenericCreate+0x6a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< HEAD
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	3348      	adds	r3, #72	; 0x48
 8004c5a:	617b      	str	r3, [r7, #20]
=======
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	3348      	adds	r3, #72	; 0x48
 8004316:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8004c64:	79fa      	ldrb	r2, [r7, #7]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f805 	bl	8004c80 <prvInitialiseNewQueue>
=======
 8004320:	79fa      	ldrb	r2, [r7, #7]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f805 	bl	800433c <prvInitialiseNewQueue>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8004c76:	69bb      	ldr	r3, [r7, #24]
	}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvInitialiseNewQueue>:
=======
 8004332:	69bb      	ldr	r3, [r7, #24]
	}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <prvInitialiseNewQueue>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	70fb      	strb	r3, [r7, #3]
=======
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	70fb      	strb	r3, [r7, #3]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <prvInitialiseNewQueue+0x1c>
=======
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d103      	bne.n	8004358 <prvInitialiseNewQueue+0x1c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e002      	b.n	8004ca2 <prvInitialiseNewQueue+0x22>
=======
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e002      	b.n	800435e <prvInitialiseNewQueue+0x22>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
=======
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cae:	2101      	movs	r1, #1
 8004cb0:	69b8      	ldr	r0, [r7, #24]
 8004cb2:	f7ff fecb 	bl	8004a4c <xQueueGenericReset>
=======
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800436a:	2101      	movs	r1, #1
 800436c:	69b8      	ldr	r0, [r7, #24]
 800436e:	f7ff fecb 	bl	8004108 <xQueueGenericReset>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <prvInitialiseMutex>:
=======
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <prvInitialiseMutex>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< HEAD
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00e      	beq.n	8004cea <prvInitialiseMutex+0x2c>
=======
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <prvInitialiseMutex+0x2c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< HEAD
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	60da      	str	r2, [r3, #12]
=======
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< HEAD
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f837 	bl	8004d58 <xQueueGenericSend>
=======
 800439a:	2300      	movs	r3, #0
 800439c:	2200      	movs	r2, #0
 800439e:	2100      	movs	r1, #0
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f837 	bl	8004414 <xQueueGenericSend>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< HEAD
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <xQueueCreateMutex>:
=======
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <xQueueCreateMutex>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	461a      	mov	r2, r3
 8004d08:	6939      	ldr	r1, [r7, #16]
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f7ff ff7e 	bl	8004c0c <xQueueGenericCreate>
 8004d10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff ffd3 	bl	8004cbe <prvInitialiseMutex>

		return xNewQueue;
 8004d18:	68fb      	ldr	r3, [r7, #12]
	}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <xQueueCreateMutexStatic>:
=======
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6939      	ldr	r1, [r7, #16]
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f7ff ff7e 	bl	80042c8 <xQueueGenericCreate>
 80043cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ffd3 	bl	800437a <prvInitialiseMutex>

		return xNewQueue;
 80043d4:	68fb      	ldr	r3, [r7, #12]
	}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <xQueueCreateMutexStatic>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< HEAD
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b088      	sub	sp, #32
 8004d26:	af02      	add	r7, sp, #8
 8004d28:	4603      	mov	r3, r0
 8004d2a:	6039      	str	r1, [r7, #0]
 8004d2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
=======
 80043de:	b580      	push	{r7, lr}
 80043e0:	b088      	sub	sp, #32
 80043e2:	af02      	add	r7, sp, #8
 80043e4:	4603      	mov	r3, r0
 80043e6:	6039      	str	r1, [r7, #0]
 80043e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043ea:	2301      	movs	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
<<<<<<< HEAD
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	6939      	ldr	r1, [r7, #16]
 8004d40:	6978      	ldr	r0, [r7, #20]
 8004d42:	f7ff feeb 	bl	8004b1c <xQueueGenericCreateStatic>
 8004d46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff ffb8 	bl	8004cbe <prvInitialiseMutex>

		return xNewQueue;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <xQueueGenericSend>:
=======
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2200      	movs	r2, #0
 80043fa:	6939      	ldr	r1, [r7, #16]
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f7ff feeb 	bl	80041d8 <xQueueGenericCreateStatic>
 8004402:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff ffb8 	bl	800437a <prvInitialiseMutex>

		return xNewQueue;
 800440a:	68fb      	ldr	r3, [r7, #12]
	}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <xQueueGenericSend>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	; 0x38
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d66:	2300      	movs	r3, #0
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueGenericSend+0x32>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <xQueueGenericSend+0x40>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <xQueueGenericSend+0x44>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <xQueueGenericSend+0x46>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <xQueueGenericSend+0x60>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d103      	bne.n	8004dc6 <xQueueGenericSend+0x6e>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <xQueueGenericSend+0x72>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <xQueueGenericSend+0x74>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	623b      	str	r3, [r7, #32]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004de6:	f001 fbd7 	bl	8006598 <xTaskGetSchedulerState>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <xQueueGenericSend+0x9e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <xQueueGenericSend+0xa2>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <xQueueGenericSend+0xa4>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	61fb      	str	r3, [r7, #28]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xQueueGenericSend+0xbc>
=======
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004422:	2300      	movs	r3, #0
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericSend+0x32>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <xQueueGenericSend+0x40>
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <xQueueGenericSend+0x44>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <xQueueGenericSend+0x46>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <xQueueGenericSend+0x60>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d103      	bne.n	8004482 <xQueueGenericSend+0x6e>
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <xQueueGenericSend+0x72>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <xQueueGenericSend+0x74>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	623b      	str	r3, [r7, #32]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044a2:	f001 fb61 	bl	8005b68 <xTaskGetSchedulerState>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <xQueueGenericSend+0x9e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <xQueueGenericSend+0xa2>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <xQueueGenericSend+0xa4>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	61fb      	str	r3, [r7, #28]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xQueueGenericSend+0xbc>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8004e16:	f002 fadd 	bl	80073d4 <vPortEnterCritical>
=======
 80044d2:	f001 fe97 	bl	8006204 <vPortEnterCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <xQueueGenericSend+0xd4>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d129      	bne.n	8004e80 <xQueueGenericSend+0x128>
=======
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <xQueueGenericSend+0xd4>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d129      	bne.n	800453c <xQueueGenericSend+0x128>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e32:	f000 fc3b 	bl	80056ac <prvCopyDataToQueue>
 8004e36:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ee:	f000 fc3b 	bl	8004d68 <prvCopyDataToQueue>
 80044f2:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d010      	beq.n	8004e62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	3324      	adds	r3, #36	; 0x24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 f9eb 	bl	8006220 <xTaskRemoveFromEventList>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d013      	beq.n	8004e78 <xQueueGenericSend+0x120>
=======
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	3324      	adds	r3, #36	; 0x24
 8004500:	4618      	mov	r0, r3
 8004502:	f001 f971 	bl	80057e8 <xTaskRemoveFromEventList>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <xQueueGenericSend+0x120>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8004e50:	4b3f      	ldr	r3, [pc, #252]	; (8004f50 <xQueueGenericSend+0x1f8>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	e00a      	b.n	8004e78 <xQueueGenericSend+0x120>
=======
 800450c:	4b3f      	ldr	r3, [pc, #252]	; (800460c <xQueueGenericSend+0x1f8>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	e00a      	b.n	8004534 <xQueueGenericSend+0x120>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <xQueueGenericSend+0x120>
=======
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <xQueueGenericSend+0x120>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8004e68:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <xQueueGenericSend+0x1f8>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
=======
 8004524:	4b39      	ldr	r3, [pc, #228]	; (800460c <xQueueGenericSend+0x1f8>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004e78:	f002 fadc 	bl	8007434 <vPortExitCritical>
				return pdPASS;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e063      	b.n	8004f48 <xQueueGenericSend+0x1f0>
=======
 8004534:	f001 fe96 	bl	8006264 <vPortExitCritical>
				return pdPASS;
 8004538:	2301      	movs	r3, #1
 800453a:	e063      	b.n	8004604 <xQueueGenericSend+0x1f0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <xQueueGenericSend+0x136>
=======
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <xQueueGenericSend+0x136>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004e86:	f002 fad5 	bl	8007434 <vPortExitCritical>
=======
 8004542:	f001 fe8f 	bl	8006264 <vPortExitCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e05c      	b.n	8004f48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d106      	bne.n	8004ea2 <xQueueGenericSend+0x14a>
=======
 8004546:	2300      	movs	r3, #0
 8004548:	e05c      	b.n	8004604 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800454a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <xQueueGenericSend+0x14a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 fa23 	bl	80062e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8004550:	f107 0314 	add.w	r3, r7, #20
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f9a9 	bl	80058ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004ea2:	f002 fac7 	bl	8007434 <vPortExitCritical>
=======
 800455e:	f001 fe81 	bl	8006264 <vPortExitCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8004ea6:	f000 ff9d 	bl	8005de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eaa:	f002 fa93 	bl	80073d4 <vPortEnterCritical>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb4:	b25b      	sxtb	r3, r3
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eba:	d103      	bne.n	8004ec4 <xQueueGenericSend+0x16c>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eca:	b25b      	sxtb	r3, r3
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed0:	d103      	bne.n	8004eda <xQueueGenericSend+0x182>
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eda:	f002 faab 	bl	8007434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ede:	1d3a      	adds	r2, r7, #4
 8004ee0:	f107 0314 	add.w	r3, r7, #20
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 fa12 	bl	8006310 <xTaskCheckForTimeOut>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d124      	bne.n	8004f3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef4:	f000 fcd2 	bl	800589c <prvIsQueueFull>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d018      	beq.n	8004f30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	3310      	adds	r3, #16
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 f93a 	bl	8006180 <vTaskPlaceOnEventList>
=======
 8004562:	f000 ff59 	bl	8005418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004566:	f001 fe4d 	bl	8006204 <vPortEnterCritical>
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004570:	b25b      	sxtb	r3, r3
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d103      	bne.n	8004580 <xQueueGenericSend+0x16c>
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004586:	b25b      	sxtb	r3, r3
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d103      	bne.n	8004596 <xQueueGenericSend+0x182>
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004596:	f001 fe65 	bl	8006264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800459a:	1d3a      	adds	r2, r7, #4
 800459c:	f107 0314 	add.w	r3, r7, #20
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 f998 	bl	80058d8 <xTaskCheckForTimeOut>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d124      	bne.n	80045f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045b0:	f000 fcd2 	bl	8004f58 <prvIsQueueFull>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	3310      	adds	r3, #16
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 f8ec 	bl	80057a0 <vTaskPlaceOnEventList>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8004f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f0e:	f000 fc5d 	bl	80057cc <prvUnlockQueue>
=======
 80045c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ca:	f000 fc5d 	bl	8004e88 <prvUnlockQueue>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 8004f12:	f000 ff75 	bl	8005e00 <xTaskResumeAll>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f af7c 	bne.w	8004e16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <xQueueGenericSend+0x1f8>)
 8004f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	e772      	b.n	8004e16 <xQueueGenericSend+0xbe>
=======
 80045ce:	f000 ff31 	bl	8005434 <xTaskResumeAll>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f47f af7c 	bne.w	80044d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <xQueueGenericSend+0x1f8>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	e772      	b.n	80044d2 <xQueueGenericSend+0xbe>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8004f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f32:	f000 fc4b 	bl	80057cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f36:	f000 ff63 	bl	8005e00 <xTaskResumeAll>
 8004f3a:	e76c      	b.n	8004e16 <xQueueGenericSend+0xbe>
=======
 80045ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ee:	f000 fc4b 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045f2:	f000 ff1f 	bl	8005434 <xTaskResumeAll>
 80045f6:	e76c      	b.n	80044d2 <xQueueGenericSend+0xbe>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8004f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3e:	f000 fc45 	bl	80057cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f42:	f000 ff5d 	bl	8005e00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3738      	adds	r7, #56	; 0x38
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <xQueueGenericSendFromISR>:
=======
 80045f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fa:	f000 fc45 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045fe:	f000 ff19 	bl	8005434 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004602:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004604:	4618      	mov	r0, r3
 8004606:	3738      	adds	r7, #56	; 0x38
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <xQueueGenericSendFromISR>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b090      	sub	sp, #64	; 0x40
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <xQueueGenericSendFromISR+0x3c>
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <xQueueGenericSendFromISR+0x40>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <xQueueGenericSendFromISR+0x42>
 8004f94:	2300      	movs	r3, #0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d103      	bne.n	8004fbe <xQueueGenericSendFromISR+0x6a>
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <xQueueGenericSendFromISR+0x6e>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <xQueueGenericSendFromISR+0x70>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	623b      	str	r3, [r7, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueGenericSendFromISR+0x88>
=======
 8004610:	b580      	push	{r7, lr}
 8004612:	b090      	sub	sp, #64	; 0x40
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <xQueueGenericSendFromISR+0x3c>
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <xQueueGenericSendFromISR+0x40>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <xQueueGenericSendFromISR+0x42>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d103      	bne.n	800467a <xQueueGenericSendFromISR+0x6a>
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <xQueueGenericSendFromISR+0x6e>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueGenericSendFromISR+0x70>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	623b      	str	r3, [r7, #32]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericSendFromISR+0x88>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8004fde:	f002 fadb 	bl	8007598 <vPortValidateInterruptPriority>
=======
 800469a:	f001 fe95 	bl	80063c8 <vPortValidateInterruptPriority>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8004fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61fa      	str	r2, [r7, #28]
 8004ff8:	61bb      	str	r3, [r7, #24]
=======
 800469e:	f3ef 8211 	mrs	r2, BASEPRI
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	61fa      	str	r2, [r7, #28]
 80046b4:	61bb      	str	r3, [r7, #24]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8004ffa:	69fb      	ldr	r3, [r7, #28]
=======
 80046b6:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	429a      	cmp	r2, r3
 8005008:	d302      	bcc.n	8005010 <xQueueGenericSendFromISR+0xbc>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d12f      	bne.n	8005070 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <xQueueGenericSendFromISR+0xbc>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d12f      	bne.n	800472c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005026:	f000 fb41 	bl	80056ac <prvCopyDataToQueue>
=======
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046e2:	f000 fb41 	bl	8004d68 <prvCopyDataToQueue>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 800502a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005032:	d112      	bne.n	800505a <xQueueGenericSendFromISR+0x106>
=======
 80046e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ee:	d112      	bne.n	8004716 <xQueueGenericSendFromISR+0x106>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d016      	beq.n	800506a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f8ed 	bl	8006220 <xTaskRemoveFromEventList>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00e      	beq.n	800506a <xQueueGenericSendFromISR+0x116>
=======
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d016      	beq.n	8004726 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	3324      	adds	r3, #36	; 0x24
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f873 	bl	80057e8 <xTaskRemoveFromEventList>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00e      	beq.n	8004726 <xQueueGenericSendFromISR+0x116>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e007      	b.n	800506a <xQueueGenericSendFromISR+0x116>
=======
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e007      	b.n	8004726 <xQueueGenericSendFromISR+0x116>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 800505a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800505e:	3301      	adds	r3, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	b25a      	sxtb	r2, r3
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800506a:	2301      	movs	r3, #1
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800506e:	e001      	b.n	8005074 <xQueueGenericSendFromISR+0x120>
=======
 8004716:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800471a:	3301      	adds	r3, #1
 800471c:	b2db      	uxtb	r3, r3
 800471e:	b25a      	sxtb	r2, r3
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004726:	2301      	movs	r3, #1
 8004728:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800472a:	e001      	b.n	8004730 <xQueueGenericSendFromISR+0x120>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 8005070:	2300      	movs	r3, #0
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005076:	617b      	str	r3, [r7, #20]
=======
 800472c:	2300      	movs	r3, #0
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004732:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f383 8811 	msr	BASEPRI, r3
=======
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 800507e:	bf00      	nop
=======
 800473a:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 8005080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005082:	4618      	mov	r0, r3
 8005084:	3740      	adds	r7, #64	; 0x40
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <xQueueGiveFromISR>:
=======
 800473c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800473e:	4618      	mov	r0, r3
 8004740:	3740      	adds	r7, #64	; 0x40
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <xQueueGiveFromISR>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
<<<<<<< HEAD
 800508a:	b580      	push	{r7, lr}
 800508c:	b08e      	sub	sp, #56	; 0x38
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8004746:	b580      	push	{r7, lr}
 8004748:	b08e      	sub	sp, #56	; 0x38
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
<<<<<<< HEAD
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	623b      	str	r3, [r7, #32]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <xQueueGiveFromISR+0x28>
=======
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	623b      	str	r3, [r7, #32]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xQueueGiveFromISR+0x28>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< HEAD
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	61fb      	str	r3, [r7, #28]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xQueueGiveFromISR+0x46>
=======
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <xQueueGiveFromISR+0x48>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	61fb      	str	r3, [r7, #28]
}
 800478a:	bf00      	nop
 800478c:	e7fe      	b.n	800478c <xQueueGiveFromISR+0x46>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
<<<<<<< HEAD
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d103      	bne.n	80050e2 <xQueueGiveFromISR+0x58>
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <xQueueGiveFromISR+0x5c>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueGiveFromISR+0x5e>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xQueueGiveFromISR+0x78>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	61bb      	str	r3, [r7, #24]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xQueueGiveFromISR+0x76>
=======
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <xQueueGiveFromISR+0x58>
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <xQueueGiveFromISR+0x5c>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <xQueueGiveFromISR+0x5e>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueGiveFromISR+0x78>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	61bb      	str	r3, [r7, #24]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGiveFromISR+0x76>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8005102:	f002 fa49 	bl	8007598 <vPortValidateInterruptPriority>
	__asm volatile
 8005106:	f3ef 8211 	mrs	r2, BASEPRI
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	617a      	str	r2, [r7, #20]
 800511c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800511e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 80047be:	f001 fe03 	bl	80063c8 <vPortValidateInterruptPriority>
	__asm volatile
 80047c2:	f3ef 8211 	mrs	r2, BASEPRI
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	617a      	str	r2, [r7, #20]
 80047d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80047da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
<<<<<<< HEAD
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512e:	429a      	cmp	r2, r3
 8005130:	d22b      	bcs.n	800518a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d22b      	bcs.n	8004846 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
=======
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8005144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514c:	d112      	bne.n	8005174 <xQueueGiveFromISR+0xea>
=======
 8004800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d112      	bne.n	8004830 <xQueueGiveFromISR+0xea>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	3324      	adds	r3, #36	; 0x24
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f860 	bl	8006220 <xTaskRemoveFromEventList>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00e      	beq.n	8005184 <xQueueGiveFromISR+0xfa>
=======
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	3324      	adds	r3, #36	; 0x24
 8004816:	4618      	mov	r0, r3
 8004818:	f000 ffe6 	bl	80057e8 <xTaskRemoveFromEventList>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00e      	beq.n	8004840 <xQueueGiveFromISR+0xfa>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e007      	b.n	8005184 <xQueueGiveFromISR+0xfa>
=======
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e007      	b.n	8004840 <xQueueGiveFromISR+0xfa>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8005174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005178:	3301      	adds	r3, #1
 800517a:	b2db      	uxtb	r3, r3
 800517c:	b25a      	sxtb	r2, r3
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005184:	2301      	movs	r3, #1
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
 8005188:	e001      	b.n	800518e <xQueueGiveFromISR+0x104>
=======
 8004830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004834:	3301      	adds	r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	b25a      	sxtb	r2, r3
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004840:	2301      	movs	r3, #1
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
 8004844:	e001      	b.n	800484a <xQueueGiveFromISR+0x104>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 800518a:	2300      	movs	r3, #0
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f383 8811 	msr	BASEPRI, r3
}
 8005198:	bf00      	nop
=======
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f383 8811 	msr	BASEPRI, r3
}
 8004854:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800519c:	4618      	mov	r0, r3
 800519e:	3738      	adds	r7, #56	; 0x38
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xQueueReceive>:
=======
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004858:	4618      	mov	r0, r3
 800485a:	3738      	adds	r7, #56	; 0x38
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <xQueueReceive>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	; 0x30
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <xQueueReceive+0x30>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	623b      	str	r3, [r7, #32]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <xQueueReceive+0x2e>
=======
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800486c:	2300      	movs	r3, #0
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xQueueReceive+0x30>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	623b      	str	r3, [r7, #32]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xQueueReceive+0x2e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <xQueueReceive+0x3e>
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <xQueueReceive+0x42>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <xQueueReceive+0x44>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <xQueueReceive+0x5e>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	61fb      	str	r3, [r7, #28]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xQueueReceive+0x5c>
=======
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <xQueueReceive+0x3e>
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <xQueueReceive+0x42>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueReceive+0x44>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueReceive+0x5e>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	61fb      	str	r3, [r7, #28]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueReceive+0x5c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8005202:	f001 f9c9 	bl	8006598 <xTaskGetSchedulerState>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <xQueueReceive+0x6e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <xQueueReceive+0x72>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <xQueueReceive+0x74>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xQueueReceive+0x8e>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	61bb      	str	r3, [r7, #24]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xQueueReceive+0x8c>
=======
 80048be:	f001 f953 	bl	8005b68 <xTaskGetSchedulerState>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <xQueueReceive+0x6e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xQueueReceive+0x72>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueReceive+0x74>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xQueueReceive+0x8e>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	61bb      	str	r3, [r7, #24]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xQueueReceive+0x8c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8005232:	f002 f8cf 	bl	80073d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80048ee:	f001 fc89 	bl	8006204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01f      	beq.n	8005282 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005246:	f000 fa9b 	bl	8005780 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1e5a      	subs	r2, r3, #1
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
=======
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01f      	beq.n	800493e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004902:	f000 fa9b 	bl	8004e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	1e5a      	subs	r2, r3, #1
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00f      	beq.n	800527a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	3310      	adds	r3, #16
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ffde 	bl	8006220 <xTaskRemoveFromEventList>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <xQueueReceive+0x1bc>)
 800526c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	f3bf 8f6f 	isb	sy
=======
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00f      	beq.n	8004936 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	3310      	adds	r3, #16
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ff64 	bl	80057e8 <xTaskRemoveFromEventList>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <xQueueReceive+0x1bc>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800527a:	f002 f8db 	bl	8007434 <vPortExitCritical>
				return pdPASS;
 800527e:	2301      	movs	r3, #1
 8005280:	e069      	b.n	8005356 <xQueueReceive+0x1b2>
=======
 8004936:	f001 fc95 	bl	8006264 <vPortExitCritical>
				return pdPASS;
 800493a:	2301      	movs	r3, #1
 800493c:	e069      	b.n	8004a12 <xQueueReceive+0x1b2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <xQueueReceive+0xec>
=======
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <xQueueReceive+0xec>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005288:	f002 f8d4 	bl	8007434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800528c:	2300      	movs	r3, #0
 800528e:	e062      	b.n	8005356 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <xQueueReceive+0x100>
=======
 8004944:	f001 fc8e 	bl	8006264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004948:	2300      	movs	r3, #0
 800494a:	e062      	b.n	8004a12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <xQueueReceive+0x100>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8005296:	f107 0310 	add.w	r3, r7, #16
 800529a:	4618      	mov	r0, r3
 800529c:	f001 f822 	bl	80062e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052a0:	2301      	movs	r3, #1
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8004952:	f107 0310 	add.w	r3, r7, #16
 8004956:	4618      	mov	r0, r3
 8004958:	f000 ffa8 	bl	80058ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 80052a4:	f002 f8c6 	bl	8007434 <vPortExitCritical>
=======
 8004960:	f001 fc80 	bl	8006264 <vPortExitCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 80052a8:	f000 fd9c 	bl	8005de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052ac:	f002 f892 	bl	80073d4 <vPortEnterCritical>
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052bc:	d103      	bne.n	80052c6 <xQueueReceive+0x122>
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052cc:	b25b      	sxtb	r3, r3
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d2:	d103      	bne.n	80052dc <xQueueReceive+0x138>
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052dc:	f002 f8aa 	bl	8007434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052e0:	1d3a      	adds	r2, r7, #4
 80052e2:	f107 0310 	add.w	r3, r7, #16
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 f811 	bl	8006310 <xTaskCheckForTimeOut>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d123      	bne.n	800533c <xQueueReceive+0x198>
=======
 8004964:	f000 fd58 	bl	8005418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004968:	f001 fc4c 	bl	8006204 <vPortEnterCritical>
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004972:	b25b      	sxtb	r3, r3
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d103      	bne.n	8004982 <xQueueReceive+0x122>
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004988:	b25b      	sxtb	r3, r3
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d103      	bne.n	8004998 <xQueueReceive+0x138>
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004998:	f001 fc64 	bl	8006264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800499c:	1d3a      	adds	r2, r7, #4
 800499e:	f107 0310 	add.w	r3, r7, #16
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 ff97 	bl	80058d8 <xTaskCheckForTimeOut>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d123      	bne.n	80049f8 <xQueueReceive+0x198>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 80052f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052f6:	f000 fabb 	bl	8005870 <prvIsQueueEmpty>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d017      	beq.n	8005330 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	3324      	adds	r3, #36	; 0x24
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f000 ff39 	bl	8006180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800530e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005310:	f000 fa5c 	bl	80057cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005314:	f000 fd74 	bl	8005e00 <xTaskResumeAll>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d189      	bne.n	8005232 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <xQueueReceive+0x1bc>)
 8005320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	e780      	b.n	8005232 <xQueueReceive+0x8e>
=======
 80049b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b2:	f000 fabb 	bl	8004f2c <prvIsQueueEmpty>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 feeb 	bl	80057a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049cc:	f000 fa5c 	bl	8004e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049d0:	f000 fd30 	bl	8005434 <xTaskResumeAll>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d189      	bne.n	80048ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <xQueueReceive+0x1bc>)
 80049dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	e780      	b.n	80048ee <xQueueReceive+0x8e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8005330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005332:	f000 fa4b 	bl	80057cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005336:	f000 fd63 	bl	8005e00 <xTaskResumeAll>
 800533a:	e77a      	b.n	8005232 <xQueueReceive+0x8e>
=======
 80049ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ee:	f000 fa4b 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049f2:	f000 fd1f 	bl	8005434 <xTaskResumeAll>
 80049f6:	e77a      	b.n	80048ee <xQueueReceive+0x8e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800533c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533e:	f000 fa45 	bl	80057cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005342:	f000 fd5d 	bl	8005e00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005348:	f000 fa92 	bl	8005870 <prvIsQueueEmpty>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	f43f af6f 	beq.w	8005232 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005354:	2300      	movs	r3, #0
=======
 80049f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fa:	f000 fa45 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049fe:	f000 fd19 	bl	8005434 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a04:	f000 fa92 	bl	8004f2c <prvIsQueueEmpty>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f43f af6f 	beq.w	80048ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a10:	2300      	movs	r3, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 8005356:	4618      	mov	r0, r3
 8005358:	3730      	adds	r7, #48	; 0x30
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <xQueueSemaphoreTake>:
=======
 8004a12:	4618      	mov	r0, r3
 8004a14:	3730      	adds	r7, #48	; 0x30
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <xQueueSemaphoreTake>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8005364:	b580      	push	{r7, lr}
 8005366:	b08e      	sub	sp, #56	; 0x38
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	; 0x38
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< HEAD
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	623b      	str	r3, [r7, #32]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueSemaphoreTake+0x30>
=======
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	623b      	str	r3, [r7, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueSemaphoreTake+0x30>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< HEAD
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	61fb      	str	r3, [r7, #28]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <xQueueSemaphoreTake+0x4e>
=======
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	61fb      	str	r3, [r7, #28]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xQueueSemaphoreTake+0x4e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 80053b4:	f001 f8f0 	bl	8006598 <xTaskGetSchedulerState>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <xQueueSemaphoreTake+0x60>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <xQueueSemaphoreTake+0x64>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <xQueueSemaphoreTake+0x66>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	61bb      	str	r3, [r7, #24]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xQueueSemaphoreTake+0x7e>
=======
 8004a70:	f001 f87a 	bl	8005b68 <xTaskGetSchedulerState>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <xQueueSemaphoreTake+0x60>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <xQueueSemaphoreTake+0x64>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <xQueueSemaphoreTake+0x66>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	61bb      	str	r3, [r7, #24]
}
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <xQueueSemaphoreTake+0x7e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 80053e4:	f001 fff6 	bl	80073d4 <vPortEnterCritical>
=======
 8004aa0:	f001 fbb0 	bl	8006204 <vPortEnterCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d024      	beq.n	800543e <xQueueSemaphoreTake+0xda>
=======
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d024      	beq.n	8004afa <xQueueSemaphoreTake+0xda>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< HEAD
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	1e5a      	subs	r2, r3, #1
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	1e5a      	subs	r2, r3, #1
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <xQueueSemaphoreTake+0xaa>
=======
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d104      	bne.n	8004aca <xQueueSemaphoreTake+0xaa>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
<<<<<<< HEAD
 8005404:	f001 fa70 	bl	80068e8 <pvTaskIncrementMutexHeldCount>
 8005408:	4602      	mov	r2, r0
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	609a      	str	r2, [r3, #8]
=======
 8004ac0:	f001 f9fa 	bl	8005eb8 <pvTaskIncrementMutexHeldCount>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	609a      	str	r2, [r3, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00f      	beq.n	8005436 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	3310      	adds	r3, #16
 800541a:	4618      	mov	r0, r3
 800541c:	f000 ff00 	bl	8006220 <xTaskRemoveFromEventList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005426:	4b54      	ldr	r3, [pc, #336]	; (8005578 <xQueueSemaphoreTake+0x214>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
=======
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00f      	beq.n	8004af2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	3310      	adds	r3, #16
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fe86 	bl	80057e8 <xTaskRemoveFromEventList>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ae2:	4b54      	ldr	r3, [pc, #336]	; (8004c34 <xQueueSemaphoreTake+0x214>)
 8004ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	f3bf 8f6f 	isb	sy
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005436:	f001 fffd 	bl	8007434 <vPortExitCritical>
				return pdPASS;
 800543a:	2301      	movs	r3, #1
 800543c:	e097      	b.n	800556e <xQueueSemaphoreTake+0x20a>
=======
 8004af2:	f001 fbb7 	bl	8006264 <vPortExitCritical>
				return pdPASS;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e097      	b.n	8004c2a <xQueueSemaphoreTake+0x20a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d111      	bne.n	8005468 <xQueueSemaphoreTake+0x104>
=======
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d111      	bne.n	8004b24 <xQueueSemaphoreTake+0x104>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< HEAD
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	617b      	str	r3, [r7, #20]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <xQueueSemaphoreTake+0xfa>
=======
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	617b      	str	r3, [r7, #20]
}
 8004b18:	bf00      	nop
 8004b1a:	e7fe      	b.n	8004b1a <xQueueSemaphoreTake+0xfa>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005460:	f001 ffe8 	bl	8007434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005464:	2300      	movs	r3, #0
 8005466:	e082      	b.n	800556e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <xQueueSemaphoreTake+0x118>
=======
 8004b1c:	f001 fba2 	bl	8006264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e082      	b.n	8004c2a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <xQueueSemaphoreTake+0x118>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	4618      	mov	r0, r3
 8005474:	f000 ff36 	bl	80062e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8004b2a:	f107 030c 	add.w	r3, r7, #12
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 febc 	bl	80058ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800547c:	f001 ffda 	bl	8007434 <vPortExitCritical>
=======
 8004b38:	f001 fb94 	bl	8006264 <vPortExitCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8005480:	f000 fcb0 	bl	8005de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005484:	f001 ffa6 	bl	80073d4 <vPortEnterCritical>
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800548e:	b25b      	sxtb	r3, r3
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005494:	d103      	bne.n	800549e <xQueueSemaphoreTake+0x13a>
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a4:	b25b      	sxtb	r3, r3
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054aa:	d103      	bne.n	80054b4 <xQueueSemaphoreTake+0x150>
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b4:	f001 ffbe 	bl	8007434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b8:	463a      	mov	r2, r7
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 ff25 	bl	8006310 <xTaskCheckForTimeOut>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d132      	bne.n	8005532 <xQueueSemaphoreTake+0x1ce>
=======
 8004b3c:	f000 fc6c 	bl	8005418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b40:	f001 fb60 	bl	8006204 <vPortEnterCritical>
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b4a:	b25b      	sxtb	r3, r3
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d103      	bne.n	8004b5a <xQueueSemaphoreTake+0x13a>
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b60:	b25b      	sxtb	r3, r3
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d103      	bne.n	8004b70 <xQueueSemaphoreTake+0x150>
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b70:	f001 fb78 	bl	8006264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b74:	463a      	mov	r2, r7
 8004b76:	f107 030c 	add.w	r3, r7, #12
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 feab 	bl	80058d8 <xTaskCheckForTimeOut>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d132      	bne.n	8004bee <xQueueSemaphoreTake+0x1ce>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 80054cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054ce:	f000 f9cf 	bl	8005870 <prvIsQueueEmpty>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d026      	beq.n	8005526 <xQueueSemaphoreTake+0x1c2>
=======
 8004b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b8a:	f000 f9cf 	bl	8004f2c <prvIsQueueEmpty>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d026      	beq.n	8004be2 <xQueueSemaphoreTake+0x1c2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80054e0:	f001 ff78 	bl	80073d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 f873 	bl	80065d4 <xTaskPriorityInherit>
 80054ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80054f0:	f001 ffa0 	bl	8007434 <vPortExitCritical>
=======
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b9c:	f001 fb32 	bl	8006204 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fffd 	bl	8005ba4 <xTaskPriorityInherit>
 8004baa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bac:	f001 fb5a 	bl	8006264 <vPortExitCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< HEAD
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	3324      	adds	r3, #36	; 0x24
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fe3f 	bl	8006180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005504:	f000 f962 	bl	80057cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005508:	f000 fc7a 	bl	8005e00 <xTaskResumeAll>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	f47f af68 	bne.w	80053e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005514:	4b18      	ldr	r3, [pc, #96]	; (8005578 <xQueueSemaphoreTake+0x214>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	e75e      	b.n	80053e4 <xQueueSemaphoreTake+0x80>
=======
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fdf1 	bl	80057a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bc0:	f000 f962 	bl	8004e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bc4:	f000 fc36 	bl	8005434 <xTaskResumeAll>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f47f af68 	bne.w	8004aa0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004bd0:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <xQueueSemaphoreTake+0x214>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	e75e      	b.n	8004aa0 <xQueueSemaphoreTake+0x80>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8005526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005528:	f000 f950 	bl	80057cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800552c:	f000 fc68 	bl	8005e00 <xTaskResumeAll>
 8005530:	e758      	b.n	80053e4 <xQueueSemaphoreTake+0x80>
=======
 8004be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004be4:	f000 f950 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004be8:	f000 fc24 	bl	8005434 <xTaskResumeAll>
 8004bec:	e758      	b.n	8004aa0 <xQueueSemaphoreTake+0x80>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8005532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005534:	f000 f94a 	bl	80057cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005538:	f000 fc62 	bl	8005e00 <xTaskResumeAll>
=======
 8004bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf0:	f000 f94a 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bf4:	f000 fc1e 	bl	8005434 <xTaskResumeAll>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800553c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800553e:	f000 f997 	bl	8005870 <prvIsQueueEmpty>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	f43f af4d 	beq.w	80053e4 <xQueueSemaphoreTake+0x80>
=======
 8004bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bfa:	f000 f997 	bl	8004f2c <prvIsQueueEmpty>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f43f af4d 	beq.w	8004aa0 <xQueueSemaphoreTake+0x80>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< HEAD
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005550:	f001 ff40 	bl	80073d4 <vPortEnterCritical>
=======
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00d      	beq.n	8004c28 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004c0c:	f001 fafa 	bl	8006204 <vPortEnterCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< HEAD
 8005554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005556:	f000 f891 	bl	800567c <prvGetDisinheritPriorityAfterTimeout>
 800555a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f932 	bl	80067cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005568:	f001 ff64 	bl	8007434 <vPortExitCritical>
=======
 8004c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c12:	f000 f891 	bl	8004d38 <prvGetDisinheritPriorityAfterTimeout>
 8004c16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 f8bc 	bl	8005d9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c24:	f001 fb1e 	bl	8006264 <vPortExitCritical>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< HEAD
 800556c:	2300      	movs	r3, #0
=======
 8004c28:	2300      	movs	r3, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 800556e:	4618      	mov	r0, r3
 8005570:	3738      	adds	r7, #56	; 0x38
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <xQueueReceiveFromISR>:
=======
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3738      	adds	r7, #56	; 0x38
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <xQueueReceiveFromISR>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
<<<<<<< HEAD
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	; 0x38
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	623b      	str	r3, [r7, #32]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <xQueueReceiveFromISR+0x3a>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xQueueReceiveFromISR+0x3e>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueReceiveFromISR+0x40>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	61fb      	str	r3, [r7, #28]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueReceiveFromISR+0x58>
=======
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08e      	sub	sp, #56	; 0x38
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	623b      	str	r3, [r7, #32]
}
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <xQueueReceiveFromISR+0x3a>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <xQueueReceiveFromISR+0x3e>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <xQueueReceiveFromISR+0x40>
 8004c76:	2300      	movs	r3, #0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	61fb      	str	r3, [r7, #28]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xQueueReceiveFromISR+0x58>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 80055d6:	f001 ffdf 	bl	8007598 <vPortValidateInterruptPriority>
	__asm volatile
 80055da:	f3ef 8211 	mrs	r2, BASEPRI
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	61ba      	str	r2, [r7, #24]
 80055f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80055f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d02f      	beq.n	8005662 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8004c92:	f001 fb99 	bl	80063c8 <vPortValidateInterruptPriority>
	__asm volatile
 8004c96:	f3ef 8211 	mrs	r2, BASEPRI
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	61ba      	str	r2, [r7, #24]
 8004cac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004cae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02f      	beq.n	8004d1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
<<<<<<< HEAD
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005610:	f000 f8b6 	bl	8005780 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	1e5a      	subs	r2, r3, #1
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ccc:	f000 f8b6 	bl	8004e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	1e5a      	subs	r2, r3, #1
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
<<<<<<< HEAD
 800561c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005624:	d112      	bne.n	800564c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	3310      	adds	r3, #16
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fdf4 	bl	8006220 <xTaskRemoveFromEventList>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00e      	beq.n	800565c <xQueueReceiveFromISR+0xe0>
=======
 8004cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d112      	bne.n	8004d08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d016      	beq.n	8004d18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	3310      	adds	r3, #16
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fd7a 	bl	80057e8 <xTaskRemoveFromEventList>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00e      	beq.n	8004d18 <xQueueReceiveFromISR+0xe0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00b      	beq.n	800565c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e007      	b.n	800565c <xQueueReceiveFromISR+0xe0>
=======
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e007      	b.n	8004d18 <xQueueReceiveFromISR+0xe0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
<<<<<<< HEAD
 800564c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005650:	3301      	adds	r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	b25a      	sxtb	r2, r3
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800565c:	2301      	movs	r3, #1
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
 8005660:	e001      	b.n	8005666 <xQueueReceiveFromISR+0xea>
=======
 8004d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	b25a      	sxtb	r2, r3
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1c:	e001      	b.n	8004d22 <xQueueReceiveFromISR+0xea>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 8005662:	2300      	movs	r3, #0
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	613b      	str	r3, [r7, #16]
	__asm volatile
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f383 8811 	msr	BASEPRI, r3
}
 8005670:	bf00      	nop
=======
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f383 8811 	msr	BASEPRI, r3
}
 8004d2c:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005674:	4618      	mov	r0, r3
 8005676:	3738      	adds	r7, #56	; 0x38
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvGetDisinheritPriorityAfterTimeout>:
=======
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3738      	adds	r7, #56	; 0x38
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< HEAD
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
=======
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
<<<<<<< HEAD
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f1c3 0307 	rsb	r3, r3, #7
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e001      	b.n	800569e <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d006      	beq.n	8004d56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1c3 0307 	rsb	r3, r3, #7
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e001      	b.n	8004d5a <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< HEAD
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800569e:	68fb      	ldr	r3, [r7, #12]
	}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <prvCopyDataToQueue>:
=======
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <prvCopyDataToQueue>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
=======
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <prvCopyDataToQueue+0x3a>
=======
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <prvCopyDataToQueue+0x3a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d14d      	bne.n	800576e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fff2 	bl	80066c0 <xTaskPriorityDisinherit>
 80056dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	e043      	b.n	800576e <prvCopyDataToQueue+0xc2>
=======
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d14d      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 ff7c 	bl	8005c90 <xTaskPriorityDisinherit>
 8004d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	e043      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d119      	bne.n	8005720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6858      	ldr	r0, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	461a      	mov	r2, r3
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	f002 fadb 	bl	8007cb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	429a      	cmp	r2, r3
 8005714:	d32b      	bcc.n	800576e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	e026      	b.n	800576e <prvCopyDataToQueue+0xc2>
=======
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d119      	bne.n	8004ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6858      	ldr	r0, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	461a      	mov	r2, r3
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	f001 ff75 	bl	8006ca2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d32b      	bcc.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e026      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68d8      	ldr	r0, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	461a      	mov	r2, r3
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	f002 fac1 	bl	8007cb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	425b      	negs	r3, r3
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d207      	bcs.n	800575c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	425b      	negs	r3, r3
 8005756:	441a      	add	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	60da      	str	r2, [r3, #12]
=======
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68d8      	ldr	r0, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f001 ff5b 	bl	8006ca2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	425b      	negs	r3, r3
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d207      	bcs.n	8004e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	425b      	negs	r3, r3
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d105      	bne.n	800576e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <prvCopyDataToQueue+0xc2>
=======
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d105      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <prvCopyDataToQueue+0xc2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3b01      	subs	r3, #1
 800576c:	613b      	str	r3, [r7, #16]
=======
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005776:	697b      	ldr	r3, [r7, #20]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <prvCopyDataFromQueue>:
=======
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e32:	697b      	ldr	r3, [r7, #20]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvCopyDataFromQueue>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d018      	beq.n	80057c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	441a      	add	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d303      	bcc.n	80057b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
=======
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d303      	bcc.n	8004e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68d9      	ldr	r1, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	461a      	mov	r2, r3
 80057be:	6838      	ldr	r0, [r7, #0]
 80057c0:	f002 fa77 	bl	8007cb2 <memcpy>
	}
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <prvUnlockQueue>:
=======
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f001 ff11 	bl	8006ca2 <memcpy>
	}
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <prvUnlockQueue>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
=======
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 80057d4:	f001 fdfe 	bl	80073d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e0:	e011      	b.n	8005806 <prvUnlockQueue+0x3a>
=======
 8004e90:	f001 f9b8 	bl	8006204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e9c:	e011      	b.n	8004ec2 <prvUnlockQueue+0x3a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d012      	beq.n	8005810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3324      	adds	r3, #36	; 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fd16 	bl	8006220 <xTaskRemoveFromEventList>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <prvUnlockQueue+0x32>
=======
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3324      	adds	r3, #36	; 0x24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fc9c 	bl	80057e8 <xTaskRemoveFromEventList>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <prvUnlockQueue+0x32>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 80057fa:	f000 fdeb 	bl	80063d4 <vTaskMissedYield>
=======
 8004eb6:	f000 fd71 	bl	800599c <vTaskMissedYield>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	3b01      	subs	r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	dce9      	bgt.n	80057e2 <prvUnlockQueue+0x16>
 800580e:	e000      	b.n	8005812 <prvUnlockQueue+0x46>
					break;
 8005810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800581a:	f001 fe0b 	bl	8007434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800581e:	f001 fdd9 	bl	80073d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582a:	e011      	b.n	8005850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3310      	adds	r3, #16
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fcf1 	bl	8006220 <xTaskRemoveFromEventList>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005844:	f000 fdc6 	bl	80063d4 <vTaskMissedYield>
=======
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dce9      	bgt.n	8004e9e <prvUnlockQueue+0x16>
 8004eca:	e000      	b.n	8004ece <prvUnlockQueue+0x46>
					break;
 8004ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ed6:	f001 f9c5 	bl	8006264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eda:	f001 f993 	bl	8006204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ee6:	e011      	b.n	8004f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fc77 	bl	80057e8 <xTaskRemoveFromEventList>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f00:	f000 fd4c 	bl	800599c <vTaskMissedYield>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	3b01      	subs	r3, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dce9      	bgt.n	800582c <prvUnlockQueue+0x60>
 8005858:	e000      	b.n	800585c <prvUnlockQueue+0x90>
=======
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dce9      	bgt.n	8004ee8 <prvUnlockQueue+0x60>
 8004f14:	e000      	b.n	8004f18 <prvUnlockQueue+0x90>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				break;
<<<<<<< HEAD
 800585a:	bf00      	nop
=======
 8004f16:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	22ff      	movs	r2, #255	; 0xff
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005864:	f001 fde6 	bl	8007434 <vPortExitCritical>
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <prvIsQueueEmpty>:
=======
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f20:	f001 f9a0 	bl	8006264 <vPortExitCritical>
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <prvIsQueueEmpty>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005878:	f001 fdac 	bl	80073d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e001      	b.n	800588e <prvIsQueueEmpty+0x1e>
=======
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f34:	f001 f966 	bl	8006204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <prvIsQueueEmpty+0x1e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800588e:	f001 fdd1 	bl	8007434 <vPortExitCritical>

	return xReturn;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvIsQueueFull>:
=======
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 f98b 	bl	8006264 <vPortExitCritical>

	return xReturn;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvIsQueueFull>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a4:	f001 fd96 	bl	80073d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d102      	bne.n	80058ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e001      	b.n	80058be <prvIsQueueFull+0x22>
=======
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f60:	f001 f950 	bl	8006204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d102      	bne.n	8004f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e001      	b.n	8004f7a <prvIsQueueFull+0x22>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058be:	f001 fdb9 	bl	8007434 <vPortExitCritical>

	return xReturn;
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e014      	b.n	8005906 <vQueueAddToRegistry+0x3a>
=======
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7a:	f001 f973 	bl	8006264 <vPortExitCritical>

	return xReturn;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08e      	sub	sp, #56	; 0x38
 8004f8c:	af04      	add	r7, sp, #16
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	623b      	str	r3, [r7, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xTaskCreateStatic+0x46>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	61fb      	str	r3, [r7, #28]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058dc:	4a0f      	ldr	r2, [pc, #60]	; (800591c <vQueueAddToRegistry+0x50>)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058e8:	490c      	ldr	r1, [pc, #48]	; (800591c <vQueueAddToRegistry+0x50>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058f2:	4a0a      	ldr	r2, [pc, #40]	; (800591c <vQueueAddToRegistry+0x50>)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058fe:	e006      	b.n	800590e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b07      	cmp	r3, #7
 800590a:	d9e7      	bls.n	80058dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000900 	.word	0x20000900

08005920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005930:	f001 fd50 	bl	80073d4 <vPortEnterCritical>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800593a:	b25b      	sxtb	r3, r3
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005940:	d103      	bne.n	800594a <vQueueWaitForMessageRestricted+0x2a>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005950:	b25b      	sxtb	r3, r3
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005956:	d103      	bne.n	8005960 <vQueueWaitForMessageRestricted+0x40>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005960:	f001 fd68 	bl	8007434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fc27 	bl	80061c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800597a:	6978      	ldr	r0, [r7, #20]
 800597c:	f7ff ff26 	bl	80057cc <prvUnlockQueue>
	}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af04      	add	r7, sp, #16
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	623b      	str	r3, [r7, #32]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xTaskCreateStatic+0x46>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	61fb      	str	r3, [r7, #28]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 80059ce:	2354      	movs	r3, #84	; 0x54
 80059d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b54      	cmp	r3, #84	; 0x54
 80059d6:	d00a      	beq.n	80059ee <xTaskCreateStatic+0x66>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059ee:	693b      	ldr	r3, [r7, #16]
=======
 8004fce:	23a0      	movs	r3, #160	; 0xa0
 8004fd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd6:	d00a      	beq.n	8004fee <xTaskCreateStatic+0x66>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	61bb      	str	r3, [r7, #24]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fee:	693b      	ldr	r3, [r7, #16]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01e      	beq.n	8005a34 <xTaskCreateStatic+0xac>
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <xTaskCreateStatic+0xac>
=======
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01e      	beq.n	8005034 <xTaskCreateStatic+0xac>
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01b      	beq.n	8005034 <xTaskCreateStatic+0xac>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2202      	movs	r2, #2
 800500a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 8005a0e:	2300      	movs	r3, #0
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f850 	bl	8005acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a2e:	f000 f8d5 	bl	8005bdc <prvAddNewTaskToReadyList>
 8005a32:	e001      	b.n	8005a38 <xTaskCreateStatic+0xb0>
=======
 800500e:	2300      	movs	r3, #0
 8005010:	9303      	str	r3, [sp, #12]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	9302      	str	r3, [sp, #8]
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f850 	bl	80050cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800502c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800502e:	f000 f8eb 	bl	8005208 <prvAddNewTaskToReadyList>
 8005032:	e001      	b.n	8005038 <xTaskCreateStatic+0xb0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a38:	697b      	ldr	r3, [r7, #20]
	}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3728      	adds	r7, #40	; 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <xTaskCreate>:
=======
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005038:	697b      	ldr	r3, [r7, #20]
	}
 800503a:	4618      	mov	r0, r3
 800503c:	3728      	adds	r7, #40	; 0x28
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <xTaskCreate>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b08c      	sub	sp, #48	; 0x30
 8005a46:	af04      	add	r7, sp, #16
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
=======
 8005042:	b580      	push	{r7, lr}
 8005044:	b08c      	sub	sp, #48	; 0x30
 8005046:	af04      	add	r7, sp, #16
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fdde 	bl	8007618 <pvPortMalloc>
 8005a5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00e      	beq.n	8005a82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a64:	2054      	movs	r0, #84	; 0x54
 8005a66:	f001 fdd7 	bl	8007618 <pvPortMalloc>
 8005a6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
 8005a78:	e005      	b.n	8005a86 <xTaskCreate+0x44>
=======
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4618      	mov	r0, r3
 8005058:	f001 f9f6 	bl	8006448 <pvPortMalloc>
 800505c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00e      	beq.n	8005082 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005064:	20a0      	movs	r0, #160	; 0xa0
 8005066:	f001 f9ef 	bl	8006448 <pvPortMalloc>
 800506a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
 8005078:	e005      	b.n	8005086 <xTaskCreate+0x44>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f001 fe98 	bl	80077b0 <vPortFree>
 8005a80:	e001      	b.n	8005a86 <xTaskCreate+0x44>
=======
 800507a:	6978      	ldr	r0, [r7, #20]
 800507c:	f001 fab0 	bl	80065e0 <vPortFree>
 8005080:	e001      	b.n	8005086 <xTaskCreate+0x44>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
=======
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d017      	beq.n	8005abc <xTaskCreate+0x7a>
=======
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <xTaskCreate+0x7a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	2300      	movs	r3, #0
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f80e 	bl	8005acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab0:	69f8      	ldr	r0, [r7, #28]
 8005ab2:	f000 f893 	bl	8005bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	e002      	b.n	8005ac2 <xTaskCreate+0x80>
=======
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	2300      	movs	r3, #0
 8005098:	9303      	str	r3, [sp, #12]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f80e 	bl	80050cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b0:	69f8      	ldr	r0, [r7, #28]
 80050b2:	f000 f8a9 	bl	8005208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e002      	b.n	80050c2 <xTaskCreate+0x80>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvInitialiseNewTask>:
=======
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295
 80050c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050c2:	69bb      	ldr	r3, [r7, #24]
	}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvInitialiseNewTask>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
=======
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	617b      	str	r3, [r7, #20]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <prvInitialiseNewTask+0x46>
=======
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050e4:	3b01      	subs	r3, #1
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f023 0307 	bic.w	r3, r3, #7
 80050f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <prvInitialiseNewTask+0x48>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	617b      	str	r3, [r7, #20]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <prvInitialiseNewTask+0x46>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01f      	beq.n	8005b5a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e012      	b.n	8005b46 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	7819      	ldrb	r1, [r3, #0]
 8005b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3334      	adds	r3, #52	; 0x34
 8005b30:	460a      	mov	r2, r1
 8005b32:	701a      	strb	r2, [r3, #0]
=======
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01f      	beq.n	800515a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	e012      	b.n	8005146 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	7819      	ldrb	r1, [r3, #0]
 8005128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	3334      	adds	r3, #52	; 0x34
 8005130:	460a      	mov	r2, r1
 8005132:	701a      	strb	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d9e9      	bls.n	8005b20 <prvInitialiseNewTask+0x54>
 8005b4c:	e000      	b.n	8005b50 <prvInitialiseNewTask+0x84>
			{
				break;
 8005b4e:	bf00      	nop
=======
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b0f      	cmp	r3, #15
 800514a:	d9e9      	bls.n	8005120 <prvInitialiseNewTask+0x54>
 800514c:	e000      	b.n	8005150 <prvInitialiseNewTask+0x84>
			{
				break;
 800514e:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b58:	e003      	b.n	8005b62 <prvInitialiseNewTask+0x96>
=======
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005158:	e003      	b.n	8005162 <prvInitialiseNewTask+0x96>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d901      	bls.n	8005b6c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b68:	2306      	movs	r3, #6
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	2b06      	cmp	r3, #6
 8005166:	d901      	bls.n	800516c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005168:	2306      	movs	r3, #6
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	649a      	str	r2, [r3, #72]	; 0x48
=======
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005176:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	2200      	movs	r2, #0
 800517c:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	3304      	adds	r3, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fece 	bl	8004924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe fec9 	bl	8004924 <vListInitialiseItem>
=======
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	3304      	adds	r3, #4
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe ff2c 	bl	8003fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	3318      	adds	r3, #24
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe ff27 	bl	8003fe0 <vListInitialiseItem>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	f1c3 0207 	rsb	r2, r3, #7
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	f1c3 0207 	rsb	r2, r3, #7
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	2200      	movs	r2, #0
 8005bac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	334c      	adds	r3, #76	; 0x4c
 80051bc:	224c      	movs	r2, #76	; 0x4c
 80051be:	2100      	movs	r1, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 fc9c 	bl	8006afe <memset>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <prvInitialiseNewTask+0x130>)
 80051ca:	651a      	str	r2, [r3, #80]	; 0x50
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <prvInitialiseNewTask+0x134>)
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <prvInitialiseNewTask+0x138>)
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	68f9      	ldr	r1, [r7, #12]
 8005bba:	69b8      	ldr	r0, [r7, #24]
 8005bbc:	f001 fada 	bl	8007174 <pxPortInitialiseStack>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	601a      	str	r2, [r3, #0]
=======
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	69b8      	ldr	r0, [r7, #24]
 80051de:	f000 fee5 	bl	8005fac <pxPortInitialiseStack>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <prvInitialiseNewTask+0x106>
=======
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <prvInitialiseNewTask+0x128>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd0:	601a      	str	r2, [r3, #0]
=======
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8005bd2:	bf00      	nop
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <prvAddNewTaskToReadyList>:
=======
 80051f4:	bf00      	nop
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	200041a0 	.word	0x200041a0
 8005200:	20004208 	.word	0x20004208
 8005204:	20004270 	.word	0x20004270

08005208 <prvAddNewTaskToReadyList>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005be4:	f001 fbf6 	bl	80073d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005be8:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <prvAddNewTaskToReadyList+0xb8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	4a29      	ldr	r2, [pc, #164]	; (8005c94 <prvAddNewTaskToReadyList+0xb8>)
 8005bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bf2:	4b29      	ldr	r3, [pc, #164]	; (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <prvAddNewTaskToReadyList+0x32>
=======
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005210:	f000 fff8 	bl	8006204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005214:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <prvAddNewTaskToReadyList+0xb8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3301      	adds	r3, #1
 800521a:	4a29      	ldr	r2, [pc, #164]	; (80052c0 <prvAddNewTaskToReadyList+0xb8>)
 800521c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800521e:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <prvAddNewTaskToReadyList+0xbc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <prvAddNewTaskToReadyList+0x32>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 8005bfa:	4a27      	ldr	r2, [pc, #156]	; (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c00:	4b24      	ldr	r3, [pc, #144]	; (8005c94 <prvAddNewTaskToReadyList+0xb8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d110      	bne.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
=======
 8005226:	4a27      	ldr	r2, [pc, #156]	; (80052c4 <prvAddNewTaskToReadyList+0xbc>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <prvAddNewTaskToReadyList+0xb8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d110      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 8005c08:	f000 fc08 	bl	800641c <prvInitialiseTaskLists>
 8005c0c:	e00d      	b.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
=======
 8005234:	f000 fbd6 	bl	80059e4 <prvInitialiseTaskLists>
 8005238:	e00d      	b.n	8005256 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8005c0e:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <prvAddNewTaskToReadyList+0xc0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c16:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d802      	bhi.n	8005c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c24:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6013      	str	r3, [r2, #0]
=======
 800523a:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <prvAddNewTaskToReadyList+0xc0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005242:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <prvAddNewTaskToReadyList+0xbc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d802      	bhi.n	8005256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005250:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <prvAddNewTaskToReadyList+0xbc>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <prvAddNewTaskToReadyList+0xc4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <prvAddNewTaskToReadyList+0xc4>)
 8005c32:	6013      	str	r3, [r2, #0]
=======
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <prvAddNewTaskToReadyList+0xc4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <prvAddNewTaskToReadyList+0xc4>)
 800525e:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	2201      	movs	r2, #1
 8005c3a:	409a      	lsls	r2, r3
 8005c3c:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <prvAddNewTaskToReadyList+0xc8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <prvAddNewTaskToReadyList+0xc8>)
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4a15      	ldr	r2, [pc, #84]	; (8005ca8 <prvAddNewTaskToReadyList+0xcc>)
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f7fe fe6e 	bl	800493e <vListInsertEnd>
=======
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	2201      	movs	r2, #1
 8005266:	409a      	lsls	r2, r3
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4313      	orrs	r3, r2
 800526e:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <prvAddNewTaskToReadyList+0xcc>)
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f7fe feb6 	bl	8003ffa <vListInsertEnd>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005c62:	f001 fbe7 	bl	8007434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <prvAddNewTaskToReadyList+0xc0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <prvAddNewTaskToReadyList+0xb0>
=======
 800528e:	f000 ffe9 	bl	8006264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <prvAddNewTaskToReadyList+0xc0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00e      	beq.n	80052b8 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <prvAddNewTaskToReadyList+0xbc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d207      	bcs.n	8005c8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <prvAddNewTaskToReadyList+0xd0>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
=======
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <prvAddNewTaskToReadyList+0xbc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d207      	bcs.n	80052b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000a40 	.word	0x20000a40
 8005c98:	20000940 	.word	0x20000940
 8005c9c:	20000a4c 	.word	0x20000a4c
 8005ca0:	20000a5c 	.word	0x20000a5c
 8005ca4:	20000a48 	.word	0x20000a48
 8005ca8:	20000944 	.word	0x20000944
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <vTaskDelay>:
=======
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	2000054c 	.word	0x2000054c
 80052c4:	2000044c 	.word	0x2000044c
 80052c8:	20000558 	.word	0x20000558
 80052cc:	20000568 	.word	0x20000568
 80052d0:	20000554 	.word	0x20000554
 80052d4:	20000450 	.word	0x20000450
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vTaskDelay>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d017      	beq.n	8005cf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <vTaskDelay+0x60>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <vTaskDelay+0x30>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	60bb      	str	r3, [r7, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ce0:	f000 f880 	bl	8005de4 <vTaskSuspendAll>
=======
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d017      	beq.n	800531e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <vTaskDelay+0x60>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <vTaskDelay+0x30>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60bb      	str	r3, [r7, #8]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800530c:	f000 f884 	bl	8005418 <vTaskSuspendAll>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fe12 	bl	8006910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cec:	f000 f888 	bl	8005e00 <xTaskResumeAll>
 8005cf0:	60f8      	str	r0, [r7, #12]
=======
 8005310:	2100      	movs	r1, #0
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fde4 	bl	8005ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005318:	f000 f88c 	bl	8005434 <xTaskResumeAll>
 800531c:	60f8      	str	r0, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d107      	bne.n	8005d08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005cf8:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <vTaskDelay+0x64>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
=======
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d107      	bne.n	8005334 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <vTaskDelay+0x64>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000a68 	.word	0x20000a68
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <vTaskStartScheduler>:
=======
 8005334:	bf00      	nop
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20000574 	.word	0x20000574
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vTaskStartScheduler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af04      	add	r7, sp, #16
=======
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af04      	add	r7, sp, #16
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	607b      	str	r3, [r7, #4]
=======
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	607b      	str	r3, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 8005d26:	463a      	mov	r2, r7
 8005d28:	1d39      	adds	r1, r7, #4
 8005d2a:	f107 0308 	add.w	r3, r7, #8
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fb f83a 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	9202      	str	r2, [sp, #8]
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	460a      	mov	r2, r1
 8005d46:	4921      	ldr	r1, [pc, #132]	; (8005dcc <vTaskStartScheduler+0xb4>)
 8005d48:	4821      	ldr	r0, [pc, #132]	; (8005dd0 <vTaskStartScheduler+0xb8>)
 8005d4a:	f7ff fe1d 	bl	8005988 <xTaskCreateStatic>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <vTaskStartScheduler+0xbc>)
 8005d52:	6013      	str	r3, [r2, #0]
=======
 8005352:	463a      	mov	r2, r7
 8005354:	1d39      	adds	r1, r7, #4
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	4618      	mov	r0, r3
 800535c:	f7fb fd24 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	9202      	str	r2, [sp, #8]
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	460a      	mov	r2, r1
 8005372:	4921      	ldr	r1, [pc, #132]	; (80053f8 <vTaskStartScheduler+0xb4>)
 8005374:	4821      	ldr	r0, [pc, #132]	; (80053fc <vTaskStartScheduler+0xb8>)
 8005376:	f7ff fe07 	bl	8004f88 <xTaskCreateStatic>
 800537a:	4603      	mov	r3, r0
 800537c:	4a20      	ldr	r2, [pc, #128]	; (8005400 <vTaskStartScheduler+0xbc>)
 800537e:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 8005d54:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <vTaskStartScheduler+0xbc>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e001      	b.n	8005d66 <vTaskStartScheduler+0x4e>
=======
 8005380:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <vTaskStartScheduler+0xbc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005388:	2301      	movs	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e001      	b.n	8005392 <vTaskStartScheduler+0x4e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d102      	bne.n	8005d72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d6c:	f000 fe36 	bl	80069dc <xTimerCreateTimerTask>
 8005d70:	6178      	str	r0, [r7, #20]
=======
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d116      	bne.n	8005da6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	613b      	str	r3, [r7, #16]
}
 8005d8a:	bf00      	nop
=======
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d11b      	bne.n	80053d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	613b      	str	r3, [r7, #16]
}
 80053aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053ac:	4b15      	ldr	r3, [pc, #84]	; (8005404 <vTaskStartScheduler+0xc0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	334c      	adds	r3, #76	; 0x4c
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <vTaskStartScheduler+0xc4>)
 80053b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <vTaskStartScheduler+0xc0>)
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d94:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <vTaskStartScheduler+0xc4>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <vTaskStartScheduler+0xc8>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
=======
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <vTaskStartScheduler+0xc8>)
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <vTaskStartScheduler+0xcc>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <vTaskStartScheduler+0xd0>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 8005da0:	f001 fa76 	bl	8007290 <xPortStartScheduler>
=======
 80053ca:	f000 fe79 	bl	80060c0 <xPortStartScheduler>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 8005da4:	e00e      	b.n	8005dc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dac:	d10a      	bne.n	8005dc4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <vTaskStartScheduler+0xaa>
}
 8005dc4:	bf00      	nop
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	08008b3c 	.word	0x08008b3c
 8005dd0:	080063ed 	.word	0x080063ed
 8005dd4:	20000a64 	.word	0x20000a64
 8005dd8:	20000a60 	.word	0x20000a60
 8005ddc:	20000a4c 	.word	0x20000a4c
 8005de0:	20000a44 	.word	0x20000a44

08005de4 <vTaskSuspendAll>:
=======
 80053ce:	e00e      	b.n	80053ee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d10a      	bne.n	80053ee <vTaskStartScheduler+0xaa>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	60fb      	str	r3, [r7, #12]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <vTaskStartScheduler+0xa8>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	08007a10 	.word	0x08007a10
 80053fc:	080059b5 	.word	0x080059b5
 8005400:	20000570 	.word	0x20000570
 8005404:	2000044c 	.word	0x2000044c
 8005408:	20000068 	.word	0x20000068
 800540c:	2000056c 	.word	0x2000056c
 8005410:	20000558 	.word	0x20000558
 8005414:	20000550 	.word	0x20000550

08005418 <vTaskSuspendAll>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
=======
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <vTaskSuspendAll+0x18>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	4a03      	ldr	r2, [pc, #12]	; (8005dfc <vTaskSuspendAll+0x18>)
 8005df0:	6013      	str	r3, [r2, #0]
=======
 800541c:	4b04      	ldr	r3, [pc, #16]	; (8005430 <vTaskSuspendAll+0x18>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	4a03      	ldr	r2, [pc, #12]	; (8005430 <vTaskSuspendAll+0x18>)
 8005424:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20000a68 	.word	0x20000a68

08005e00 <xTaskResumeAll>:
=======
 8005426:	bf00      	nop
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	20000574 	.word	0x20000574

08005434 <xTaskResumeAll>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60bb      	str	r3, [r7, #8]
=======
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800543e:	2300      	movs	r3, #0
 8005440:	60bb      	str	r3, [r7, #8]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 8005e0e:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <xTaskResumeAll+0x2c>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	603b      	str	r3, [r7, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xTaskResumeAll+0x2a>
=======
 8005442:	4b41      	ldr	r3, [pc, #260]	; (8005548 <xTaskResumeAll+0x114>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <xTaskResumeAll+0x2c>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	603b      	str	r3, [r7, #0]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <xTaskResumeAll+0x2a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8005e2c:	f001 fad2 	bl	80073d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e30:	4b38      	ldr	r3, [pc, #224]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	4a37      	ldr	r2, [pc, #220]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3a:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <xTaskResumeAll+0x114>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d161      	bne.n	8005f06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e42:	4b35      	ldr	r3, [pc, #212]	; (8005f18 <xTaskResumeAll+0x118>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d05d      	beq.n	8005f06 <xTaskResumeAll+0x106>
=======
 8005460:	f000 fed0 	bl	8006204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005464:	4b38      	ldr	r3, [pc, #224]	; (8005548 <xTaskResumeAll+0x114>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3b01      	subs	r3, #1
 800546a:	4a37      	ldr	r2, [pc, #220]	; (8005548 <xTaskResumeAll+0x114>)
 800546c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546e:	4b36      	ldr	r3, [pc, #216]	; (8005548 <xTaskResumeAll+0x114>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d161      	bne.n	800553a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005476:	4b35      	ldr	r3, [pc, #212]	; (800554c <xTaskResumeAll+0x118>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d05d      	beq.n	800553a <xTaskResumeAll+0x106>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 8005e4a:	e02e      	b.n	8005eaa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4c:	4b33      	ldr	r3, [pc, #204]	; (8005f1c <xTaskResumeAll+0x11c>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3318      	adds	r3, #24
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fdcd 	bl	80049f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fdc8 	bl	80049f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <xTaskResumeAll+0x120>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <xTaskResumeAll+0x120>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <xTaskResumeAll+0x124>)
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7fe fd54 	bl	800493e <vListInsertEnd>
=======
 800547e:	e02e      	b.n	80054de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005480:	4b33      	ldr	r3, [pc, #204]	; (8005550 <xTaskResumeAll+0x11c>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3318      	adds	r3, #24
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fe11 	bl	80040b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3304      	adds	r3, #4
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fe0c 	bl	80040b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	2201      	movs	r2, #1
 80054a2:	409a      	lsls	r2, r3
 80054a4:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <xTaskResumeAll+0x120>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <xTaskResumeAll+0x120>)
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a27      	ldr	r2, [pc, #156]	; (8005558 <xTaskResumeAll+0x124>)
 80054bc:	441a      	add	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7fe fd98 	bl	8003ffa <vListInsertEnd>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <xTaskResumeAll+0x128>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ea4:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <xTaskResumeAll+0x12c>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <xTaskResumeAll+0x11c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1cc      	bne.n	8005e4c <xTaskResumeAll+0x4c>
=======
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4b23      	ldr	r3, [pc, #140]	; (800555c <xTaskResumeAll+0x128>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054d8:	4b21      	ldr	r3, [pc, #132]	; (8005560 <xTaskResumeAll+0x12c>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <xTaskResumeAll+0x11c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1cc      	bne.n	8005480 <xTaskResumeAll+0x4c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <xTaskResumeAll+0xbc>
=======
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <xTaskResumeAll+0xbc>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 8005eb8:	f000 fb4e 	bl	8006558 <prvResetNextTaskUnblockTime>
=======
 80054ec:	f000 fb1c 	bl	8005b28 <prvResetNextTaskUnblockTime>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 8005ebc:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <xTaskResumeAll+0x130>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d010      	beq.n	8005eea <xTaskResumeAll+0xea>
=======
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <xTaskResumeAll+0x130>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d010      	beq.n	800551e <xTaskResumeAll+0xea>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8005ec8:	f000 f846 	bl	8005f58 <xTaskIncrementTick>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <xTaskResumeAll+0x12c>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
=======
 80054fc:	f000 f836 	bl	800556c <xTaskIncrementTick>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005506:	4b16      	ldr	r3, [pc, #88]	; (8005560 <xTaskResumeAll+0x12c>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f1      	bne.n	8005ec8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <xTaskResumeAll+0x130>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
=======
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3b01      	subs	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f1      	bne.n	80054fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <xTaskResumeAll+0x130>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <xTaskResumeAll+0x12c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <xTaskResumeAll+0x106>
=======
 800551e:	4b10      	ldr	r3, [pc, #64]	; (8005560 <xTaskResumeAll+0x12c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <xTaskResumeAll+0x106>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <xTaskResumeAll+0x134>)
 8005ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	f3bf 8f6f 	isb	sy
=======
 8005526:	2301      	movs	r3, #1
 8005528:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800552a:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <xTaskResumeAll+0x134>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005f06:	f001 fa95 	bl	8007434 <vPortExitCritical>

	return xAlreadyYielded;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000a68 	.word	0x20000a68
 8005f18:	20000a40 	.word	0x20000a40
 8005f1c:	20000a00 	.word	0x20000a00
 8005f20:	20000a48 	.word	0x20000a48
 8005f24:	20000944 	.word	0x20000944
 8005f28:	20000940 	.word	0x20000940
 8005f2c:	20000a54 	.word	0x20000a54
 8005f30:	20000a50 	.word	0x20000a50
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <xTaskGetTickCount+0x1c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f44:	687b      	ldr	r3, [r7, #4]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000a44 	.word	0x20000a44

08005f58 <xTaskIncrementTick>:
=======
 800553a:	f000 fe93 	bl	8006264 <vPortExitCritical>

	return xAlreadyYielded;
 800553e:	68bb      	ldr	r3, [r7, #8]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000574 	.word	0x20000574
 800554c:	2000054c 	.word	0x2000054c
 8005550:	2000050c 	.word	0x2000050c
 8005554:	20000554 	.word	0x20000554
 8005558:	20000450 	.word	0x20000450
 800555c:	2000044c 	.word	0x2000044c
 8005560:	20000560 	.word	0x20000560
 8005564:	2000055c 	.word	0x2000055c
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xTaskIncrementTick>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
=======
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8005f62:	4b4e      	ldr	r3, [pc, #312]	; (800609c <xTaskIncrementTick+0x144>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 808e 	bne.w	8006088 <xTaskIncrementTick+0x130>
=======
 8005576:	4b4e      	ldr	r3, [pc, #312]	; (80056b0 <xTaskIncrementTick+0x144>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 808e 	bne.w	800569c <xTaskIncrementTick+0x130>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 8005f6c:	4b4c      	ldr	r3, [pc, #304]	; (80060a0 <xTaskIncrementTick+0x148>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]
=======
 8005580:	4b4c      	ldr	r3, [pc, #304]	; (80056b4 <xTaskIncrementTick+0x148>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	613b      	str	r3, [r7, #16]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 8005f74:	4a4a      	ldr	r2, [pc, #296]	; (80060a0 <xTaskIncrementTick+0x148>)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d120      	bne.n	8005fc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f80:	4b48      	ldr	r3, [pc, #288]	; (80060a4 <xTaskIncrementTick+0x14c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	603b      	str	r3, [r7, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <xTaskIncrementTick+0x46>
 8005fa0:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <xTaskIncrementTick+0x14c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	4b40      	ldr	r3, [pc, #256]	; (80060a8 <xTaskIncrementTick+0x150>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a3e      	ldr	r2, [pc, #248]	; (80060a4 <xTaskIncrementTick+0x14c>)
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4a3e      	ldr	r2, [pc, #248]	; (80060a8 <xTaskIncrementTick+0x150>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	4b3d      	ldr	r3, [pc, #244]	; (80060ac <xTaskIncrementTick+0x154>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	4a3c      	ldr	r2, [pc, #240]	; (80060ac <xTaskIncrementTick+0x154>)
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	f000 facb 	bl	8006558 <prvResetNextTaskUnblockTime>
=======
 8005588:	4a4a      	ldr	r2, [pc, #296]	; (80056b4 <xTaskIncrementTick+0x148>)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d120      	bne.n	80055d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005594:	4b48      	ldr	r3, [pc, #288]	; (80056b8 <xTaskIncrementTick+0x14c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	603b      	str	r3, [r7, #0]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <xTaskIncrementTick+0x46>
 80055b4:	4b40      	ldr	r3, [pc, #256]	; (80056b8 <xTaskIncrementTick+0x14c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	4b40      	ldr	r3, [pc, #256]	; (80056bc <xTaskIncrementTick+0x150>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a3e      	ldr	r2, [pc, #248]	; (80056b8 <xTaskIncrementTick+0x14c>)
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4a3e      	ldr	r2, [pc, #248]	; (80056bc <xTaskIncrementTick+0x150>)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <xTaskIncrementTick+0x154>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	4a3c      	ldr	r2, [pc, #240]	; (80056c0 <xTaskIncrementTick+0x154>)
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	f000 faa9 	bl	8005b28 <prvResetNextTaskUnblockTime>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 8005fc2:	4b3b      	ldr	r3, [pc, #236]	; (80060b0 <xTaskIncrementTick+0x158>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d348      	bcc.n	800605e <xTaskIncrementTick+0x106>
=======
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <xTaskIncrementTick+0x158>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d348      	bcc.n	8005672 <xTaskIncrementTick+0x106>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 8005fcc:	4b35      	ldr	r3, [pc, #212]	; (80060a4 <xTaskIncrementTick+0x14c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <xTaskIncrementTick+0x88>
=======
 80055e0:	4b35      	ldr	r3, [pc, #212]	; (80056b8 <xTaskIncrementTick+0x14c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <xTaskIncrementTick+0x88>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8005fd6:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <xTaskIncrementTick+0x158>)
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fdc:	601a      	str	r2, [r3, #0]
					break;
 8005fde:	e03e      	b.n	800605e <xTaskIncrementTick+0x106>
=======
 80055ea:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <xTaskIncrementTick+0x158>)
 80055ec:	f04f 32ff 	mov.w	r2, #4294967295
 80055f0:	601a      	str	r2, [r3, #0]
					break;
 80055f2:	e03e      	b.n	8005672 <xTaskIncrementTick+0x106>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8005fe0:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <xTaskIncrementTick+0x14c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d203      	bcs.n	8006000 <xTaskIncrementTick+0xa8>
=======
 80055f4:	4b30      	ldr	r3, [pc, #192]	; (80056b8 <xTaskIncrementTick+0x14c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d203      	bcs.n	8005614 <xTaskIncrementTick+0xa8>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <xTaskIncrementTick+0x158>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ffe:	e02e      	b.n	800605e <xTaskIncrementTick+0x106>
=======
 800560c:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <xTaskIncrementTick+0x158>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005612:	e02e      	b.n	8005672 <xTaskIncrementTick+0x106>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3304      	adds	r3, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fcf7 	bl	80049f8 <uxListRemove>
=======
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3304      	adds	r3, #4
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe fd4b 	bl	80040b4 <uxListRemove>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	3318      	adds	r3, #24
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fcee 	bl	80049f8 <uxListRemove>
=======
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	3318      	adds	r3, #24
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fd42 	bl	80040b4 <uxListRemove>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	2201      	movs	r2, #1
 8006022:	409a      	lsls	r2, r3
 8006024:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <xTaskIncrementTick+0x15c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4313      	orrs	r3, r2
 800602a:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <xTaskIncrementTick+0x15c>)
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <xTaskIncrementTick+0x160>)
 800603c:	441a      	add	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3304      	adds	r3, #4
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7fe fc7a 	bl	800493e <vListInsertEnd>
=======
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	2201      	movs	r2, #1
 8005636:	409a      	lsls	r2, r3
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <xTaskIncrementTick+0x15c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4313      	orrs	r3, r2
 800563e:	4a22      	ldr	r2, [pc, #136]	; (80056c8 <xTaskIncrementTick+0x15c>)
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <xTaskIncrementTick+0x160>)
 8005650:	441a      	add	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3304      	adds	r3, #4
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f7fe fcce 	bl	8003ffa <vListInsertEnd>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <xTaskIncrementTick+0x164>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	d3b9      	bcc.n	8005fcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006058:	2301      	movs	r3, #1
 800605a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800605c:	e7b6      	b.n	8005fcc <xTaskIncrementTick+0x74>
=======
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <xTaskIncrementTick+0x164>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	429a      	cmp	r2, r3
 800566a:	d3b9      	bcc.n	80055e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005670:	e7b6      	b.n	80055e0 <xTaskIncrementTick+0x74>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800605e:	4b17      	ldr	r3, [pc, #92]	; (80060bc <xTaskIncrementTick+0x164>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	4914      	ldr	r1, [pc, #80]	; (80060b8 <xTaskIncrementTick+0x160>)
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d901      	bls.n	800607a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006076:	2301      	movs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
=======
 8005672:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <xTaskIncrementTick+0x164>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4914      	ldr	r1, [pc, #80]	; (80056cc <xTaskIncrementTick+0x160>)
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d901      	bls.n	800568e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800568a:	2301      	movs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <xTaskIncrementTick+0x168>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e004      	b.n	8006092 <xTaskIncrementTick+0x13a>
=======
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <xTaskIncrementTick+0x168>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005696:	2301      	movs	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e004      	b.n	80056a6 <xTaskIncrementTick+0x13a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 8006088:	4b0e      	ldr	r3, [pc, #56]	; (80060c4 <xTaskIncrementTick+0x16c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3301      	adds	r3, #1
 800608e:	4a0d      	ldr	r2, [pc, #52]	; (80060c4 <xTaskIncrementTick+0x16c>)
 8006090:	6013      	str	r3, [r2, #0]
=======
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <xTaskIncrementTick+0x16c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	4a0d      	ldr	r2, [pc, #52]	; (80056d8 <xTaskIncrementTick+0x16c>)
 80056a4:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 8006092:	697b      	ldr	r3, [r7, #20]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000a68 	.word	0x20000a68
 80060a0:	20000a44 	.word	0x20000a44
 80060a4:	200009f8 	.word	0x200009f8
 80060a8:	200009fc 	.word	0x200009fc
 80060ac:	20000a58 	.word	0x20000a58
 80060b0:	20000a60 	.word	0x20000a60
 80060b4:	20000a48 	.word	0x20000a48
 80060b8:	20000944 	.word	0x20000944
 80060bc:	20000940 	.word	0x20000940
 80060c0:	20000a54 	.word	0x20000a54
 80060c4:	20000a50 	.word	0x20000a50

080060c8 <vTaskSwitchContext>:
=======
 80056a6:	697b      	ldr	r3, [r7, #20]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000574 	.word	0x20000574
 80056b4:	20000550 	.word	0x20000550
 80056b8:	20000504 	.word	0x20000504
 80056bc:	20000508 	.word	0x20000508
 80056c0:	20000564 	.word	0x20000564
 80056c4:	2000056c 	.word	0x2000056c
 80056c8:	20000554 	.word	0x20000554
 80056cc:	20000450 	.word	0x20000450
 80056d0:	2000044c 	.word	0x2000044c
 80056d4:	20000560 	.word	0x20000560
 80056d8:	2000055c 	.word	0x2000055c

080056dc <vTaskSwitchContext>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060ce:	4b27      	ldr	r3, [pc, #156]	; (800616c <vTaskSwitchContext+0xa4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <vTaskSwitchContext+0x16>
=======
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056e2:	4b29      	ldr	r3, [pc, #164]	; (8005788 <vTaskSwitchContext+0xac>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <vTaskSwitchContext+0x16>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <vTaskSwitchContext+0xa8>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]
=======
 80056ea:	4b28      	ldr	r3, [pc, #160]	; (800578c <vTaskSwitchContext+0xb0>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 80060dc:	e03f      	b.n	800615e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <vTaskSwitchContext+0xa8>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e4:	4b23      	ldr	r3, [pc, #140]	; (8006174 <vTaskSwitchContext+0xac>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	fab3 f383 	clz	r3, r3
 80060f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060f2:	7afb      	ldrb	r3, [r7, #11]
 80060f4:	f1c3 031f 	rsb	r3, r3, #31
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	491f      	ldr	r1, [pc, #124]	; (8006178 <vTaskSwitchContext+0xb0>)
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <vTaskSwitchContext+0x5c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <vTaskSwitchContext+0x5a>
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4a12      	ldr	r2, [pc, #72]	; (8006178 <vTaskSwitchContext+0xb0>)
 8006130:	4413      	add	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	3308      	adds	r3, #8
 8006146:	429a      	cmp	r2, r3
 8006148:	d104      	bne.n	8006154 <vTaskSwitchContext+0x8c>
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	605a      	str	r2, [r3, #4]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <vTaskSwitchContext+0xb4>)
 800615c:	6013      	str	r3, [r2, #0]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000a68 	.word	0x20000a68
 8006170:	20000a54 	.word	0x20000a54
 8006174:	20000a48 	.word	0x20000a48
 8006178:	20000944 	.word	0x20000944
 800617c:	20000940 	.word	0x20000940

08006180 <vTaskPlaceOnEventList>:
=======
 80056f0:	e044      	b.n	800577c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80056f2:	4b26      	ldr	r3, [pc, #152]	; (800578c <vTaskSwitchContext+0xb0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <vTaskSwitchContext+0xb4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	fab3 f383 	clz	r3, r3
 8005704:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	f1c3 031f 	rsb	r3, r3, #31
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	4921      	ldr	r1, [pc, #132]	; (8005794 <vTaskSwitchContext+0xb8>)
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	607b      	str	r3, [r7, #4]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <vTaskSwitchContext+0x5a>
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a14      	ldr	r2, [pc, #80]	; (8005794 <vTaskSwitchContext+0xb8>)
 8005744:	4413      	add	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	3308      	adds	r3, #8
 800575a:	429a      	cmp	r2, r3
 800575c:	d104      	bne.n	8005768 <vTaskSwitchContext+0x8c>
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <vTaskSwitchContext+0xbc>)
 8005770:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <vTaskSwitchContext+0xbc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	334c      	adds	r3, #76	; 0x4c
 8005778:	4a08      	ldr	r2, [pc, #32]	; (800579c <vTaskSwitchContext+0xc0>)
 800577a:	6013      	str	r3, [r2, #0]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000574 	.word	0x20000574
 800578c:	20000560 	.word	0x20000560
 8005790:	20000554 	.word	0x20000554
 8005794:	20000450 	.word	0x20000450
 8005798:	2000044c 	.word	0x2000044c
 800579c:	20000068 	.word	0x20000068

080057a0 <vTaskPlaceOnEventList>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60fb      	str	r3, [r7, #12]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <vTaskPlaceOnEventList+0x24>
=======
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60fb      	str	r3, [r7, #12]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <vTaskPlaceOnEventList+0x24>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 80061a6:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <vTaskPlaceOnEventList+0x44>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3318      	adds	r3, #24
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fe fbe9 	bl	8004986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061b4:	2101      	movs	r1, #1
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	f000 fbaa 	bl	8006910 <prvAddCurrentTaskToDelayedList>
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000940 	.word	0x20000940

080061c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	617b      	str	r3, [r7, #20]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <vTaskPlaceOnEventListRestricted+0x54>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3318      	adds	r3, #24
 80061f6:	4619      	mov	r1, r3
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7fe fba0 	bl	800493e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006208:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	68b8      	ldr	r0, [r7, #8]
 800620e:	f000 fb7f 	bl	8006910 <prvAddCurrentTaskToDelayedList>
	}
 8006212:	bf00      	nop
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000940 	.word	0x20000940

08006220 <xTaskRemoveFromEventList>:
=======
 80057c6:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <vTaskPlaceOnEventList+0x44>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3318      	adds	r3, #24
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fe fc37 	bl	8004042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057d4:	2101      	movs	r1, #1
 80057d6:	6838      	ldr	r0, [r7, #0]
 80057d8:	f000 fb82 	bl	8005ee0 <prvAddCurrentTaskToDelayedList>
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	2000044c 	.word	0x2000044c

080057e8 <xTaskRemoveFromEventList>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
=======
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	60fb      	str	r3, [r7, #12]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	3318      	adds	r3, #24
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fbd1 	bl	80049f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006256:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <xTaskRemoveFromEventList+0xac>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11c      	bne.n	8006298 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3304      	adds	r3, #4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fbc8 	bl	80049f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	2201      	movs	r2, #1
 800626e:	409a      	lsls	r2, r3
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <xTaskRemoveFromEventList+0xb0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4313      	orrs	r3, r2
 8006276:	4a16      	ldr	r2, [pc, #88]	; (80062d0 <xTaskRemoveFromEventList+0xb0>)
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <xTaskRemoveFromEventList+0xb4>)
 8006288:	441a      	add	r2, r3
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fe fb54 	bl	800493e <vListInsertEnd>
 8006296:	e005      	b.n	80062a4 <xTaskRemoveFromEventList+0x84>
=======
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3318      	adds	r3, #24
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fc4b 	bl	80040b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581e:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <xTaskRemoveFromEventList+0xac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11c      	bne.n	8005860 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fc42 	bl	80040b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	2201      	movs	r2, #1
 8005836:	409a      	lsls	r2, r3
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <xTaskRemoveFromEventList+0xb0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4313      	orrs	r3, r2
 800583e:	4a16      	ldr	r2, [pc, #88]	; (8005898 <xTaskRemoveFromEventList+0xb0>)
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4a13      	ldr	r2, [pc, #76]	; (800589c <xTaskRemoveFromEventList+0xb4>)
 8005850:	441a      	add	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	3304      	adds	r3, #4
 8005856:	4619      	mov	r1, r3
 8005858:	4610      	mov	r0, r2
 800585a:	f7fe fbce 	bl	8003ffa <vListInsertEnd>
 800585e:	e005      	b.n	800586c <xTaskRemoveFromEventList+0x84>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	3318      	adds	r3, #24
 800629c:	4619      	mov	r1, r3
 800629e:	480e      	ldr	r0, [pc, #56]	; (80062d8 <xTaskRemoveFromEventList+0xb8>)
 80062a0:	f7fe fb4d 	bl	800493e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <xTaskRemoveFromEventList+0xbc>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d905      	bls.n	80062be <xTaskRemoveFromEventList+0x9e>
=======
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3318      	adds	r3, #24
 8005864:	4619      	mov	r1, r3
 8005866:	480e      	ldr	r0, [pc, #56]	; (80058a0 <xTaskRemoveFromEventList+0xb8>)
 8005868:	f7fe fbc7 	bl	8003ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <xTaskRemoveFromEventList+0xbc>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d905      	bls.n	8005886 <xTaskRemoveFromEventList+0x9e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
=======
 800587a:	2301      	movs	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <xTaskRemoveFromEventList+0xc0>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e001      	b.n	80062c2 <xTaskRemoveFromEventList+0xa2>
=======
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <xTaskRemoveFromEventList+0xc0>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e001      	b.n	800588a <xTaskRemoveFromEventList+0xa2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062c2:	697b      	ldr	r3, [r7, #20]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000a68 	.word	0x20000a68
 80062d0:	20000a48 	.word	0x20000a48
 80062d4:	20000944 	.word	0x20000944
 80062d8:	20000a00 	.word	0x20000a00
 80062dc:	20000940 	.word	0x20000940
 80062e0:	20000a54 	.word	0x20000a54

080062e4 <vTaskInternalSetTimeOutState>:
=======
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800588a:	697b      	ldr	r3, [r7, #20]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000574 	.word	0x20000574
 8005898:	20000554 	.word	0x20000554
 800589c:	20000450 	.word	0x20000450
 80058a0:	2000050c 	.word	0x2000050c
 80058a4:	2000044c 	.word	0x2000044c
 80058a8:	20000560 	.word	0x20000560

080058ac <vTaskInternalSetTimeOutState>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <vTaskInternalSetTimeOutState+0x24>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <vTaskInternalSetTimeOutState+0x28>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	605a      	str	r2, [r3, #4]
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	20000a58 	.word	0x20000a58
 800630c:	20000a44 	.word	0x20000a44

08006310 <xTaskCheckForTimeOut>:
=======
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <vTaskInternalSetTimeOutState+0x24>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <vTaskInternalSetTimeOutState+0x28>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000564 	.word	0x20000564
 80058d4:	20000550 	.word	0x20000550

080058d8 <xTaskCheckForTimeOut>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	60fb      	str	r3, [r7, #12]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006352:	f001 f83f 	bl	80073d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <xTaskCheckForTimeOut+0xbc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]
=======
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	613b      	str	r3, [r7, #16]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800591a:	f000 fc73 	bl	8006204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <xTaskCheckForTimeOut+0xbc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800636e:	d102      	bne.n	8006376 <xTaskCheckForTimeOut+0x66>
=======
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d102      	bne.n	800593e <xTaskCheckForTimeOut+0x66>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	e023      	b.n	80063be <xTaskCheckForTimeOut+0xae>
=======
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e023      	b.n	8005986 <xTaskCheckForTimeOut+0xae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <xTaskCheckForTimeOut+0xc0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d007      	beq.n	8006392 <xTaskCheckForTimeOut+0x82>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <xTaskCheckForTimeOut+0x82>
=======
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <xTaskCheckForTimeOut+0xc0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d007      	beq.n	800595a <xTaskCheckForTimeOut+0x82>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	429a      	cmp	r2, r3
 8005952:	d302      	bcc.n	800595a <xTaskCheckForTimeOut+0x82>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 800638c:	2301      	movs	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	e015      	b.n	80063be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	429a      	cmp	r2, r3
 800639a:	d20b      	bcs.n	80063b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	1ad2      	subs	r2, r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ff9b 	bl	80062e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e004      	b.n	80063be <xTaskCheckForTimeOut+0xae>
=======
 8005954:	2301      	movs	r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	e015      	b.n	8005986 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	429a      	cmp	r2, r3
 8005962:	d20b      	bcs.n	800597c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ff9b 	bl	80058ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e004      	b.n	8005986 <xTaskCheckForTimeOut+0xae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063be:	f001 f839 	bl	8007434 <vPortExitCritical>

	return xReturn;
 80063c2:	69fb      	ldr	r3, [r7, #28]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20000a44 	.word	0x20000a44
 80063d0:	20000a58 	.word	0x20000a58

080063d4 <vTaskMissedYield>:
=======
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005982:	2301      	movs	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005986:	f000 fc6d 	bl	8006264 <vPortExitCritical>

	return xReturn;
 800598a:	69fb      	ldr	r3, [r7, #28]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000550 	.word	0x20000550
 8005998:	20000564 	.word	0x20000564

0800599c <vTaskMissedYield>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063d8:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <vTaskMissedYield+0x14>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	20000a54 	.word	0x20000a54

080063ec <prvIdleTask>:
=======
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <vTaskMissedYield+0x14>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	20000560 	.word	0x20000560

080059b4 <prvIdleTask>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
=======
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 80063f4:	f000 f852 	bl	800649c <prvCheckTasksWaitingTermination>
=======
 80059bc:	f000 f852 	bl	8005a64 <prvCheckTasksWaitingTermination>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 80063f8:	4b06      	ldr	r3, [pc, #24]	; (8006414 <prvIdleTask+0x28>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d9f9      	bls.n	80063f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <prvIdleTask+0x2c>)
 8006402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006410:	e7f0      	b.n	80063f4 <prvIdleTask+0x8>
 8006412:	bf00      	nop
 8006414:	20000944 	.word	0x20000944
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <prvInitialiseTaskLists>:
=======
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <prvIdleTask+0x28>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d9f9      	bls.n	80059bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <prvIdleTask+0x2c>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059d8:	e7f0      	b.n	80059bc <prvIdleTask+0x8>
 80059da:	bf00      	nop
 80059dc:	20000450 	.word	0x20000450
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <prvInitialiseTaskLists>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006422:	2300      	movs	r3, #0
 8006424:	607b      	str	r3, [r7, #4]
 8006426:	e00c      	b.n	8006442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4a12      	ldr	r2, [pc, #72]	; (800647c <prvInitialiseTaskLists+0x60>)
 8006434:	4413      	add	r3, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fa54 	bl	80048e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3301      	adds	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b06      	cmp	r3, #6
 8006446:	d9ef      	bls.n	8006428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006448:	480d      	ldr	r0, [pc, #52]	; (8006480 <prvInitialiseTaskLists+0x64>)
 800644a:	f7fe fa4b 	bl	80048e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800644e:	480d      	ldr	r0, [pc, #52]	; (8006484 <prvInitialiseTaskLists+0x68>)
 8006450:	f7fe fa48 	bl	80048e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006454:	480c      	ldr	r0, [pc, #48]	; (8006488 <prvInitialiseTaskLists+0x6c>)
 8006456:	f7fe fa45 	bl	80048e4 <vListInitialise>
=======
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e00c      	b.n	8005a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <prvInitialiseTaskLists+0x60>)
 80059fc:	4413      	add	r3, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe face 	bl	8003fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	d9ef      	bls.n	80059f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a10:	480d      	ldr	r0, [pc, #52]	; (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a12:	f7fe fac5 	bl	8003fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a16:	480d      	ldr	r0, [pc, #52]	; (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a18:	f7fe fac2 	bl	8003fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a1c:	480c      	ldr	r0, [pc, #48]	; (8005a50 <prvInitialiseTaskLists+0x6c>)
 8005a1e:	f7fe fabf 	bl	8003fa0 <vListInitialise>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 800645a:	480c      	ldr	r0, [pc, #48]	; (800648c <prvInitialiseTaskLists+0x70>)
 800645c:	f7fe fa42 	bl	80048e4 <vListInitialise>
=======
 8005a22:	480c      	ldr	r0, [pc, #48]	; (8005a54 <prvInitialiseTaskLists+0x70>)
 8005a24:	f7fe fabc 	bl	8003fa0 <vListInitialise>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 8006460:	480b      	ldr	r0, [pc, #44]	; (8006490 <prvInitialiseTaskLists+0x74>)
 8006462:	f7fe fa3f 	bl	80048e4 <vListInitialise>
=======
 8005a28:	480b      	ldr	r0, [pc, #44]	; (8005a58 <prvInitialiseTaskLists+0x74>)
 8005a2a:	f7fe fab9 	bl	8003fa0 <vListInitialise>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <prvInitialiseTaskLists+0x78>)
 8006468:	4a05      	ldr	r2, [pc, #20]	; (8006480 <prvInitialiseTaskLists+0x64>)
 800646a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <prvInitialiseTaskLists+0x7c>)
 800646e:	4a05      	ldr	r2, [pc, #20]	; (8006484 <prvInitialiseTaskLists+0x68>)
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000944 	.word	0x20000944
 8006480:	200009d0 	.word	0x200009d0
 8006484:	200009e4 	.word	0x200009e4
 8006488:	20000a00 	.word	0x20000a00
 800648c:	20000a14 	.word	0x20000a14
 8006490:	20000a2c 	.word	0x20000a2c
 8006494:	200009f8 	.word	0x200009f8
 8006498:	200009fc 	.word	0x200009fc

0800649c <prvCheckTasksWaitingTermination>:
=======
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <prvInitialiseTaskLists+0x78>)
 8005a30:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <prvInitialiseTaskLists+0x7c>)
 8005a36:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a38:	601a      	str	r2, [r3, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000450 	.word	0x20000450
 8005a48:	200004dc 	.word	0x200004dc
 8005a4c:	200004f0 	.word	0x200004f0
 8005a50:	2000050c 	.word	0x2000050c
 8005a54:	20000520 	.word	0x20000520
 8005a58:	20000538 	.word	0x20000538
 8005a5c:	20000504 	.word	0x20000504
 8005a60:	20000508 	.word	0x20000508

08005a64 <prvCheckTasksWaitingTermination>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
=======
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 80064a2:	e019      	b.n	80064d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064a4:	f000 ff96 	bl	80073d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a8:	4b10      	ldr	r3, [pc, #64]	; (80064ec <prvCheckTasksWaitingTermination+0x50>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe fa9f 	bl	80049f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <prvCheckTasksWaitingTermination+0x54>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3b01      	subs	r3, #1
 80064c0:	4a0b      	ldr	r2, [pc, #44]	; (80064f0 <prvCheckTasksWaitingTermination+0x54>)
 80064c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <prvCheckTasksWaitingTermination+0x58>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	4a0a      	ldr	r2, [pc, #40]	; (80064f4 <prvCheckTasksWaitingTermination+0x58>)
 80064cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064ce:	f000 ffb1 	bl	8007434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f810 	bl	80064f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064d8:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <prvCheckTasksWaitingTermination+0x58>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e1      	bne.n	80064a4 <prvCheckTasksWaitingTermination+0x8>
=======
 8005a6a:	e019      	b.n	8005aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a6c:	f000 fbca 	bl	8006204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <prvCheckTasksWaitingTermination+0x50>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fb19 	bl	80040b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4a0b      	ldr	r2, [pc, #44]	; (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a96:	f000 fbe5 	bl	8006264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f810 	bl	8005ac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e1      	bne.n	8005a6c <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000a14 	.word	0x20000a14
 80064f0:	20000a40 	.word	0x20000a40
 80064f4:	20000a28 	.word	0x20000a28

080064f8 <prvDeleteTCB>:
=======
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000520 	.word	0x20000520
 8005ab8:	2000054c 	.word	0x2000054c
 8005abc:	20000534 	.word	0x20000534

08005ac0 <prvDeleteTCB>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
=======
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	334c      	adds	r3, #76	; 0x4c
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 f82f 	bl	8006b30 <_reclaim_reent>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006506:	2b00      	cmp	r3, #0
 8006508:	d108      	bne.n	800651c <prvDeleteTCB+0x24>
=======
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d108      	bne.n	8005aee <prvDeleteTCB+0x2e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	4618      	mov	r0, r3
 8006510:	f001 f94e 	bl	80077b0 <vPortFree>
				vPortFree( pxTCB );
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 f94b 	bl	80077b0 <vPortFree>
=======
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fd7d 	bl	80065e0 <vPortFree>
				vPortFree( pxTCB );
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd7a 	bl	80065e0 <vPortFree>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 800651a:	e018      	b.n	800654e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006522:	2b01      	cmp	r3, #1
 8006524:	d103      	bne.n	800652e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 f942 	bl	80077b0 <vPortFree>
	}
 800652c:	e00f      	b.n	800654e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006534:	2b02      	cmp	r3, #2
 8006536:	d00a      	beq.n	800654e <prvDeleteTCB+0x56>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	60fb      	str	r3, [r7, #12]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <prvDeleteTCB+0x54>
	}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <prvResetNextTaskUnblockTime>:
=======
 8005aec:	e018      	b.n	8005b20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d103      	bne.n	8005b00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fd71 	bl	80065e0 <vPortFree>
	}
 8005afe:	e00f      	b.n	8005b20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d00a      	beq.n	8005b20 <prvDeleteTCB+0x60>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60fb      	str	r3, [r7, #12]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <prvDeleteTCB+0x5e>
	}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvResetNextTaskUnblockTime>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800655e:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <prvResetNextTaskUnblockTime+0x38>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <prvResetNextTaskUnblockTime+0x1a>
=======
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <prvResetNextTaskUnblockTime+0x38>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvResetNextTaskUnblockTime+0x3c>)
 800656a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800656e:	601a      	str	r2, [r3, #0]
=======
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvResetNextTaskUnblockTime+0x3c>)
 8005b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3e:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 8006570:	e008      	b.n	8006584 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <prvResetNextTaskUnblockTime+0x38>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a04      	ldr	r2, [pc, #16]	; (8006594 <prvResetNextTaskUnblockTime+0x3c>)
 8006582:	6013      	str	r3, [r2, #0]
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	200009f8 	.word	0x200009f8
 8006594:	20000a60 	.word	0x20000a60

08006598 <xTaskGetSchedulerState>:
=======
 8005b40:	e008      	b.n	8005b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b42:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <prvResetNextTaskUnblockTime+0x38>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <prvResetNextTaskUnblockTime+0x3c>)
 8005b52:	6013      	str	r3, [r2, #0]
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	20000504 	.word	0x20000504
 8005b64:	2000056c 	.word	0x2000056c

08005b68 <xTaskGetSchedulerState>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <xTaskGetSchedulerState+0x34>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065a6:	2301      	movs	r3, #1
 80065a8:	607b      	str	r3, [r7, #4]
 80065aa:	e008      	b.n	80065be <xTaskGetSchedulerState+0x26>
=======
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <xTaskGetSchedulerState+0x34>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b76:	2301      	movs	r3, #1
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	e008      	b.n	8005b8e <xTaskGetSchedulerState+0x26>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 80065ac:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <xTaskGetSchedulerState+0x38>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065b4:	2302      	movs	r3, #2
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	e001      	b.n	80065be <xTaskGetSchedulerState+0x26>
=======
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <xTaskGetSchedulerState+0x38>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b84:	2302      	movs	r3, #2
 8005b86:	607b      	str	r3, [r7, #4]
 8005b88:	e001      	b.n	8005b8e <xTaskGetSchedulerState+0x26>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
=======
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
		}

		return xReturn;
<<<<<<< HEAD
 80065be:	687b      	ldr	r3, [r7, #4]
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000a4c 	.word	0x20000a4c
 80065d0:	20000a68 	.word	0x20000a68

080065d4 <xTaskPriorityInherit>:
=======
 8005b8e:	687b      	ldr	r3, [r7, #4]
	}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	20000558 	.word	0x20000558
 8005ba0:	20000574 	.word	0x20000574

08005ba4 <xTaskPriorityInherit>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]
=======
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d05e      	beq.n	80066a8 <xTaskPriorityInherit+0xd4>
=======
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d05e      	beq.n	8005c78 <xTaskPriorityInherit+0xd4>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ee:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <xTaskPriorityInherit+0xe0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d24e      	bcs.n	8006696 <xTaskPriorityInherit+0xc2>
=======
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <xTaskPriorityInherit+0xe0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d24e      	bcs.n	8005c66 <xTaskPriorityInherit+0xc2>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	db06      	blt.n	800660e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006600:	4b2c      	ldr	r3, [pc, #176]	; (80066b4 <xTaskPriorityInherit+0xe0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	f1c3 0207 	rsb	r2, r3, #7
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	619a      	str	r2, [r3, #24]
=======
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	db06      	blt.n	8005bde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd0:	4b2c      	ldr	r3, [pc, #176]	; (8005c84 <xTaskPriorityInherit+0xe0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	f1c3 0207 	rsb	r2, r3, #7
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	619a      	str	r2, [r3, #24]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6959      	ldr	r1, [r3, #20]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <xTaskPriorityInherit+0xe4>)
 8006620:	4413      	add	r3, r2
 8006622:	4299      	cmp	r1, r3
 8006624:	d12f      	bne.n	8006686 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3304      	adds	r3, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe f9e4 	bl	80049f8 <uxListRemove>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <xTaskPriorityInherit+0x78>
=======
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6959      	ldr	r1, [r3, #20]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4a26      	ldr	r2, [pc, #152]	; (8005c88 <xTaskPriorityInherit+0xe4>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	d12f      	bne.n	8005c56 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe fa5a 	bl	80040b4 <uxListRemove>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <xTaskPriorityInherit+0x78>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
<<<<<<< HEAD
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	2201      	movs	r2, #1
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	43da      	mvns	r2, r3
 8006642:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <xTaskPriorityInherit+0xe8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4013      	ands	r3, r2
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <xTaskPriorityInherit+0xe8>)
 800664a:	6013      	str	r3, [r2, #0]
=======
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	43da      	mvns	r2, r3
 8005c12:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <xTaskPriorityInherit+0xe8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4013      	ands	r3, r2
 8005c18:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <xTaskPriorityInherit+0xe8>)
 8005c1a:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 800664c:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <xTaskPriorityInherit+0xe0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	2201      	movs	r2, #1
 800665c:	409a      	lsls	r2, r3
 800665e:	4b17      	ldr	r3, [pc, #92]	; (80066bc <xTaskPriorityInherit+0xe8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4313      	orrs	r3, r2
 8006664:	4a15      	ldr	r2, [pc, #84]	; (80066bc <xTaskPriorityInherit+0xe8>)
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <xTaskPriorityInherit+0xe4>)
 8006676:	441a      	add	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe f95d 	bl	800493e <vListInsertEnd>
 8006684:	e004      	b.n	8006690 <xTaskPriorityInherit+0xbc>
=======
 8005c1c:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <xTaskPriorityInherit+0xe0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <xTaskPriorityInherit+0xe8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <xTaskPriorityInherit+0xe8>)
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a10      	ldr	r2, [pc, #64]	; (8005c88 <xTaskPriorityInherit+0xe4>)
 8005c46:	441a      	add	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fe f9d3 	bl	8003ffa <vListInsertEnd>
 8005c54:	e004      	b.n	8005c60 <xTaskPriorityInherit+0xbc>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 8006686:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <xTaskPriorityInherit+0xe0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <xTaskPriorityInherit+0xe0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< HEAD
 8006690:	2301      	movs	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e008      	b.n	80066a8 <xTaskPriorityInherit+0xd4>
=======
 8005c60:	2301      	movs	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e008      	b.n	8005c78 <xTaskPriorityInherit+0xd4>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <xTaskPriorityInherit+0xe0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d201      	bcs.n	80066a8 <xTaskPriorityInherit+0xd4>
=======
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <xTaskPriorityInherit+0xe0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d201      	bcs.n	8005c78 <xTaskPriorityInherit+0xd4>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 80066a4:	2301      	movs	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
=======
 8005c74:	2301      	movs	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 80066a8:	68fb      	ldr	r3, [r7, #12]
	}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000940 	.word	0x20000940
 80066b8:	20000944 	.word	0x20000944
 80066bc:	20000a48 	.word	0x20000a48

080066c0 <xTaskPriorityDisinherit>:
=======
 8005c78:	68fb      	ldr	r3, [r7, #12]
	}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	2000044c 	.word	0x2000044c
 8005c88:	20000450 	.word	0x20000450
 8005c8c:	20000554 	.word	0x20000554

08005c90 <xTaskPriorityDisinherit>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d06e      	beq.n	80067b4 <xTaskPriorityDisinherit+0xf4>
=======
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d06e      	beq.n	8005d84 <xTaskPriorityDisinherit+0xf4>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 80066d6:	4b3a      	ldr	r3, [pc, #232]	; (80067c0 <xTaskPriorityDisinherit+0x100>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d00a      	beq.n	80066f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	60fb      	str	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006718:	1e5a      	subs	r2, r3, #1
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	649a      	str	r2, [r3, #72]	; 0x48
=======
 8005ca6:	4b3a      	ldr	r3, [pc, #232]	; (8005d90 <xTaskPriorityDisinherit+0x100>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d00a      	beq.n	8005cc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60bb      	str	r3, [r7, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce8:	1e5a      	subs	r2, r3, #1
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	429a      	cmp	r2, r3
 8006728:	d044      	beq.n	80067b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672e:	2b00      	cmp	r3, #0
 8006730:	d140      	bne.n	80067b4 <xTaskPriorityDisinherit+0xf4>
=======
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d044      	beq.n	8005d84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d140      	bne.n	8005d84 <xTaskPriorityDisinherit+0xf4>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	3304      	adds	r3, #4
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe f95e 	bl	80049f8 <uxListRemove>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d115      	bne.n	800676e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006746:	491f      	ldr	r1, [pc, #124]	; (80067c4 <xTaskPriorityDisinherit+0x104>)
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <xTaskPriorityDisinherit+0xae>
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	2201      	movs	r2, #1
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	43da      	mvns	r2, r3
 8006764:	4b18      	ldr	r3, [pc, #96]	; (80067c8 <xTaskPriorityDisinherit+0x108>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4013      	ands	r3, r2
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <xTaskPriorityDisinherit+0x108>)
 800676c:	6013      	str	r3, [r2, #0]
=======
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe f9d4 	bl	80040b4 <uxListRemove>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d115      	bne.n	8005d3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	491f      	ldr	r1, [pc, #124]	; (8005d94 <xTaskPriorityDisinherit+0x104>)
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xTaskPriorityDisinherit+0xae>
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43da      	mvns	r2, r3
 8005d34:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <xTaskPriorityDisinherit+0x108>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <xTaskPriorityDisinherit+0x108>)
 8005d3c:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	f1c3 0207 	rsb	r2, r3, #7
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	2201      	movs	r2, #1
 8006788:	409a      	lsls	r2, r3
 800678a:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <xTaskPriorityDisinherit+0x108>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	4a0d      	ldr	r2, [pc, #52]	; (80067c8 <xTaskPriorityDisinherit+0x108>)
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4a08      	ldr	r2, [pc, #32]	; (80067c4 <xTaskPriorityDisinherit+0x104>)
 80067a2:	441a      	add	r2, r3
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4619      	mov	r1, r3
 80067aa:	4610      	mov	r0, r2
 80067ac:	f7fe f8c7 	bl	800493e <vListInsertEnd>
=======
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	f1c3 0207 	rsb	r2, r3, #7
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	2201      	movs	r2, #1
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <xTaskPriorityDisinherit+0x108>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <xTaskPriorityDisinherit+0x108>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <xTaskPriorityDisinherit+0x104>)
 8005d72:	441a      	add	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fe f93d 	bl	8003ffa <vListInsertEnd>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 80067b0:	2301      	movs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
=======
 8005d80:	2301      	movs	r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 80067b4:	697b      	ldr	r3, [r7, #20]
	}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000940 	.word	0x20000940
 80067c4:	20000944 	.word	0x20000944
 80067c8:	20000a48 	.word	0x20000a48

080067cc <vTaskPriorityDisinheritAfterTimeout>:
=======
 8005d84:	697b      	ldr	r3, [r7, #20]
	}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	2000044c 	.word	0x2000044c
 8005d94:	20000450 	.word	0x20000450
 8005d98:	20000554 	.word	0x20000554

08005d9c <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< HEAD
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80067da:	2301      	movs	r3, #1
 80067dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d077      	beq.n	80068d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
=======
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d077      	beq.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< HEAD
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60fb      	str	r3, [r7, #12]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <vTaskPriorityDisinheritAfterTimeout+0x34>
=======
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< HEAD
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d902      	bls.n	8006812 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	61fb      	str	r3, [r7, #28]
 8006810:	e002      	b.n	8006818 <vTaskPriorityDisinheritAfterTimeout+0x4c>
=======
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d902      	bls.n	8005de2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e002      	b.n	8005de8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< HEAD
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	61fb      	str	r3, [r7, #28]
=======
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	61fb      	str	r3, [r7, #28]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< HEAD
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	429a      	cmp	r2, r3
 8006820:	d058      	beq.n	80068d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
=======
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d058      	beq.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< HEAD
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	429a      	cmp	r2, r3
 800682a:	d153      	bne.n	80068d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
=======
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d153      	bne.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< HEAD
 800682c:	4b2b      	ldr	r3, [pc, #172]	; (80068dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	429a      	cmp	r2, r3
 8006834:	d10a      	bne.n	800684c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60bb      	str	r3, [r7, #8]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <vTaskPriorityDisinheritAfterTimeout+0x7e>
=======
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d10a      	bne.n	8005e1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60bb      	str	r3, [r7, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <vTaskPriorityDisinheritAfterTimeout+0x7e>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< HEAD
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	db04      	blt.n	800686a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f1c3 0207 	rsb	r2, r3, #7
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	619a      	str	r2, [r3, #24]
=======
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db04      	blt.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f1c3 0207 	rsb	r2, r3, #7
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	619a      	str	r2, [r3, #24]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	6959      	ldr	r1, [r3, #20]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4a19      	ldr	r2, [pc, #100]	; (80068e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800687a:	4413      	add	r3, r2
 800687c:	4299      	cmp	r1, r3
 800687e:	d129      	bne.n	80068d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	3304      	adds	r3, #4
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe f8b7 	bl	80049f8 <uxListRemove>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <vTaskPriorityDisinheritAfterTimeout+0xda>
=======
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a19      	ldr	r2, [pc, #100]	; (8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e4a:	4413      	add	r3, r2
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d129      	bne.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe f92d 	bl	80040b4 <uxListRemove>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <vTaskPriorityDisinheritAfterTimeout+0xda>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
<<<<<<< HEAD
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	2201      	movs	r2, #1
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	43da      	mvns	r2, r3
 800689c:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4013      	ands	r3, r2
 80068a2:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80068a4:	6013      	str	r3, [r2, #0]
=======
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	2201      	movs	r2, #1
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4013      	ands	r3, r2
 8005e72:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e74:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	2201      	movs	r2, #1
 80068ac:	409a      	lsls	r2, r3
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	4a0b      	ldr	r2, [pc, #44]	; (80068e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80068c6:	441a      	add	r2, r3
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7fe f835 	bl	800493e <vListInsertEnd>
=======
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	4a0b      	ldr	r2, [pc, #44]	; (8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4a06      	ldr	r2, [pc, #24]	; (8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e96:	441a      	add	r2, r3
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe f8ab 	bl	8003ffa <vListInsertEnd>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 80068d4:	bf00      	nop
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000940 	.word	0x20000940
 80068e0:	20000944 	.word	0x20000944
 80068e4:	20000a48 	.word	0x20000a48

080068e8 <pvTaskIncrementMutexHeldCount>:
=======
 8005ea4:	bf00      	nop
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	2000044c 	.word	0x2000044c
 8005eb0:	20000450 	.word	0x20000450
 8005eb4:	20000554 	.word	0x20000554

08005eb8 <pvTaskIncrementMutexHeldCount>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< HEAD
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <pvTaskIncrementMutexHeldCount+0x24>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <pvTaskIncrementMutexHeldCount+0x24>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068fa:	3201      	adds	r2, #1
 80068fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80068fe:	4b03      	ldr	r3, [pc, #12]	; (800690c <pvTaskIncrementMutexHeldCount+0x24>)
 8006900:	681b      	ldr	r3, [r3, #0]
	}
 8006902:	4618      	mov	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000940 	.word	0x20000940

08006910 <prvAddCurrentTaskToDelayedList>:
=======
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eca:	3201      	adds	r2, #1
 8005ecc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005ece:	4b03      	ldr	r3, [pc, #12]	; (8005edc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
	}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	2000044c 	.word	0x2000044c

08005ee0 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800691a:	4b29      	ldr	r3, [pc, #164]	; (80069c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
=======
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8006920:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3304      	adds	r3, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe f866 	bl	80049f8 <uxListRemove>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10b      	bne.n	800694a <prvAddCurrentTaskToDelayedList+0x3a>
=======
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe f8dc 	bl	80040b4 <uxListRemove>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< HEAD
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	2201      	movs	r2, #1
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	43da      	mvns	r2, r3
 8006940:	4b21      	ldr	r3, [pc, #132]	; (80069c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4013      	ands	r3, r2
 8006946:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006948:	6013      	str	r3, [r2, #0]
=======
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	2201      	movs	r2, #1
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43da      	mvns	r2, r3
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4013      	ands	r3, r2
 8005f16:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f18:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006950:	d10a      	bne.n	8006968 <prvAddCurrentTaskToDelayedList+0x58>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <prvAddCurrentTaskToDelayedList+0x58>
=======
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d10a      	bne.n	8005f38 <prvAddCurrentTaskToDelayedList+0x58>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3304      	adds	r3, #4
 800695e:	4619      	mov	r1, r3
 8006960:	481a      	ldr	r0, [pc, #104]	; (80069cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006962:	f7fd ffec 	bl	800493e <vListInsertEnd>
=======
 8005f28:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	481a      	ldr	r0, [pc, #104]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f32:	f7fe f862 	bl	8003ffa <vListInsertEnd>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8006966:	e026      	b.n	80069b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	429a      	cmp	r2, r3
 800697e:	d209      	bcs.n	8006994 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fd fffa 	bl	8004986 <vListInsert>
}
 8006992:	e010      	b.n	80069b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f7fd fff0 	bl	8004986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d202      	bcs.n	80069b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069b0:	4a09      	ldr	r2, [pc, #36]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6013      	str	r3, [r2, #0]
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000a44 	.word	0x20000a44
 80069c4:	20000940 	.word	0x20000940
 80069c8:	20000a48 	.word	0x20000a48
 80069cc:	20000a2c 	.word	0x20000a2c
 80069d0:	200009fc 	.word	0x200009fc
 80069d4:	200009f8 	.word	0x200009f8
 80069d8:	20000a60 	.word	0x20000a60

080069dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	; 0x28
 80069e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069e6:	f000 fb85 	bl	80070f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069ea:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <xTimerCreateTimerTask+0x80>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d021      	beq.n	8006a36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069fa:	1d3a      	adds	r2, r7, #4
 80069fc:	f107 0108 	add.w	r1, r7, #8
 8006a00:	f107 030c 	add.w	r3, r7, #12
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fa f9e9 	bl	8000ddc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	9202      	str	r2, [sp, #8]
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	2302      	movs	r3, #2
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	4910      	ldr	r1, [pc, #64]	; (8006a60 <xTimerCreateTimerTask+0x84>)
 8006a1e:	4811      	ldr	r0, [pc, #68]	; (8006a64 <xTimerCreateTimerTask+0x88>)
 8006a20:	f7fe ffb2 	bl	8005988 <xTaskCreateStatic>
 8006a24:	4603      	mov	r3, r0
 8006a26:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <xTimerCreateTimerTask+0x8c>)
 8006a28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <xTimerCreateTimerTask+0x8c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a32:	2301      	movs	r3, #1
 8006a34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	613b      	str	r3, [r7, #16]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a52:	697b      	ldr	r3, [r7, #20]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000a9c 	.word	0x20000a9c
 8006a60:	08008b44 	.word	0x08008b44
 8006a64:	08006cd5 	.word	0x08006cd5
 8006a68:	20000aa0 	.word	0x20000aa0

08006a6c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006a7a:	2028      	movs	r0, #40	; 0x28
 8006a7c:	f000 fdcc 	bl	8007618 <pvPortMalloc>
 8006a80:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00d      	beq.n	8006aa4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f843 	bl	8006b2a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006aa4:	697b      	ldr	r3, [r7, #20]
	}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b08a      	sub	sp, #40	; 0x28
 8006ab2:	af02      	add	r7, sp, #8
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006abc:	2328      	movs	r3, #40	; 0x28
 8006abe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b28      	cmp	r3, #40	; 0x28
 8006ac4:	d00a      	beq.n	8006adc <xTimerCreateStatic+0x2e>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	61bb      	str	r3, [r7, #24]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006adc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xTimerCreateStatic+0x4c>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	617b      	str	r3, [r7, #20]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 f805 	bl	8006b2a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006b20:	69fb      	ldr	r3, [r7, #28]
	}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
 8006b36:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	617b      	str	r3, [r7, #20]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01e      	beq.n	8006b98 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006b5a:	f000 facb 	bl	80070f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fed2 	bl	8004924 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d008      	beq.n	8006b98 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b8c:	f043 0304 	orr.w	r3, r3, #4
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006b98:	bf00      	nop
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <xTimerGenericCommand+0x2e>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	623b      	str	r3, [r7, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02a      	beq.n	8006c2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	dc18      	bgt.n	8006c1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006be8:	f7ff fcd6 	bl	8006598 <xTaskGetSchedulerState>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d109      	bne.n	8006c06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f107 0114 	add.w	r1, r7, #20
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	f7fe f8ab 	bl	8004d58 <xQueueGenericSend>
 8006c02:	6278      	str	r0, [r7, #36]	; 0x24
 8006c04:	e012      	b.n	8006c2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	f107 0114 	add.w	r1, r7, #20
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2200      	movs	r2, #0
 8006c12:	f7fe f8a1 	bl	8004d58 <xQueueGenericSend>
 8006c16:	6278      	str	r0, [r7, #36]	; 0x24
 8006c18:	e008      	b.n	8006c2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f107 0114 	add.w	r1, r7, #20
 8006c22:	2300      	movs	r3, #0
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	f7fe f995 	bl	8004f54 <xQueueGenericSendFromISR>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3728      	adds	r7, #40	; 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000a9c 	.word	0x20000a9c

08006c3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c46:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <prvProcessExpiredTimer+0x94>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fd fecf 	bl	80049f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d022      	beq.n	8006cae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	18d1      	adds	r1, r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	6978      	ldr	r0, [r7, #20]
 8006c76:	f000 f8d1 	bl	8006e1c <prvInsertTimerInActiveList>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01f      	beq.n	8006cc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c80:	2300      	movs	r3, #0
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	6978      	ldr	r0, [r7, #20]
 8006c8c:	f7ff ff88 	bl	8006ba0 <xTimerGenericCommand>
 8006c90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d113      	bne.n	8006cc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	60fb      	str	r3, [r7, #12]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	6978      	ldr	r0, [r7, #20]
 8006cc6:	4798      	blx	r3
}
 8006cc8:	bf00      	nop
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000a94 	.word	0x20000a94

08006cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cdc:	f107 0308 	add.w	r3, r7, #8
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f857 	bl	8006d94 <prvGetNextExpireTime>
 8006ce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4619      	mov	r1, r3
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f803 	bl	8006cf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cf2:	f000 f8d5 	bl	8006ea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cf6:	e7f1      	b.n	8006cdc <prvTimerTask+0x8>

08006cf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d02:	f7ff f86f 	bl	8005de4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d06:	f107 0308 	add.w	r3, r7, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f866 	bl	8006ddc <prvSampleTimeNow>
 8006d10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d130      	bne.n	8006d7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <prvProcessTimerOrBlockTask+0x3c>
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d806      	bhi.n	8006d34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d26:	f7ff f86b 	bl	8005e00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d2a:	68f9      	ldr	r1, [r7, #12]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ff85 	bl	8006c3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d32:	e024      	b.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d3a:	4b13      	ldr	r3, [pc, #76]	; (8006d88 <prvProcessTimerOrBlockTask+0x90>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <prvProcessTimerOrBlockTask+0x50>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <prvProcessTimerOrBlockTask+0x52>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <prvProcessTimerOrBlockTask+0x94>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f7fe fde1 	bl	8005920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d5e:	f7ff f84f 	bl	8005e00 <xTaskResumeAll>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d68:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <prvProcessTimerOrBlockTask+0x98>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
}
 8006d78:	e001      	b.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d7a:	f7ff f841 	bl	8005e00 <xTaskResumeAll>
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000a98 	.word	0x20000a98
 8006d8c:	20000a9c 	.word	0x20000a9c
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <prvGetNextExpireTime+0x44>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <prvGetNextExpireTime+0x16>
 8006da6:	2201      	movs	r2, #1
 8006da8:	e000      	b.n	8006dac <prvGetNextExpireTime+0x18>
 8006daa:	2200      	movs	r2, #0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db8:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <prvGetNextExpireTime+0x44>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e001      	b.n	8006dc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000a94 	.word	0x20000a94

08006ddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006de4:	f7ff f8a8 	bl	8005f38 <xTaskGetTickCount>
 8006de8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dea:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <prvSampleTimeNow+0x3c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d205      	bcs.n	8006e00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006df4:	f000 f91a 	bl	800702c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e002      	b.n	8006e06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e06:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <prvSampleTimeNow+0x3c>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000aa4 	.word	0x20000aa4

08006e1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d812      	bhi.n	8006e68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d302      	bcc.n	8006e56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	e01b      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e56:	4b10      	ldr	r3, [pc, #64]	; (8006e98 <prvInsertTimerInActiveList+0x7c>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7fd fd90 	bl	8004986 <vListInsert>
 8006e66:	e012      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d206      	bcs.n	8006e7e <prvInsertTimerInActiveList+0x62>
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e007      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <prvInsertTimerInActiveList+0x80>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fd fd7c 	bl	8004986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e8e:	697b      	ldr	r3, [r7, #20]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000a98 	.word	0x20000a98
 8006e9c:	20000a94 	.word	0x20000a94

08006ea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ea6:	e0ae      	b.n	8007006 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f2c0 80ab 	blt.w	8007006 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fd fd99 	bl	80049f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ec6:	1d3b      	adds	r3, r7, #4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff ff87 	bl	8006ddc <prvSampleTimeNow>
 8006ece:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b09      	cmp	r3, #9
 8006ed4:	f200 8096 	bhi.w	8007004 <prvProcessReceivedCommands+0x164>
 8006ed8:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <prvProcessReceivedCommands+0x40>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f09 	.word	0x08006f09
 8006eec:	08006f7d 	.word	0x08006f7d
 8006ef0:	08006f91 	.word	0x08006f91
 8006ef4:	08006fdb 	.word	0x08006fdb
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f09 	.word	0x08006f09
 8006f00:	08006f7d 	.word	0x08006f7d
 8006f04:	08006f91 	.word	0x08006f91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	18d1      	adds	r1, r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a3a      	ldr	r2, [r7, #32]
 8006f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f28:	f7ff ff78 	bl	8006e1c <prvInsertTimerInActiveList>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d069      	beq.n	8007006 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d05e      	beq.n	8007006 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	441a      	add	r2, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f5a:	f7ff fe21 	bl	8006ba0 <xTimerGenericCommand>
 8006f5e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d14f      	bne.n	8007006 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	61bb      	str	r3, [r7, #24]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f82:	f023 0301 	bic.w	r3, r3, #1
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8006f8e:	e03a      	b.n	8007006 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	617b      	str	r3, [r7, #20]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	18d1      	adds	r1, r2, r3
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	6a3a      	ldr	r2, [r7, #32]
 8006fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fd4:	f7ff ff22 	bl	8006e1c <prvInsertTimerInActiveList>
					break;
 8006fd8:	e015      	b.n	8007006 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8006fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fea:	f000 fbe1 	bl	80077b0 <vPortFree>
 8006fee:	e00a      	b.n	8007006 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007002:	e000      	b.n	8007006 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8007004:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007006:	4b08      	ldr	r3, [pc, #32]	; (8007028 <prvProcessReceivedCommands+0x188>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f107 0108 	add.w	r1, r7, #8
 800700e:	2200      	movs	r2, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe f8c7 	bl	80051a4 <xQueueReceive>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	f47f af45 	bne.w	8006ea8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	3728      	adds	r7, #40	; 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000a9c 	.word	0x20000a9c

0800702c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007032:	e048      	b.n	80070c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007034:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <prvSwitchTimerLists+0xc0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703e:	4b2b      	ldr	r3, [pc, #172]	; (80070ec <prvSwitchTimerLists+0xc0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3304      	adds	r3, #4
 800704c:	4618      	mov	r0, r3
 800704e:	f7fd fcd3 	bl	80049f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d02e      	beq.n	80070c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4413      	add	r3, r2
 8007070:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	d90e      	bls.n	8007098 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007086:	4b19      	ldr	r3, [pc, #100]	; (80070ec <prvSwitchTimerLists+0xc0>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3304      	adds	r3, #4
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f7fd fc78 	bl	8004986 <vListInsert>
 8007096:	e016      	b.n	80070c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007098:	2300      	movs	r3, #0
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	2300      	movs	r3, #0
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	2100      	movs	r1, #0
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff fd7c 	bl	8006ba0 <xTimerGenericCommand>
 80070a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	603b      	str	r3, [r7, #0]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <prvSwitchTimerLists+0xc0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1b1      	bne.n	8007034 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070d0:	4b06      	ldr	r3, [pc, #24]	; (80070ec <prvSwitchTimerLists+0xc0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <prvSwitchTimerLists+0xc4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a04      	ldr	r2, [pc, #16]	; (80070ec <prvSwitchTimerLists+0xc0>)
 80070dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070de:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <prvSwitchTimerLists+0xc4>)
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000a94 	.word	0x20000a94
 80070f0:	20000a98 	.word	0x20000a98

080070f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070fa:	f000 f96b 	bl	80073d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <prvCheckForValidListAndQueue+0x60>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d120      	bne.n	8007148 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007106:	4814      	ldr	r0, [pc, #80]	; (8007158 <prvCheckForValidListAndQueue+0x64>)
 8007108:	f7fd fbec 	bl	80048e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800710c:	4813      	ldr	r0, [pc, #76]	; (800715c <prvCheckForValidListAndQueue+0x68>)
 800710e:	f7fd fbe9 	bl	80048e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007112:	4b13      	ldr	r3, [pc, #76]	; (8007160 <prvCheckForValidListAndQueue+0x6c>)
 8007114:	4a10      	ldr	r2, [pc, #64]	; (8007158 <prvCheckForValidListAndQueue+0x64>)
 8007116:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007118:	4b12      	ldr	r3, [pc, #72]	; (8007164 <prvCheckForValidListAndQueue+0x70>)
 800711a:	4a10      	ldr	r2, [pc, #64]	; (800715c <prvCheckForValidListAndQueue+0x68>)
 800711c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4b11      	ldr	r3, [pc, #68]	; (8007168 <prvCheckForValidListAndQueue+0x74>)
 8007124:	4a11      	ldr	r2, [pc, #68]	; (800716c <prvCheckForValidListAndQueue+0x78>)
 8007126:	210c      	movs	r1, #12
 8007128:	200a      	movs	r0, #10
 800712a:	f7fd fcf7 	bl	8004b1c <xQueueGenericCreateStatic>
 800712e:	4603      	mov	r3, r0
 8007130:	4a08      	ldr	r2, [pc, #32]	; (8007154 <prvCheckForValidListAndQueue+0x60>)
 8007132:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <prvCheckForValidListAndQueue+0x60>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <prvCheckForValidListAndQueue+0x60>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	490b      	ldr	r1, [pc, #44]	; (8007170 <prvCheckForValidListAndQueue+0x7c>)
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fbc2 	bl	80058cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007148:	f000 f974 	bl	8007434 <vPortExitCritical>
}
 800714c:	bf00      	nop
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000a9c 	.word	0x20000a9c
 8007158:	20000a6c 	.word	0x20000a6c
 800715c:	20000a80 	.word	0x20000a80
 8007160:	20000a94 	.word	0x20000a94
 8007164:	20000a98 	.word	0x20000a98
 8007168:	20000b20 	.word	0x20000b20
 800716c:	20000aa8 	.word	0x20000aa8
 8007170:	08008b4c 	.word	0x08008b4c

08007174 <pxPortInitialiseStack>:
=======
 8005f36:	e026      	b.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d209      	bcs.n	8005f64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f50:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fe f870 	bl	8004042 <vListInsert>
}
 8005f62:	e010      	b.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7fe f866 	bl	8004042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d202      	bcs.n	8005f86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f80:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6013      	str	r3, [r2, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000550 	.word	0x20000550
 8005f94:	2000044c 	.word	0x2000044c
 8005f98:	20000554 	.word	0x20000554
 8005f9c:	20000538 	.word	0x20000538
 8005fa0:	20000508 	.word	0x20000508
 8005fa4:	20000504 	.word	0x20000504
 8005fa8:	2000056c 	.word	0x2000056c

08005fac <pxPortInitialiseStack>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
=======
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3b04      	subs	r3, #4
 8007184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800718c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b04      	subs	r3, #4
 8007192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3b04      	subs	r3, #4
 80071a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071a4:	4a0c      	ldr	r2, [pc, #48]	; (80071d8 <pxPortInitialiseStack+0x64>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3b14      	subs	r3, #20
 80071ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	601a      	str	r2, [r3, #0]
=======
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <pxPortInitialiseStack+0x64>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b14      	subs	r3, #20
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f06f 0202 	mvn.w	r2, #2
 80071c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b20      	subs	r3, #32
 80071c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071ca:	68fb      	ldr	r3, [r7, #12]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	080071dd 	.word	0x080071dd

080071dc <prvTaskExitError>:
=======
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f06f 0202 	mvn.w	r2, #2
 8005ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3b20      	subs	r3, #32
 8006000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	08006015 	.word	0x08006015

08006014 <prvTaskExitError>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	607b      	str	r3, [r7, #4]
=======
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <prvTaskExitError+0x54>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ee:	d00a      	beq.n	8007206 <prvTaskExitError+0x2a>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	60fb      	str	r3, [r7, #12]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <prvTaskExitError+0x28>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60bb      	str	r3, [r7, #8]
}
 8007218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800721a:	bf00      	nop
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0fc      	beq.n	800721c <prvTaskExitError+0x40>
=======
 800601e:	4b12      	ldr	r3, [pc, #72]	; (8006068 <prvTaskExitError+0x54>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d00a      	beq.n	800603e <prvTaskExitError+0x2a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60fb      	str	r3, [r7, #12]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <prvTaskExitError+0x28>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60bb      	str	r3, [r7, #8]
}
 8006050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006052:	bf00      	nop
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0fc      	beq.n	8006054 <prvTaskExitError+0x40>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	2000000c 	.word	0x2000000c
	...

08007240 <SVC_Handler>:
=======
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	2000000c 	.word	0x2000000c
 800606c:	00000000 	.word	0x00000000

08006070 <SVC_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <pxCurrentTCBConst2>)
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	6808      	ldr	r0, [r1, #0]
 8007246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724a:	f380 8809 	msr	PSP, r0
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f380 8811 	msr	BASEPRI, r0
 800725a:	4770      	bx	lr
 800725c:	f3af 8000 	nop.w

08007260 <pxCurrentTCBConst2>:
 8007260:	20000940 	.word	0x20000940
=======
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <pxCurrentTCBConst2>)
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	6808      	ldr	r0, [r1, #0]
 8006076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607a:	f380 8809 	msr	PSP, r0
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8811 	msr	BASEPRI, r0
 800608a:	4770      	bx	lr
 800608c:	f3af 8000 	nop.w

08006090 <pxCurrentTCBConst2>:
 8006090:	2000044c 	.word	0x2000044c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <prvPortStartFirstTask>:
=======
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <prvPortStartFirstTask>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 8007268:	4808      	ldr	r0, [pc, #32]	; (800728c <prvPortStartFirstTask+0x24>)
 800726a:	6800      	ldr	r0, [r0, #0]
 800726c:	6800      	ldr	r0, [r0, #0]
 800726e:	f380 8808 	msr	MSP, r0
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f380 8814 	msr	CONTROL, r0
 800727a:	b662      	cpsie	i
 800727c:	b661      	cpsie	f
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	df00      	svc	0
 8007288:	bf00      	nop
=======
 8006098:	4808      	ldr	r0, [pc, #32]	; (80060bc <prvPortStartFirstTask+0x24>)
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	6800      	ldr	r0, [r0, #0]
 800609e:	f380 8808 	msr	MSP, r0
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8814 	msr	CONTROL, r0
 80060aa:	b662      	cpsie	i
 80060ac:	b661      	cpsie	f
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	df00      	svc	0
 80060b8:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800728a:	bf00      	nop
 800728c:	e000ed08 	.word	0xe000ed08

08007290 <xPortStartScheduler>:
=======
 80060ba:	bf00      	nop
 80060bc:	e000ed08 	.word	0xe000ed08

080060c0 <xPortStartScheduler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
=======
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 8007296:	4b46      	ldr	r3, [pc, #280]	; (80073b0 <xPortStartScheduler+0x120>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a46      	ldr	r2, [pc, #280]	; (80073b4 <xPortStartScheduler+0x124>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d10a      	bne.n	80072b6 <xPortStartScheduler+0x26>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	613b      	str	r3, [r7, #16]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072b6:	4b3e      	ldr	r3, [pc, #248]	; (80073b0 <xPortStartScheduler+0x120>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a3f      	ldr	r2, [pc, #252]	; (80073b8 <xPortStartScheduler+0x128>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d10a      	bne.n	80072d6 <xPortStartScheduler+0x46>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	60fb      	str	r3, [r7, #12]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xPortStartScheduler+0x44>
=======
 80060c6:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <xPortStartScheduler+0x120>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a46      	ldr	r2, [pc, #280]	; (80061e4 <xPortStartScheduler+0x124>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10a      	bne.n	80060e6 <xPortStartScheduler+0x26>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	613b      	str	r3, [r7, #16]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060e6:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <xPortStartScheduler+0x120>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3f      	ldr	r2, [pc, #252]	; (80061e8 <xPortStartScheduler+0x128>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10a      	bne.n	8006106 <xPortStartScheduler+0x46>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xPortStartScheduler+0x44>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 80072d6:	4b39      	ldr	r3, [pc, #228]	; (80073bc <xPortStartScheduler+0x12c>)
 80072d8:	617b      	str	r3, [r7, #20]
=======
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <xPortStartScheduler+0x12c>)
 8006108:	617b      	str	r3, [r7, #20]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	607b      	str	r3, [r7, #4]
=======
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	607b      	str	r3, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	4b31      	ldr	r3, [pc, #196]	; (80073c0 <xPortStartScheduler+0x130>)
 80072fc:	701a      	strb	r2, [r3, #0]
=======
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	22ff      	movs	r2, #255	; 0xff
 8006116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006128:	b2da      	uxtb	r2, r3
 800612a:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <xPortStartScheduler+0x130>)
 800612c:	701a      	strb	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 80072fe:	4b31      	ldr	r3, [pc, #196]	; (80073c4 <xPortStartScheduler+0x134>)
 8007300:	2207      	movs	r2, #7
 8007302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007304:	e009      	b.n	800731a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007306:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <xPortStartScheduler+0x134>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3b01      	subs	r3, #1
 800730c:	4a2d      	ldr	r2, [pc, #180]	; (80073c4 <xPortStartScheduler+0x134>)
 800730e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	b2db      	uxtb	r3, r3
 8007318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d0ef      	beq.n	8007306 <xPortStartScheduler+0x76>
=======
 800612e:	4b31      	ldr	r3, [pc, #196]	; (80061f4 <xPortStartScheduler+0x134>)
 8006130:	2207      	movs	r2, #7
 8006132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006134:	e009      	b.n	800614a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <xPortStartScheduler+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3b01      	subs	r3, #1
 800613c:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <xPortStartScheduler+0x134>)
 800613e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d0ef      	beq.n	8006136 <xPortStartScheduler+0x76>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 8007326:	4b27      	ldr	r3, [pc, #156]	; (80073c4 <xPortStartScheduler+0x134>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1c3 0307 	rsb	r3, r3, #7
 800732e:	2b04      	cmp	r3, #4
 8007330:	d00a      	beq.n	8007348 <xPortStartScheduler+0xb8>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	60bb      	str	r3, [r7, #8]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xPortStartScheduler+0xb6>
=======
 8006156:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <xPortStartScheduler+0x134>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1c3 0307 	rsb	r3, r3, #7
 800615e:	2b04      	cmp	r3, #4
 8006160:	d00a      	beq.n	8006178 <xPortStartScheduler+0xb8>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60bb      	str	r3, [r7, #8]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xPortStartScheduler+0xb6>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <xPortStartScheduler+0x134>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <xPortStartScheduler+0x134>)
 8007350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <xPortStartScheduler+0x134>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800735a:	4a1a      	ldr	r2, [pc, #104]	; (80073c4 <xPortStartScheduler+0x134>)
 800735c:	6013      	str	r3, [r2, #0]
=======
 8006178:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <xPortStartScheduler+0x134>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <xPortStartScheduler+0x134>)
 8006180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006182:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <xPortStartScheduler+0x134>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800618a:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <xPortStartScheduler+0x134>)
 800618c:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	701a      	strb	r2, [r3, #0]
=======
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	701a      	strb	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 8007366:	4b18      	ldr	r3, [pc, #96]	; (80073c8 <xPortStartScheduler+0x138>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a17      	ldr	r2, [pc, #92]	; (80073c8 <xPortStartScheduler+0x138>)
 800736c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007372:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <xPortStartScheduler+0x138>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <xPortStartScheduler+0x138>)
 8007378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800737c:	6013      	str	r3, [r2, #0]
=======
 8006196:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <xPortStartScheduler+0x138>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <xPortStartScheduler+0x138>)
 800619c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <xPortStartScheduler+0x138>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <xPortStartScheduler+0x138>)
 80061a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061ac:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 800737e:	f000 f8dd 	bl	800753c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007382:	4b12      	ldr	r3, [pc, #72]	; (80073cc <xPortStartScheduler+0x13c>)
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007388:	f000 f8fc 	bl	8007584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800738c:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <xPortStartScheduler+0x140>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a0f      	ldr	r2, [pc, #60]	; (80073d0 <xPortStartScheduler+0x140>)
 8007392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007398:	f7ff ff66 	bl	8007268 <prvPortStartFirstTask>
=======
 80061ae:	f000 f8dd 	bl	800636c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061b2:	4b12      	ldr	r3, [pc, #72]	; (80061fc <xPortStartScheduler+0x13c>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061b8:	f000 f8fc 	bl	80063b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061bc:	4b10      	ldr	r3, [pc, #64]	; (8006200 <xPortStartScheduler+0x140>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0f      	ldr	r2, [pc, #60]	; (8006200 <xPortStartScheduler+0x140>)
 80061c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061c8:	f7ff ff66 	bl	8006098 <prvPortStartFirstTask>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800739c:	f7fe fe94 	bl	80060c8 <vTaskSwitchContext>
	prvTaskExitError();
 80073a0:	f7ff ff1c 	bl	80071dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	e000ed00 	.word	0xe000ed00
 80073b4:	410fc271 	.word	0x410fc271
 80073b8:	410fc270 	.word	0x410fc270
 80073bc:	e000e400 	.word	0xe000e400
 80073c0:	20000b68 	.word	0x20000b68
 80073c4:	20000b6c 	.word	0x20000b6c
 80073c8:	e000ed20 	.word	0xe000ed20
 80073cc:	2000000c 	.word	0x2000000c
 80073d0:	e000ef34 	.word	0xe000ef34

080073d4 <vPortEnterCritical>:
=======
 80061cc:	f7ff fa86 	bl	80056dc <vTaskSwitchContext>
	prvTaskExitError();
 80061d0:	f7ff ff20 	bl	8006014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00
 80061e4:	410fc271 	.word	0x410fc271
 80061e8:	410fc270 	.word	0x410fc270
 80061ec:	e000e400 	.word	0xe000e400
 80061f0:	20000578 	.word	0x20000578
 80061f4:	2000057c 	.word	0x2000057c
 80061f8:	e000ed20 	.word	0xe000ed20
 80061fc:	2000000c 	.word	0x2000000c
 8006200:	e000ef34 	.word	0xe000ef34

08006204 <vPortEnterCritical>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	607b      	str	r3, [r7, #4]
}
 80073ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073ee:	4b0f      	ldr	r3, [pc, #60]	; (800742c <vPortEnterCritical+0x58>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3301      	adds	r3, #1
 80073f4:	4a0d      	ldr	r2, [pc, #52]	; (800742c <vPortEnterCritical+0x58>)
 80073f6:	6013      	str	r3, [r2, #0]
=======
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <vPortEnterCritical+0x58>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4a0d      	ldr	r2, [pc, #52]	; (800625c <vPortEnterCritical+0x58>)
 8006226:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <vPortEnterCritical+0x58>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d10f      	bne.n	8007420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <vPortEnterCritical+0x5c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <vPortEnterCritical+0x4c>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	603b      	str	r3, [r7, #0]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <vPortEnterCritical+0x4a>
	}
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	2000000c 	.word	0x2000000c
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <vPortExitCritical>:
=======
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <vPortEnterCritical+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10f      	bne.n	8006250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <vPortEnterCritical+0x5c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <vPortEnterCritical+0x4c>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	603b      	str	r3, [r7, #0]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <vPortEnterCritical+0x4a>
	}
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	2000000c 	.word	0x2000000c
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <vPortExitCritical>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800743a:	4b12      	ldr	r3, [pc, #72]	; (8007484 <vPortExitCritical+0x50>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <vPortExitCritical+0x24>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	607b      	str	r3, [r7, #4]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007458:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <vPortExitCritical+0x50>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3b01      	subs	r3, #1
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <vPortExitCritical+0x50>)
 8007460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007462:	4b08      	ldr	r3, [pc, #32]	; (8007484 <vPortExitCritical+0x50>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <vPortExitCritical+0x42>
 800746a:	2300      	movs	r3, #0
 800746c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	f383 8811 	msr	BASEPRI, r3
}
 8007474:	bf00      	nop
=======
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <vPortExitCritical+0x50>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <vPortExitCritical+0x24>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	607b      	str	r3, [r7, #4]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <vPortExitCritical+0x50>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3b01      	subs	r3, #1
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <vPortExitCritical+0x50>)
 8006290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <vPortExitCritical+0x42>
 800629a:	2300      	movs	r3, #0
 800629c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	f383 8811 	msr	BASEPRI, r3
}
 80062a4:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	2000000c 	.word	0x2000000c
	...

08007490 <PendSV_Handler>:
=======
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000000c 	.word	0x2000000c
	...

080062c0 <PendSV_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 8007490:	f3ef 8009 	mrs	r0, PSP
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <pxCurrentTCBConst>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	f01e 0f10 	tst.w	lr, #16
 80074a0:	bf08      	it	eq
 80074a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074aa:	6010      	str	r0, [r2, #0]
 80074ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074b4:	f380 8811 	msr	BASEPRI, r0
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f7fe fe02 	bl	80060c8 <vTaskSwitchContext>
 80074c4:	f04f 0000 	mov.w	r0, #0
 80074c8:	f380 8811 	msr	BASEPRI, r0
 80074cc:	bc09      	pop	{r0, r3}
 80074ce:	6819      	ldr	r1, [r3, #0]
 80074d0:	6808      	ldr	r0, [r1, #0]
 80074d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d6:	f01e 0f10 	tst.w	lr, #16
 80074da:	bf08      	it	eq
 80074dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074e0:	f380 8809 	msr	PSP, r0
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst>:
 80074f0:	20000940 	.word	0x20000940
=======
 80062c0:	f3ef 8009 	mrs	r0, PSP
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <pxCurrentTCBConst>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f01e 0f10 	tst.w	lr, #16
 80062d0:	bf08      	it	eq
 80062d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	6010      	str	r0, [r2, #0]
 80062dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062e4:	f380 8811 	msr	BASEPRI, r0
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f7ff f9f4 	bl	80056dc <vTaskSwitchContext>
 80062f4:	f04f 0000 	mov.w	r0, #0
 80062f8:	f380 8811 	msr	BASEPRI, r0
 80062fc:	bc09      	pop	{r0, r3}
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	6808      	ldr	r0, [r1, #0]
 8006302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006306:	f01e 0f10 	tst.w	lr, #16
 800630a:	bf08      	it	eq
 800630c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006310:	f380 8809 	msr	PSP, r0
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst>:
 8006320:	2000044c 	.word	0x2000044c
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <SysTick_Handler>:
=======
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <SysTick_Handler>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	607b      	str	r3, [r7, #4]
}
 8007510:	bf00      	nop
=======
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8007512:	f7fe fd21 	bl	8005f58 <xTaskIncrementTick>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <SysTick_Handler+0x2c>
=======
 8006342:	f7ff f913 	bl	800556c <xTaskIncrementTick>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <SysTick_Handler+0x2c>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <SysTick_Handler+0x40>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	2300      	movs	r3, #0
 8007526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f383 8811 	msr	BASEPRI, r3
}
 800752e:	bf00      	nop
=======
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <SysTick_Handler+0x40>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <vPortSetupTimerInterrupt>:
=======
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortSetupTimerInterrupt>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
=======
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <vPortSetupTimerInterrupt+0x34>)
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007546:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <vPortSetupTimerInterrupt+0x38>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800754c:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <vPortSetupTimerInterrupt+0x3c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <vPortSetupTimerInterrupt+0x40>)
 8007552:	fba2 2303 	umull	r2, r3, r2, r3
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	4a09      	ldr	r2, [pc, #36]	; (8007580 <vPortSetupTimerInterrupt+0x44>)
 800755a:	3b01      	subs	r3, #1
 800755c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800755e:	4b04      	ldr	r3, [pc, #16]	; (8007570 <vPortSetupTimerInterrupt+0x34>)
 8007560:	2207      	movs	r2, #7
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	e000e010 	.word	0xe000e010
 8007574:	e000e018 	.word	0xe000e018
 8007578:	20000000 	.word	0x20000000
 800757c:	10624dd3 	.word	0x10624dd3
 8007580:	e000e014 	.word	0xe000e014

08007584 <vPortEnableVFP>:
=======
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <vPortSetupTimerInterrupt+0x38>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <vPortSetupTimerInterrupt+0x3c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <vPortSetupTimerInterrupt+0x40>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <vPortSetupTimerInterrupt+0x44>)
 800638a:	3b01      	subs	r3, #1
 800638c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800638e:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <vPortSetupTimerInterrupt+0x34>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	e000e010 	.word	0xe000e010
 80063a4:	e000e018 	.word	0xe000e018
 80063a8:	20000000 	.word	0x20000000
 80063ac:	10624dd3 	.word	0x10624dd3
 80063b0:	e000e014 	.word	0xe000e014

080063b4 <vPortEnableVFP>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 8007584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007594 <vPortEnableVFP+0x10>
 8007588:	6801      	ldr	r1, [r0, #0]
 800758a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800758e:	6001      	str	r1, [r0, #0]
 8007590:	4770      	bx	lr
=======
 80063b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063c4 <vPortEnableVFP+0x10>
 80063b8:	6801      	ldr	r1, [r0, #0]
 80063ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063be:	6001      	str	r1, [r0, #0]
 80063c0:	4770      	bx	lr
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 8007592:	bf00      	nop
 8007594:	e000ed88 	.word	0xe000ed88

08007598 <vPortValidateInterruptPriority>:
=======
 80063c2:	bf00      	nop
 80063c4:	e000ed88 	.word	0xe000ed88

080063c8 <vPortValidateInterruptPriority>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
=======
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 800759e:	f3ef 8305 	mrs	r3, IPSR
 80075a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b0f      	cmp	r3, #15
 80075a8:	d914      	bls.n	80075d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <vPortValidateInterruptPriority+0x70>)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	72fb      	strb	r3, [r7, #11]
=======
 80063ce:	f3ef 8305 	mrs	r3, IPSR
 80063d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b0f      	cmp	r3, #15
 80063d8:	d914      	bls.n	8006404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <vPortValidateInterruptPriority+0x70>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	72fb      	strb	r3, [r7, #11]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 80075b4:	4b15      	ldr	r3, [pc, #84]	; (800760c <vPortValidateInterruptPriority+0x74>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	7afa      	ldrb	r2, [r7, #11]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d20a      	bcs.n	80075d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	607b      	str	r3, [r7, #4]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <vPortValidateInterruptPriority+0x3a>
=======
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <vPortValidateInterruptPriority+0x74>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	7afa      	ldrb	r2, [r7, #11]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d20a      	bcs.n	8006404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <vPortValidateInterruptPriority+0x3a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 80075d4:	4b0e      	ldr	r3, [pc, #56]	; (8007610 <vPortValidateInterruptPriority+0x78>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075dc:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <vPortValidateInterruptPriority+0x7c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d90a      	bls.n	80075fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	603b      	str	r3, [r7, #0]
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <vPortValidateInterruptPriority+0x60>
	}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	e000e3f0 	.word	0xe000e3f0
 800760c:	20000b68 	.word	0x20000b68
 8007610:	e000ed0c 	.word	0xe000ed0c
 8007614:	20000b6c 	.word	0x20000b6c

08007618 <pvPortMalloc>:
=======
 8006404:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <vPortValidateInterruptPriority+0x78>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <vPortValidateInterruptPriority+0x7c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d90a      	bls.n	800642a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	603b      	str	r3, [r7, #0]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <vPortValidateInterruptPriority+0x60>
	}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	e000e3f0 	.word	0xe000e3f0
 800643c:	20000578 	.word	0x20000578
 8006440:	e000ed0c 	.word	0xe000ed0c
 8006444:	2000057c 	.word	0x2000057c

08006448 <pvPortMalloc>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	; 0x28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007624:	f7fe fbde 	bl	8005de4 <vTaskSuspendAll>
=======
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006454:	f7fe ffe0 	bl	8005418 <vTaskSuspendAll>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 8007628:	4b5b      	ldr	r3, [pc, #364]	; (8007798 <pvPortMalloc+0x180>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007630:	f000 f920 	bl	8007874 <prvHeapInit>
=======
 8006458:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <pvPortMalloc+0x180>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006460:	f000 f920 	bl	80066a4 <prvHeapInit>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 8007634:	4b59      	ldr	r3, [pc, #356]	; (800779c <pvPortMalloc+0x184>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4013      	ands	r3, r2
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8093 	bne.w	8007768 <pvPortMalloc+0x150>
=======
 8006464:	4b59      	ldr	r3, [pc, #356]	; (80065cc <pvPortMalloc+0x184>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8093 	bne.w	8006598 <pvPortMalloc+0x150>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01d      	beq.n	8007684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007648:	2208      	movs	r2, #8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	607b      	str	r3, [r7, #4]
=======
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01d      	beq.n	80064b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006478:	2208      	movs	r2, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	607b      	str	r3, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d014      	beq.n	8007684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f023 0307 	bic.w	r3, r3, #7
 8007660:	3308      	adds	r3, #8
 8007662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <pvPortMalloc+0x6c>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	617b      	str	r3, [r7, #20]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <pvPortMalloc+0x6a>
=======
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b00      	cmp	r3, #0
 8006488:	d014      	beq.n	80064b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	3308      	adds	r3, #8
 8006492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <pvPortMalloc+0x6c>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	617b      	str	r3, [r7, #20]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <pvPortMalloc+0x6a>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d06e      	beq.n	8007768 <pvPortMalloc+0x150>
 800768a:	4b45      	ldr	r3, [pc, #276]	; (80077a0 <pvPortMalloc+0x188>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d869      	bhi.n	8007768 <pvPortMalloc+0x150>
=======
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d06e      	beq.n	8006598 <pvPortMalloc+0x150>
 80064ba:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <pvPortMalloc+0x188>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d869      	bhi.n	8006598 <pvPortMalloc+0x150>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 8007694:	4b43      	ldr	r3, [pc, #268]	; (80077a4 <pvPortMalloc+0x18c>)
 8007696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007698:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <pvPortMalloc+0x18c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800769e:	e004      	b.n	80076aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d903      	bls.n	80076bc <pvPortMalloc+0xa4>
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f1      	bne.n	80076a0 <pvPortMalloc+0x88>
=======
 80064c4:	4b43      	ldr	r3, [pc, #268]	; (80065d4 <pvPortMalloc+0x18c>)
 80064c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064c8:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <pvPortMalloc+0x18c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ce:	e004      	b.n	80064da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d903      	bls.n	80064ec <pvPortMalloc+0xa4>
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f1      	bne.n	80064d0 <pvPortMalloc+0x88>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 80076bc:	4b36      	ldr	r3, [pc, #216]	; (8007798 <pvPortMalloc+0x180>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d050      	beq.n	8007768 <pvPortMalloc+0x150>
=======
 80064ec:	4b36      	ldr	r3, [pc, #216]	; (80065c8 <pvPortMalloc+0x180>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d050      	beq.n	8006598 <pvPortMalloc+0x150>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2208      	movs	r2, #8
 80076cc:	4413      	add	r3, r2
 80076ce:	61fb      	str	r3, [r7, #28]
=======
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2208      	movs	r2, #8
 80064fc:	4413      	add	r3, r2
 80064fe:	61fb      	str	r3, [r7, #28]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	601a      	str	r2, [r3, #0]
=======
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	2308      	movs	r3, #8
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d91f      	bls.n	8007728 <pvPortMalloc+0x110>
=======
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	2308      	movs	r3, #8
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	429a      	cmp	r2, r3
 8006516:	d91f      	bls.n	8006558 <pvPortMalloc+0x110>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 80076e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4413      	add	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <pvPortMalloc+0xf8>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	613b      	str	r3, [r7, #16]
}
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <pvPortMalloc+0xf6>
=======
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <pvPortMalloc+0xf8>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	613b      	str	r3, [r7, #16]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <pvPortMalloc+0xf6>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007722:	69b8      	ldr	r0, [r7, #24]
 8007724:	f000 f908 	bl	8007938 <prvInsertBlockIntoFreeList>
=======
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006552:	69b8      	ldr	r0, [r7, #24]
 8006554:	f000 f908 	bl	8006768 <prvInsertBlockIntoFreeList>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 8007728:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <pvPortMalloc+0x188>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <pvPortMalloc+0x188>)
 8007734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007736:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <pvPortMalloc+0x188>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <pvPortMalloc+0x190>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d203      	bcs.n	800774a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007742:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <pvPortMalloc+0x188>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <pvPortMalloc+0x190>)
 8007748:	6013      	str	r3, [r2, #0]
=======
 8006558:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <pvPortMalloc+0x188>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <pvPortMalloc+0x188>)
 8006564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <pvPortMalloc+0x188>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <pvPortMalloc+0x190>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d203      	bcs.n	800657a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <pvPortMalloc+0x188>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <pvPortMalloc+0x190>)
 8006578:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <pvPortMalloc+0x184>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	431a      	orrs	r2, r3
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <pvPortMalloc+0x194>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	4a11      	ldr	r2, [pc, #68]	; (80077ac <pvPortMalloc+0x194>)
 8007766:	6013      	str	r3, [r2, #0]
=======
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <pvPortMalloc+0x184>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	431a      	orrs	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <pvPortMalloc+0x194>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a11      	ldr	r2, [pc, #68]	; (80065dc <pvPortMalloc+0x194>)
 8006596:	6013      	str	r3, [r2, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 8007768:	f7fe fb4a 	bl	8005e00 <xTaskResumeAll>
=======
 8006598:	f7fe ff4c 	bl	8005434 <xTaskResumeAll>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <pvPortMalloc+0x174>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60fb      	str	r3, [r7, #12]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <pvPortMalloc+0x172>
	return pvReturn;
 800778c:	69fb      	ldr	r3, [r7, #28]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3728      	adds	r7, #40	; 0x28
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20004778 	.word	0x20004778
 800779c:	2000478c 	.word	0x2000478c
 80077a0:	2000477c 	.word	0x2000477c
 80077a4:	20004770 	.word	0x20004770
 80077a8:	20004780 	.word	0x20004780
 80077ac:	20004784 	.word	0x20004784

080077b0 <vPortFree>:
=======
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <pvPortMalloc+0x174>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <pvPortMalloc+0x172>
	return pvReturn;
 80065bc:	69fb      	ldr	r3, [r7, #28]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3728      	adds	r7, #40	; 0x28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20004188 	.word	0x20004188
 80065cc:	2000419c 	.word	0x2000419c
 80065d0:	2000418c 	.word	0x2000418c
 80065d4:	20004180 	.word	0x20004180
 80065d8:	20004190 	.word	0x20004190
 80065dc:	20004194 	.word	0x20004194

080065e0 <vPortFree>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d04d      	beq.n	800785e <vPortFree+0xae>
=======
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d04d      	beq.n	800668e <vPortFree+0xae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 80077c2:	2308      	movs	r3, #8
 80077c4:	425b      	negs	r3, r3
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4413      	add	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	4b24      	ldr	r3, [pc, #144]	; (8007868 <vPortFree+0xb8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4013      	ands	r3, r2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <vPortFree+0x44>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	60fb      	str	r3, [r7, #12]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <vPortFree+0x62>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	60bb      	str	r3, [r7, #8]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	4b14      	ldr	r3, [pc, #80]	; (8007868 <vPortFree+0xb8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01e      	beq.n	800785e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d11a      	bne.n	800785e <vPortFree+0xae>
=======
 80065f2:	2308      	movs	r3, #8
 80065f4:	425b      	negs	r3, r3
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	4b24      	ldr	r3, [pc, #144]	; (8006698 <vPortFree+0xb8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <vPortFree+0x44>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60fb      	str	r3, [r7, #12]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <vPortFree+0x62>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60bb      	str	r3, [r7, #8]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <vPortFree+0xb8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d11a      	bne.n	800668e <vPortFree+0xae>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <vPortFree+0xb8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	43db      	mvns	r3, r3
 8007832:	401a      	ands	r2, r3
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007838:	f7fe fad4 	bl	8005de4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <vPortFree+0xbc>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4413      	add	r3, r2
 8007846:	4a09      	ldr	r2, [pc, #36]	; (800786c <vPortFree+0xbc>)
 8007848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800784a:	6938      	ldr	r0, [r7, #16]
 800784c:	f000 f874 	bl	8007938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <vPortFree+0xc0>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	4a06      	ldr	r2, [pc, #24]	; (8007870 <vPortFree+0xc0>)
 8007858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800785a:	f7fe fad1 	bl	8005e00 <xTaskResumeAll>
=======
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <vPortFree+0xb8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	43db      	mvns	r3, r3
 8006662:	401a      	ands	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006668:	f7fe fed6 	bl	8005418 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <vPortFree+0xbc>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4413      	add	r3, r2
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <vPortFree+0xbc>)
 8006678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800667a:	6938      	ldr	r0, [r7, #16]
 800667c:	f000 f874 	bl	8006768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vPortFree+0xc0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vPortFree+0xc0>)
 8006688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800668a:	f7fe fed3 	bl	8005434 <xTaskResumeAll>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800785e:	bf00      	nop
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	2000478c 	.word	0x2000478c
 800786c:	2000477c 	.word	0x2000477c
 8007870:	20004788 	.word	0x20004788

08007874 <prvHeapInit>:
=======
 800668e:	bf00      	nop
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	2000419c 	.word	0x2000419c
 800669c:	2000418c 	.word	0x2000418c
 80066a0:	20004198 	.word	0x20004198

080066a4 <prvHeapInit>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
=======
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 800787a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800787e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007880:	4b27      	ldr	r3, [pc, #156]	; (8007920 <prvHeapInit+0xac>)
 8007882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3307      	adds	r3, #7
 8007892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0307 	bic.w	r3, r3, #7
 800789a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <prvHeapInit+0xac>)
 80078a4:	4413      	add	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	607b      	str	r3, [r7, #4]
=======
 80066aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <prvHeapInit+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvHeapInit+0xac>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	607b      	str	r3, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <prvHeapInit+0xb0>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <prvHeapInit+0xb0>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]
=======
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <prvHeapInit+0xb0>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <prvHeapInit+0xb0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	4413      	add	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078c0:	2208      	movs	r2, #8
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0307 	bic.w	r3, r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <prvHeapInit+0xb4>)
 80078d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <prvHeapInit+0xb4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <prvHeapInit+0xb4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
=======
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f0:	2208      	movs	r2, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <prvHeapInit+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvHeapInit+0xb4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvHeapInit+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	1ad2      	subs	r2, r2, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <prvHeapInit+0xb4>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4a0a      	ldr	r2, [pc, #40]	; (800792c <prvHeapInit+0xb8>)
 8007902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4a09      	ldr	r2, [pc, #36]	; (8007930 <prvHeapInit+0xbc>)
 800790a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <prvHeapInit+0xc0>)
 800790e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	20000b70 	.word	0x20000b70
 8007924:	20004770 	.word	0x20004770
 8007928:	20004778 	.word	0x20004778
 800792c:	20004780 	.word	0x20004780
 8007930:	2000477c 	.word	0x2000477c
 8007934:	2000478c 	.word	0x2000478c

08007938 <prvInsertBlockIntoFreeList>:
=======
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvHeapInit+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <prvHeapInit+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <prvHeapInit+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvHeapInit+0xc0>)
 800673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000580 	.word	0x20000580
 8006754:	20004180 	.word	0x20004180
 8006758:	20004188 	.word	0x20004188
 800675c:	20004190 	.word	0x20004190
 8006760:	2000418c 	.word	0x2000418c
 8006764:	2000419c 	.word	0x2000419c

08006768 <prvInsertBlockIntoFreeList>:
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
=======
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8007940:	4b28      	ldr	r3, [pc, #160]	; (80079e4 <prvInsertBlockIntoFreeList+0xac>)
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	e002      	b.n	800794c <prvInsertBlockIntoFreeList+0x14>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d8f7      	bhi.n	8007946 <prvInsertBlockIntoFreeList+0xe>
=======
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <prvInsertBlockIntoFreeList+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <prvInsertBlockIntoFreeList+0x14>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d8f7      	bhi.n	8006776 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	4413      	add	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d108      	bne.n	800797a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	441a      	add	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	607b      	str	r3, [r7, #4]
=======
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d108      	bne.n	80067aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	607b      	str	r3, [r7, #4]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	441a      	add	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d118      	bne.n	80079c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d00d      	beq.n	80079b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e008      	b.n	80079c8 <prvInsertBlockIntoFreeList+0x90>
=======
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d118      	bne.n	80067f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00d      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e008      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <prvInsertBlockIntoFreeList+0xb0>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	e003      	b.n	80079c8 <prvInsertBlockIntoFreeList+0x90>
=======
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e003      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]
=======
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d002      	beq.n	80079d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
=======
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d002      	beq.n	8006806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80079d6:	bf00      	nop
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	20004770 	.word	0x20004770
 80079e8:	20004778 	.word	0x20004778

080079ec <srand>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <srand+0x44>)
 80079f0:	681d      	ldr	r5, [r3, #0]
 80079f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80079f4:	4604      	mov	r4, r0
 80079f6:	b9b3      	cbnz	r3, 8007a26 <srand+0x3a>
 80079f8:	2018      	movs	r0, #24
 80079fa:	f000 f987 	bl	8007d0c <malloc>
 80079fe:	4602      	mov	r2, r0
 8007a00:	6328      	str	r0, [r5, #48]	; 0x30
 8007a02:	b920      	cbnz	r0, 8007a0e <srand+0x22>
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <srand+0x48>)
 8007a06:	480c      	ldr	r0, [pc, #48]	; (8007a38 <srand+0x4c>)
 8007a08:	2146      	movs	r1, #70	; 0x46
 8007a0a:	f000 f961 	bl	8007cd0 <__assert_func>
 8007a0e:	490b      	ldr	r1, [pc, #44]	; (8007a3c <srand+0x50>)
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <srand+0x54>)
 8007a12:	e9c0 1300 	strd	r1, r3, [r0]
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <srand+0x58>)
 8007a18:	6083      	str	r3, [r0, #8]
 8007a1a:	230b      	movs	r3, #11
 8007a1c:	8183      	strh	r3, [r0, #12]
 8007a1e:	2100      	movs	r1, #0
 8007a20:	2001      	movs	r0, #1
 8007a22:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007a26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007a28:	2200      	movs	r2, #0
 8007a2a:	611c      	str	r4, [r3, #16]
 8007a2c:	615a      	str	r2, [r3, #20]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	20000068 	.word	0x20000068
 8007a34:	08008b6c 	.word	0x08008b6c
 8007a38:	08008b83 	.word	0x08008b83
 8007a3c:	abcd330e 	.word	0xabcd330e
 8007a40:	e66d1234 	.word	0xe66d1234
 8007a44:	0005deec 	.word	0x0005deec

08007a48 <rand>:
 8007a48:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <rand+0x5c>)
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	681c      	ldr	r4, [r3, #0]
 8007a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a50:	b9b3      	cbnz	r3, 8007a80 <rand+0x38>
 8007a52:	2018      	movs	r0, #24
 8007a54:	f000 f95a 	bl	8007d0c <malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6320      	str	r0, [r4, #48]	; 0x30
 8007a5c:	b920      	cbnz	r0, 8007a68 <rand+0x20>
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <rand+0x60>)
 8007a60:	4812      	ldr	r0, [pc, #72]	; (8007aac <rand+0x64>)
 8007a62:	2152      	movs	r1, #82	; 0x52
 8007a64:	f000 f934 	bl	8007cd0 <__assert_func>
 8007a68:	4911      	ldr	r1, [pc, #68]	; (8007ab0 <rand+0x68>)
 8007a6a:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <rand+0x6c>)
 8007a6c:	e9c0 1300 	strd	r1, r3, [r0]
 8007a70:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <rand+0x70>)
 8007a72:	6083      	str	r3, [r0, #8]
 8007a74:	230b      	movs	r3, #11
 8007a76:	8183      	strh	r3, [r0, #12]
 8007a78:	2100      	movs	r1, #0
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007a80:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007a82:	480e      	ldr	r0, [pc, #56]	; (8007abc <rand+0x74>)
 8007a84:	690b      	ldr	r3, [r1, #16]
 8007a86:	694c      	ldr	r4, [r1, #20]
 8007a88:	4a0d      	ldr	r2, [pc, #52]	; (8007ac0 <rand+0x78>)
 8007a8a:	4358      	muls	r0, r3
 8007a8c:	fb02 0004 	mla	r0, r2, r4, r0
 8007a90:	fba3 3202 	umull	r3, r2, r3, r2
 8007a94:	3301      	adds	r3, #1
 8007a96:	eb40 0002 	adc.w	r0, r0, r2
 8007a9a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007a9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007aa2:	bd10      	pop	{r4, pc}
 8007aa4:	20000068 	.word	0x20000068
 8007aa8:	08008b6c 	.word	0x08008b6c
 8007aac:	08008b83 	.word	0x08008b83
 8007ab0:	abcd330e 	.word	0xabcd330e
 8007ab4:	e66d1234 	.word	0xe66d1234
 8007ab8:	0005deec 	.word	0x0005deec
 8007abc:	5851f42d 	.word	0x5851f42d
 8007ac0:	4c957f2d 	.word	0x4c957f2d

08007ac4 <std>:
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	b510      	push	{r4, lr}
 8007ac8:	4604      	mov	r4, r0
 8007aca:	e9c0 3300 	strd	r3, r3, [r0]
 8007ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ad2:	6083      	str	r3, [r0, #8]
 8007ad4:	8181      	strh	r1, [r0, #12]
 8007ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ad8:	81c2      	strh	r2, [r0, #14]
 8007ada:	6183      	str	r3, [r0, #24]
 8007adc:	4619      	mov	r1, r3
 8007ade:	2208      	movs	r2, #8
 8007ae0:	305c      	adds	r0, #92	; 0x5c
 8007ae2:	f000 f8b1 	bl	8007c48 <memset>
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <std+0x58>)
 8007ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8007aea:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <std+0x5c>)
 8007aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aee:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <std+0x60>)
 8007af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007af2:	4b0d      	ldr	r3, [pc, #52]	; (8007b28 <std+0x64>)
 8007af4:	6323      	str	r3, [r4, #48]	; 0x30
 8007af6:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <std+0x68>)
 8007af8:	6224      	str	r4, [r4, #32]
 8007afa:	429c      	cmp	r4, r3
 8007afc:	d006      	beq.n	8007b0c <std+0x48>
 8007afe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b02:	4294      	cmp	r4, r2
 8007b04:	d002      	beq.n	8007b0c <std+0x48>
 8007b06:	33d0      	adds	r3, #208	; 0xd0
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	d105      	bne.n	8007b18 <std+0x54>
 8007b0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b14:	f000 b8ca 	b.w	8007cac <__retarget_lock_init_recursive>
 8007b18:	bd10      	pop	{r4, pc}
 8007b1a:	bf00      	nop
 8007b1c:	08007fd1 	.word	0x08007fd1
 8007b20:	08007ff3 	.word	0x08007ff3
 8007b24:	0800802b 	.word	0x0800802b
 8007b28:	0800804f 	.word	0x0800804f
 8007b2c:	20004790 	.word	0x20004790

08007b30 <stdio_exit_handler>:
 8007b30:	4a02      	ldr	r2, [pc, #8]	; (8007b3c <stdio_exit_handler+0xc>)
 8007b32:	4903      	ldr	r1, [pc, #12]	; (8007b40 <stdio_exit_handler+0x10>)
 8007b34:	4803      	ldr	r0, [pc, #12]	; (8007b44 <stdio_exit_handler+0x14>)
 8007b36:	f000 b869 	b.w	8007c0c <_fwalk_sglue>
 8007b3a:	bf00      	nop
 8007b3c:	20000010 	.word	0x20000010
 8007b40:	08007f69 	.word	0x08007f69
 8007b44:	2000001c 	.word	0x2000001c

08007b48 <cleanup_stdio>:
 8007b48:	6841      	ldr	r1, [r0, #4]
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <cleanup_stdio+0x34>)
 8007b4c:	4299      	cmp	r1, r3
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	4604      	mov	r4, r0
 8007b52:	d001      	beq.n	8007b58 <cleanup_stdio+0x10>
 8007b54:	f000 fa08 	bl	8007f68 <_fflush_r>
 8007b58:	68a1      	ldr	r1, [r4, #8]
 8007b5a:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <cleanup_stdio+0x38>)
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <cleanup_stdio+0x1e>
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 fa01 	bl	8007f68 <_fflush_r>
 8007b66:	68e1      	ldr	r1, [r4, #12]
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <cleanup_stdio+0x3c>)
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	d004      	beq.n	8007b78 <cleanup_stdio+0x30>
 8007b6e:	4620      	mov	r0, r4
 8007b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b74:	f000 b9f8 	b.w	8007f68 <_fflush_r>
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20004790 	.word	0x20004790
 8007b80:	200047f8 	.word	0x200047f8
 8007b84:	20004860 	.word	0x20004860

08007b88 <global_stdio_init.part.0>:
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <global_stdio_init.part.0+0x30>)
 8007b8c:	4c0b      	ldr	r4, [pc, #44]	; (8007bbc <global_stdio_init.part.0+0x34>)
 8007b8e:	4a0c      	ldr	r2, [pc, #48]	; (8007bc0 <global_stdio_init.part.0+0x38>)
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	4620      	mov	r0, r4
 8007b94:	2200      	movs	r2, #0
 8007b96:	2104      	movs	r1, #4
 8007b98:	f7ff ff94 	bl	8007ac4 <std>
 8007b9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	2109      	movs	r1, #9
 8007ba4:	f7ff ff8e 	bl	8007ac4 <std>
 8007ba8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007bac:	2202      	movs	r2, #2
 8007bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb2:	2112      	movs	r1, #18
 8007bb4:	f7ff bf86 	b.w	8007ac4 <std>
 8007bb8:	200048c8 	.word	0x200048c8
 8007bbc:	20004790 	.word	0x20004790
 8007bc0:	08007b31 	.word	0x08007b31

08007bc4 <__sfp_lock_acquire>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	; (8007bcc <__sfp_lock_acquire+0x8>)
 8007bc6:	f000 b872 	b.w	8007cae <__retarget_lock_acquire_recursive>
 8007bca:	bf00      	nop
 8007bcc:	200048cd 	.word	0x200048cd

08007bd0 <__sfp_lock_release>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <__sfp_lock_release+0x8>)
 8007bd2:	f000 b86d 	b.w	8007cb0 <__retarget_lock_release_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	200048cd 	.word	0x200048cd

08007bdc <__sinit>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	4604      	mov	r4, r0
 8007be0:	f7ff fff0 	bl	8007bc4 <__sfp_lock_acquire>
 8007be4:	6a23      	ldr	r3, [r4, #32]
 8007be6:	b11b      	cbz	r3, 8007bf0 <__sinit+0x14>
 8007be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bec:	f7ff bff0 	b.w	8007bd0 <__sfp_lock_release>
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <__sinit+0x28>)
 8007bf2:	6223      	str	r3, [r4, #32]
 8007bf4:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <__sinit+0x2c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1f5      	bne.n	8007be8 <__sinit+0xc>
 8007bfc:	f7ff ffc4 	bl	8007b88 <global_stdio_init.part.0>
 8007c00:	e7f2      	b.n	8007be8 <__sinit+0xc>
 8007c02:	bf00      	nop
 8007c04:	08007b49 	.word	0x08007b49
 8007c08:	200048c8 	.word	0x200048c8

08007c0c <_fwalk_sglue>:
 8007c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c10:	4607      	mov	r7, r0
 8007c12:	4688      	mov	r8, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	2600      	movs	r6, #0
 8007c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c20:	d505      	bpl.n	8007c2e <_fwalk_sglue+0x22>
 8007c22:	6824      	ldr	r4, [r4, #0]
 8007c24:	2c00      	cmp	r4, #0
 8007c26:	d1f7      	bne.n	8007c18 <_fwalk_sglue+0xc>
 8007c28:	4630      	mov	r0, r6
 8007c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d907      	bls.n	8007c44 <_fwalk_sglue+0x38>
 8007c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	d003      	beq.n	8007c44 <_fwalk_sglue+0x38>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4638      	mov	r0, r7
 8007c40:	47c0      	blx	r8
 8007c42:	4306      	orrs	r6, r0
 8007c44:	3568      	adds	r5, #104	; 0x68
 8007c46:	e7e9      	b.n	8007c1c <_fwalk_sglue+0x10>

08007c48 <memset>:
 8007c48:	4402      	add	r2, r0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d100      	bne.n	8007c52 <memset+0xa>
 8007c50:	4770      	bx	lr
 8007c52:	f803 1b01 	strb.w	r1, [r3], #1
 8007c56:	e7f9      	b.n	8007c4c <memset+0x4>

08007c58 <__errno>:
 8007c58:	4b01      	ldr	r3, [pc, #4]	; (8007c60 <__errno+0x8>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20000068 	.word	0x20000068

08007c64 <__libc_init_array>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4d0d      	ldr	r5, [pc, #52]	; (8007c9c <__libc_init_array+0x38>)
 8007c68:	4c0d      	ldr	r4, [pc, #52]	; (8007ca0 <__libc_init_array+0x3c>)
 8007c6a:	1b64      	subs	r4, r4, r5
 8007c6c:	10a4      	asrs	r4, r4, #2
 8007c6e:	2600      	movs	r6, #0
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	d109      	bne.n	8007c88 <__libc_init_array+0x24>
 8007c74:	4d0b      	ldr	r5, [pc, #44]	; (8007ca4 <__libc_init_array+0x40>)
 8007c76:	4c0c      	ldr	r4, [pc, #48]	; (8007ca8 <__libc_init_array+0x44>)
 8007c78:	f000 fedc 	bl	8008a34 <_init>
 8007c7c:	1b64      	subs	r4, r4, r5
 8007c7e:	10a4      	asrs	r4, r4, #2
 8007c80:	2600      	movs	r6, #0
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	d105      	bne.n	8007c92 <__libc_init_array+0x2e>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8c:	4798      	blx	r3
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7ee      	b.n	8007c70 <__libc_init_array+0xc>
 8007c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c96:	4798      	blx	r3
 8007c98:	3601      	adds	r6, #1
 8007c9a:	e7f2      	b.n	8007c82 <__libc_init_array+0x1e>
 8007c9c:	08008c54 	.word	0x08008c54
 8007ca0:	08008c54 	.word	0x08008c54
 8007ca4:	08008c54 	.word	0x08008c54
 8007ca8:	08008c58 	.word	0x08008c58

08007cac <__retarget_lock_init_recursive>:
 8007cac:	4770      	bx	lr

08007cae <__retarget_lock_acquire_recursive>:
 8007cae:	4770      	bx	lr

08007cb0 <__retarget_lock_release_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <memcpy>:
 8007cb2:	440a      	add	r2, r1
 8007cb4:	4291      	cmp	r1, r2
 8007cb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007cba:	d100      	bne.n	8007cbe <memcpy+0xc>
 8007cbc:	4770      	bx	lr
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc8:	4291      	cmp	r1, r2
 8007cca:	d1f9      	bne.n	8007cc0 <memcpy+0xe>
 8007ccc:	bd10      	pop	{r4, pc}
	...

08007cd0 <__assert_func>:
 8007cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cd2:	4614      	mov	r4, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <__assert_func+0x2c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	68d8      	ldr	r0, [r3, #12]
 8007cde:	b14c      	cbz	r4, 8007cf4 <__assert_func+0x24>
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <__assert_func+0x30>)
 8007ce2:	9100      	str	r1, [sp, #0]
 8007ce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ce8:	4906      	ldr	r1, [pc, #24]	; (8007d04 <__assert_func+0x34>)
 8007cea:	462b      	mov	r3, r5
 8007cec:	f000 f9b4 	bl	8008058 <fiprintf>
 8007cf0:	f000 fa1a 	bl	8008128 <abort>
 8007cf4:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <__assert_func+0x38>)
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	e7f3      	b.n	8007ce2 <__assert_func+0x12>
 8007cfa:	bf00      	nop
 8007cfc:	20000068 	.word	0x20000068
 8007d00:	08008bdb 	.word	0x08008bdb
 8007d04:	08008be8 	.word	0x08008be8
 8007d08:	08008c16 	.word	0x08008c16

08007d0c <malloc>:
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <malloc+0xc>)
 8007d0e:	4601      	mov	r1, r0
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f000 b823 	b.w	8007d5c <_malloc_r>
 8007d16:	bf00      	nop
 8007d18:	20000068 	.word	0x20000068

08007d1c <sbrk_aligned>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4e0e      	ldr	r6, [pc, #56]	; (8007d58 <sbrk_aligned+0x3c>)
 8007d20:	460c      	mov	r4, r1
 8007d22:	6831      	ldr	r1, [r6, #0]
 8007d24:	4605      	mov	r5, r0
 8007d26:	b911      	cbnz	r1, 8007d2e <sbrk_aligned+0x12>
 8007d28:	f000 f9dc 	bl	80080e4 <_sbrk_r>
 8007d2c:	6030      	str	r0, [r6, #0]
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f9d7 	bl	80080e4 <_sbrk_r>
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d00a      	beq.n	8007d50 <sbrk_aligned+0x34>
 8007d3a:	1cc4      	adds	r4, r0, #3
 8007d3c:	f024 0403 	bic.w	r4, r4, #3
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d007      	beq.n	8007d54 <sbrk_aligned+0x38>
 8007d44:	1a21      	subs	r1, r4, r0
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 f9cc 	bl	80080e4 <_sbrk_r>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d101      	bne.n	8007d54 <sbrk_aligned+0x38>
 8007d50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007d54:	4620      	mov	r0, r4
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	200048d4 	.word	0x200048d4

08007d5c <_malloc_r>:
 8007d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d60:	1ccd      	adds	r5, r1, #3
 8007d62:	f025 0503 	bic.w	r5, r5, #3
 8007d66:	3508      	adds	r5, #8
 8007d68:	2d0c      	cmp	r5, #12
 8007d6a:	bf38      	it	cc
 8007d6c:	250c      	movcc	r5, #12
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	4607      	mov	r7, r0
 8007d72:	db01      	blt.n	8007d78 <_malloc_r+0x1c>
 8007d74:	42a9      	cmp	r1, r5
 8007d76:	d905      	bls.n	8007d84 <_malloc_r+0x28>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	2600      	movs	r6, #0
 8007d7e:	4630      	mov	r0, r6
 8007d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e58 <_malloc_r+0xfc>
 8007d88:	f000 f916 	bl	8007fb8 <__malloc_lock>
 8007d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d90:	461c      	mov	r4, r3
 8007d92:	bb5c      	cbnz	r4, 8007dec <_malloc_r+0x90>
 8007d94:	4629      	mov	r1, r5
 8007d96:	4638      	mov	r0, r7
 8007d98:	f7ff ffc0 	bl	8007d1c <sbrk_aligned>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	4604      	mov	r4, r0
 8007da0:	d155      	bne.n	8007e4e <_malloc_r+0xf2>
 8007da2:	f8d8 4000 	ldr.w	r4, [r8]
 8007da6:	4626      	mov	r6, r4
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	d145      	bne.n	8007e38 <_malloc_r+0xdc>
 8007dac:	2c00      	cmp	r4, #0
 8007dae:	d048      	beq.n	8007e42 <_malloc_r+0xe6>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	4631      	mov	r1, r6
 8007db4:	4638      	mov	r0, r7
 8007db6:	eb04 0903 	add.w	r9, r4, r3
 8007dba:	f000 f993 	bl	80080e4 <_sbrk_r>
 8007dbe:	4581      	cmp	r9, r0
 8007dc0:	d13f      	bne.n	8007e42 <_malloc_r+0xe6>
 8007dc2:	6821      	ldr	r1, [r4, #0]
 8007dc4:	1a6d      	subs	r5, r5, r1
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7ff ffa7 	bl	8007d1c <sbrk_aligned>
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d037      	beq.n	8007e42 <_malloc_r+0xe6>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	442b      	add	r3, r5
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d038      	beq.n	8007e52 <_malloc_r+0xf6>
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	42a2      	cmp	r2, r4
 8007de4:	d12b      	bne.n	8007e3e <_malloc_r+0xe2>
 8007de6:	2200      	movs	r2, #0
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	e00f      	b.n	8007e0c <_malloc_r+0xb0>
 8007dec:	6822      	ldr	r2, [r4, #0]
 8007dee:	1b52      	subs	r2, r2, r5
 8007df0:	d41f      	bmi.n	8007e32 <_malloc_r+0xd6>
 8007df2:	2a0b      	cmp	r2, #11
 8007df4:	d917      	bls.n	8007e26 <_malloc_r+0xca>
 8007df6:	1961      	adds	r1, r4, r5
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	6025      	str	r5, [r4, #0]
 8007dfc:	bf18      	it	ne
 8007dfe:	6059      	strne	r1, [r3, #4]
 8007e00:	6863      	ldr	r3, [r4, #4]
 8007e02:	bf08      	it	eq
 8007e04:	f8c8 1000 	streq.w	r1, [r8]
 8007e08:	5162      	str	r2, [r4, r5]
 8007e0a:	604b      	str	r3, [r1, #4]
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f104 060b 	add.w	r6, r4, #11
 8007e12:	f000 f8d7 	bl	8007fc4 <__malloc_unlock>
 8007e16:	f026 0607 	bic.w	r6, r6, #7
 8007e1a:	1d23      	adds	r3, r4, #4
 8007e1c:	1af2      	subs	r2, r6, r3
 8007e1e:	d0ae      	beq.n	8007d7e <_malloc_r+0x22>
 8007e20:	1b9b      	subs	r3, r3, r6
 8007e22:	50a3      	str	r3, [r4, r2]
 8007e24:	e7ab      	b.n	8007d7e <_malloc_r+0x22>
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	6862      	ldr	r2, [r4, #4]
 8007e2a:	d1dd      	bne.n	8007de8 <_malloc_r+0x8c>
 8007e2c:	f8c8 2000 	str.w	r2, [r8]
 8007e30:	e7ec      	b.n	8007e0c <_malloc_r+0xb0>
 8007e32:	4623      	mov	r3, r4
 8007e34:	6864      	ldr	r4, [r4, #4]
 8007e36:	e7ac      	b.n	8007d92 <_malloc_r+0x36>
 8007e38:	4634      	mov	r4, r6
 8007e3a:	6876      	ldr	r6, [r6, #4]
 8007e3c:	e7b4      	b.n	8007da8 <_malloc_r+0x4c>
 8007e3e:	4613      	mov	r3, r2
 8007e40:	e7cc      	b.n	8007ddc <_malloc_r+0x80>
 8007e42:	230c      	movs	r3, #12
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4638      	mov	r0, r7
 8007e48:	f000 f8bc 	bl	8007fc4 <__malloc_unlock>
 8007e4c:	e797      	b.n	8007d7e <_malloc_r+0x22>
 8007e4e:	6025      	str	r5, [r4, #0]
 8007e50:	e7dc      	b.n	8007e0c <_malloc_r+0xb0>
 8007e52:	605b      	str	r3, [r3, #4]
 8007e54:	deff      	udf	#255	; 0xff
 8007e56:	bf00      	nop
 8007e58:	200048d0 	.word	0x200048d0

08007e5c <__sflush_r>:
 8007e5c:	898a      	ldrh	r2, [r1, #12]
 8007e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	4605      	mov	r5, r0
 8007e64:	0710      	lsls	r0, r2, #28
 8007e66:	460c      	mov	r4, r1
 8007e68:	d458      	bmi.n	8007f1c <__sflush_r+0xc0>
 8007e6a:	684b      	ldr	r3, [r1, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dc05      	bgt.n	8007e7c <__sflush_r+0x20>
 8007e70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dc02      	bgt.n	8007e7c <__sflush_r+0x20>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	d0f9      	beq.n	8007e76 <__sflush_r+0x1a>
 8007e82:	2300      	movs	r3, #0
 8007e84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e88:	682f      	ldr	r7, [r5, #0]
 8007e8a:	6a21      	ldr	r1, [r4, #32]
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	d032      	beq.n	8007ef6 <__sflush_r+0x9a>
 8007e90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	075a      	lsls	r2, r3, #29
 8007e96:	d505      	bpl.n	8007ea4 <__sflush_r+0x48>
 8007e98:	6863      	ldr	r3, [r4, #4]
 8007e9a:	1ac0      	subs	r0, r0, r3
 8007e9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e9e:	b10b      	cbz	r3, 8007ea4 <__sflush_r+0x48>
 8007ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ea2:	1ac0      	subs	r0, r0, r3
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eaa:	6a21      	ldr	r1, [r4, #32]
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b0      	blx	r6
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	d106      	bne.n	8007ec4 <__sflush_r+0x68>
 8007eb6:	6829      	ldr	r1, [r5, #0]
 8007eb8:	291d      	cmp	r1, #29
 8007eba:	d82b      	bhi.n	8007f14 <__sflush_r+0xb8>
 8007ebc:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <__sflush_r+0x108>)
 8007ebe:	410a      	asrs	r2, r1
 8007ec0:	07d6      	lsls	r6, r2, #31
 8007ec2:	d427      	bmi.n	8007f14 <__sflush_r+0xb8>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	6062      	str	r2, [r4, #4]
 8007ec8:	04d9      	lsls	r1, r3, #19
 8007eca:	6922      	ldr	r2, [r4, #16]
 8007ecc:	6022      	str	r2, [r4, #0]
 8007ece:	d504      	bpl.n	8007eda <__sflush_r+0x7e>
 8007ed0:	1c42      	adds	r2, r0, #1
 8007ed2:	d101      	bne.n	8007ed8 <__sflush_r+0x7c>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b903      	cbnz	r3, 8007eda <__sflush_r+0x7e>
 8007ed8:	6560      	str	r0, [r4, #84]	; 0x54
 8007eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007edc:	602f      	str	r7, [r5, #0]
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	d0c9      	beq.n	8007e76 <__sflush_r+0x1a>
 8007ee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	d002      	beq.n	8007ef0 <__sflush_r+0x94>
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 f924 	bl	8008138 <_free_r>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ef4:	e7c0      	b.n	8007e78 <__sflush_r+0x1c>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b0      	blx	r6
 8007efc:	1c41      	adds	r1, r0, #1
 8007efe:	d1c8      	bne.n	8007e92 <__sflush_r+0x36>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0c5      	beq.n	8007e92 <__sflush_r+0x36>
 8007f06:	2b1d      	cmp	r3, #29
 8007f08:	d001      	beq.n	8007f0e <__sflush_r+0xb2>
 8007f0a:	2b16      	cmp	r3, #22
 8007f0c:	d101      	bne.n	8007f12 <__sflush_r+0xb6>
 8007f0e:	602f      	str	r7, [r5, #0]
 8007f10:	e7b1      	b.n	8007e76 <__sflush_r+0x1a>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	e7ad      	b.n	8007e78 <__sflush_r+0x1c>
 8007f1c:	690f      	ldr	r7, [r1, #16]
 8007f1e:	2f00      	cmp	r7, #0
 8007f20:	d0a9      	beq.n	8007e76 <__sflush_r+0x1a>
 8007f22:	0793      	lsls	r3, r2, #30
 8007f24:	680e      	ldr	r6, [r1, #0]
 8007f26:	bf08      	it	eq
 8007f28:	694b      	ldreq	r3, [r1, #20]
 8007f2a:	600f      	str	r7, [r1, #0]
 8007f2c:	bf18      	it	ne
 8007f2e:	2300      	movne	r3, #0
 8007f30:	eba6 0807 	sub.w	r8, r6, r7
 8007f34:	608b      	str	r3, [r1, #8]
 8007f36:	f1b8 0f00 	cmp.w	r8, #0
 8007f3a:	dd9c      	ble.n	8007e76 <__sflush_r+0x1a>
 8007f3c:	6a21      	ldr	r1, [r4, #32]
 8007f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f40:	4643      	mov	r3, r8
 8007f42:	463a      	mov	r2, r7
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b0      	blx	r6
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dc06      	bgt.n	8007f5a <__sflush_r+0xfe>
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f52:	81a3      	strh	r3, [r4, #12]
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f58:	e78e      	b.n	8007e78 <__sflush_r+0x1c>
 8007f5a:	4407      	add	r7, r0
 8007f5c:	eba8 0800 	sub.w	r8, r8, r0
 8007f60:	e7e9      	b.n	8007f36 <__sflush_r+0xda>
 8007f62:	bf00      	nop
 8007f64:	dfbffffe 	.word	0xdfbffffe

08007f68 <_fflush_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	690b      	ldr	r3, [r1, #16]
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	b913      	cbnz	r3, 8007f78 <_fflush_r+0x10>
 8007f72:	2500      	movs	r5, #0
 8007f74:	4628      	mov	r0, r5
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	b118      	cbz	r0, 8007f82 <_fflush_r+0x1a>
 8007f7a:	6a03      	ldr	r3, [r0, #32]
 8007f7c:	b90b      	cbnz	r3, 8007f82 <_fflush_r+0x1a>
 8007f7e:	f7ff fe2d 	bl	8007bdc <__sinit>
 8007f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f3      	beq.n	8007f72 <_fflush_r+0xa>
 8007f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f8c:	07d0      	lsls	r0, r2, #31
 8007f8e:	d404      	bmi.n	8007f9a <_fflush_r+0x32>
 8007f90:	0599      	lsls	r1, r3, #22
 8007f92:	d402      	bmi.n	8007f9a <_fflush_r+0x32>
 8007f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f96:	f7ff fe8a 	bl	8007cae <__retarget_lock_acquire_recursive>
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f7ff ff5d 	bl	8007e5c <__sflush_r>
 8007fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fa4:	07da      	lsls	r2, r3, #31
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	d4e4      	bmi.n	8007f74 <_fflush_r+0xc>
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	059b      	lsls	r3, r3, #22
 8007fae:	d4e1      	bmi.n	8007f74 <_fflush_r+0xc>
 8007fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb2:	f7ff fe7d 	bl	8007cb0 <__retarget_lock_release_recursive>
 8007fb6:	e7dd      	b.n	8007f74 <_fflush_r+0xc>

08007fb8 <__malloc_lock>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__malloc_lock+0x8>)
 8007fba:	f7ff be78 	b.w	8007cae <__retarget_lock_acquire_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	200048cc 	.word	0x200048cc

08007fc4 <__malloc_unlock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__malloc_unlock+0x8>)
 8007fc6:	f7ff be73 	b.w	8007cb0 <__retarget_lock_release_recursive>
 8007fca:	bf00      	nop
 8007fcc:	200048cc 	.word	0x200048cc

08007fd0 <__sread>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd8:	f000 f872 	bl	80080c0 <_read_r>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	bfab      	itete	ge
 8007fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fe4:	181b      	addge	r3, r3, r0
 8007fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fea:	bfac      	ite	ge
 8007fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fee:	81a3      	strhlt	r3, [r4, #12]
 8007ff0:	bd10      	pop	{r4, pc}

08007ff2 <__swrite>:
 8007ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff6:	461f      	mov	r7, r3
 8007ff8:	898b      	ldrh	r3, [r1, #12]
 8007ffa:	05db      	lsls	r3, r3, #23
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	4616      	mov	r6, r2
 8008002:	d505      	bpl.n	8008010 <__swrite+0x1e>
 8008004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008008:	2302      	movs	r3, #2
 800800a:	2200      	movs	r2, #0
 800800c:	f000 f846 	bl	800809c <_lseek_r>
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800801a:	81a3      	strh	r3, [r4, #12]
 800801c:	4632      	mov	r2, r6
 800801e:	463b      	mov	r3, r7
 8008020:	4628      	mov	r0, r5
 8008022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008026:	f000 b86d 	b.w	8008104 <_write_r>

0800802a <__sseek>:
 800802a:	b510      	push	{r4, lr}
 800802c:	460c      	mov	r4, r1
 800802e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008032:	f000 f833 	bl	800809c <_lseek_r>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	bf15      	itete	ne
 800803c:	6560      	strne	r0, [r4, #84]	; 0x54
 800803e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008046:	81a3      	strheq	r3, [r4, #12]
 8008048:	bf18      	it	ne
 800804a:	81a3      	strhne	r3, [r4, #12]
 800804c:	bd10      	pop	{r4, pc}

0800804e <__sclose>:
 800804e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008052:	f000 b813 	b.w	800807c <_close_r>
	...

08008058 <fiprintf>:
 8008058:	b40e      	push	{r1, r2, r3}
 800805a:	b503      	push	{r0, r1, lr}
 800805c:	4601      	mov	r1, r0
 800805e:	ab03      	add	r3, sp, #12
 8008060:	4805      	ldr	r0, [pc, #20]	; (8008078 <fiprintf+0x20>)
 8008062:	f853 2b04 	ldr.w	r2, [r3], #4
 8008066:	6800      	ldr	r0, [r0, #0]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	f000 f8db 	bl	8008224 <_vfiprintf_r>
 800806e:	b002      	add	sp, #8
 8008070:	f85d eb04 	ldr.w	lr, [sp], #4
 8008074:	b003      	add	sp, #12
 8008076:	4770      	bx	lr
 8008078:	20000068 	.word	0x20000068

0800807c <_close_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4d06      	ldr	r5, [pc, #24]	; (8008098 <_close_r+0x1c>)
 8008080:	2300      	movs	r3, #0
 8008082:	4604      	mov	r4, r0
 8008084:	4608      	mov	r0, r1
 8008086:	602b      	str	r3, [r5, #0]
 8008088:	f7fa f8ed 	bl	8002266 <_close>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_close_r+0x1a>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b103      	cbz	r3, 8008096 <_close_r+0x1a>
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	200048d8 	.word	0x200048d8

0800809c <_lseek_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	; (80080bc <_lseek_r+0x20>)
 80080a0:	4604      	mov	r4, r0
 80080a2:	4608      	mov	r0, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	2200      	movs	r2, #0
 80080a8:	602a      	str	r2, [r5, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f7fa f902 	bl	80022b4 <_lseek>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_lseek_r+0x1e>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_lseek_r+0x1e>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	200048d8 	.word	0x200048d8

080080c0 <_read_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d07      	ldr	r5, [pc, #28]	; (80080e0 <_read_r+0x20>)
 80080c4:	4604      	mov	r4, r0
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7fa f890 	bl	80021f4 <_read>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_read_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_read_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	200048d8 	.word	0x200048d8

080080e4 <_sbrk_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d06      	ldr	r5, [pc, #24]	; (8008100 <_sbrk_r+0x1c>)
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	f7fa f8ee 	bl	80022d0 <_sbrk>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_sbrk_r+0x1a>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_sbrk_r+0x1a>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	200048d8 	.word	0x200048d8

08008104 <_write_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	; (8008124 <_write_r+0x20>)
 8008108:	4604      	mov	r4, r0
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	2200      	movs	r2, #0
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7fa f88b 	bl	800222e <_write>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_write_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_write_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	200048d8 	.word	0x200048d8

08008128 <abort>:
 8008128:	b508      	push	{r3, lr}
 800812a:	2006      	movs	r0, #6
 800812c:	f000 fc66 	bl	80089fc <raise>
 8008130:	2001      	movs	r0, #1
 8008132:	f7fa f855 	bl	80021e0 <_exit>
	...

08008138 <_free_r>:
 8008138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800813a:	2900      	cmp	r1, #0
 800813c:	d044      	beq.n	80081c8 <_free_r+0x90>
 800813e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008142:	9001      	str	r0, [sp, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f1a1 0404 	sub.w	r4, r1, #4
 800814a:	bfb8      	it	lt
 800814c:	18e4      	addlt	r4, r4, r3
 800814e:	f7ff ff33 	bl	8007fb8 <__malloc_lock>
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <_free_r+0x94>)
 8008154:	9801      	ldr	r0, [sp, #4]
 8008156:	6813      	ldr	r3, [r2, #0]
 8008158:	b933      	cbnz	r3, 8008168 <_free_r+0x30>
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	6014      	str	r4, [r2, #0]
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008164:	f7ff bf2e 	b.w	8007fc4 <__malloc_unlock>
 8008168:	42a3      	cmp	r3, r4
 800816a:	d908      	bls.n	800817e <_free_r+0x46>
 800816c:	6825      	ldr	r5, [r4, #0]
 800816e:	1961      	adds	r1, r4, r5
 8008170:	428b      	cmp	r3, r1
 8008172:	bf01      	itttt	eq
 8008174:	6819      	ldreq	r1, [r3, #0]
 8008176:	685b      	ldreq	r3, [r3, #4]
 8008178:	1949      	addeq	r1, r1, r5
 800817a:	6021      	streq	r1, [r4, #0]
 800817c:	e7ed      	b.n	800815a <_free_r+0x22>
 800817e:	461a      	mov	r2, r3
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	b10b      	cbz	r3, 8008188 <_free_r+0x50>
 8008184:	42a3      	cmp	r3, r4
 8008186:	d9fa      	bls.n	800817e <_free_r+0x46>
 8008188:	6811      	ldr	r1, [r2, #0]
 800818a:	1855      	adds	r5, r2, r1
 800818c:	42a5      	cmp	r5, r4
 800818e:	d10b      	bne.n	80081a8 <_free_r+0x70>
 8008190:	6824      	ldr	r4, [r4, #0]
 8008192:	4421      	add	r1, r4
 8008194:	1854      	adds	r4, r2, r1
 8008196:	42a3      	cmp	r3, r4
 8008198:	6011      	str	r1, [r2, #0]
 800819a:	d1e0      	bne.n	800815e <_free_r+0x26>
 800819c:	681c      	ldr	r4, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	440c      	add	r4, r1
 80081a4:	6014      	str	r4, [r2, #0]
 80081a6:	e7da      	b.n	800815e <_free_r+0x26>
 80081a8:	d902      	bls.n	80081b0 <_free_r+0x78>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	e7d6      	b.n	800815e <_free_r+0x26>
 80081b0:	6825      	ldr	r5, [r4, #0]
 80081b2:	1961      	adds	r1, r4, r5
 80081b4:	428b      	cmp	r3, r1
 80081b6:	bf04      	itt	eq
 80081b8:	6819      	ldreq	r1, [r3, #0]
 80081ba:	685b      	ldreq	r3, [r3, #4]
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	bf04      	itt	eq
 80081c0:	1949      	addeq	r1, r1, r5
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	6054      	str	r4, [r2, #4]
 80081c6:	e7ca      	b.n	800815e <_free_r+0x26>
 80081c8:	b003      	add	sp, #12
 80081ca:	bd30      	pop	{r4, r5, pc}
 80081cc:	200048d0 	.word	0x200048d0

080081d0 <__sfputc_r>:
 80081d0:	6893      	ldr	r3, [r2, #8]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	b410      	push	{r4}
 80081d8:	6093      	str	r3, [r2, #8]
 80081da:	da08      	bge.n	80081ee <__sfputc_r+0x1e>
 80081dc:	6994      	ldr	r4, [r2, #24]
 80081de:	42a3      	cmp	r3, r4
 80081e0:	db01      	blt.n	80081e6 <__sfputc_r+0x16>
 80081e2:	290a      	cmp	r1, #10
 80081e4:	d103      	bne.n	80081ee <__sfputc_r+0x1e>
 80081e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ea:	f000 bac5 	b.w	8008778 <__swbuf_r>
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	1c58      	adds	r0, r3, #1
 80081f2:	6010      	str	r0, [r2, #0]
 80081f4:	7019      	strb	r1, [r3, #0]
 80081f6:	4608      	mov	r0, r1
 80081f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <__sfputs_r>:
 80081fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	4614      	mov	r4, r2
 8008206:	18d5      	adds	r5, r2, r3
 8008208:	42ac      	cmp	r4, r5
 800820a:	d101      	bne.n	8008210 <__sfputs_r+0x12>
 800820c:	2000      	movs	r0, #0
 800820e:	e007      	b.n	8008220 <__sfputs_r+0x22>
 8008210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008214:	463a      	mov	r2, r7
 8008216:	4630      	mov	r0, r6
 8008218:	f7ff ffda 	bl	80081d0 <__sfputc_r>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d1f3      	bne.n	8008208 <__sfputs_r+0xa>
 8008220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008224 <_vfiprintf_r>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	460d      	mov	r5, r1
 800822a:	b09d      	sub	sp, #116	; 0x74
 800822c:	4614      	mov	r4, r2
 800822e:	4698      	mov	r8, r3
 8008230:	4606      	mov	r6, r0
 8008232:	b118      	cbz	r0, 800823c <_vfiprintf_r+0x18>
 8008234:	6a03      	ldr	r3, [r0, #32]
 8008236:	b90b      	cbnz	r3, 800823c <_vfiprintf_r+0x18>
 8008238:	f7ff fcd0 	bl	8007bdc <__sinit>
 800823c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800823e:	07d9      	lsls	r1, r3, #31
 8008240:	d405      	bmi.n	800824e <_vfiprintf_r+0x2a>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	059a      	lsls	r2, r3, #22
 8008246:	d402      	bmi.n	800824e <_vfiprintf_r+0x2a>
 8008248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824a:	f7ff fd30 	bl	8007cae <__retarget_lock_acquire_recursive>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	071b      	lsls	r3, r3, #28
 8008252:	d501      	bpl.n	8008258 <_vfiprintf_r+0x34>
 8008254:	692b      	ldr	r3, [r5, #16]
 8008256:	b99b      	cbnz	r3, 8008280 <_vfiprintf_r+0x5c>
 8008258:	4629      	mov	r1, r5
 800825a:	4630      	mov	r0, r6
 800825c:	f000 faca 	bl	80087f4 <__swsetup_r>
 8008260:	b170      	cbz	r0, 8008280 <_vfiprintf_r+0x5c>
 8008262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008264:	07dc      	lsls	r4, r3, #31
 8008266:	d504      	bpl.n	8008272 <_vfiprintf_r+0x4e>
 8008268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800826c:	b01d      	add	sp, #116	; 0x74
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	0598      	lsls	r0, r3, #22
 8008276:	d4f7      	bmi.n	8008268 <_vfiprintf_r+0x44>
 8008278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800827a:	f7ff fd19 	bl	8007cb0 <__retarget_lock_release_recursive>
 800827e:	e7f3      	b.n	8008268 <_vfiprintf_r+0x44>
 8008280:	2300      	movs	r3, #0
 8008282:	9309      	str	r3, [sp, #36]	; 0x24
 8008284:	2320      	movs	r3, #32
 8008286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800828a:	f8cd 800c 	str.w	r8, [sp, #12]
 800828e:	2330      	movs	r3, #48	; 0x30
 8008290:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008444 <_vfiprintf_r+0x220>
 8008294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008298:	f04f 0901 	mov.w	r9, #1
 800829c:	4623      	mov	r3, r4
 800829e:	469a      	mov	sl, r3
 80082a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082a4:	b10a      	cbz	r2, 80082aa <_vfiprintf_r+0x86>
 80082a6:	2a25      	cmp	r2, #37	; 0x25
 80082a8:	d1f9      	bne.n	800829e <_vfiprintf_r+0x7a>
 80082aa:	ebba 0b04 	subs.w	fp, sl, r4
 80082ae:	d00b      	beq.n	80082c8 <_vfiprintf_r+0xa4>
 80082b0:	465b      	mov	r3, fp
 80082b2:	4622      	mov	r2, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff ffa1 	bl	80081fe <__sfputs_r>
 80082bc:	3001      	adds	r0, #1
 80082be:	f000 80a9 	beq.w	8008414 <_vfiprintf_r+0x1f0>
 80082c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082c4:	445a      	add	r2, fp
 80082c6:	9209      	str	r2, [sp, #36]	; 0x24
 80082c8:	f89a 3000 	ldrb.w	r3, [sl]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80a1 	beq.w	8008414 <_vfiprintf_r+0x1f0>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082dc:	f10a 0a01 	add.w	sl, sl, #1
 80082e0:	9304      	str	r3, [sp, #16]
 80082e2:	9307      	str	r3, [sp, #28]
 80082e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082e8:	931a      	str	r3, [sp, #104]	; 0x68
 80082ea:	4654      	mov	r4, sl
 80082ec:	2205      	movs	r2, #5
 80082ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f2:	4854      	ldr	r0, [pc, #336]	; (8008444 <_vfiprintf_r+0x220>)
 80082f4:	f7f7 ff6c 	bl	80001d0 <memchr>
 80082f8:	9a04      	ldr	r2, [sp, #16]
 80082fa:	b9d8      	cbnz	r0, 8008334 <_vfiprintf_r+0x110>
 80082fc:	06d1      	lsls	r1, r2, #27
 80082fe:	bf44      	itt	mi
 8008300:	2320      	movmi	r3, #32
 8008302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008306:	0713      	lsls	r3, r2, #28
 8008308:	bf44      	itt	mi
 800830a:	232b      	movmi	r3, #43	; 0x2b
 800830c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008310:	f89a 3000 	ldrb.w	r3, [sl]
 8008314:	2b2a      	cmp	r3, #42	; 0x2a
 8008316:	d015      	beq.n	8008344 <_vfiprintf_r+0x120>
 8008318:	9a07      	ldr	r2, [sp, #28]
 800831a:	4654      	mov	r4, sl
 800831c:	2000      	movs	r0, #0
 800831e:	f04f 0c0a 	mov.w	ip, #10
 8008322:	4621      	mov	r1, r4
 8008324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008328:	3b30      	subs	r3, #48	; 0x30
 800832a:	2b09      	cmp	r3, #9
 800832c:	d94d      	bls.n	80083ca <_vfiprintf_r+0x1a6>
 800832e:	b1b0      	cbz	r0, 800835e <_vfiprintf_r+0x13a>
 8008330:	9207      	str	r2, [sp, #28]
 8008332:	e014      	b.n	800835e <_vfiprintf_r+0x13a>
 8008334:	eba0 0308 	sub.w	r3, r0, r8
 8008338:	fa09 f303 	lsl.w	r3, r9, r3
 800833c:	4313      	orrs	r3, r2
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	46a2      	mov	sl, r4
 8008342:	e7d2      	b.n	80082ea <_vfiprintf_r+0xc6>
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	1d19      	adds	r1, r3, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	9103      	str	r1, [sp, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	bfbb      	ittet	lt
 8008350:	425b      	neglt	r3, r3
 8008352:	f042 0202 	orrlt.w	r2, r2, #2
 8008356:	9307      	strge	r3, [sp, #28]
 8008358:	9307      	strlt	r3, [sp, #28]
 800835a:	bfb8      	it	lt
 800835c:	9204      	strlt	r2, [sp, #16]
 800835e:	7823      	ldrb	r3, [r4, #0]
 8008360:	2b2e      	cmp	r3, #46	; 0x2e
 8008362:	d10c      	bne.n	800837e <_vfiprintf_r+0x15a>
 8008364:	7863      	ldrb	r3, [r4, #1]
 8008366:	2b2a      	cmp	r3, #42	; 0x2a
 8008368:	d134      	bne.n	80083d4 <_vfiprintf_r+0x1b0>
 800836a:	9b03      	ldr	r3, [sp, #12]
 800836c:	1d1a      	adds	r2, r3, #4
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	9203      	str	r2, [sp, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	bfb8      	it	lt
 8008376:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800837a:	3402      	adds	r4, #2
 800837c:	9305      	str	r3, [sp, #20]
 800837e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008454 <_vfiprintf_r+0x230>
 8008382:	7821      	ldrb	r1, [r4, #0]
 8008384:	2203      	movs	r2, #3
 8008386:	4650      	mov	r0, sl
 8008388:	f7f7 ff22 	bl	80001d0 <memchr>
 800838c:	b138      	cbz	r0, 800839e <_vfiprintf_r+0x17a>
 800838e:	9b04      	ldr	r3, [sp, #16]
 8008390:	eba0 000a 	sub.w	r0, r0, sl
 8008394:	2240      	movs	r2, #64	; 0x40
 8008396:	4082      	lsls	r2, r0
 8008398:	4313      	orrs	r3, r2
 800839a:	3401      	adds	r4, #1
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a2:	4829      	ldr	r0, [pc, #164]	; (8008448 <_vfiprintf_r+0x224>)
 80083a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083a8:	2206      	movs	r2, #6
 80083aa:	f7f7 ff11 	bl	80001d0 <memchr>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d03f      	beq.n	8008432 <_vfiprintf_r+0x20e>
 80083b2:	4b26      	ldr	r3, [pc, #152]	; (800844c <_vfiprintf_r+0x228>)
 80083b4:	bb1b      	cbnz	r3, 80083fe <_vfiprintf_r+0x1da>
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	3307      	adds	r3, #7
 80083ba:	f023 0307 	bic.w	r3, r3, #7
 80083be:	3308      	adds	r3, #8
 80083c0:	9303      	str	r3, [sp, #12]
 80083c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c4:	443b      	add	r3, r7
 80083c6:	9309      	str	r3, [sp, #36]	; 0x24
 80083c8:	e768      	b.n	800829c <_vfiprintf_r+0x78>
 80083ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ce:	460c      	mov	r4, r1
 80083d0:	2001      	movs	r0, #1
 80083d2:	e7a6      	b.n	8008322 <_vfiprintf_r+0xfe>
 80083d4:	2300      	movs	r3, #0
 80083d6:	3401      	adds	r4, #1
 80083d8:	9305      	str	r3, [sp, #20]
 80083da:	4619      	mov	r1, r3
 80083dc:	f04f 0c0a 	mov.w	ip, #10
 80083e0:	4620      	mov	r0, r4
 80083e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083e6:	3a30      	subs	r2, #48	; 0x30
 80083e8:	2a09      	cmp	r2, #9
 80083ea:	d903      	bls.n	80083f4 <_vfiprintf_r+0x1d0>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0c6      	beq.n	800837e <_vfiprintf_r+0x15a>
 80083f0:	9105      	str	r1, [sp, #20]
 80083f2:	e7c4      	b.n	800837e <_vfiprintf_r+0x15a>
 80083f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f8:	4604      	mov	r4, r0
 80083fa:	2301      	movs	r3, #1
 80083fc:	e7f0      	b.n	80083e0 <_vfiprintf_r+0x1bc>
 80083fe:	ab03      	add	r3, sp, #12
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	462a      	mov	r2, r5
 8008404:	4b12      	ldr	r3, [pc, #72]	; (8008450 <_vfiprintf_r+0x22c>)
 8008406:	a904      	add	r1, sp, #16
 8008408:	4630      	mov	r0, r6
 800840a:	f3af 8000 	nop.w
 800840e:	4607      	mov	r7, r0
 8008410:	1c78      	adds	r0, r7, #1
 8008412:	d1d6      	bne.n	80083c2 <_vfiprintf_r+0x19e>
 8008414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008416:	07d9      	lsls	r1, r3, #31
 8008418:	d405      	bmi.n	8008426 <_vfiprintf_r+0x202>
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	059a      	lsls	r2, r3, #22
 800841e:	d402      	bmi.n	8008426 <_vfiprintf_r+0x202>
 8008420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008422:	f7ff fc45 	bl	8007cb0 <__retarget_lock_release_recursive>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	065b      	lsls	r3, r3, #25
 800842a:	f53f af1d 	bmi.w	8008268 <_vfiprintf_r+0x44>
 800842e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008430:	e71c      	b.n	800826c <_vfiprintf_r+0x48>
 8008432:	ab03      	add	r3, sp, #12
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	462a      	mov	r2, r5
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <_vfiprintf_r+0x22c>)
 800843a:	a904      	add	r1, sp, #16
 800843c:	4630      	mov	r0, r6
 800843e:	f000 f879 	bl	8008534 <_printf_i>
 8008442:	e7e4      	b.n	800840e <_vfiprintf_r+0x1ea>
 8008444:	08008c17 	.word	0x08008c17
 8008448:	08008c21 	.word	0x08008c21
 800844c:	00000000 	.word	0x00000000
 8008450:	080081ff 	.word	0x080081ff
 8008454:	08008c1d 	.word	0x08008c1d

08008458 <_printf_common>:
 8008458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800845c:	4616      	mov	r6, r2
 800845e:	4699      	mov	r9, r3
 8008460:	688a      	ldr	r2, [r1, #8]
 8008462:	690b      	ldr	r3, [r1, #16]
 8008464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008468:	4293      	cmp	r3, r2
 800846a:	bfb8      	it	lt
 800846c:	4613      	movlt	r3, r2
 800846e:	6033      	str	r3, [r6, #0]
 8008470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008474:	4607      	mov	r7, r0
 8008476:	460c      	mov	r4, r1
 8008478:	b10a      	cbz	r2, 800847e <_printf_common+0x26>
 800847a:	3301      	adds	r3, #1
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	0699      	lsls	r1, r3, #26
 8008482:	bf42      	ittt	mi
 8008484:	6833      	ldrmi	r3, [r6, #0]
 8008486:	3302      	addmi	r3, #2
 8008488:	6033      	strmi	r3, [r6, #0]
 800848a:	6825      	ldr	r5, [r4, #0]
 800848c:	f015 0506 	ands.w	r5, r5, #6
 8008490:	d106      	bne.n	80084a0 <_printf_common+0x48>
 8008492:	f104 0a19 	add.w	sl, r4, #25
 8008496:	68e3      	ldr	r3, [r4, #12]
 8008498:	6832      	ldr	r2, [r6, #0]
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	42ab      	cmp	r3, r5
 800849e:	dc26      	bgt.n	80084ee <_printf_common+0x96>
 80084a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084a4:	1e13      	subs	r3, r2, #0
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	bf18      	it	ne
 80084aa:	2301      	movne	r3, #1
 80084ac:	0692      	lsls	r2, r2, #26
 80084ae:	d42b      	bmi.n	8008508 <_printf_common+0xb0>
 80084b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084b4:	4649      	mov	r1, r9
 80084b6:	4638      	mov	r0, r7
 80084b8:	47c0      	blx	r8
 80084ba:	3001      	adds	r0, #1
 80084bc:	d01e      	beq.n	80084fc <_printf_common+0xa4>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	6922      	ldr	r2, [r4, #16]
 80084c2:	f003 0306 	and.w	r3, r3, #6
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	bf02      	ittt	eq
 80084ca:	68e5      	ldreq	r5, [r4, #12]
 80084cc:	6833      	ldreq	r3, [r6, #0]
 80084ce:	1aed      	subeq	r5, r5, r3
 80084d0:	68a3      	ldr	r3, [r4, #8]
 80084d2:	bf0c      	ite	eq
 80084d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084d8:	2500      	movne	r5, #0
 80084da:	4293      	cmp	r3, r2
 80084dc:	bfc4      	itt	gt
 80084de:	1a9b      	subgt	r3, r3, r2
 80084e0:	18ed      	addgt	r5, r5, r3
 80084e2:	2600      	movs	r6, #0
 80084e4:	341a      	adds	r4, #26
 80084e6:	42b5      	cmp	r5, r6
 80084e8:	d11a      	bne.n	8008520 <_printf_common+0xc8>
 80084ea:	2000      	movs	r0, #0
 80084ec:	e008      	b.n	8008500 <_printf_common+0xa8>
 80084ee:	2301      	movs	r3, #1
 80084f0:	4652      	mov	r2, sl
 80084f2:	4649      	mov	r1, r9
 80084f4:	4638      	mov	r0, r7
 80084f6:	47c0      	blx	r8
 80084f8:	3001      	adds	r0, #1
 80084fa:	d103      	bne.n	8008504 <_printf_common+0xac>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008504:	3501      	adds	r5, #1
 8008506:	e7c6      	b.n	8008496 <_printf_common+0x3e>
 8008508:	18e1      	adds	r1, r4, r3
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	2030      	movs	r0, #48	; 0x30
 800850e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008512:	4422      	add	r2, r4
 8008514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800851c:	3302      	adds	r3, #2
 800851e:	e7c7      	b.n	80084b0 <_printf_common+0x58>
 8008520:	2301      	movs	r3, #1
 8008522:	4622      	mov	r2, r4
 8008524:	4649      	mov	r1, r9
 8008526:	4638      	mov	r0, r7
 8008528:	47c0      	blx	r8
 800852a:	3001      	adds	r0, #1
 800852c:	d0e6      	beq.n	80084fc <_printf_common+0xa4>
 800852e:	3601      	adds	r6, #1
 8008530:	e7d9      	b.n	80084e6 <_printf_common+0x8e>
	...

08008534 <_printf_i>:
 8008534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	7e0f      	ldrb	r7, [r1, #24]
 800853a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800853c:	2f78      	cmp	r7, #120	; 0x78
 800853e:	4691      	mov	r9, r2
 8008540:	4680      	mov	r8, r0
 8008542:	460c      	mov	r4, r1
 8008544:	469a      	mov	sl, r3
 8008546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800854a:	d807      	bhi.n	800855c <_printf_i+0x28>
 800854c:	2f62      	cmp	r7, #98	; 0x62
 800854e:	d80a      	bhi.n	8008566 <_printf_i+0x32>
 8008550:	2f00      	cmp	r7, #0
 8008552:	f000 80d4 	beq.w	80086fe <_printf_i+0x1ca>
 8008556:	2f58      	cmp	r7, #88	; 0x58
 8008558:	f000 80c0 	beq.w	80086dc <_printf_i+0x1a8>
 800855c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008564:	e03a      	b.n	80085dc <_printf_i+0xa8>
 8008566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800856a:	2b15      	cmp	r3, #21
 800856c:	d8f6      	bhi.n	800855c <_printf_i+0x28>
 800856e:	a101      	add	r1, pc, #4	; (adr r1, 8008574 <_printf_i+0x40>)
 8008570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008574:	080085cd 	.word	0x080085cd
 8008578:	080085e1 	.word	0x080085e1
 800857c:	0800855d 	.word	0x0800855d
 8008580:	0800855d 	.word	0x0800855d
 8008584:	0800855d 	.word	0x0800855d
 8008588:	0800855d 	.word	0x0800855d
 800858c:	080085e1 	.word	0x080085e1
 8008590:	0800855d 	.word	0x0800855d
 8008594:	0800855d 	.word	0x0800855d
 8008598:	0800855d 	.word	0x0800855d
 800859c:	0800855d 	.word	0x0800855d
 80085a0:	080086e5 	.word	0x080086e5
 80085a4:	0800860d 	.word	0x0800860d
 80085a8:	0800869f 	.word	0x0800869f
 80085ac:	0800855d 	.word	0x0800855d
 80085b0:	0800855d 	.word	0x0800855d
 80085b4:	08008707 	.word	0x08008707
 80085b8:	0800855d 	.word	0x0800855d
 80085bc:	0800860d 	.word	0x0800860d
 80085c0:	0800855d 	.word	0x0800855d
 80085c4:	0800855d 	.word	0x0800855d
 80085c8:	080086a7 	.word	0x080086a7
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	602a      	str	r2, [r5, #0]
 80085d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085dc:	2301      	movs	r3, #1
 80085de:	e09f      	b.n	8008720 <_printf_i+0x1ec>
 80085e0:	6820      	ldr	r0, [r4, #0]
 80085e2:	682b      	ldr	r3, [r5, #0]
 80085e4:	0607      	lsls	r7, r0, #24
 80085e6:	f103 0104 	add.w	r1, r3, #4
 80085ea:	6029      	str	r1, [r5, #0]
 80085ec:	d501      	bpl.n	80085f2 <_printf_i+0xbe>
 80085ee:	681e      	ldr	r6, [r3, #0]
 80085f0:	e003      	b.n	80085fa <_printf_i+0xc6>
 80085f2:	0646      	lsls	r6, r0, #25
 80085f4:	d5fb      	bpl.n	80085ee <_printf_i+0xba>
 80085f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	da03      	bge.n	8008606 <_printf_i+0xd2>
 80085fe:	232d      	movs	r3, #45	; 0x2d
 8008600:	4276      	negs	r6, r6
 8008602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008606:	485a      	ldr	r0, [pc, #360]	; (8008770 <_printf_i+0x23c>)
 8008608:	230a      	movs	r3, #10
 800860a:	e012      	b.n	8008632 <_printf_i+0xfe>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	6820      	ldr	r0, [r4, #0]
 8008610:	1d19      	adds	r1, r3, #4
 8008612:	6029      	str	r1, [r5, #0]
 8008614:	0605      	lsls	r5, r0, #24
 8008616:	d501      	bpl.n	800861c <_printf_i+0xe8>
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	e002      	b.n	8008622 <_printf_i+0xee>
 800861c:	0641      	lsls	r1, r0, #25
 800861e:	d5fb      	bpl.n	8008618 <_printf_i+0xe4>
 8008620:	881e      	ldrh	r6, [r3, #0]
 8008622:	4853      	ldr	r0, [pc, #332]	; (8008770 <_printf_i+0x23c>)
 8008624:	2f6f      	cmp	r7, #111	; 0x6f
 8008626:	bf0c      	ite	eq
 8008628:	2308      	moveq	r3, #8
 800862a:	230a      	movne	r3, #10
 800862c:	2100      	movs	r1, #0
 800862e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008632:	6865      	ldr	r5, [r4, #4]
 8008634:	60a5      	str	r5, [r4, #8]
 8008636:	2d00      	cmp	r5, #0
 8008638:	bfa2      	ittt	ge
 800863a:	6821      	ldrge	r1, [r4, #0]
 800863c:	f021 0104 	bicge.w	r1, r1, #4
 8008640:	6021      	strge	r1, [r4, #0]
 8008642:	b90e      	cbnz	r6, 8008648 <_printf_i+0x114>
 8008644:	2d00      	cmp	r5, #0
 8008646:	d04b      	beq.n	80086e0 <_printf_i+0x1ac>
 8008648:	4615      	mov	r5, r2
 800864a:	fbb6 f1f3 	udiv	r1, r6, r3
 800864e:	fb03 6711 	mls	r7, r3, r1, r6
 8008652:	5dc7      	ldrb	r7, [r0, r7]
 8008654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008658:	4637      	mov	r7, r6
 800865a:	42bb      	cmp	r3, r7
 800865c:	460e      	mov	r6, r1
 800865e:	d9f4      	bls.n	800864a <_printf_i+0x116>
 8008660:	2b08      	cmp	r3, #8
 8008662:	d10b      	bne.n	800867c <_printf_i+0x148>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	07de      	lsls	r6, r3, #31
 8008668:	d508      	bpl.n	800867c <_printf_i+0x148>
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	6861      	ldr	r1, [r4, #4]
 800866e:	4299      	cmp	r1, r3
 8008670:	bfde      	ittt	le
 8008672:	2330      	movle	r3, #48	; 0x30
 8008674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008678:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800867c:	1b52      	subs	r2, r2, r5
 800867e:	6122      	str	r2, [r4, #16]
 8008680:	f8cd a000 	str.w	sl, [sp]
 8008684:	464b      	mov	r3, r9
 8008686:	aa03      	add	r2, sp, #12
 8008688:	4621      	mov	r1, r4
 800868a:	4640      	mov	r0, r8
 800868c:	f7ff fee4 	bl	8008458 <_printf_common>
 8008690:	3001      	adds	r0, #1
 8008692:	d14a      	bne.n	800872a <_printf_i+0x1f6>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008698:	b004      	add	sp, #16
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	f043 0320 	orr.w	r3, r3, #32
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	4833      	ldr	r0, [pc, #204]	; (8008774 <_printf_i+0x240>)
 80086a8:	2778      	movs	r7, #120	; 0x78
 80086aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	6829      	ldr	r1, [r5, #0]
 80086b2:	061f      	lsls	r7, r3, #24
 80086b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80086b8:	d402      	bmi.n	80086c0 <_printf_i+0x18c>
 80086ba:	065f      	lsls	r7, r3, #25
 80086bc:	bf48      	it	mi
 80086be:	b2b6      	uxthmi	r6, r6
 80086c0:	07df      	lsls	r7, r3, #31
 80086c2:	bf48      	it	mi
 80086c4:	f043 0320 	orrmi.w	r3, r3, #32
 80086c8:	6029      	str	r1, [r5, #0]
 80086ca:	bf48      	it	mi
 80086cc:	6023      	strmi	r3, [r4, #0]
 80086ce:	b91e      	cbnz	r6, 80086d8 <_printf_i+0x1a4>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	f023 0320 	bic.w	r3, r3, #32
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	2310      	movs	r3, #16
 80086da:	e7a7      	b.n	800862c <_printf_i+0xf8>
 80086dc:	4824      	ldr	r0, [pc, #144]	; (8008770 <_printf_i+0x23c>)
 80086de:	e7e4      	b.n	80086aa <_printf_i+0x176>
 80086e0:	4615      	mov	r5, r2
 80086e2:	e7bd      	b.n	8008660 <_printf_i+0x12c>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	6826      	ldr	r6, [r4, #0]
 80086e8:	6961      	ldr	r1, [r4, #20]
 80086ea:	1d18      	adds	r0, r3, #4
 80086ec:	6028      	str	r0, [r5, #0]
 80086ee:	0635      	lsls	r5, r6, #24
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	d501      	bpl.n	80086f8 <_printf_i+0x1c4>
 80086f4:	6019      	str	r1, [r3, #0]
 80086f6:	e002      	b.n	80086fe <_printf_i+0x1ca>
 80086f8:	0670      	lsls	r0, r6, #25
 80086fa:	d5fb      	bpl.n	80086f4 <_printf_i+0x1c0>
 80086fc:	8019      	strh	r1, [r3, #0]
 80086fe:	2300      	movs	r3, #0
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	4615      	mov	r5, r2
 8008704:	e7bc      	b.n	8008680 <_printf_i+0x14c>
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	602a      	str	r2, [r5, #0]
 800870c:	681d      	ldr	r5, [r3, #0]
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	2100      	movs	r1, #0
 8008712:	4628      	mov	r0, r5
 8008714:	f7f7 fd5c 	bl	80001d0 <memchr>
 8008718:	b108      	cbz	r0, 800871e <_printf_i+0x1ea>
 800871a:	1b40      	subs	r0, r0, r5
 800871c:	6060      	str	r0, [r4, #4]
 800871e:	6863      	ldr	r3, [r4, #4]
 8008720:	6123      	str	r3, [r4, #16]
 8008722:	2300      	movs	r3, #0
 8008724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008728:	e7aa      	b.n	8008680 <_printf_i+0x14c>
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	462a      	mov	r2, r5
 800872e:	4649      	mov	r1, r9
 8008730:	4640      	mov	r0, r8
 8008732:	47d0      	blx	sl
 8008734:	3001      	adds	r0, #1
 8008736:	d0ad      	beq.n	8008694 <_printf_i+0x160>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	079b      	lsls	r3, r3, #30
 800873c:	d413      	bmi.n	8008766 <_printf_i+0x232>
 800873e:	68e0      	ldr	r0, [r4, #12]
 8008740:	9b03      	ldr	r3, [sp, #12]
 8008742:	4298      	cmp	r0, r3
 8008744:	bfb8      	it	lt
 8008746:	4618      	movlt	r0, r3
 8008748:	e7a6      	b.n	8008698 <_printf_i+0x164>
 800874a:	2301      	movs	r3, #1
 800874c:	4632      	mov	r2, r6
 800874e:	4649      	mov	r1, r9
 8008750:	4640      	mov	r0, r8
 8008752:	47d0      	blx	sl
 8008754:	3001      	adds	r0, #1
 8008756:	d09d      	beq.n	8008694 <_printf_i+0x160>
 8008758:	3501      	adds	r5, #1
 800875a:	68e3      	ldr	r3, [r4, #12]
 800875c:	9903      	ldr	r1, [sp, #12]
 800875e:	1a5b      	subs	r3, r3, r1
 8008760:	42ab      	cmp	r3, r5
 8008762:	dcf2      	bgt.n	800874a <_printf_i+0x216>
 8008764:	e7eb      	b.n	800873e <_printf_i+0x20a>
 8008766:	2500      	movs	r5, #0
 8008768:	f104 0619 	add.w	r6, r4, #25
 800876c:	e7f5      	b.n	800875a <_printf_i+0x226>
 800876e:	bf00      	nop
 8008770:	08008c28 	.word	0x08008c28
 8008774:	08008c39 	.word	0x08008c39

08008778 <__swbuf_r>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	460e      	mov	r6, r1
 800877c:	4614      	mov	r4, r2
 800877e:	4605      	mov	r5, r0
 8008780:	b118      	cbz	r0, 800878a <__swbuf_r+0x12>
 8008782:	6a03      	ldr	r3, [r0, #32]
 8008784:	b90b      	cbnz	r3, 800878a <__swbuf_r+0x12>
 8008786:	f7ff fa29 	bl	8007bdc <__sinit>
 800878a:	69a3      	ldr	r3, [r4, #24]
 800878c:	60a3      	str	r3, [r4, #8]
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	071a      	lsls	r2, r3, #28
 8008792:	d525      	bpl.n	80087e0 <__swbuf_r+0x68>
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	b31b      	cbz	r3, 80087e0 <__swbuf_r+0x68>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	6922      	ldr	r2, [r4, #16]
 800879c:	1a98      	subs	r0, r3, r2
 800879e:	6963      	ldr	r3, [r4, #20]
 80087a0:	b2f6      	uxtb	r6, r6
 80087a2:	4283      	cmp	r3, r0
 80087a4:	4637      	mov	r7, r6
 80087a6:	dc04      	bgt.n	80087b2 <__swbuf_r+0x3a>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f7ff fbdc 	bl	8007f68 <_fflush_r>
 80087b0:	b9e0      	cbnz	r0, 80087ec <__swbuf_r+0x74>
 80087b2:	68a3      	ldr	r3, [r4, #8]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	60a3      	str	r3, [r4, #8]
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	6022      	str	r2, [r4, #0]
 80087be:	701e      	strb	r6, [r3, #0]
 80087c0:	6962      	ldr	r2, [r4, #20]
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d004      	beq.n	80087d2 <__swbuf_r+0x5a>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	07db      	lsls	r3, r3, #31
 80087cc:	d506      	bpl.n	80087dc <__swbuf_r+0x64>
 80087ce:	2e0a      	cmp	r6, #10
 80087d0:	d104      	bne.n	80087dc <__swbuf_r+0x64>
 80087d2:	4621      	mov	r1, r4
 80087d4:	4628      	mov	r0, r5
 80087d6:	f7ff fbc7 	bl	8007f68 <_fflush_r>
 80087da:	b938      	cbnz	r0, 80087ec <__swbuf_r+0x74>
 80087dc:	4638      	mov	r0, r7
 80087de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f806 	bl	80087f4 <__swsetup_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0d5      	beq.n	8008798 <__swbuf_r+0x20>
 80087ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80087f0:	e7f4      	b.n	80087dc <__swbuf_r+0x64>
	...

080087f4 <__swsetup_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4b2a      	ldr	r3, [pc, #168]	; (80088a0 <__swsetup_r+0xac>)
 80087f8:	4605      	mov	r5, r0
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	460c      	mov	r4, r1
 80087fe:	b118      	cbz	r0, 8008808 <__swsetup_r+0x14>
 8008800:	6a03      	ldr	r3, [r0, #32]
 8008802:	b90b      	cbnz	r3, 8008808 <__swsetup_r+0x14>
 8008804:	f7ff f9ea 	bl	8007bdc <__sinit>
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800880e:	0718      	lsls	r0, r3, #28
 8008810:	d422      	bmi.n	8008858 <__swsetup_r+0x64>
 8008812:	06d9      	lsls	r1, r3, #27
 8008814:	d407      	bmi.n	8008826 <__swsetup_r+0x32>
 8008816:	2309      	movs	r3, #9
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008824:	e034      	b.n	8008890 <__swsetup_r+0x9c>
 8008826:	0758      	lsls	r0, r3, #29
 8008828:	d512      	bpl.n	8008850 <__swsetup_r+0x5c>
 800882a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800882c:	b141      	cbz	r1, 8008840 <__swsetup_r+0x4c>
 800882e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008832:	4299      	cmp	r1, r3
 8008834:	d002      	beq.n	800883c <__swsetup_r+0x48>
 8008836:	4628      	mov	r0, r5
 8008838:	f7ff fc7e 	bl	8008138 <_free_r>
 800883c:	2300      	movs	r3, #0
 800883e:	6363      	str	r3, [r4, #52]	; 0x34
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	2300      	movs	r3, #0
 800884a:	6063      	str	r3, [r4, #4]
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	f043 0308 	orr.w	r3, r3, #8
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	b94b      	cbnz	r3, 8008870 <__swsetup_r+0x7c>
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008866:	d003      	beq.n	8008870 <__swsetup_r+0x7c>
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f840 	bl	80088f0 <__smakebuf_r>
 8008870:	89a0      	ldrh	r0, [r4, #12]
 8008872:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008876:	f010 0301 	ands.w	r3, r0, #1
 800887a:	d00a      	beq.n	8008892 <__swsetup_r+0x9e>
 800887c:	2300      	movs	r3, #0
 800887e:	60a3      	str	r3, [r4, #8]
 8008880:	6963      	ldr	r3, [r4, #20]
 8008882:	425b      	negs	r3, r3
 8008884:	61a3      	str	r3, [r4, #24]
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	b943      	cbnz	r3, 800889c <__swsetup_r+0xa8>
 800888a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800888e:	d1c4      	bne.n	800881a <__swsetup_r+0x26>
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	0781      	lsls	r1, r0, #30
 8008894:	bf58      	it	pl
 8008896:	6963      	ldrpl	r3, [r4, #20]
 8008898:	60a3      	str	r3, [r4, #8]
 800889a:	e7f4      	b.n	8008886 <__swsetup_r+0x92>
 800889c:	2000      	movs	r0, #0
 800889e:	e7f7      	b.n	8008890 <__swsetup_r+0x9c>
 80088a0:	20000068 	.word	0x20000068

080088a4 <__swhatbuf_r>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	460c      	mov	r4, r1
 80088a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ac:	2900      	cmp	r1, #0
 80088ae:	b096      	sub	sp, #88	; 0x58
 80088b0:	4615      	mov	r5, r2
 80088b2:	461e      	mov	r6, r3
 80088b4:	da0d      	bge.n	80088d2 <__swhatbuf_r+0x2e>
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088bc:	f04f 0100 	mov.w	r1, #0
 80088c0:	bf0c      	ite	eq
 80088c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088c6:	2340      	movne	r3, #64	; 0x40
 80088c8:	2000      	movs	r0, #0
 80088ca:	6031      	str	r1, [r6, #0]
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	b016      	add	sp, #88	; 0x58
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	466a      	mov	r2, sp
 80088d4:	f000 f848 	bl	8008968 <_fstat_r>
 80088d8:	2800      	cmp	r0, #0
 80088da:	dbec      	blt.n	80088b6 <__swhatbuf_r+0x12>
 80088dc:	9901      	ldr	r1, [sp, #4]
 80088de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80088e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80088e6:	4259      	negs	r1, r3
 80088e8:	4159      	adcs	r1, r3
 80088ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ee:	e7eb      	b.n	80088c8 <__swhatbuf_r+0x24>

080088f0 <__smakebuf_r>:
 80088f0:	898b      	ldrh	r3, [r1, #12]
 80088f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088f4:	079d      	lsls	r5, r3, #30
 80088f6:	4606      	mov	r6, r0
 80088f8:	460c      	mov	r4, r1
 80088fa:	d507      	bpl.n	800890c <__smakebuf_r+0x1c>
 80088fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	6123      	str	r3, [r4, #16]
 8008904:	2301      	movs	r3, #1
 8008906:	6163      	str	r3, [r4, #20]
 8008908:	b002      	add	sp, #8
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	ab01      	add	r3, sp, #4
 800890e:	466a      	mov	r2, sp
 8008910:	f7ff ffc8 	bl	80088a4 <__swhatbuf_r>
 8008914:	9900      	ldr	r1, [sp, #0]
 8008916:	4605      	mov	r5, r0
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff fa1f 	bl	8007d5c <_malloc_r>
 800891e:	b948      	cbnz	r0, 8008934 <__smakebuf_r+0x44>
 8008920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008924:	059a      	lsls	r2, r3, #22
 8008926:	d4ef      	bmi.n	8008908 <__smakebuf_r+0x18>
 8008928:	f023 0303 	bic.w	r3, r3, #3
 800892c:	f043 0302 	orr.w	r3, r3, #2
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	e7e3      	b.n	80088fc <__smakebuf_r+0xc>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	6020      	str	r0, [r4, #0]
 8008938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893c:	81a3      	strh	r3, [r4, #12]
 800893e:	9b00      	ldr	r3, [sp, #0]
 8008940:	6163      	str	r3, [r4, #20]
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	6120      	str	r0, [r4, #16]
 8008946:	b15b      	cbz	r3, 8008960 <__smakebuf_r+0x70>
 8008948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800894c:	4630      	mov	r0, r6
 800894e:	f000 f81d 	bl	800898c <_isatty_r>
 8008952:	b128      	cbz	r0, 8008960 <__smakebuf_r+0x70>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f023 0303 	bic.w	r3, r3, #3
 800895a:	f043 0301 	orr.w	r3, r3, #1
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	431d      	orrs	r5, r3
 8008964:	81a5      	strh	r5, [r4, #12]
 8008966:	e7cf      	b.n	8008908 <__smakebuf_r+0x18>

08008968 <_fstat_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d07      	ldr	r5, [pc, #28]	; (8008988 <_fstat_r+0x20>)
 800896c:	2300      	movs	r3, #0
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	4611      	mov	r1, r2
 8008974:	602b      	str	r3, [r5, #0]
 8008976:	f7f9 fc82 	bl	800227e <_fstat>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	d102      	bne.n	8008984 <_fstat_r+0x1c>
 800897e:	682b      	ldr	r3, [r5, #0]
 8008980:	b103      	cbz	r3, 8008984 <_fstat_r+0x1c>
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	bd38      	pop	{r3, r4, r5, pc}
 8008986:	bf00      	nop
 8008988:	200048d8 	.word	0x200048d8

0800898c <_isatty_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d06      	ldr	r5, [pc, #24]	; (80089a8 <_isatty_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7f9 fc81 	bl	800229e <_isatty>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_isatty_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_isatty_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	200048d8 	.word	0x200048d8

080089ac <_raise_r>:
 80089ac:	291f      	cmp	r1, #31
 80089ae:	b538      	push	{r3, r4, r5, lr}
 80089b0:	4604      	mov	r4, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	d904      	bls.n	80089c0 <_raise_r+0x14>
 80089b6:	2316      	movs	r3, #22
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089c2:	b112      	cbz	r2, 80089ca <_raise_r+0x1e>
 80089c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089c8:	b94b      	cbnz	r3, 80089de <_raise_r+0x32>
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 f830 	bl	8008a30 <_getpid_r>
 80089d0:	462a      	mov	r2, r5
 80089d2:	4601      	mov	r1, r0
 80089d4:	4620      	mov	r0, r4
 80089d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089da:	f000 b817 	b.w	8008a0c <_kill_r>
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d00a      	beq.n	80089f8 <_raise_r+0x4c>
 80089e2:	1c59      	adds	r1, r3, #1
 80089e4:	d103      	bne.n	80089ee <_raise_r+0x42>
 80089e6:	2316      	movs	r3, #22
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	2001      	movs	r0, #1
 80089ec:	e7e7      	b.n	80089be <_raise_r+0x12>
 80089ee:	2400      	movs	r4, #0
 80089f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089f4:	4628      	mov	r0, r5
 80089f6:	4798      	blx	r3
 80089f8:	2000      	movs	r0, #0
 80089fa:	e7e0      	b.n	80089be <_raise_r+0x12>

080089fc <raise>:
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <raise+0xc>)
 80089fe:	4601      	mov	r1, r0
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f7ff bfd3 	b.w	80089ac <_raise_r>
 8008a06:	bf00      	nop
 8008a08:	20000068 	.word	0x20000068

08008a0c <_kill_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d07      	ldr	r5, [pc, #28]	; (8008a2c <_kill_r+0x20>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	f7f9 fbd1 	bl	80021c0 <_kill>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d102      	bne.n	8008a28 <_kill_r+0x1c>
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	b103      	cbz	r3, 8008a28 <_kill_r+0x1c>
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	bd38      	pop	{r3, r4, r5, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200048d8 	.word	0x200048d8

08008a30 <_getpid_r>:
 8008a30:	f7f9 bbbe 	b.w	80021b0 <_getpid>

08008a34 <_init>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr

08008a40 <_fini>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	bf00      	nop
 8008a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	469e      	mov	lr, r3
 8008a4a:	4770      	bx	lr
=======
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20004180 	.word	0x20004180
 8006818:	20004188 	.word	0x20004188

0800681c <srand>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4b10      	ldr	r3, [pc, #64]	; (8006860 <srand+0x44>)
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006824:	4604      	mov	r4, r0
 8006826:	b9b3      	cbnz	r3, 8006856 <srand+0x3a>
 8006828:	2018      	movs	r0, #24
 800682a:	f000 fab3 	bl	8006d94 <malloc>
 800682e:	4602      	mov	r2, r0
 8006830:	6328      	str	r0, [r5, #48]	; 0x30
 8006832:	b920      	cbnz	r0, 800683e <srand+0x22>
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <srand+0x48>)
 8006836:	480c      	ldr	r0, [pc, #48]	; (8006868 <srand+0x4c>)
 8006838:	2146      	movs	r1, #70	; 0x46
 800683a:	f000 fa41 	bl	8006cc0 <__assert_func>
 800683e:	490b      	ldr	r1, [pc, #44]	; (800686c <srand+0x50>)
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <srand+0x54>)
 8006842:	e9c0 1300 	strd	r1, r3, [r0]
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <srand+0x58>)
 8006848:	6083      	str	r3, [r0, #8]
 800684a:	230b      	movs	r3, #11
 800684c:	8183      	strh	r3, [r0, #12]
 800684e:	2100      	movs	r1, #0
 8006850:	2001      	movs	r0, #1
 8006852:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006856:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006858:	2200      	movs	r2, #0
 800685a:	611c      	str	r4, [r3, #16]
 800685c:	615a      	str	r2, [r3, #20]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20000068 	.word	0x20000068
 8006864:	08007a30 	.word	0x08007a30
 8006868:	08007a47 	.word	0x08007a47
 800686c:	abcd330e 	.word	0xabcd330e
 8006870:	e66d1234 	.word	0xe66d1234
 8006874:	0005deec 	.word	0x0005deec

08006878 <rand>:
 8006878:	4b16      	ldr	r3, [pc, #88]	; (80068d4 <rand+0x5c>)
 800687a:	b510      	push	{r4, lr}
 800687c:	681c      	ldr	r4, [r3, #0]
 800687e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006880:	b9b3      	cbnz	r3, 80068b0 <rand+0x38>
 8006882:	2018      	movs	r0, #24
 8006884:	f000 fa86 	bl	8006d94 <malloc>
 8006888:	4602      	mov	r2, r0
 800688a:	6320      	str	r0, [r4, #48]	; 0x30
 800688c:	b920      	cbnz	r0, 8006898 <rand+0x20>
 800688e:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <rand+0x60>)
 8006890:	4812      	ldr	r0, [pc, #72]	; (80068dc <rand+0x64>)
 8006892:	2152      	movs	r1, #82	; 0x52
 8006894:	f000 fa14 	bl	8006cc0 <__assert_func>
 8006898:	4911      	ldr	r1, [pc, #68]	; (80068e0 <rand+0x68>)
 800689a:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <rand+0x6c>)
 800689c:	e9c0 1300 	strd	r1, r3, [r0]
 80068a0:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <rand+0x70>)
 80068a2:	6083      	str	r3, [r0, #8]
 80068a4:	230b      	movs	r3, #11
 80068a6:	8183      	strh	r3, [r0, #12]
 80068a8:	2100      	movs	r1, #0
 80068aa:	2001      	movs	r0, #1
 80068ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80068b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068b2:	480e      	ldr	r0, [pc, #56]	; (80068ec <rand+0x74>)
 80068b4:	690b      	ldr	r3, [r1, #16]
 80068b6:	694c      	ldr	r4, [r1, #20]
 80068b8:	4a0d      	ldr	r2, [pc, #52]	; (80068f0 <rand+0x78>)
 80068ba:	4358      	muls	r0, r3
 80068bc:	fb02 0004 	mla	r0, r2, r4, r0
 80068c0:	fba3 3202 	umull	r3, r2, r3, r2
 80068c4:	3301      	adds	r3, #1
 80068c6:	eb40 0002 	adc.w	r0, r0, r2
 80068ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80068ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80068d2:	bd10      	pop	{r4, pc}
 80068d4:	20000068 	.word	0x20000068
 80068d8:	08007a30 	.word	0x08007a30
 80068dc:	08007a47 	.word	0x08007a47
 80068e0:	abcd330e 	.word	0xabcd330e
 80068e4:	e66d1234 	.word	0xe66d1234
 80068e8:	0005deec 	.word	0x0005deec
 80068ec:	5851f42d 	.word	0x5851f42d
 80068f0:	4c957f2d 	.word	0x4c957f2d

080068f4 <std>:
 80068f4:	2300      	movs	r3, #0
 80068f6:	b510      	push	{r4, lr}
 80068f8:	4604      	mov	r4, r0
 80068fa:	e9c0 3300 	strd	r3, r3, [r0]
 80068fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006902:	6083      	str	r3, [r0, #8]
 8006904:	8181      	strh	r1, [r0, #12]
 8006906:	6643      	str	r3, [r0, #100]	; 0x64
 8006908:	81c2      	strh	r2, [r0, #14]
 800690a:	6183      	str	r3, [r0, #24]
 800690c:	4619      	mov	r1, r3
 800690e:	2208      	movs	r2, #8
 8006910:	305c      	adds	r0, #92	; 0x5c
 8006912:	f000 f8f4 	bl	8006afe <memset>
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <std+0x58>)
 8006918:	6263      	str	r3, [r4, #36]	; 0x24
 800691a:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <std+0x5c>)
 800691c:	62a3      	str	r3, [r4, #40]	; 0x28
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <std+0x60>)
 8006920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <std+0x64>)
 8006924:	6323      	str	r3, [r4, #48]	; 0x30
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <std+0x68>)
 8006928:	6224      	str	r4, [r4, #32]
 800692a:	429c      	cmp	r4, r3
 800692c:	d006      	beq.n	800693c <std+0x48>
 800692e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006932:	4294      	cmp	r4, r2
 8006934:	d002      	beq.n	800693c <std+0x48>
 8006936:	33d0      	adds	r3, #208	; 0xd0
 8006938:	429c      	cmp	r4, r3
 800693a:	d105      	bne.n	8006948 <std+0x54>
 800693c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006944:	f000 b9aa 	b.w	8006c9c <__retarget_lock_init_recursive>
 8006948:	bd10      	pop	{r4, pc}
 800694a:	bf00      	nop
 800694c:	08006a79 	.word	0x08006a79
 8006950:	08006a9b 	.word	0x08006a9b
 8006954:	08006ad3 	.word	0x08006ad3
 8006958:	08006af7 	.word	0x08006af7
 800695c:	200041a0 	.word	0x200041a0

08006960 <stdio_exit_handler>:
 8006960:	4a02      	ldr	r2, [pc, #8]	; (800696c <stdio_exit_handler+0xc>)
 8006962:	4903      	ldr	r1, [pc, #12]	; (8006970 <stdio_exit_handler+0x10>)
 8006964:	4803      	ldr	r0, [pc, #12]	; (8006974 <stdio_exit_handler+0x14>)
 8006966:	f000 b869 	b.w	8006a3c <_fwalk_sglue>
 800696a:	bf00      	nop
 800696c:	20000010 	.word	0x20000010
 8006970:	08007009 	.word	0x08007009
 8006974:	2000001c 	.word	0x2000001c

08006978 <cleanup_stdio>:
 8006978:	6841      	ldr	r1, [r0, #4]
 800697a:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <cleanup_stdio+0x34>)
 800697c:	4299      	cmp	r1, r3
 800697e:	b510      	push	{r4, lr}
 8006980:	4604      	mov	r4, r0
 8006982:	d001      	beq.n	8006988 <cleanup_stdio+0x10>
 8006984:	f000 fb40 	bl	8007008 <_fflush_r>
 8006988:	68a1      	ldr	r1, [r4, #8]
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <cleanup_stdio+0x38>)
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <cleanup_stdio+0x1e>
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fb39 	bl	8007008 <_fflush_r>
 8006996:	68e1      	ldr	r1, [r4, #12]
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <cleanup_stdio+0x3c>)
 800699a:	4299      	cmp	r1, r3
 800699c:	d004      	beq.n	80069a8 <cleanup_stdio+0x30>
 800699e:	4620      	mov	r0, r4
 80069a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a4:	f000 bb30 	b.w	8007008 <_fflush_r>
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	bf00      	nop
 80069ac:	200041a0 	.word	0x200041a0
 80069b0:	20004208 	.word	0x20004208
 80069b4:	20004270 	.word	0x20004270

080069b8 <global_stdio_init.part.0>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <global_stdio_init.part.0+0x30>)
 80069bc:	4c0b      	ldr	r4, [pc, #44]	; (80069ec <global_stdio_init.part.0+0x34>)
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <global_stdio_init.part.0+0x38>)
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	4620      	mov	r0, r4
 80069c4:	2200      	movs	r2, #0
 80069c6:	2104      	movs	r1, #4
 80069c8:	f7ff ff94 	bl	80068f4 <std>
 80069cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069d0:	2201      	movs	r2, #1
 80069d2:	2109      	movs	r1, #9
 80069d4:	f7ff ff8e 	bl	80068f4 <std>
 80069d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80069dc:	2202      	movs	r2, #2
 80069de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e2:	2112      	movs	r1, #18
 80069e4:	f7ff bf86 	b.w	80068f4 <std>
 80069e8:	200042d8 	.word	0x200042d8
 80069ec:	200041a0 	.word	0x200041a0
 80069f0:	08006961 	.word	0x08006961

080069f4 <__sfp_lock_acquire>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__sfp_lock_acquire+0x8>)
 80069f6:	f000 b952 	b.w	8006c9e <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	200042e1 	.word	0x200042e1

08006a00 <__sfp_lock_release>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__sfp_lock_release+0x8>)
 8006a02:	f000 b94d 	b.w	8006ca0 <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	200042e1 	.word	0x200042e1

08006a0c <__sinit>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4604      	mov	r4, r0
 8006a10:	f7ff fff0 	bl	80069f4 <__sfp_lock_acquire>
 8006a14:	6a23      	ldr	r3, [r4, #32]
 8006a16:	b11b      	cbz	r3, 8006a20 <__sinit+0x14>
 8006a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1c:	f7ff bff0 	b.w	8006a00 <__sfp_lock_release>
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <__sinit+0x28>)
 8006a22:	6223      	str	r3, [r4, #32]
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <__sinit+0x2c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f5      	bne.n	8006a18 <__sinit+0xc>
 8006a2c:	f7ff ffc4 	bl	80069b8 <global_stdio_init.part.0>
 8006a30:	e7f2      	b.n	8006a18 <__sinit+0xc>
 8006a32:	bf00      	nop
 8006a34:	08006979 	.word	0x08006979
 8006a38:	200042d8 	.word	0x200042d8

08006a3c <_fwalk_sglue>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	4607      	mov	r7, r0
 8006a42:	4688      	mov	r8, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	2600      	movs	r6, #0
 8006a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a50:	d505      	bpl.n	8006a5e <_fwalk_sglue+0x22>
 8006a52:	6824      	ldr	r4, [r4, #0]
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	d1f7      	bne.n	8006a48 <_fwalk_sglue+0xc>
 8006a58:	4630      	mov	r0, r6
 8006a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5e:	89ab      	ldrh	r3, [r5, #12]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d907      	bls.n	8006a74 <_fwalk_sglue+0x38>
 8006a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	d003      	beq.n	8006a74 <_fwalk_sglue+0x38>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4638      	mov	r0, r7
 8006a70:	47c0      	blx	r8
 8006a72:	4306      	orrs	r6, r0
 8006a74:	3568      	adds	r5, #104	; 0x68
 8006a76:	e7e9      	b.n	8006a4c <_fwalk_sglue+0x10>

08006a78 <__sread>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a80:	f000 f8be 	bl	8006c00 <_read_r>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	bfab      	itete	ge
 8006a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a8c:	181b      	addge	r3, r3, r0
 8006a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a92:	bfac      	ite	ge
 8006a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a96:	81a3      	strhlt	r3, [r4, #12]
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <__swrite>:
 8006a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	898b      	ldrh	r3, [r1, #12]
 8006aa2:	05db      	lsls	r3, r3, #23
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	d505      	bpl.n	8006ab8 <__swrite+0x1e>
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f000 f892 	bl	8006bdc <_lseek_r>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	4628      	mov	r0, r5
 8006aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	f000 b8a9 	b.w	8006c24 <_write_r>

08006ad2 <__sseek>:
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 f87f 	bl	8006bdc <_lseek_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	bf15      	itete	ne
 8006ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aee:	81a3      	strheq	r3, [r4, #12]
 8006af0:	bf18      	it	ne
 8006af2:	81a3      	strhne	r3, [r4, #12]
 8006af4:	bd10      	pop	{r4, pc}

08006af6 <__sclose>:
 8006af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afa:	f000 b809 	b.w	8006b10 <_close_r>

08006afe <memset>:
 8006afe:	4402      	add	r2, r0
 8006b00:	4603      	mov	r3, r0
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d100      	bne.n	8006b08 <memset+0xa>
 8006b06:	4770      	bx	lr
 8006b08:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0c:	e7f9      	b.n	8006b02 <memset+0x4>
	...

08006b10 <_close_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d06      	ldr	r5, [pc, #24]	; (8006b2c <_close_r+0x1c>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	f7fb f909 	bl	8001d32 <_close>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_close_r+0x1a>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_close_r+0x1a>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	200042dc 	.word	0x200042dc

08006b30 <_reclaim_reent>:
 8006b30:	4b29      	ldr	r3, [pc, #164]	; (8006bd8 <_reclaim_reent+0xa8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4283      	cmp	r3, r0
 8006b36:	b570      	push	{r4, r5, r6, lr}
 8006b38:	4604      	mov	r4, r0
 8006b3a:	d04b      	beq.n	8006bd4 <_reclaim_reent+0xa4>
 8006b3c:	69c3      	ldr	r3, [r0, #28]
 8006b3e:	b143      	cbz	r3, 8006b52 <_reclaim_reent+0x22>
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d144      	bne.n	8006bd0 <_reclaim_reent+0xa0>
 8006b46:	69e3      	ldr	r3, [r4, #28]
 8006b48:	6819      	ldr	r1, [r3, #0]
 8006b4a:	b111      	cbz	r1, 8006b52 <_reclaim_reent+0x22>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 f8d5 	bl	8006cfc <_free_r>
 8006b52:	6961      	ldr	r1, [r4, #20]
 8006b54:	b111      	cbz	r1, 8006b5c <_reclaim_reent+0x2c>
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 f8d0 	bl	8006cfc <_free_r>
 8006b5c:	69e1      	ldr	r1, [r4, #28]
 8006b5e:	b111      	cbz	r1, 8006b66 <_reclaim_reent+0x36>
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 f8cb 	bl	8006cfc <_free_r>
 8006b66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006b68:	b111      	cbz	r1, 8006b70 <_reclaim_reent+0x40>
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f8c6 	bl	8006cfc <_free_r>
 8006b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b72:	b111      	cbz	r1, 8006b7a <_reclaim_reent+0x4a>
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 f8c1 	bl	8006cfc <_free_r>
 8006b7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b7c:	b111      	cbz	r1, 8006b84 <_reclaim_reent+0x54>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 f8bc 	bl	8006cfc <_free_r>
 8006b84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b86:	b111      	cbz	r1, 8006b8e <_reclaim_reent+0x5e>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 f8b7 	bl	8006cfc <_free_r>
 8006b8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006b90:	b111      	cbz	r1, 8006b98 <_reclaim_reent+0x68>
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 f8b2 	bl	8006cfc <_free_r>
 8006b98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006b9a:	b111      	cbz	r1, 8006ba2 <_reclaim_reent+0x72>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f8ad 	bl	8006cfc <_free_r>
 8006ba2:	6a23      	ldr	r3, [r4, #32]
 8006ba4:	b1b3      	cbz	r3, 8006bd4 <_reclaim_reent+0xa4>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bac:	4718      	bx	r3
 8006bae:	5949      	ldr	r1, [r1, r5]
 8006bb0:	b941      	cbnz	r1, 8006bc4 <_reclaim_reent+0x94>
 8006bb2:	3504      	adds	r5, #4
 8006bb4:	69e3      	ldr	r3, [r4, #28]
 8006bb6:	2d80      	cmp	r5, #128	; 0x80
 8006bb8:	68d9      	ldr	r1, [r3, #12]
 8006bba:	d1f8      	bne.n	8006bae <_reclaim_reent+0x7e>
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 f89d 	bl	8006cfc <_free_r>
 8006bc2:	e7c0      	b.n	8006b46 <_reclaim_reent+0x16>
 8006bc4:	680e      	ldr	r6, [r1, #0]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 f898 	bl	8006cfc <_free_r>
 8006bcc:	4631      	mov	r1, r6
 8006bce:	e7ef      	b.n	8006bb0 <_reclaim_reent+0x80>
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	e7ef      	b.n	8006bb4 <_reclaim_reent+0x84>
 8006bd4:	bd70      	pop	{r4, r5, r6, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000068 	.word	0x20000068

08006bdc <_lseek_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d07      	ldr	r5, [pc, #28]	; (8006bfc <_lseek_r+0x20>)
 8006be0:	4604      	mov	r4, r0
 8006be2:	4608      	mov	r0, r1
 8006be4:	4611      	mov	r1, r2
 8006be6:	2200      	movs	r2, #0
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f7fb f8c8 	bl	8001d80 <_lseek>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_lseek_r+0x1e>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_lseek_r+0x1e>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	200042dc 	.word	0x200042dc

08006c00 <_read_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d07      	ldr	r5, [pc, #28]	; (8006c20 <_read_r+0x20>)
 8006c04:	4604      	mov	r4, r0
 8006c06:	4608      	mov	r0, r1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f7fb f856 	bl	8001cc0 <_read>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_read_r+0x1e>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_read_r+0x1e>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	200042dc 	.word	0x200042dc

08006c24 <_write_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4d07      	ldr	r5, [pc, #28]	; (8006c44 <_write_r+0x20>)
 8006c28:	4604      	mov	r4, r0
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	602a      	str	r2, [r5, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f7fb f861 	bl	8001cfa <_write>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_write_r+0x1e>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_write_r+0x1e>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	200042dc 	.word	0x200042dc

08006c48 <__errno>:
 8006c48:	4b01      	ldr	r3, [pc, #4]	; (8006c50 <__errno+0x8>)
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000068 	.word	0x20000068

08006c54 <__libc_init_array>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	4d0d      	ldr	r5, [pc, #52]	; (8006c8c <__libc_init_array+0x38>)
 8006c58:	4c0d      	ldr	r4, [pc, #52]	; (8006c90 <__libc_init_array+0x3c>)
 8006c5a:	1b64      	subs	r4, r4, r5
 8006c5c:	10a4      	asrs	r4, r4, #2
 8006c5e:	2600      	movs	r6, #0
 8006c60:	42a6      	cmp	r6, r4
 8006c62:	d109      	bne.n	8006c78 <__libc_init_array+0x24>
 8006c64:	4d0b      	ldr	r5, [pc, #44]	; (8006c94 <__libc_init_array+0x40>)
 8006c66:	4c0c      	ldr	r4, [pc, #48]	; (8006c98 <__libc_init_array+0x44>)
 8006c68:	f000 fe50 	bl	800790c <_init>
 8006c6c:	1b64      	subs	r4, r4, r5
 8006c6e:	10a4      	asrs	r4, r4, #2
 8006c70:	2600      	movs	r6, #0
 8006c72:	42a6      	cmp	r6, r4
 8006c74:	d105      	bne.n	8006c82 <__libc_init_array+0x2e>
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7c:	4798      	blx	r3
 8006c7e:	3601      	adds	r6, #1
 8006c80:	e7ee      	b.n	8006c60 <__libc_init_array+0xc>
 8006c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c86:	4798      	blx	r3
 8006c88:	3601      	adds	r6, #1
 8006c8a:	e7f2      	b.n	8006c72 <__libc_init_array+0x1e>
 8006c8c:	08007b18 	.word	0x08007b18
 8006c90:	08007b18 	.word	0x08007b18
 8006c94:	08007b18 	.word	0x08007b18
 8006c98:	08007b1c 	.word	0x08007b1c

08006c9c <__retarget_lock_init_recursive>:
 8006c9c:	4770      	bx	lr

08006c9e <__retarget_lock_acquire_recursive>:
 8006c9e:	4770      	bx	lr

08006ca0 <__retarget_lock_release_recursive>:
 8006ca0:	4770      	bx	lr

08006ca2 <memcpy>:
 8006ca2:	440a      	add	r2, r1
 8006ca4:	4291      	cmp	r1, r2
 8006ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006caa:	d100      	bne.n	8006cae <memcpy+0xc>
 8006cac:	4770      	bx	lr
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cb8:	4291      	cmp	r1, r2
 8006cba:	d1f9      	bne.n	8006cb0 <memcpy+0xe>
 8006cbc:	bd10      	pop	{r4, pc}
	...

08006cc0 <__assert_func>:
 8006cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cc2:	4614      	mov	r4, r2
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <__assert_func+0x2c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4605      	mov	r5, r0
 8006ccc:	68d8      	ldr	r0, [r3, #12]
 8006cce:	b14c      	cbz	r4, 8006ce4 <__assert_func+0x24>
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <__assert_func+0x30>)
 8006cd2:	9100      	str	r1, [sp, #0]
 8006cd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cd8:	4906      	ldr	r1, [pc, #24]	; (8006cf4 <__assert_func+0x34>)
 8006cda:	462b      	mov	r3, r5
 8006cdc:	f000 f9bc 	bl	8007058 <fiprintf>
 8006ce0:	f000 f9dc 	bl	800709c <abort>
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <__assert_func+0x38>)
 8006ce6:	461c      	mov	r4, r3
 8006ce8:	e7f3      	b.n	8006cd2 <__assert_func+0x12>
 8006cea:	bf00      	nop
 8006cec:	20000068 	.word	0x20000068
 8006cf0:	08007a9f 	.word	0x08007a9f
 8006cf4:	08007aac 	.word	0x08007aac
 8006cf8:	08007ada 	.word	0x08007ada

08006cfc <_free_r>:
 8006cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	d044      	beq.n	8006d8c <_free_r+0x90>
 8006d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d06:	9001      	str	r0, [sp, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d0e:	bfb8      	it	lt
 8006d10:	18e4      	addlt	r4, r4, r3
 8006d12:	f000 f8e7 	bl	8006ee4 <__malloc_lock>
 8006d16:	4a1e      	ldr	r2, [pc, #120]	; (8006d90 <_free_r+0x94>)
 8006d18:	9801      	ldr	r0, [sp, #4]
 8006d1a:	6813      	ldr	r3, [r2, #0]
 8006d1c:	b933      	cbnz	r3, 8006d2c <_free_r+0x30>
 8006d1e:	6063      	str	r3, [r4, #4]
 8006d20:	6014      	str	r4, [r2, #0]
 8006d22:	b003      	add	sp, #12
 8006d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d28:	f000 b8e2 	b.w	8006ef0 <__malloc_unlock>
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d908      	bls.n	8006d42 <_free_r+0x46>
 8006d30:	6825      	ldr	r5, [r4, #0]
 8006d32:	1961      	adds	r1, r4, r5
 8006d34:	428b      	cmp	r3, r1
 8006d36:	bf01      	itttt	eq
 8006d38:	6819      	ldreq	r1, [r3, #0]
 8006d3a:	685b      	ldreq	r3, [r3, #4]
 8006d3c:	1949      	addeq	r1, r1, r5
 8006d3e:	6021      	streq	r1, [r4, #0]
 8006d40:	e7ed      	b.n	8006d1e <_free_r+0x22>
 8006d42:	461a      	mov	r2, r3
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	b10b      	cbz	r3, 8006d4c <_free_r+0x50>
 8006d48:	42a3      	cmp	r3, r4
 8006d4a:	d9fa      	bls.n	8006d42 <_free_r+0x46>
 8006d4c:	6811      	ldr	r1, [r2, #0]
 8006d4e:	1855      	adds	r5, r2, r1
 8006d50:	42a5      	cmp	r5, r4
 8006d52:	d10b      	bne.n	8006d6c <_free_r+0x70>
 8006d54:	6824      	ldr	r4, [r4, #0]
 8006d56:	4421      	add	r1, r4
 8006d58:	1854      	adds	r4, r2, r1
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	d1e0      	bne.n	8006d22 <_free_r+0x26>
 8006d60:	681c      	ldr	r4, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	6053      	str	r3, [r2, #4]
 8006d66:	440c      	add	r4, r1
 8006d68:	6014      	str	r4, [r2, #0]
 8006d6a:	e7da      	b.n	8006d22 <_free_r+0x26>
 8006d6c:	d902      	bls.n	8006d74 <_free_r+0x78>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	6003      	str	r3, [r0, #0]
 8006d72:	e7d6      	b.n	8006d22 <_free_r+0x26>
 8006d74:	6825      	ldr	r5, [r4, #0]
 8006d76:	1961      	adds	r1, r4, r5
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf04      	itt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	bf04      	itt	eq
 8006d84:	1949      	addeq	r1, r1, r5
 8006d86:	6021      	streq	r1, [r4, #0]
 8006d88:	6054      	str	r4, [r2, #4]
 8006d8a:	e7ca      	b.n	8006d22 <_free_r+0x26>
 8006d8c:	b003      	add	sp, #12
 8006d8e:	bd30      	pop	{r4, r5, pc}
 8006d90:	200042e4 	.word	0x200042e4

08006d94 <malloc>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <malloc+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f000 b823 	b.w	8006de4 <_malloc_r>
 8006d9e:	bf00      	nop
 8006da0:	20000068 	.word	0x20000068

08006da4 <sbrk_aligned>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4e0e      	ldr	r6, [pc, #56]	; (8006de0 <sbrk_aligned+0x3c>)
 8006da8:	460c      	mov	r4, r1
 8006daa:	6831      	ldr	r1, [r6, #0]
 8006dac:	4605      	mov	r5, r0
 8006dae:	b911      	cbnz	r1, 8006db6 <sbrk_aligned+0x12>
 8006db0:	f000 f964 	bl	800707c <_sbrk_r>
 8006db4:	6030      	str	r0, [r6, #0]
 8006db6:	4621      	mov	r1, r4
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 f95f 	bl	800707c <_sbrk_r>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d00a      	beq.n	8006dd8 <sbrk_aligned+0x34>
 8006dc2:	1cc4      	adds	r4, r0, #3
 8006dc4:	f024 0403 	bic.w	r4, r4, #3
 8006dc8:	42a0      	cmp	r0, r4
 8006dca:	d007      	beq.n	8006ddc <sbrk_aligned+0x38>
 8006dcc:	1a21      	subs	r1, r4, r0
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 f954 	bl	800707c <_sbrk_r>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d101      	bne.n	8006ddc <sbrk_aligned+0x38>
 8006dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ddc:	4620      	mov	r0, r4
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	200042e8 	.word	0x200042e8

08006de4 <_malloc_r>:
 8006de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de8:	1ccd      	adds	r5, r1, #3
 8006dea:	f025 0503 	bic.w	r5, r5, #3
 8006dee:	3508      	adds	r5, #8
 8006df0:	2d0c      	cmp	r5, #12
 8006df2:	bf38      	it	cc
 8006df4:	250c      	movcc	r5, #12
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	4607      	mov	r7, r0
 8006dfa:	db01      	blt.n	8006e00 <_malloc_r+0x1c>
 8006dfc:	42a9      	cmp	r1, r5
 8006dfe:	d905      	bls.n	8006e0c <_malloc_r+0x28>
 8006e00:	230c      	movs	r3, #12
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	2600      	movs	r6, #0
 8006e06:	4630      	mov	r0, r6
 8006e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ee0 <_malloc_r+0xfc>
 8006e10:	f000 f868 	bl	8006ee4 <__malloc_lock>
 8006e14:	f8d8 3000 	ldr.w	r3, [r8]
 8006e18:	461c      	mov	r4, r3
 8006e1a:	bb5c      	cbnz	r4, 8006e74 <_malloc_r+0x90>
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7ff ffc0 	bl	8006da4 <sbrk_aligned>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	4604      	mov	r4, r0
 8006e28:	d155      	bne.n	8006ed6 <_malloc_r+0xf2>
 8006e2a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e2e:	4626      	mov	r6, r4
 8006e30:	2e00      	cmp	r6, #0
 8006e32:	d145      	bne.n	8006ec0 <_malloc_r+0xdc>
 8006e34:	2c00      	cmp	r4, #0
 8006e36:	d048      	beq.n	8006eca <_malloc_r+0xe6>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	eb04 0903 	add.w	r9, r4, r3
 8006e42:	f000 f91b 	bl	800707c <_sbrk_r>
 8006e46:	4581      	cmp	r9, r0
 8006e48:	d13f      	bne.n	8006eca <_malloc_r+0xe6>
 8006e4a:	6821      	ldr	r1, [r4, #0]
 8006e4c:	1a6d      	subs	r5, r5, r1
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4638      	mov	r0, r7
 8006e52:	f7ff ffa7 	bl	8006da4 <sbrk_aligned>
 8006e56:	3001      	adds	r0, #1
 8006e58:	d037      	beq.n	8006eca <_malloc_r+0xe6>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	442b      	add	r3, r5
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	f8d8 3000 	ldr.w	r3, [r8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d038      	beq.n	8006eda <_malloc_r+0xf6>
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	42a2      	cmp	r2, r4
 8006e6c:	d12b      	bne.n	8006ec6 <_malloc_r+0xe2>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	e00f      	b.n	8006e94 <_malloc_r+0xb0>
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	1b52      	subs	r2, r2, r5
 8006e78:	d41f      	bmi.n	8006eba <_malloc_r+0xd6>
 8006e7a:	2a0b      	cmp	r2, #11
 8006e7c:	d917      	bls.n	8006eae <_malloc_r+0xca>
 8006e7e:	1961      	adds	r1, r4, r5
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	6025      	str	r5, [r4, #0]
 8006e84:	bf18      	it	ne
 8006e86:	6059      	strne	r1, [r3, #4]
 8006e88:	6863      	ldr	r3, [r4, #4]
 8006e8a:	bf08      	it	eq
 8006e8c:	f8c8 1000 	streq.w	r1, [r8]
 8006e90:	5162      	str	r2, [r4, r5]
 8006e92:	604b      	str	r3, [r1, #4]
 8006e94:	4638      	mov	r0, r7
 8006e96:	f104 060b 	add.w	r6, r4, #11
 8006e9a:	f000 f829 	bl	8006ef0 <__malloc_unlock>
 8006e9e:	f026 0607 	bic.w	r6, r6, #7
 8006ea2:	1d23      	adds	r3, r4, #4
 8006ea4:	1af2      	subs	r2, r6, r3
 8006ea6:	d0ae      	beq.n	8006e06 <_malloc_r+0x22>
 8006ea8:	1b9b      	subs	r3, r3, r6
 8006eaa:	50a3      	str	r3, [r4, r2]
 8006eac:	e7ab      	b.n	8006e06 <_malloc_r+0x22>
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6862      	ldr	r2, [r4, #4]
 8006eb2:	d1dd      	bne.n	8006e70 <_malloc_r+0x8c>
 8006eb4:	f8c8 2000 	str.w	r2, [r8]
 8006eb8:	e7ec      	b.n	8006e94 <_malloc_r+0xb0>
 8006eba:	4623      	mov	r3, r4
 8006ebc:	6864      	ldr	r4, [r4, #4]
 8006ebe:	e7ac      	b.n	8006e1a <_malloc_r+0x36>
 8006ec0:	4634      	mov	r4, r6
 8006ec2:	6876      	ldr	r6, [r6, #4]
 8006ec4:	e7b4      	b.n	8006e30 <_malloc_r+0x4c>
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	e7cc      	b.n	8006e64 <_malloc_r+0x80>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f000 f80e 	bl	8006ef0 <__malloc_unlock>
 8006ed4:	e797      	b.n	8006e06 <_malloc_r+0x22>
 8006ed6:	6025      	str	r5, [r4, #0]
 8006ed8:	e7dc      	b.n	8006e94 <_malloc_r+0xb0>
 8006eda:	605b      	str	r3, [r3, #4]
 8006edc:	deff      	udf	#255	; 0xff
 8006ede:	bf00      	nop
 8006ee0:	200042e4 	.word	0x200042e4

08006ee4 <__malloc_lock>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__malloc_lock+0x8>)
 8006ee6:	f7ff beda 	b.w	8006c9e <__retarget_lock_acquire_recursive>
 8006eea:	bf00      	nop
 8006eec:	200042e0 	.word	0x200042e0

08006ef0 <__malloc_unlock>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__malloc_unlock+0x8>)
 8006ef2:	f7ff bed5 	b.w	8006ca0 <__retarget_lock_release_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	200042e0 	.word	0x200042e0

08006efc <__sflush_r>:
 8006efc:	898a      	ldrh	r2, [r1, #12]
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	4605      	mov	r5, r0
 8006f04:	0710      	lsls	r0, r2, #28
 8006f06:	460c      	mov	r4, r1
 8006f08:	d458      	bmi.n	8006fbc <__sflush_r+0xc0>
 8006f0a:	684b      	ldr	r3, [r1, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dc05      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dc02      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f1e:	2e00      	cmp	r6, #0
 8006f20:	d0f9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f22:	2300      	movs	r3, #0
 8006f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f28:	682f      	ldr	r7, [r5, #0]
 8006f2a:	6a21      	ldr	r1, [r4, #32]
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	d032      	beq.n	8006f96 <__sflush_r+0x9a>
 8006f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	075a      	lsls	r2, r3, #29
 8006f36:	d505      	bpl.n	8006f44 <__sflush_r+0x48>
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	1ac0      	subs	r0, r0, r3
 8006f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f3e:	b10b      	cbz	r3, 8006f44 <__sflush_r+0x48>
 8006f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f42:	1ac0      	subs	r0, r0, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	4602      	mov	r2, r0
 8006f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f4a:	6a21      	ldr	r1, [r4, #32]
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b0      	blx	r6
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	d106      	bne.n	8006f64 <__sflush_r+0x68>
 8006f56:	6829      	ldr	r1, [r5, #0]
 8006f58:	291d      	cmp	r1, #29
 8006f5a:	d82b      	bhi.n	8006fb4 <__sflush_r+0xb8>
 8006f5c:	4a29      	ldr	r2, [pc, #164]	; (8007004 <__sflush_r+0x108>)
 8006f5e:	410a      	asrs	r2, r1
 8006f60:	07d6      	lsls	r6, r2, #31
 8006f62:	d427      	bmi.n	8006fb4 <__sflush_r+0xb8>
 8006f64:	2200      	movs	r2, #0
 8006f66:	6062      	str	r2, [r4, #4]
 8006f68:	04d9      	lsls	r1, r3, #19
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	d504      	bpl.n	8006f7a <__sflush_r+0x7e>
 8006f70:	1c42      	adds	r2, r0, #1
 8006f72:	d101      	bne.n	8006f78 <__sflush_r+0x7c>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b903      	cbnz	r3, 8006f7a <__sflush_r+0x7e>
 8006f78:	6560      	str	r0, [r4, #84]	; 0x54
 8006f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f7c:	602f      	str	r7, [r5, #0]
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	d0c9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f86:	4299      	cmp	r1, r3
 8006f88:	d002      	beq.n	8006f90 <__sflush_r+0x94>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7ff feb6 	bl	8006cfc <_free_r>
 8006f90:	2000      	movs	r0, #0
 8006f92:	6360      	str	r0, [r4, #52]	; 0x34
 8006f94:	e7c0      	b.n	8006f18 <__sflush_r+0x1c>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b0      	blx	r6
 8006f9c:	1c41      	adds	r1, r0, #1
 8006f9e:	d1c8      	bne.n	8006f32 <__sflush_r+0x36>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0c5      	beq.n	8006f32 <__sflush_r+0x36>
 8006fa6:	2b1d      	cmp	r3, #29
 8006fa8:	d001      	beq.n	8006fae <__sflush_r+0xb2>
 8006faa:	2b16      	cmp	r3, #22
 8006fac:	d101      	bne.n	8006fb2 <__sflush_r+0xb6>
 8006fae:	602f      	str	r7, [r5, #0]
 8006fb0:	e7b1      	b.n	8006f16 <__sflush_r+0x1a>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	e7ad      	b.n	8006f18 <__sflush_r+0x1c>
 8006fbc:	690f      	ldr	r7, [r1, #16]
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d0a9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006fc2:	0793      	lsls	r3, r2, #30
 8006fc4:	680e      	ldr	r6, [r1, #0]
 8006fc6:	bf08      	it	eq
 8006fc8:	694b      	ldreq	r3, [r1, #20]
 8006fca:	600f      	str	r7, [r1, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	2300      	movne	r3, #0
 8006fd0:	eba6 0807 	sub.w	r8, r6, r7
 8006fd4:	608b      	str	r3, [r1, #8]
 8006fd6:	f1b8 0f00 	cmp.w	r8, #0
 8006fda:	dd9c      	ble.n	8006f16 <__sflush_r+0x1a>
 8006fdc:	6a21      	ldr	r1, [r4, #32]
 8006fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fe0:	4643      	mov	r3, r8
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b0      	blx	r6
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dc06      	bgt.n	8006ffa <__sflush_r+0xfe>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e78e      	b.n	8006f18 <__sflush_r+0x1c>
 8006ffa:	4407      	add	r7, r0
 8006ffc:	eba8 0800 	sub.w	r8, r8, r0
 8007000:	e7e9      	b.n	8006fd6 <__sflush_r+0xda>
 8007002:	bf00      	nop
 8007004:	dfbffffe 	.word	0xdfbffffe

08007008 <_fflush_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b913      	cbnz	r3, 8007018 <_fflush_r+0x10>
 8007012:	2500      	movs	r5, #0
 8007014:	4628      	mov	r0, r5
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	b118      	cbz	r0, 8007022 <_fflush_r+0x1a>
 800701a:	6a03      	ldr	r3, [r0, #32]
 800701c:	b90b      	cbnz	r3, 8007022 <_fflush_r+0x1a>
 800701e:	f7ff fcf5 	bl	8006a0c <__sinit>
 8007022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f3      	beq.n	8007012 <_fflush_r+0xa>
 800702a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800702c:	07d0      	lsls	r0, r2, #31
 800702e:	d404      	bmi.n	800703a <_fflush_r+0x32>
 8007030:	0599      	lsls	r1, r3, #22
 8007032:	d402      	bmi.n	800703a <_fflush_r+0x32>
 8007034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007036:	f7ff fe32 	bl	8006c9e <__retarget_lock_acquire_recursive>
 800703a:	4628      	mov	r0, r5
 800703c:	4621      	mov	r1, r4
 800703e:	f7ff ff5d 	bl	8006efc <__sflush_r>
 8007042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007044:	07da      	lsls	r2, r3, #31
 8007046:	4605      	mov	r5, r0
 8007048:	d4e4      	bmi.n	8007014 <_fflush_r+0xc>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	059b      	lsls	r3, r3, #22
 800704e:	d4e1      	bmi.n	8007014 <_fflush_r+0xc>
 8007050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007052:	f7ff fe25 	bl	8006ca0 <__retarget_lock_release_recursive>
 8007056:	e7dd      	b.n	8007014 <_fflush_r+0xc>

08007058 <fiprintf>:
 8007058:	b40e      	push	{r1, r2, r3}
 800705a:	b503      	push	{r0, r1, lr}
 800705c:	4601      	mov	r1, r0
 800705e:	ab03      	add	r3, sp, #12
 8007060:	4805      	ldr	r0, [pc, #20]	; (8007078 <fiprintf+0x20>)
 8007062:	f853 2b04 	ldr.w	r2, [r3], #4
 8007066:	6800      	ldr	r0, [r0, #0]
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	f000 f847 	bl	80070fc <_vfiprintf_r>
 800706e:	b002      	add	sp, #8
 8007070:	f85d eb04 	ldr.w	lr, [sp], #4
 8007074:	b003      	add	sp, #12
 8007076:	4770      	bx	lr
 8007078:	20000068 	.word	0x20000068

0800707c <_sbrk_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d06      	ldr	r5, [pc, #24]	; (8007098 <_sbrk_r+0x1c>)
 8007080:	2300      	movs	r3, #0
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7fa fe88 	bl	8001d9c <_sbrk>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_sbrk_r+0x1a>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_sbrk_r+0x1a>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	200042dc 	.word	0x200042dc

0800709c <abort>:
 800709c:	b508      	push	{r3, lr}
 800709e:	2006      	movs	r0, #6
 80070a0:	f000 fb94 	bl	80077cc <raise>
 80070a4:	2001      	movs	r0, #1
 80070a6:	f7fa fe01 	bl	8001cac <_exit>

080070aa <__sfputc_r>:
 80070aa:	6893      	ldr	r3, [r2, #8]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	b410      	push	{r4}
 80070b2:	6093      	str	r3, [r2, #8]
 80070b4:	da08      	bge.n	80070c8 <__sfputc_r+0x1e>
 80070b6:	6994      	ldr	r4, [r2, #24]
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	db01      	blt.n	80070c0 <__sfputc_r+0x16>
 80070bc:	290a      	cmp	r1, #10
 80070be:	d103      	bne.n	80070c8 <__sfputc_r+0x1e>
 80070c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070c4:	f000 bac4 	b.w	8007650 <__swbuf_r>
 80070c8:	6813      	ldr	r3, [r2, #0]
 80070ca:	1c58      	adds	r0, r3, #1
 80070cc:	6010      	str	r0, [r2, #0]
 80070ce:	7019      	strb	r1, [r3, #0]
 80070d0:	4608      	mov	r0, r1
 80070d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <__sfputs_r>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	4606      	mov	r6, r0
 80070dc:	460f      	mov	r7, r1
 80070de:	4614      	mov	r4, r2
 80070e0:	18d5      	adds	r5, r2, r3
 80070e2:	42ac      	cmp	r4, r5
 80070e4:	d101      	bne.n	80070ea <__sfputs_r+0x12>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e007      	b.n	80070fa <__sfputs_r+0x22>
 80070ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ee:	463a      	mov	r2, r7
 80070f0:	4630      	mov	r0, r6
 80070f2:	f7ff ffda 	bl	80070aa <__sfputc_r>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	d1f3      	bne.n	80070e2 <__sfputs_r+0xa>
 80070fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070fc <_vfiprintf_r>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	460d      	mov	r5, r1
 8007102:	b09d      	sub	sp, #116	; 0x74
 8007104:	4614      	mov	r4, r2
 8007106:	4698      	mov	r8, r3
 8007108:	4606      	mov	r6, r0
 800710a:	b118      	cbz	r0, 8007114 <_vfiprintf_r+0x18>
 800710c:	6a03      	ldr	r3, [r0, #32]
 800710e:	b90b      	cbnz	r3, 8007114 <_vfiprintf_r+0x18>
 8007110:	f7ff fc7c 	bl	8006a0c <__sinit>
 8007114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007116:	07d9      	lsls	r1, r3, #31
 8007118:	d405      	bmi.n	8007126 <_vfiprintf_r+0x2a>
 800711a:	89ab      	ldrh	r3, [r5, #12]
 800711c:	059a      	lsls	r2, r3, #22
 800711e:	d402      	bmi.n	8007126 <_vfiprintf_r+0x2a>
 8007120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007122:	f7ff fdbc 	bl	8006c9e <__retarget_lock_acquire_recursive>
 8007126:	89ab      	ldrh	r3, [r5, #12]
 8007128:	071b      	lsls	r3, r3, #28
 800712a:	d501      	bpl.n	8007130 <_vfiprintf_r+0x34>
 800712c:	692b      	ldr	r3, [r5, #16]
 800712e:	b99b      	cbnz	r3, 8007158 <_vfiprintf_r+0x5c>
 8007130:	4629      	mov	r1, r5
 8007132:	4630      	mov	r0, r6
 8007134:	f000 faca 	bl	80076cc <__swsetup_r>
 8007138:	b170      	cbz	r0, 8007158 <_vfiprintf_r+0x5c>
 800713a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713c:	07dc      	lsls	r4, r3, #31
 800713e:	d504      	bpl.n	800714a <_vfiprintf_r+0x4e>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	b01d      	add	sp, #116	; 0x74
 8007146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	0598      	lsls	r0, r3, #22
 800714e:	d4f7      	bmi.n	8007140 <_vfiprintf_r+0x44>
 8007150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007152:	f7ff fda5 	bl	8006ca0 <__retarget_lock_release_recursive>
 8007156:	e7f3      	b.n	8007140 <_vfiprintf_r+0x44>
 8007158:	2300      	movs	r3, #0
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
 800715c:	2320      	movs	r3, #32
 800715e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007162:	f8cd 800c 	str.w	r8, [sp, #12]
 8007166:	2330      	movs	r3, #48	; 0x30
 8007168:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800731c <_vfiprintf_r+0x220>
 800716c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007170:	f04f 0901 	mov.w	r9, #1
 8007174:	4623      	mov	r3, r4
 8007176:	469a      	mov	sl, r3
 8007178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800717c:	b10a      	cbz	r2, 8007182 <_vfiprintf_r+0x86>
 800717e:	2a25      	cmp	r2, #37	; 0x25
 8007180:	d1f9      	bne.n	8007176 <_vfiprintf_r+0x7a>
 8007182:	ebba 0b04 	subs.w	fp, sl, r4
 8007186:	d00b      	beq.n	80071a0 <_vfiprintf_r+0xa4>
 8007188:	465b      	mov	r3, fp
 800718a:	4622      	mov	r2, r4
 800718c:	4629      	mov	r1, r5
 800718e:	4630      	mov	r0, r6
 8007190:	f7ff ffa2 	bl	80070d8 <__sfputs_r>
 8007194:	3001      	adds	r0, #1
 8007196:	f000 80a9 	beq.w	80072ec <_vfiprintf_r+0x1f0>
 800719a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800719c:	445a      	add	r2, fp
 800719e:	9209      	str	r2, [sp, #36]	; 0x24
 80071a0:	f89a 3000 	ldrb.w	r3, [sl]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80a1 	beq.w	80072ec <_vfiprintf_r+0x1f0>
 80071aa:	2300      	movs	r3, #0
 80071ac:	f04f 32ff 	mov.w	r2, #4294967295
 80071b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071b4:	f10a 0a01 	add.w	sl, sl, #1
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	9307      	str	r3, [sp, #28]
 80071bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071c0:	931a      	str	r3, [sp, #104]	; 0x68
 80071c2:	4654      	mov	r4, sl
 80071c4:	2205      	movs	r2, #5
 80071c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ca:	4854      	ldr	r0, [pc, #336]	; (800731c <_vfiprintf_r+0x220>)
 80071cc:	f7f9 f800 	bl	80001d0 <memchr>
 80071d0:	9a04      	ldr	r2, [sp, #16]
 80071d2:	b9d8      	cbnz	r0, 800720c <_vfiprintf_r+0x110>
 80071d4:	06d1      	lsls	r1, r2, #27
 80071d6:	bf44      	itt	mi
 80071d8:	2320      	movmi	r3, #32
 80071da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071de:	0713      	lsls	r3, r2, #28
 80071e0:	bf44      	itt	mi
 80071e2:	232b      	movmi	r3, #43	; 0x2b
 80071e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e8:	f89a 3000 	ldrb.w	r3, [sl]
 80071ec:	2b2a      	cmp	r3, #42	; 0x2a
 80071ee:	d015      	beq.n	800721c <_vfiprintf_r+0x120>
 80071f0:	9a07      	ldr	r2, [sp, #28]
 80071f2:	4654      	mov	r4, sl
 80071f4:	2000      	movs	r0, #0
 80071f6:	f04f 0c0a 	mov.w	ip, #10
 80071fa:	4621      	mov	r1, r4
 80071fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007200:	3b30      	subs	r3, #48	; 0x30
 8007202:	2b09      	cmp	r3, #9
 8007204:	d94d      	bls.n	80072a2 <_vfiprintf_r+0x1a6>
 8007206:	b1b0      	cbz	r0, 8007236 <_vfiprintf_r+0x13a>
 8007208:	9207      	str	r2, [sp, #28]
 800720a:	e014      	b.n	8007236 <_vfiprintf_r+0x13a>
 800720c:	eba0 0308 	sub.w	r3, r0, r8
 8007210:	fa09 f303 	lsl.w	r3, r9, r3
 8007214:	4313      	orrs	r3, r2
 8007216:	9304      	str	r3, [sp, #16]
 8007218:	46a2      	mov	sl, r4
 800721a:	e7d2      	b.n	80071c2 <_vfiprintf_r+0xc6>
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	1d19      	adds	r1, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	9103      	str	r1, [sp, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	bfbb      	ittet	lt
 8007228:	425b      	neglt	r3, r3
 800722a:	f042 0202 	orrlt.w	r2, r2, #2
 800722e:	9307      	strge	r3, [sp, #28]
 8007230:	9307      	strlt	r3, [sp, #28]
 8007232:	bfb8      	it	lt
 8007234:	9204      	strlt	r2, [sp, #16]
 8007236:	7823      	ldrb	r3, [r4, #0]
 8007238:	2b2e      	cmp	r3, #46	; 0x2e
 800723a:	d10c      	bne.n	8007256 <_vfiprintf_r+0x15a>
 800723c:	7863      	ldrb	r3, [r4, #1]
 800723e:	2b2a      	cmp	r3, #42	; 0x2a
 8007240:	d134      	bne.n	80072ac <_vfiprintf_r+0x1b0>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	1d1a      	adds	r2, r3, #4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	9203      	str	r2, [sp, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfb8      	it	lt
 800724e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007252:	3402      	adds	r4, #2
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800732c <_vfiprintf_r+0x230>
 800725a:	7821      	ldrb	r1, [r4, #0]
 800725c:	2203      	movs	r2, #3
 800725e:	4650      	mov	r0, sl
 8007260:	f7f8 ffb6 	bl	80001d0 <memchr>
 8007264:	b138      	cbz	r0, 8007276 <_vfiprintf_r+0x17a>
 8007266:	9b04      	ldr	r3, [sp, #16]
 8007268:	eba0 000a 	sub.w	r0, r0, sl
 800726c:	2240      	movs	r2, #64	; 0x40
 800726e:	4082      	lsls	r2, r0
 8007270:	4313      	orrs	r3, r2
 8007272:	3401      	adds	r4, #1
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4829      	ldr	r0, [pc, #164]	; (8007320 <_vfiprintf_r+0x224>)
 800727c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007280:	2206      	movs	r2, #6
 8007282:	f7f8 ffa5 	bl	80001d0 <memchr>
 8007286:	2800      	cmp	r0, #0
 8007288:	d03f      	beq.n	800730a <_vfiprintf_r+0x20e>
 800728a:	4b26      	ldr	r3, [pc, #152]	; (8007324 <_vfiprintf_r+0x228>)
 800728c:	bb1b      	cbnz	r3, 80072d6 <_vfiprintf_r+0x1da>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	3307      	adds	r3, #7
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	3308      	adds	r3, #8
 8007298:	9303      	str	r3, [sp, #12]
 800729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729c:	443b      	add	r3, r7
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	e768      	b.n	8007174 <_vfiprintf_r+0x78>
 80072a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a6:	460c      	mov	r4, r1
 80072a8:	2001      	movs	r0, #1
 80072aa:	e7a6      	b.n	80071fa <_vfiprintf_r+0xfe>
 80072ac:	2300      	movs	r3, #0
 80072ae:	3401      	adds	r4, #1
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	4619      	mov	r1, r3
 80072b4:	f04f 0c0a 	mov.w	ip, #10
 80072b8:	4620      	mov	r0, r4
 80072ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072be:	3a30      	subs	r2, #48	; 0x30
 80072c0:	2a09      	cmp	r2, #9
 80072c2:	d903      	bls.n	80072cc <_vfiprintf_r+0x1d0>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0c6      	beq.n	8007256 <_vfiprintf_r+0x15a>
 80072c8:	9105      	str	r1, [sp, #20]
 80072ca:	e7c4      	b.n	8007256 <_vfiprintf_r+0x15a>
 80072cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80072d0:	4604      	mov	r4, r0
 80072d2:	2301      	movs	r3, #1
 80072d4:	e7f0      	b.n	80072b8 <_vfiprintf_r+0x1bc>
 80072d6:	ab03      	add	r3, sp, #12
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	462a      	mov	r2, r5
 80072dc:	4b12      	ldr	r3, [pc, #72]	; (8007328 <_vfiprintf_r+0x22c>)
 80072de:	a904      	add	r1, sp, #16
 80072e0:	4630      	mov	r0, r6
 80072e2:	f3af 8000 	nop.w
 80072e6:	4607      	mov	r7, r0
 80072e8:	1c78      	adds	r0, r7, #1
 80072ea:	d1d6      	bne.n	800729a <_vfiprintf_r+0x19e>
 80072ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ee:	07d9      	lsls	r1, r3, #31
 80072f0:	d405      	bmi.n	80072fe <_vfiprintf_r+0x202>
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	059a      	lsls	r2, r3, #22
 80072f6:	d402      	bmi.n	80072fe <_vfiprintf_r+0x202>
 80072f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fa:	f7ff fcd1 	bl	8006ca0 <__retarget_lock_release_recursive>
 80072fe:	89ab      	ldrh	r3, [r5, #12]
 8007300:	065b      	lsls	r3, r3, #25
 8007302:	f53f af1d 	bmi.w	8007140 <_vfiprintf_r+0x44>
 8007306:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007308:	e71c      	b.n	8007144 <_vfiprintf_r+0x48>
 800730a:	ab03      	add	r3, sp, #12
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	462a      	mov	r2, r5
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <_vfiprintf_r+0x22c>)
 8007312:	a904      	add	r1, sp, #16
 8007314:	4630      	mov	r0, r6
 8007316:	f000 f879 	bl	800740c <_printf_i>
 800731a:	e7e4      	b.n	80072e6 <_vfiprintf_r+0x1ea>
 800731c:	08007adb 	.word	0x08007adb
 8007320:	08007ae5 	.word	0x08007ae5
 8007324:	00000000 	.word	0x00000000
 8007328:	080070d9 	.word	0x080070d9
 800732c:	08007ae1 	.word	0x08007ae1

08007330 <_printf_common>:
 8007330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	4616      	mov	r6, r2
 8007336:	4699      	mov	r9, r3
 8007338:	688a      	ldr	r2, [r1, #8]
 800733a:	690b      	ldr	r3, [r1, #16]
 800733c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007340:	4293      	cmp	r3, r2
 8007342:	bfb8      	it	lt
 8007344:	4613      	movlt	r3, r2
 8007346:	6033      	str	r3, [r6, #0]
 8007348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800734c:	4607      	mov	r7, r0
 800734e:	460c      	mov	r4, r1
 8007350:	b10a      	cbz	r2, 8007356 <_printf_common+0x26>
 8007352:	3301      	adds	r3, #1
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	0699      	lsls	r1, r3, #26
 800735a:	bf42      	ittt	mi
 800735c:	6833      	ldrmi	r3, [r6, #0]
 800735e:	3302      	addmi	r3, #2
 8007360:	6033      	strmi	r3, [r6, #0]
 8007362:	6825      	ldr	r5, [r4, #0]
 8007364:	f015 0506 	ands.w	r5, r5, #6
 8007368:	d106      	bne.n	8007378 <_printf_common+0x48>
 800736a:	f104 0a19 	add.w	sl, r4, #25
 800736e:	68e3      	ldr	r3, [r4, #12]
 8007370:	6832      	ldr	r2, [r6, #0]
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	42ab      	cmp	r3, r5
 8007376:	dc26      	bgt.n	80073c6 <_printf_common+0x96>
 8007378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800737c:	1e13      	subs	r3, r2, #0
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	bf18      	it	ne
 8007382:	2301      	movne	r3, #1
 8007384:	0692      	lsls	r2, r2, #26
 8007386:	d42b      	bmi.n	80073e0 <_printf_common+0xb0>
 8007388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800738c:	4649      	mov	r1, r9
 800738e:	4638      	mov	r0, r7
 8007390:	47c0      	blx	r8
 8007392:	3001      	adds	r0, #1
 8007394:	d01e      	beq.n	80073d4 <_printf_common+0xa4>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	6922      	ldr	r2, [r4, #16]
 800739a:	f003 0306 	and.w	r3, r3, #6
 800739e:	2b04      	cmp	r3, #4
 80073a0:	bf02      	ittt	eq
 80073a2:	68e5      	ldreq	r5, [r4, #12]
 80073a4:	6833      	ldreq	r3, [r6, #0]
 80073a6:	1aed      	subeq	r5, r5, r3
 80073a8:	68a3      	ldr	r3, [r4, #8]
 80073aa:	bf0c      	ite	eq
 80073ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b0:	2500      	movne	r5, #0
 80073b2:	4293      	cmp	r3, r2
 80073b4:	bfc4      	itt	gt
 80073b6:	1a9b      	subgt	r3, r3, r2
 80073b8:	18ed      	addgt	r5, r5, r3
 80073ba:	2600      	movs	r6, #0
 80073bc:	341a      	adds	r4, #26
 80073be:	42b5      	cmp	r5, r6
 80073c0:	d11a      	bne.n	80073f8 <_printf_common+0xc8>
 80073c2:	2000      	movs	r0, #0
 80073c4:	e008      	b.n	80073d8 <_printf_common+0xa8>
 80073c6:	2301      	movs	r3, #1
 80073c8:	4652      	mov	r2, sl
 80073ca:	4649      	mov	r1, r9
 80073cc:	4638      	mov	r0, r7
 80073ce:	47c0      	blx	r8
 80073d0:	3001      	adds	r0, #1
 80073d2:	d103      	bne.n	80073dc <_printf_common+0xac>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073dc:	3501      	adds	r5, #1
 80073de:	e7c6      	b.n	800736e <_printf_common+0x3e>
 80073e0:	18e1      	adds	r1, r4, r3
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	2030      	movs	r0, #48	; 0x30
 80073e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073ea:	4422      	add	r2, r4
 80073ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073f4:	3302      	adds	r3, #2
 80073f6:	e7c7      	b.n	8007388 <_printf_common+0x58>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4622      	mov	r2, r4
 80073fc:	4649      	mov	r1, r9
 80073fe:	4638      	mov	r0, r7
 8007400:	47c0      	blx	r8
 8007402:	3001      	adds	r0, #1
 8007404:	d0e6      	beq.n	80073d4 <_printf_common+0xa4>
 8007406:	3601      	adds	r6, #1
 8007408:	e7d9      	b.n	80073be <_printf_common+0x8e>
	...

0800740c <_printf_i>:
 800740c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007410:	7e0f      	ldrb	r7, [r1, #24]
 8007412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007414:	2f78      	cmp	r7, #120	; 0x78
 8007416:	4691      	mov	r9, r2
 8007418:	4680      	mov	r8, r0
 800741a:	460c      	mov	r4, r1
 800741c:	469a      	mov	sl, r3
 800741e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007422:	d807      	bhi.n	8007434 <_printf_i+0x28>
 8007424:	2f62      	cmp	r7, #98	; 0x62
 8007426:	d80a      	bhi.n	800743e <_printf_i+0x32>
 8007428:	2f00      	cmp	r7, #0
 800742a:	f000 80d4 	beq.w	80075d6 <_printf_i+0x1ca>
 800742e:	2f58      	cmp	r7, #88	; 0x58
 8007430:	f000 80c0 	beq.w	80075b4 <_printf_i+0x1a8>
 8007434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800743c:	e03a      	b.n	80074b4 <_printf_i+0xa8>
 800743e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007442:	2b15      	cmp	r3, #21
 8007444:	d8f6      	bhi.n	8007434 <_printf_i+0x28>
 8007446:	a101      	add	r1, pc, #4	; (adr r1, 800744c <_printf_i+0x40>)
 8007448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800744c:	080074a5 	.word	0x080074a5
 8007450:	080074b9 	.word	0x080074b9
 8007454:	08007435 	.word	0x08007435
 8007458:	08007435 	.word	0x08007435
 800745c:	08007435 	.word	0x08007435
 8007460:	08007435 	.word	0x08007435
 8007464:	080074b9 	.word	0x080074b9
 8007468:	08007435 	.word	0x08007435
 800746c:	08007435 	.word	0x08007435
 8007470:	08007435 	.word	0x08007435
 8007474:	08007435 	.word	0x08007435
 8007478:	080075bd 	.word	0x080075bd
 800747c:	080074e5 	.word	0x080074e5
 8007480:	08007577 	.word	0x08007577
 8007484:	08007435 	.word	0x08007435
 8007488:	08007435 	.word	0x08007435
 800748c:	080075df 	.word	0x080075df
 8007490:	08007435 	.word	0x08007435
 8007494:	080074e5 	.word	0x080074e5
 8007498:	08007435 	.word	0x08007435
 800749c:	08007435 	.word	0x08007435
 80074a0:	0800757f 	.word	0x0800757f
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	1d1a      	adds	r2, r3, #4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	602a      	str	r2, [r5, #0]
 80074ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074b4:	2301      	movs	r3, #1
 80074b6:	e09f      	b.n	80075f8 <_printf_i+0x1ec>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	0607      	lsls	r7, r0, #24
 80074be:	f103 0104 	add.w	r1, r3, #4
 80074c2:	6029      	str	r1, [r5, #0]
 80074c4:	d501      	bpl.n	80074ca <_printf_i+0xbe>
 80074c6:	681e      	ldr	r6, [r3, #0]
 80074c8:	e003      	b.n	80074d2 <_printf_i+0xc6>
 80074ca:	0646      	lsls	r6, r0, #25
 80074cc:	d5fb      	bpl.n	80074c6 <_printf_i+0xba>
 80074ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	da03      	bge.n	80074de <_printf_i+0xd2>
 80074d6:	232d      	movs	r3, #45	; 0x2d
 80074d8:	4276      	negs	r6, r6
 80074da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074de:	485a      	ldr	r0, [pc, #360]	; (8007648 <_printf_i+0x23c>)
 80074e0:	230a      	movs	r3, #10
 80074e2:	e012      	b.n	800750a <_printf_i+0xfe>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	1d19      	adds	r1, r3, #4
 80074ea:	6029      	str	r1, [r5, #0]
 80074ec:	0605      	lsls	r5, r0, #24
 80074ee:	d501      	bpl.n	80074f4 <_printf_i+0xe8>
 80074f0:	681e      	ldr	r6, [r3, #0]
 80074f2:	e002      	b.n	80074fa <_printf_i+0xee>
 80074f4:	0641      	lsls	r1, r0, #25
 80074f6:	d5fb      	bpl.n	80074f0 <_printf_i+0xe4>
 80074f8:	881e      	ldrh	r6, [r3, #0]
 80074fa:	4853      	ldr	r0, [pc, #332]	; (8007648 <_printf_i+0x23c>)
 80074fc:	2f6f      	cmp	r7, #111	; 0x6f
 80074fe:	bf0c      	ite	eq
 8007500:	2308      	moveq	r3, #8
 8007502:	230a      	movne	r3, #10
 8007504:	2100      	movs	r1, #0
 8007506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800750a:	6865      	ldr	r5, [r4, #4]
 800750c:	60a5      	str	r5, [r4, #8]
 800750e:	2d00      	cmp	r5, #0
 8007510:	bfa2      	ittt	ge
 8007512:	6821      	ldrge	r1, [r4, #0]
 8007514:	f021 0104 	bicge.w	r1, r1, #4
 8007518:	6021      	strge	r1, [r4, #0]
 800751a:	b90e      	cbnz	r6, 8007520 <_printf_i+0x114>
 800751c:	2d00      	cmp	r5, #0
 800751e:	d04b      	beq.n	80075b8 <_printf_i+0x1ac>
 8007520:	4615      	mov	r5, r2
 8007522:	fbb6 f1f3 	udiv	r1, r6, r3
 8007526:	fb03 6711 	mls	r7, r3, r1, r6
 800752a:	5dc7      	ldrb	r7, [r0, r7]
 800752c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007530:	4637      	mov	r7, r6
 8007532:	42bb      	cmp	r3, r7
 8007534:	460e      	mov	r6, r1
 8007536:	d9f4      	bls.n	8007522 <_printf_i+0x116>
 8007538:	2b08      	cmp	r3, #8
 800753a:	d10b      	bne.n	8007554 <_printf_i+0x148>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	07de      	lsls	r6, r3, #31
 8007540:	d508      	bpl.n	8007554 <_printf_i+0x148>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6861      	ldr	r1, [r4, #4]
 8007546:	4299      	cmp	r1, r3
 8007548:	bfde      	ittt	le
 800754a:	2330      	movle	r3, #48	; 0x30
 800754c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007550:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007554:	1b52      	subs	r2, r2, r5
 8007556:	6122      	str	r2, [r4, #16]
 8007558:	f8cd a000 	str.w	sl, [sp]
 800755c:	464b      	mov	r3, r9
 800755e:	aa03      	add	r2, sp, #12
 8007560:	4621      	mov	r1, r4
 8007562:	4640      	mov	r0, r8
 8007564:	f7ff fee4 	bl	8007330 <_printf_common>
 8007568:	3001      	adds	r0, #1
 800756a:	d14a      	bne.n	8007602 <_printf_i+0x1f6>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	b004      	add	sp, #16
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	f043 0320 	orr.w	r3, r3, #32
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	4833      	ldr	r0, [pc, #204]	; (800764c <_printf_i+0x240>)
 8007580:	2778      	movs	r7, #120	; 0x78
 8007582:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	6829      	ldr	r1, [r5, #0]
 800758a:	061f      	lsls	r7, r3, #24
 800758c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007590:	d402      	bmi.n	8007598 <_printf_i+0x18c>
 8007592:	065f      	lsls	r7, r3, #25
 8007594:	bf48      	it	mi
 8007596:	b2b6      	uxthmi	r6, r6
 8007598:	07df      	lsls	r7, r3, #31
 800759a:	bf48      	it	mi
 800759c:	f043 0320 	orrmi.w	r3, r3, #32
 80075a0:	6029      	str	r1, [r5, #0]
 80075a2:	bf48      	it	mi
 80075a4:	6023      	strmi	r3, [r4, #0]
 80075a6:	b91e      	cbnz	r6, 80075b0 <_printf_i+0x1a4>
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	f023 0320 	bic.w	r3, r3, #32
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	2310      	movs	r3, #16
 80075b2:	e7a7      	b.n	8007504 <_printf_i+0xf8>
 80075b4:	4824      	ldr	r0, [pc, #144]	; (8007648 <_printf_i+0x23c>)
 80075b6:	e7e4      	b.n	8007582 <_printf_i+0x176>
 80075b8:	4615      	mov	r5, r2
 80075ba:	e7bd      	b.n	8007538 <_printf_i+0x12c>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	6826      	ldr	r6, [r4, #0]
 80075c0:	6961      	ldr	r1, [r4, #20]
 80075c2:	1d18      	adds	r0, r3, #4
 80075c4:	6028      	str	r0, [r5, #0]
 80075c6:	0635      	lsls	r5, r6, #24
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	d501      	bpl.n	80075d0 <_printf_i+0x1c4>
 80075cc:	6019      	str	r1, [r3, #0]
 80075ce:	e002      	b.n	80075d6 <_printf_i+0x1ca>
 80075d0:	0670      	lsls	r0, r6, #25
 80075d2:	d5fb      	bpl.n	80075cc <_printf_i+0x1c0>
 80075d4:	8019      	strh	r1, [r3, #0]
 80075d6:	2300      	movs	r3, #0
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	4615      	mov	r5, r2
 80075dc:	e7bc      	b.n	8007558 <_printf_i+0x14c>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	1d1a      	adds	r2, r3, #4
 80075e2:	602a      	str	r2, [r5, #0]
 80075e4:	681d      	ldr	r5, [r3, #0]
 80075e6:	6862      	ldr	r2, [r4, #4]
 80075e8:	2100      	movs	r1, #0
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7f8 fdf0 	bl	80001d0 <memchr>
 80075f0:	b108      	cbz	r0, 80075f6 <_printf_i+0x1ea>
 80075f2:	1b40      	subs	r0, r0, r5
 80075f4:	6060      	str	r0, [r4, #4]
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	2300      	movs	r3, #0
 80075fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007600:	e7aa      	b.n	8007558 <_printf_i+0x14c>
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	462a      	mov	r2, r5
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d0ad      	beq.n	800756c <_printf_i+0x160>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	079b      	lsls	r3, r3, #30
 8007614:	d413      	bmi.n	800763e <_printf_i+0x232>
 8007616:	68e0      	ldr	r0, [r4, #12]
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	4298      	cmp	r0, r3
 800761c:	bfb8      	it	lt
 800761e:	4618      	movlt	r0, r3
 8007620:	e7a6      	b.n	8007570 <_printf_i+0x164>
 8007622:	2301      	movs	r3, #1
 8007624:	4632      	mov	r2, r6
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	47d0      	blx	sl
 800762c:	3001      	adds	r0, #1
 800762e:	d09d      	beq.n	800756c <_printf_i+0x160>
 8007630:	3501      	adds	r5, #1
 8007632:	68e3      	ldr	r3, [r4, #12]
 8007634:	9903      	ldr	r1, [sp, #12]
 8007636:	1a5b      	subs	r3, r3, r1
 8007638:	42ab      	cmp	r3, r5
 800763a:	dcf2      	bgt.n	8007622 <_printf_i+0x216>
 800763c:	e7eb      	b.n	8007616 <_printf_i+0x20a>
 800763e:	2500      	movs	r5, #0
 8007640:	f104 0619 	add.w	r6, r4, #25
 8007644:	e7f5      	b.n	8007632 <_printf_i+0x226>
 8007646:	bf00      	nop
 8007648:	08007aec 	.word	0x08007aec
 800764c:	08007afd 	.word	0x08007afd

08007650 <__swbuf_r>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	460e      	mov	r6, r1
 8007654:	4614      	mov	r4, r2
 8007656:	4605      	mov	r5, r0
 8007658:	b118      	cbz	r0, 8007662 <__swbuf_r+0x12>
 800765a:	6a03      	ldr	r3, [r0, #32]
 800765c:	b90b      	cbnz	r3, 8007662 <__swbuf_r+0x12>
 800765e:	f7ff f9d5 	bl	8006a0c <__sinit>
 8007662:	69a3      	ldr	r3, [r4, #24]
 8007664:	60a3      	str	r3, [r4, #8]
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	071a      	lsls	r2, r3, #28
 800766a:	d525      	bpl.n	80076b8 <__swbuf_r+0x68>
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	b31b      	cbz	r3, 80076b8 <__swbuf_r+0x68>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	6922      	ldr	r2, [r4, #16]
 8007674:	1a98      	subs	r0, r3, r2
 8007676:	6963      	ldr	r3, [r4, #20]
 8007678:	b2f6      	uxtb	r6, r6
 800767a:	4283      	cmp	r3, r0
 800767c:	4637      	mov	r7, r6
 800767e:	dc04      	bgt.n	800768a <__swbuf_r+0x3a>
 8007680:	4621      	mov	r1, r4
 8007682:	4628      	mov	r0, r5
 8007684:	f7ff fcc0 	bl	8007008 <_fflush_r>
 8007688:	b9e0      	cbnz	r0, 80076c4 <__swbuf_r+0x74>
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	3b01      	subs	r3, #1
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	6022      	str	r2, [r4, #0]
 8007696:	701e      	strb	r6, [r3, #0]
 8007698:	6962      	ldr	r2, [r4, #20]
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	429a      	cmp	r2, r3
 800769e:	d004      	beq.n	80076aa <__swbuf_r+0x5a>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	07db      	lsls	r3, r3, #31
 80076a4:	d506      	bpl.n	80076b4 <__swbuf_r+0x64>
 80076a6:	2e0a      	cmp	r6, #10
 80076a8:	d104      	bne.n	80076b4 <__swbuf_r+0x64>
 80076aa:	4621      	mov	r1, r4
 80076ac:	4628      	mov	r0, r5
 80076ae:	f7ff fcab 	bl	8007008 <_fflush_r>
 80076b2:	b938      	cbnz	r0, 80076c4 <__swbuf_r+0x74>
 80076b4:	4638      	mov	r0, r7
 80076b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b8:	4621      	mov	r1, r4
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 f806 	bl	80076cc <__swsetup_r>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d0d5      	beq.n	8007670 <__swbuf_r+0x20>
 80076c4:	f04f 37ff 	mov.w	r7, #4294967295
 80076c8:	e7f4      	b.n	80076b4 <__swbuf_r+0x64>
	...

080076cc <__swsetup_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4b2a      	ldr	r3, [pc, #168]	; (8007778 <__swsetup_r+0xac>)
 80076d0:	4605      	mov	r5, r0
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	460c      	mov	r4, r1
 80076d6:	b118      	cbz	r0, 80076e0 <__swsetup_r+0x14>
 80076d8:	6a03      	ldr	r3, [r0, #32]
 80076da:	b90b      	cbnz	r3, 80076e0 <__swsetup_r+0x14>
 80076dc:	f7ff f996 	bl	8006a0c <__sinit>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076e6:	0718      	lsls	r0, r3, #28
 80076e8:	d422      	bmi.n	8007730 <__swsetup_r+0x64>
 80076ea:	06d9      	lsls	r1, r3, #27
 80076ec:	d407      	bmi.n	80076fe <__swsetup_r+0x32>
 80076ee:	2309      	movs	r3, #9
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e034      	b.n	8007768 <__swsetup_r+0x9c>
 80076fe:	0758      	lsls	r0, r3, #29
 8007700:	d512      	bpl.n	8007728 <__swsetup_r+0x5c>
 8007702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007704:	b141      	cbz	r1, 8007718 <__swsetup_r+0x4c>
 8007706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800770a:	4299      	cmp	r1, r3
 800770c:	d002      	beq.n	8007714 <__swsetup_r+0x48>
 800770e:	4628      	mov	r0, r5
 8007710:	f7ff faf4 	bl	8006cfc <_free_r>
 8007714:	2300      	movs	r3, #0
 8007716:	6363      	str	r3, [r4, #52]	; 0x34
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	2300      	movs	r3, #0
 8007722:	6063      	str	r3, [r4, #4]
 8007724:	6923      	ldr	r3, [r4, #16]
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	f043 0308 	orr.w	r3, r3, #8
 800772e:	81a3      	strh	r3, [r4, #12]
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	b94b      	cbnz	r3, 8007748 <__swsetup_r+0x7c>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800773a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800773e:	d003      	beq.n	8007748 <__swsetup_r+0x7c>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f884 	bl	8007850 <__smakebuf_r>
 8007748:	89a0      	ldrh	r0, [r4, #12]
 800774a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800774e:	f010 0301 	ands.w	r3, r0, #1
 8007752:	d00a      	beq.n	800776a <__swsetup_r+0x9e>
 8007754:	2300      	movs	r3, #0
 8007756:	60a3      	str	r3, [r4, #8]
 8007758:	6963      	ldr	r3, [r4, #20]
 800775a:	425b      	negs	r3, r3
 800775c:	61a3      	str	r3, [r4, #24]
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	b943      	cbnz	r3, 8007774 <__swsetup_r+0xa8>
 8007762:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007766:	d1c4      	bne.n	80076f2 <__swsetup_r+0x26>
 8007768:	bd38      	pop	{r3, r4, r5, pc}
 800776a:	0781      	lsls	r1, r0, #30
 800776c:	bf58      	it	pl
 800776e:	6963      	ldrpl	r3, [r4, #20]
 8007770:	60a3      	str	r3, [r4, #8]
 8007772:	e7f4      	b.n	800775e <__swsetup_r+0x92>
 8007774:	2000      	movs	r0, #0
 8007776:	e7f7      	b.n	8007768 <__swsetup_r+0x9c>
 8007778:	20000068 	.word	0x20000068

0800777c <_raise_r>:
 800777c:	291f      	cmp	r1, #31
 800777e:	b538      	push	{r3, r4, r5, lr}
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	d904      	bls.n	8007790 <_raise_r+0x14>
 8007786:	2316      	movs	r3, #22
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007792:	b112      	cbz	r2, 800779a <_raise_r+0x1e>
 8007794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007798:	b94b      	cbnz	r3, 80077ae <_raise_r+0x32>
 800779a:	4620      	mov	r0, r4
 800779c:	f000 f830 	bl	8007800 <_getpid_r>
 80077a0:	462a      	mov	r2, r5
 80077a2:	4601      	mov	r1, r0
 80077a4:	4620      	mov	r0, r4
 80077a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077aa:	f000 b817 	b.w	80077dc <_kill_r>
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d00a      	beq.n	80077c8 <_raise_r+0x4c>
 80077b2:	1c59      	adds	r1, r3, #1
 80077b4:	d103      	bne.n	80077be <_raise_r+0x42>
 80077b6:	2316      	movs	r3, #22
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	2001      	movs	r0, #1
 80077bc:	e7e7      	b.n	800778e <_raise_r+0x12>
 80077be:	2400      	movs	r4, #0
 80077c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077c4:	4628      	mov	r0, r5
 80077c6:	4798      	blx	r3
 80077c8:	2000      	movs	r0, #0
 80077ca:	e7e0      	b.n	800778e <_raise_r+0x12>

080077cc <raise>:
 80077cc:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <raise+0xc>)
 80077ce:	4601      	mov	r1, r0
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	f7ff bfd3 	b.w	800777c <_raise_r>
 80077d6:	bf00      	nop
 80077d8:	20000068 	.word	0x20000068

080077dc <_kill_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d07      	ldr	r5, [pc, #28]	; (80077fc <_kill_r+0x20>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	602b      	str	r3, [r5, #0]
 80077ea:	f7fa fa4f 	bl	8001c8c <_kill>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d102      	bne.n	80077f8 <_kill_r+0x1c>
 80077f2:	682b      	ldr	r3, [r5, #0]
 80077f4:	b103      	cbz	r3, 80077f8 <_kill_r+0x1c>
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	bd38      	pop	{r3, r4, r5, pc}
 80077fa:	bf00      	nop
 80077fc:	200042dc 	.word	0x200042dc

08007800 <_getpid_r>:
 8007800:	f7fa ba3c 	b.w	8001c7c <_getpid>

08007804 <__swhatbuf_r>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	460c      	mov	r4, r1
 8007808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780c:	2900      	cmp	r1, #0
 800780e:	b096      	sub	sp, #88	; 0x58
 8007810:	4615      	mov	r5, r2
 8007812:	461e      	mov	r6, r3
 8007814:	da0d      	bge.n	8007832 <__swhatbuf_r+0x2e>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	f013 0f80 	tst.w	r3, #128	; 0x80
 800781c:	f04f 0100 	mov.w	r1, #0
 8007820:	bf0c      	ite	eq
 8007822:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007826:	2340      	movne	r3, #64	; 0x40
 8007828:	2000      	movs	r0, #0
 800782a:	6031      	str	r1, [r6, #0]
 800782c:	602b      	str	r3, [r5, #0]
 800782e:	b016      	add	sp, #88	; 0x58
 8007830:	bd70      	pop	{r4, r5, r6, pc}
 8007832:	466a      	mov	r2, sp
 8007834:	f000 f848 	bl	80078c8 <_fstat_r>
 8007838:	2800      	cmp	r0, #0
 800783a:	dbec      	blt.n	8007816 <__swhatbuf_r+0x12>
 800783c:	9901      	ldr	r1, [sp, #4]
 800783e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007842:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007846:	4259      	negs	r1, r3
 8007848:	4159      	adcs	r1, r3
 800784a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800784e:	e7eb      	b.n	8007828 <__swhatbuf_r+0x24>

08007850 <__smakebuf_r>:
 8007850:	898b      	ldrh	r3, [r1, #12]
 8007852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007854:	079d      	lsls	r5, r3, #30
 8007856:	4606      	mov	r6, r0
 8007858:	460c      	mov	r4, r1
 800785a:	d507      	bpl.n	800786c <__smakebuf_r+0x1c>
 800785c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	2301      	movs	r3, #1
 8007866:	6163      	str	r3, [r4, #20]
 8007868:	b002      	add	sp, #8
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	ab01      	add	r3, sp, #4
 800786e:	466a      	mov	r2, sp
 8007870:	f7ff ffc8 	bl	8007804 <__swhatbuf_r>
 8007874:	9900      	ldr	r1, [sp, #0]
 8007876:	4605      	mov	r5, r0
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff fab3 	bl	8006de4 <_malloc_r>
 800787e:	b948      	cbnz	r0, 8007894 <__smakebuf_r+0x44>
 8007880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007884:	059a      	lsls	r2, r3, #22
 8007886:	d4ef      	bmi.n	8007868 <__smakebuf_r+0x18>
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	e7e3      	b.n	800785c <__smakebuf_r+0xc>
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	6020      	str	r0, [r4, #0]
 8007898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	6163      	str	r3, [r4, #20]
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	6120      	str	r0, [r4, #16]
 80078a6:	b15b      	cbz	r3, 80078c0 <__smakebuf_r+0x70>
 80078a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ac:	4630      	mov	r0, r6
 80078ae:	f000 f81d 	bl	80078ec <_isatty_r>
 80078b2:	b128      	cbz	r0, 80078c0 <__smakebuf_r+0x70>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	f023 0303 	bic.w	r3, r3, #3
 80078ba:	f043 0301 	orr.w	r3, r3, #1
 80078be:	81a3      	strh	r3, [r4, #12]
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	431d      	orrs	r5, r3
 80078c4:	81a5      	strh	r5, [r4, #12]
 80078c6:	e7cf      	b.n	8007868 <__smakebuf_r+0x18>

080078c8 <_fstat_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	; (80078e8 <_fstat_r+0x20>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	f7fa fa38 	bl	8001d4a <_fstat>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d102      	bne.n	80078e4 <_fstat_r+0x1c>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	b103      	cbz	r3, 80078e4 <_fstat_r+0x1c>
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	bf00      	nop
 80078e8:	200042dc 	.word	0x200042dc

080078ec <_isatty_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d06      	ldr	r5, [pc, #24]	; (8007908 <_isatty_r+0x1c>)
 80078f0:	2300      	movs	r3, #0
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	f7fa fa37 	bl	8001d6a <_isatty>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_isatty_r+0x1a>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_isatty_r+0x1a>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	200042dc 	.word	0x200042dc

0800790c <_init>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr

08007918 <_fini>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr
>>>>>>> 742b37bb62b2272e285669427138db5e0a1d46f3
