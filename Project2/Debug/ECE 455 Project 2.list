
ECE 455 Project 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f8  080088f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080088f8  080088f8  000188f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008900  08008900  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008904  08008904  00018904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004ab4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ac4  20004ac4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b501  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f31  00000000  00000000  0003b584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019d8  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000141e  00000000  00000000  00040e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023bb1  00000000  00000000  000422ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002018d  00000000  00000000  00065e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da55c  00000000  00000000  00085fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006e68  00000000  00000000  00160548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001673b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008764 	.word	0x08008764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008764 	.word	0x08008764

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	20000080 	.word	0x20000080

08000500 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <vApplicationGetTimerTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <vApplicationGetTimerTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20000280 	.word	0x20000280
 8000530:	200002d4 	.word	0x200002d4

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b0cc      	sub	sp, #304	; 0x130
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fe71 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f94f 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 fa6d 	bl	8000a20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000546:	f000 f9b5 	bl	80008b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800054a:	f000 f9e1 	bl	8000910 <MX_I2S3_Init>
  MX_SPI1_Init();
 800054e:	f000 fa0f 	bl	8000970 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000552:	f000 fa43 	bl	80009dc <MX_USB_OTG_FS_HCD_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of active_queue_mutex */
  osMutexDef(active_queue_mutex);
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  active_queue_mutexHandle = osMutexCreate(osMutex(active_queue_mutex));
 8000562:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fb46 	bl	8005bf8 <osMutexCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a82      	ldr	r2, [pc, #520]	; (8000778 <main+0x244>)
 8000570:	6013      	str	r3, [r2, #0]

  /* definition and creation of completed_queue_mutex */
  osMutexDef(completed_queue_mutex);
 8000572:	2300      	movs	r3, #0
 8000574:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000578:	2300      	movs	r3, #0
 800057a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  completed_queue_mutexHandle = osMutexCreate(osMutex(completed_queue_mutex));
 800057e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fb38 	bl	8005bf8 <osMutexCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a7c      	ldr	r2, [pc, #496]	; (800077c <main+0x248>)
 800058c:	6013      	str	r3, [r2, #0]

  /* definition and creation of overdue_queue_mutex */
  osMutexDef(overdue_queue_mutex);
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000594:	2300      	movs	r3, #0
 8000596:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  overdue_queue_mutexHandle = osMutexCreate(osMutex(overdue_queue_mutex));
 800059a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fb2a 	bl	8005bf8 <osMutexCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a76      	ldr	r2, [pc, #472]	; (8000780 <main+0x24c>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of dds_task_queue_mutex */
  osMutexDef(dds_task_queue_mutex);
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  dds_task_queue_mutexHandle = osMutexCreate(osMutex(dds_task_queue_mutex));
 80005b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fb1c 	bl	8005bf8 <osMutexCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a70      	ldr	r2, [pc, #448]	; (8000784 <main+0x250>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of dds_control_timer */
  osTimerDef(dds_control_timer, dds_control_callback);
 80005c6:	4b70      	ldr	r3, [pc, #448]	; (8000788 <main+0x254>)
 80005c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80005cc:	2300      	movs	r3, #0
 80005ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  dds_control_timerHandle = osTimerCreate(osTimer(dds_control_timer), osTimerPeriodic, NULL);
 80005d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fad8 	bl	8005b90 <osTimerCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a6a      	ldr	r2, [pc, #424]	; (800078c <main+0x258>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of active_queue */
  osMessageQDef(active_queue, 16, DD_TASK_LIST*);
 80005e6:	4b6a      	ldr	r3, [pc, #424]	; (8000790 <main+0x25c>)
 80005e8:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 80005ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  active_queueHandle = osMessageCreate(osMessageQ(active_queue), NULL);
 80005f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 fb15 	bl	8005c28 <osMessageCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a64      	ldr	r2, [pc, #400]	; (8000794 <main+0x260>)
 8000602:	6013      	str	r3, [r2, #0]

  /* definition and creation of completed_queue */
  osMessageQDef(completed_queue, 16, DD_TASK_LIST*);
 8000604:	4b62      	ldr	r3, [pc, #392]	; (8000790 <main+0x25c>)
 8000606:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  completed_queueHandle = osMessageCreate(osMessageQ(completed_queue), NULL);
 8000610:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fb06 	bl	8005c28 <osMessageCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a5e      	ldr	r2, [pc, #376]	; (8000798 <main+0x264>)
 8000620:	6013      	str	r3, [r2, #0]

  /* definition and creation of overdue_queue */
  osMessageQDef(overdue_queue, 16, DD_TASK_LIST*);
 8000622:	4b5b      	ldr	r3, [pc, #364]	; (8000790 <main+0x25c>)
 8000624:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  overdue_queueHandle = osMessageCreate(osMessageQ(overdue_queue), NULL);
 800062e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f005 faf7 	bl	8005c28 <osMessageCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a57      	ldr	r2, [pc, #348]	; (800079c <main+0x268>)
 800063e:	6013      	str	r3, [r2, #0]

  /* definition and creation of dds_task_queue */
  osMessageQDef(dds_task_queue, 16, uint16_t);
 8000640:	4b57      	ldr	r3, [pc, #348]	; (80007a0 <main+0x26c>)
 8000642:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  dds_task_queueHandle = osMessageCreate(osMessageQ(dds_task_queue), NULL);
 800064c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fae8 	bl	8005c28 <osMessageCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a52      	ldr	r2, [pc, #328]	; (80007a4 <main+0x270>)
 800065c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800065e:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <main+0x274>)
 8000660:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000672:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f005 fa28 	bl	8005ace <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a4a      	ldr	r2, [pc, #296]	; (80007ac <main+0x278>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of deadline_driven */
  osThreadDef(deadline_driven, DeadlineDrivenScheduler, osPriorityHigh, 0, 128);
 8000684:	4b4a      	ldr	r3, [pc, #296]	; (80007b0 <main+0x27c>)
 8000686:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  deadline_drivenHandle = osThreadCreate(osThread(deadline_driven), NULL);
 8000698:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fa15 	bl	8005ace <osThreadCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a43      	ldr	r2, [pc, #268]	; (80007b4 <main+0x280>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_generator */
  osThreadDef(task_generator, TaskGenerator, osPriorityIdle, 0, 128);
 80006aa:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <main+0x284>)
 80006ac:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_generatorHandle = osThreadCreate(osThread(task_generator), NULL);
 80006be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f005 fa02 	bl	8005ace <osThreadCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a3b      	ldr	r2, [pc, #236]	; (80007bc <main+0x288>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of monitor */
  osThreadDef(monitor, Monitor, osPriorityIdle, 0, 128);
 80006d0:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <main+0x28c>)
 80006d2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  monitorHandle = osThreadCreate(osThread(monitor), NULL);
 80006e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 f9ef 	bl	8005ace <osThreadCreate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a34      	ldr	r2, [pc, #208]	; (80007c4 <main+0x290>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of red_light_task */
  osThreadDef(red_light_task, RedLightTask, osPriorityIdle, 0, 128);
 80006f6:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <main+0x294>)
 80006f8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  red_light_taskHandle = osThreadCreate(osThread(red_light_task), NULL);
 800070a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f005 f9dc 	bl	8005ace <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <main+0x298>)
 800071a:	6013      	str	r3, [r2, #0]

  /* definition and creation of amber_light_tas */
  osThreadDef(amber_light_tas, AmberLightTask, osPriorityIdle, 0, 128);
 800071c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000720:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <main+0x29c>)
 8000726:	461c      	mov	r4, r3
 8000728:	4615      	mov	r5, r2
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  amber_light_tasHandle = osThreadCreate(osThread(amber_light_tas), NULL);
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f005 f9c6 	bl	8005ace <osThreadCreate>
 8000742:	4603      	mov	r3, r0
 8000744:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <main+0x2a0>)
 8000746:	6013      	str	r3, [r2, #0]

  /* definition and creation of green_light_tas */
  osThreadDef(green_light_tas, GreenLightTask, osPriorityIdle, 0, 128);
 8000748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800074c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <main+0x2a4>)
 8000752:	461c      	mov	r4, r3
 8000754:	4615      	mov	r5, r2
 8000756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800075e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  green_light_tasHandle = osThreadCreate(osThread(green_light_tas), NULL);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f005 f9b1 	bl	8005ace <osThreadCreate>
 800076c:	4603      	mov	r3, r0
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <main+0x2a8>)
 8000770:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000772:	f005 f9a5 	bl	8005ac0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000776:	e7fe      	b.n	8000776 <main+0x242>
 8000778:	20000bd8 	.word	0x20000bd8
 800077c:	20000bdc 	.word	0x20000bdc
 8000780:	20000be0 	.word	0x20000be0
 8000784:	20000be4 	.word	0x20000be4
 8000788:	08000cdd 	.word	0x08000cdd
 800078c:	20000bd4 	.word	0x20000bd4
 8000790:	0800877c 	.word	0x0800877c
 8000794:	20000bc4 	.word	0x20000bc4
 8000798:	20000bc8 	.word	0x20000bc8
 800079c:	20000bcc 	.word	0x20000bcc
 80007a0:	0800878c 	.word	0x0800878c
 80007a4:	20000bd0 	.word	0x20000bd0
 80007a8:	080087a8 	.word	0x080087a8
 80007ac:	20000ba8 	.word	0x20000ba8
 80007b0:	080087d4 	.word	0x080087d4
 80007b4:	20000bac 	.word	0x20000bac
 80007b8:	08008800 	.word	0x08008800
 80007bc:	20000bb0 	.word	0x20000bb0
 80007c0:	08008824 	.word	0x08008824
 80007c4:	20000bb4 	.word	0x20000bb4
 80007c8:	08008850 	.word	0x08008850
 80007cc:	20000bb8 	.word	0x20000bb8
 80007d0:	0800887c 	.word	0x0800887c
 80007d4:	20000bbc 	.word	0x20000bbc
 80007d8:	080088a8 	.word	0x080088a8
 80007dc:	20000bc0 	.word	0x20000bc0

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f007 ff7e 	bl	80086f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <SystemClock_Config+0xcc>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <SystemClock_Config+0xcc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <SystemClock_Config+0xd0>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <SystemClock_Config+0xd0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000850:	2308      	movs	r3, #8
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000854:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800085e:	2307      	movs	r3, #7
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fbd2 	bl	8004010 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000872:	f000 fa4f 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2105      	movs	r1, #5
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fe33 	bl	8004500 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a0:	f000 fa38 	bl	8000d14 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_I2C1_Init+0x54>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_I2C1_Init+0x58>)
 80008c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_I2C1_Init+0x50>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C1_Init+0x50>)
 80008f2:	f002 fda9 	bl	8003448 <HAL_I2C_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008fc:	f000 fa0a 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200006d4 	.word	0x200006d4
 8000908:	40005400 	.word	0x40005400
 800090c:	000186a0 	.word	0x000186a0

08000910 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_I2S3_Init+0x54>)
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <MX_I2S3_Init+0x58>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2S3_Init+0x54>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_I2S3_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2S3_Init+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_I2S3_Init+0x54>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_I2S3_Init+0x54>)
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <MX_I2S3_Init+0x5c>)
 800093a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2S3_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_I2S3_Init+0x54>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2S3_Init+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2S3_Init+0x54>)
 8000950:	f002 febe 	bl	80036d0 <HAL_I2S_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800095a:	f000 f9db 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000728 	.word	0x20000728
 8000968:	40003c00 	.word	0x40003c00
 800096c:	00017700 	.word	0x00017700

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x64>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009bc:	220a      	movs	r2, #10
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009c2:	f004 f91d 	bl	8004c00 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009cc:	f000 f9a2 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000770 	.word	0x20000770
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000a08:	f000 ff07 	bl	800181a <HAL_HCD_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000a12:	f000 f97f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200007c8 	.word	0x200007c8

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	4b68      	ldr	r3, [pc, #416]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a67      	ldr	r2, [pc, #412]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b65      	ldr	r3, [pc, #404]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	4b61      	ldr	r3, [pc, #388]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a60      	ldr	r2, [pc, #384]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b5e      	ldr	r3, [pc, #376]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b5a      	ldr	r3, [pc, #360]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a59      	ldr	r2, [pc, #356]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b57      	ldr	r3, [pc, #348]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a52      	ldr	r2, [pc, #328]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a4b      	ldr	r2, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a44      	ldr	r2, [pc, #272]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <MX_GPIO_Init+0x1bc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	483f      	ldr	r0, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x1c0>)
 8000ae4:	f000 fe80 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aee:	483d      	ldr	r0, [pc, #244]	; (8000be4 <MX_GPIO_Init+0x1c4>)
 8000af0:	f000 fe7a 	bl	80017e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4835      	ldr	r0, [pc, #212]	; (8000be0 <MX_GPIO_Init+0x1c0>)
 8000b0c:	f000 fcd0 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b10:	2308      	movs	r3, #8
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b20:	2305      	movs	r3, #5
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482d      	ldr	r0, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x1c0>)
 8000b2c:	f000 fcc0 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b34:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4828      	ldr	r0, [pc, #160]	; (8000be8 <MX_GPIO_Init+0x1c8>)
 8000b46:	f000 fcb3 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4823      	ldr	r0, [pc, #140]	; (8000bec <MX_GPIO_Init+0x1cc>)
 8000b5e:	f000 fca7 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b74:	2305      	movs	r3, #5
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481b      	ldr	r0, [pc, #108]	; (8000bec <MX_GPIO_Init+0x1cc>)
 8000b80:	f000 fc96 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b84:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b88:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4811      	ldr	r0, [pc, #68]	; (8000be4 <MX_GPIO_Init+0x1c4>)
 8000b9e:	f000 fc87 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <MX_GPIO_Init+0x1c4>)
 8000bb6:	f000 fc7b 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bbe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <MX_GPIO_Init+0x1d0>)
 8000bd0:	f000 fc6e 	bl	80014b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020c00 	.word	0x40020c00
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f004 ffb2 	bl	8005b66 <osDelay>
 8000c02:	e7fb      	b.n	8000bfc <StartDefaultTask+0x8>

08000c04 <DeadlineDrivenScheduler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DeadlineDrivenScheduler */
void DeadlineDrivenScheduler(void const * argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DeadlineDrivenScheduler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f004 ffaa 	bl	8005b66 <osDelay>
 8000c12:	e7fb      	b.n	8000c0c <DeadlineDrivenScheduler+0x8>

08000c14 <TaskGenerator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskGenerator */
void TaskGenerator(void const * argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskGenerator */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f004 ffa2 	bl	8005b66 <osDelay>
 8000c22:	e7fb      	b.n	8000c1c <TaskGenerator+0x8>

08000c24 <Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Monitor */
void Monitor(void const * argument)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Monitor */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f004 ff9a 	bl	8005b66 <osDelay>
 8000c32:	e7fb      	b.n	8000c2c <Monitor+0x8>

08000c34 <RedLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLightTask */
void RedLightTask(void const * argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN RedLightTask */
	/* Infinite loop */
	for(;;){
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <RedLightTask+0x34>)
 8000c44:	f000 fdd0 	bl	80017e8 <HAL_GPIO_WritePin>
		osDelay(300);
 8000c48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c4c:	f004 ff8b 	bl	8005b66 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <RedLightTask+0x34>)
 8000c58:	f000 fdc6 	bl	80017e8 <HAL_GPIO_WritePin>
		osDelay(300);
 8000c5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c60:	f004 ff81 	bl	8005b66 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8000c64:	e7ea      	b.n	8000c3c <RedLightTask+0x8>
 8000c66:	bf00      	nop
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <AmberLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AmberLightTask */
void AmberLightTask(void const * argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AmberLightTask */
	/* Infinite loop */
	for(;;){
		HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <AmberLightTask+0x34>)
 8000c7c:	f000 fdb4 	bl	80017e8 <HAL_GPIO_WritePin>
		osDelay(400);
 8000c80:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c84:	f004 ff6f 	bl	8005b66 <osDelay>
	  	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <AmberLightTask+0x34>)
 8000c90:	f000 fdaa 	bl	80017e8 <HAL_GPIO_WritePin>
	  	osDelay(400);
 8000c94:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c98:	f004 ff65 	bl	8005b66 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000c9c:	e7ea      	b.n	8000c74 <AmberLightTask+0x8>
 8000c9e:	bf00      	nop
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <GreenLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLightTask */
void GreenLightTask(void const * argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GreenLightTask */
	/* Infinite loop */
	for(;;){
		HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <GreenLightTask+0x34>)
 8000cb4:	f000 fd98 	bl	80017e8 <HAL_GPIO_WritePin>
		osDelay(500);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbc:	f004 ff53 	bl	8005b66 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <GreenLightTask+0x34>)
 8000cc8:	f000 fd8e 	bl	80017e8 <HAL_GPIO_WritePin>
		osDelay(500);
 8000ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd0:	f004 ff49 	bl	8005b66 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8000cd4:	e7ea      	b.n	8000cac <GreenLightTask+0x8>
 8000cd6:	bf00      	nop
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <dds_control_callback>:
	/* USER CODE END GreenLightTask */
}

/* dds_control_callback function */
void dds_control_callback(void const * argument)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dds_control_callback */

  /* USER CODE END dds_control_callback */
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d02:	f000 faaf 	bl	8001264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40000800 	.word	0x40000800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_MspInit+0x54>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <HAL_MspInit+0x54>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x54>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_MspInit+0x54>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_MspInit+0x54>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_MspInit+0x54>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	210f      	movs	r1, #15
 8000d62:	f06f 0001 	mvn.w	r0, #1
 8000d66:	f000 fb79 	bl	800145c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_I2C_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12c      	bne.n	8000df4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000db6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	; (8000e04 <HAL_I2C_MspInit+0x8c>)
 8000dd4:	f000 fb6c 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_I2S_MspInit+0xf0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d15a      	bne.n	8000eee <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e3c:	23c0      	movs	r3, #192	; 0xc0
 8000e3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fd97 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e54:	f7ff ff5e 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a26      	ldr	r2, [pc, #152]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_I2S_MspInit+0xf4>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000eac:	2310      	movs	r3, #16
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <HAL_I2S_MspInit+0xf8>)
 8000ec8:	f000 faf2 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ecc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_I2S_MspInit+0xfc>)
 8000eea:	f000 fae1 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3738      	adds	r7, #56	; 0x38
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40003c00 	.word	0x40003c00
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020800 	.word	0x40020800

08000f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_SPI_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12b      	bne.n	8000f82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_SPI_MspInit+0x88>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_SPI_MspInit+0x88>)
 8000f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_SPI_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_SPI_MspInit+0x88>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_SPI_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f62:	23e0      	movs	r3, #224	; 0xe0
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f72:	2305      	movs	r3, #5
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_SPI_MspInit+0x8c>)
 8000f7e:	f000 fa97 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb8:	d147      	bne.n	800104a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <HAL_HCD_MspInit+0xc0>)
 8000fec:	f000 fa60 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ff0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001002:	230a      	movs	r3, #10
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <HAL_HCD_MspInit+0xc0>)
 800100e:	f000 fa4f 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6353      	str	r3, [r2, #52]	; 0x34
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2105      	movs	r1, #5
 800103e:	2043      	movs	r0, #67	; 0x43
 8001040:	f000 fa0c 	bl	800145c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001044:	2043      	movs	r0, #67	; 0x43
 8001046:	f000 fa25 	bl	8001494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <HAL_InitTick+0xe4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <HAL_InitTick+0xe4>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6413      	str	r3, [r2, #64]	; 0x40
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <HAL_InitTick+0xe4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001088:	f107 0210 	add.w	r2, r7, #16
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fc40 	bl	8004918 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010a2:	f003 fc25 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 80010a6:	6378      	str	r0, [r7, #52]	; 0x34
 80010a8:	e004      	b.n	80010b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010aa:	f003 fc21 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 80010ae:	4603      	mov	r3, r0
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b6:	4a23      	ldr	r2, [pc, #140]	; (8001144 <HAL_InitTick+0xe8>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	0c9b      	lsrs	r3, r3, #18
 80010be:	3b01      	subs	r3, #1
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_InitTick+0xec>)
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <HAL_InitTick+0xf0>)
 80010c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_InitTick+0xec>)
 80010ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ce:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80010d0:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_InitTick+0xec>)
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_InitTick+0xec>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_InitTick+0xec>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_InitTick+0xec>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <HAL_InitTick+0xec>)
 80010ea:	f003 fe12 	bl	8004d12 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d11b      	bne.n	8001134 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80010fc:	4812      	ldr	r0, [pc, #72]	; (8001148 <HAL_InitTick+0xec>)
 80010fe:	f003 fe61 	bl	8004dc4 <HAL_TIM_Base_Start_IT>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800110c:	2b00      	cmp	r3, #0
 800110e:	d111      	bne.n	8001134 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001110:	201e      	movs	r0, #30
 8001112:	f000 f9bf 	bl	8001494 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d808      	bhi.n	800112e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	201e      	movs	r0, #30
 8001122:	f000 f99b 	bl	800145c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_InitTick+0xf4>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e002      	b.n	8001134 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001134:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001138:	4618      	mov	r0, r3
 800113a:	3738      	adds	r7, #56	; 0x38
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	431bde83 	.word	0x431bde83
 8001148:	20000be8 	.word	0x20000be8
 800114c:	40000800 	.word	0x40000800
 8001150:	20000004 	.word	0x20000004

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM4_IRQHandler+0x10>)
 8001186:	f003 fe8d 	bl	8004ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000be8 	.word	0x20000be8

08001194 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <OTG_FS_IRQHandler+0x10>)
 800119a:	f000 fba5 	bl	80018e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200007c8 	.word	0x200007c8

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011d0:	f7ff ffea 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	; (8001218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f007 fa81 	bl	8008700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff f999 	bl	8000534 <main>
  bx  lr    
 8001202:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001210:	08008908 	.word	0x08008908
  ldr r2, =_sbss
 8001214:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001218:	20004ac4 	.word	0x20004ac4

0800121c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC_IRQHandler>
	...

08001220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_Init+0x40>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_Init+0x40>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x40>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f8fc 	bl	8001446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
 8001250:	f7ff ff04 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fd64 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	20000c30 	.word	0x20000c30

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000c30 	.word	0x20000c30

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff4c 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146e:	f7ff ff61 	bl	8001334 <__NVIC_GetPriorityGrouping>
 8001472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	6978      	ldr	r0, [r7, #20]
 800147a:	f7ff ffb1 	bl	80013e0 <NVIC_EncodePriority>
 800147e:	4602      	mov	r2, r0
 8001480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff80 	bl	800138c <__NVIC_SetPriority>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff54 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e16b      	b.n	80017a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 815a 	bne.w	800179e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80b4 	beq.w	800179e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b60      	ldr	r3, [pc, #384]	; (80017bc <HAL_GPIO_Init+0x30c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a5f      	ldr	r2, [pc, #380]	; (80017bc <HAL_GPIO_Init+0x30c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_GPIO_Init+0x30c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a5b      	ldr	r2, [pc, #364]	; (80017c0 <HAL_GPIO_Init+0x310>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_GPIO_Init+0x314>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d02b      	beq.n	80016d6 <HAL_GPIO_Init+0x226>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <HAL_GPIO_Init+0x318>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d025      	beq.n	80016d2 <HAL_GPIO_Init+0x222>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a50      	ldr	r2, [pc, #320]	; (80017cc <HAL_GPIO_Init+0x31c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_Init+0x21e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4f      	ldr	r2, [pc, #316]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x21a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <HAL_GPIO_Init+0x324>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x216>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <HAL_GPIO_Init+0x328>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x212>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_GPIO_Init+0x32c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x20e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <HAL_GPIO_Init+0x330>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x20a>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e00e      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e8:	4935      	ldr	r1, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x310>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_GPIO_Init+0x334>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171a:	4a32      	ldr	r2, [pc, #200]	; (80017e4 <HAL_GPIO_Init+0x334>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_GPIO_Init+0x334>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_GPIO_Init+0x334>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f ae90 	bls.w	80014cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001804:	e003      	b.n	800180e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af02      	add	r7, sp, #8
 8001820:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e059      	b.n	80018e0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fba6 	bl	8000f98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185a:	d102      	bne.n	8001862 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fd58 	bl	800531c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7c1a      	ldrb	r2, [r3, #16]
 8001874:	f88d 2000 	strb.w	r2, [sp]
 8001878:	3304      	adds	r3, #4
 800187a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187c:	f003 fcea 	bl	8005254 <USB_CoreInit>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e026      	b.n	80018e0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fd50 	bl	800533e <USB_SetCurrentMode>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e017      	b.n	80018e0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7c1a      	ldrb	r2, [r3, #16]
 80018b8:	f88d 2000 	strb.w	r2, [sp]
 80018bc:	3304      	adds	r3, #4
 80018be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c0:	f003 feb4 	bl	800562c <USB_HostInit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e004      	b.n	80018e0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fe55 	bl	80055ae <USB_GetMode>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	f040 80fb 	bne.w	8001b02 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fe18 	bl	8005546 <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80f1 	beq.w	8001b00 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fe0f 	bl	8005546 <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001932:	d104      	bne.n	800193e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800193c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fdff 	bl	8005546 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001952:	d104      	bne.n	800195e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800195c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fdef 	bl	8005546 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001972:	d104      	bne.n	800197e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800197c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f003 fddf 	bl	8005546 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d103      	bne.n	800199a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fdd1 	bl	8005546 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ae:	d120      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d113      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ca:	2110      	movs	r1, #16
 80019cc:	6938      	ldr	r0, [r7, #16]
 80019ce:	f003 fd02 	bl	80053d6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f003 fd31 	bl	800543a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7a5b      	ldrb	r3, [r3, #9]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d105      	bne.n	80019ec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fee4 	bl	80057b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f89f 	bl	8001b30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fda5 	bl	8005546 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a06:	d102      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 fcaa 	bl	8003362 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fd97 	bl	8005546 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d106      	bne.n	8001a30 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f870 	bl	8001b08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fd86 	bl	8005546 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a44:	d139      	bne.n	8001aba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 feef 	bl	800582e <USB_HC_ReadInterrupt>
 8001a50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e025      	b.n	8001aa4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a82:	d106      	bne.n	8001a92 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f87c 	bl	8001b88 <HCD_HC_IN_IRQHandler>
 8001a90:	e005      	b.n	8001a9e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fede 	bl	800285a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	795b      	ldrb	r3, [r3, #5]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d3d3      	bcc.n	8001a58 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fd41 	bl	8005546 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b10      	cmp	r3, #16
 8001acc:	d101      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x1ea>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_HCD_IRQHandler+0x1ec>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d014      	beq.n	8001b02 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0210 	bic.w	r2, r2, #16
 8001ae6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f001 fb5b 	bl	80031a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0210 	orr.w	r2, r2, #16
 8001afc:	619a      	str	r2, [r3, #24]
 8001afe:	e000      	b.n	8001b02 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b00:	bf00      	nop
    }
  }
}
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fce0 	bl	800556c <USB_ReadChInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d11a      	bne.n	8001bec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	334d      	adds	r3, #77	; 0x4d
 8001bd8:	2207      	movs	r2, #7
 8001bda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 fe33 	bl	8005850 <USB_HC_Halt>
 8001bea:	e09e      	b.n	8001d2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fcb9 	bl	800556c <USB_ReadChInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c04:	d11b      	bne.n	8001c3e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c12:	461a      	mov	r2, r3
 8001c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	334d      	adds	r3, #77	; 0x4d
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fe0a 	bl	8005850 <USB_HC_Halt>
 8001c3c:	e075      	b.n	8001d2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fc90 	bl	800556c <USB_ReadChInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11a      	bne.n	8001c8c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	461a      	mov	r2, r3
 8001c64:	2308      	movs	r3, #8
 8001c66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	334d      	adds	r3, #77	; 0x4d
 8001c78:	2206      	movs	r2, #6
 8001c7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fde3 	bl	8005850 <USB_HC_Halt>
 8001c8a:	e04e      	b.n	8001d2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fc69 	bl	800556c <USB_ReadChInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca4:	d11b      	bne.n	8001cde <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	334d      	adds	r3, #77	; 0x4d
 8001cca:	2209      	movs	r2, #9
 8001ccc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fdba 	bl	8005850 <USB_HC_Halt>
 8001cdc:	e025      	b.n	8001d2a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fc40 	bl	800556c <USB_ReadChInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b80      	cmp	r3, #128	; 0x80
 8001cf4:	d119      	bne.n	8001d2a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	334d      	adds	r3, #77	; 0x4d
 8001d18:	2207      	movs	r2, #7
 8001d1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fd93 	bl	8005850 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fc1a 	bl	800556c <USB_ReadChInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d42:	d112      	bne.n	8001d6a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fd7f 	bl	8005850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d64:	6093      	str	r3, [r2, #8]
 8001d66:	f000 bd75 	b.w	8002854 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fbfa 	bl	800556c <USB_ReadChInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 8128 	bne.w	8001fd4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	461a      	mov	r2, r3
 8001d92:	2320      	movs	r3, #32
 8001d94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	331b      	adds	r3, #27
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d119      	bne.n	8001de0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	331b      	adds	r3, #27
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	0151      	lsls	r1, r2, #5
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	440a      	add	r2, r1
 8001dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	799b      	ldrb	r3, [r3, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3330      	adds	r3, #48	; 0x30
 8001df8:	6819      	ldr	r1, [r3, #0]
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	1ac9      	subs	r1, r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4403      	add	r3, r0
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	334d      	adds	r3, #77	; 0x4d
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3344      	adds	r3, #68	; 0x44
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	461a      	mov	r2, r3
 8001e56:	2301      	movs	r3, #1
 8001e58:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	3326      	adds	r3, #38	; 0x26
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3326      	adds	r3, #38	; 0x26
 8001e80:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d110      	bne.n	8001ea8 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fcde 	bl	8005850 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	6093      	str	r3, [r2, #8]
 8001ea6:	e03d      	b.n	8001f24 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3326      	adds	r3, #38	; 0x26
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d00a      	beq.n	8001ed4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3326      	adds	r3, #38	; 0x26
 8001ece:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d127      	bne.n	8001f24 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	0151      	lsls	r1, r2, #5
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	440a      	add	r2, r1
 8001eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ef2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	334c      	adds	r3, #76	; 0x4c
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	334c      	adds	r3, #76	; 0x4c
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fe24 	bl	8001b6c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	799b      	ldrb	r3, [r3, #6]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d13b      	bne.n	8001fa4 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3338      	adds	r3, #56	; 0x38
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	3328      	adds	r3, #40	; 0x28
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	440b      	add	r3, r1
 8001f52:	1e59      	subs	r1, r3, #1
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4403      	add	r3, r0
 8001f62:	3328      	adds	r3, #40	; 0x28
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8470 	beq.w	8002854 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	333c      	adds	r3, #60	; 0x3c
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	f083 0301 	eor.w	r3, r3, #1
 8001f8c:	b2d8      	uxtb	r0, r3
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	333c      	adds	r3, #60	; 0x3c
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	f000 bc58 	b.w	8002854 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	333c      	adds	r3, #60	; 0x3c
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	333c      	adds	r3, #60	; 0x3c
 8001fcc:	4602      	mov	r2, r0
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	f000 bc40 	b.w	8002854 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fac5 	bl	800556c <USB_ReadChInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d131      	bne.n	8002050 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	331a      	adds	r3, #26
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	f040 841f 	bne.w	8002854 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	331b      	adds	r3, #27
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	334d      	adds	r3, #77	; 0x4d
 800203a:	2203      	movs	r2, #3
 800203c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fc02 	bl	8005850 <USB_HC_Halt>
 800204c:	f000 bc02 	b.w	8002854 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f003 fa87 	bl	800556c <USB_ReadChInterrupts>
 800205e:	4603      	mov	r3, r0
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b02      	cmp	r3, #2
 8002066:	f040 8305 	bne.w	8002674 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	461a      	mov	r2, r3
 8002078:	2302      	movs	r3, #2
 800207a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	334d      	adds	r3, #77	; 0x4d
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d114      	bne.n	80020bc <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	334d      	adds	r3, #77	; 0x4d
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334c      	adds	r3, #76	; 0x4c
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e2cc      	b.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	334d      	adds	r3, #77	; 0x4d
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d114      	bne.n	80020fc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	334d      	adds	r3, #77	; 0x4d
 80020e2:	2202      	movs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	334c      	adds	r3, #76	; 0x4c
 80020f6:	2205      	movs	r2, #5
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e2ac      	b.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	334d      	adds	r3, #77	; 0x4d
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b07      	cmp	r3, #7
 8002110:	d00b      	beq.n	800212a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	334d      	adds	r3, #77	; 0x4d
 8002122:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002124:	2b09      	cmp	r3, #9
 8002126:	f040 80a6 	bne.w	8002276 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	334d      	adds	r3, #77	; 0x4d
 800213a:	2202      	movs	r2, #2
 800213c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3344      	adds	r3, #68	; 0x44
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1c59      	adds	r1, r3, #1
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4403      	add	r3, r0
 800215e:	3344      	adds	r3, #68	; 0x44
 8002160:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3344      	adds	r3, #68	; 0x44
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d943      	bls.n	8002200 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3344      	adds	r3, #68	; 0x44
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	331a      	adds	r3, #26
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d123      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	331b      	adds	r3, #27
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	331c      	adds	r3, #28
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	334c      	adds	r3, #76	; 0x4c
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021fe:	e229      	b.n	8002654 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	334c      	adds	r3, #76	; 0x4c
 8002210:	2202      	movs	r2, #2
 8002212:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3326      	adds	r3, #38	; 0x26
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	3326      	adds	r3, #38	; 0x26
 800223a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800223c:	2b02      	cmp	r3, #2
 800223e:	f040 8209 	bne.w	8002654 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002258:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002260:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002274:	e1ee      	b.n	8002654 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	334d      	adds	r3, #77	; 0x4d
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b05      	cmp	r3, #5
 800228a:	f040 80c8 	bne.w	800241e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	334d      	adds	r3, #77	; 0x4d
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	331b      	adds	r3, #27
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	f040 81ce 	bne.w	8002656 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3326      	adds	r3, #38	; 0x26
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d16b      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	3348      	adds	r3, #72	; 0x48
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1c59      	adds	r1, r3, #1
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4403      	add	r3, r0
 80022f0:	3348      	adds	r3, #72	; 0x48
 80022f2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3348      	adds	r3, #72	; 0x48
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d943      	bls.n	8002392 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3348      	adds	r3, #72	; 0x48
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	331b      	adds	r3, #27
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3344      	adds	r3, #68	; 0x44
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d809      	bhi.n	800235c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	331c      	adds	r3, #28
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	0151      	lsls	r1, r2, #5
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	440a      	add	r2, r1
 8002372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334c      	adds	r3, #76	; 0x4c
 800238c:	2204      	movs	r2, #4
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e014      	b.n	80023bc <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	334c      	adds	r3, #76	; 0x4c
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e009      	b.n	80023bc <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	334c      	adds	r3, #76	; 0x4c
 80023b8:	2202      	movs	r2, #2
 80023ba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3326      	adds	r3, #38	; 0x26
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	3326      	adds	r3, #38	; 0x26
 80023e2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	f040 8136 	bne.w	8002656 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002400:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002408:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e11b      	b.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	334d      	adds	r3, #77	; 0x4d
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b03      	cmp	r3, #3
 8002432:	f040 8081 	bne.w	8002538 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	334d      	adds	r3, #77	; 0x4d
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	331b      	adds	r3, #27
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	f040 80fa 	bne.w	8002656 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	334c      	adds	r3, #76	; 0x4c
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	0151      	lsls	r1, r2, #5
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	440a      	add	r2, r1
 800248c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	0151      	lsls	r1, r2, #5
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	440a      	add	r2, r1
 80024ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	0151      	lsls	r1, r2, #5
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	440a      	add	r2, r1
 80024cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d0:	f023 0320 	bic.w	r3, r3, #32
 80024d4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3326      	adds	r3, #38	; 0x26
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3326      	adds	r3, #38	; 0x26
 80024fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024fe:	2b02      	cmp	r3, #2
 8002500:	f040 80a9 	bne.w	8002656 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800251a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002522:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	461a      	mov	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e08e      	b.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	334d      	adds	r3, #77	; 0x4d
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b04      	cmp	r3, #4
 800254c:	d143      	bne.n	80025d6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	334d      	adds	r3, #77	; 0x4d
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	334c      	adds	r3, #76	; 0x4c
 8002572:	2202      	movs	r2, #2
 8002574:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3326      	adds	r3, #38	; 0x26
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3326      	adds	r3, #38	; 0x26
 800259c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d159      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e03f      	b.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	334d      	adds	r3, #77	; 0x4d
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d126      	bne.n	800263a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	334d      	adds	r3, #77	; 0x4d
 80025fc:	2202      	movs	r2, #2
 80025fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3344      	adds	r3, #68	; 0x44
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	1c59      	adds	r1, r3, #1
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4403      	add	r3, r0
 8002620:	3344      	adds	r3, #68	; 0x44
 8002622:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	334c      	adds	r3, #76	; 0x4c
 8002634:	2204      	movs	r2, #4
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e00d      	b.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	334d      	adds	r3, #77	; 0x4d
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b02      	cmp	r3, #2
 800264e:	f000 8100 	beq.w	8002852 <HCD_HC_IN_IRQHandler+0xcca>
 8002652:	e000      	b.n	8002656 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002654:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	334c      	adds	r3, #76	; 0x4c
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fa7d 	bl	8001b6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002672:	e0ef      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f002 ff75 	bl	800556c <USB_ReadChInterrupts>
 8002682:	4603      	mov	r3, r0
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d12f      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	461a      	mov	r2, r3
 800269a:	2340      	movs	r3, #64	; 0x40
 800269c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334d      	adds	r3, #77	; 0x4d
 80026ae:	2205      	movs	r2, #5
 80026b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	331a      	adds	r3, #26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3344      	adds	r3, #68	; 0x44
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 f8b3 	bl	8005850 <USB_HC_Halt>
 80026ea:	e0b3      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 ff39 	bl	800556c <USB_ReadChInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b10      	cmp	r3, #16
 8002702:	f040 80a7 	bne.w	8002854 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	3326      	adds	r3, #38	; 0x26
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d11b      	bne.n	8002754 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3344      	adds	r3, #68	; 0x44
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334d      	adds	r3, #77	; 0x4d
 8002740:	2204      	movs	r2, #4
 8002742:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 f87f 	bl	8005850 <USB_HC_Halt>
 8002752:	e03f      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3326      	adds	r3, #38	; 0x26
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3326      	adds	r3, #38	; 0x26
 800277a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800277c:	2b02      	cmp	r3, #2
 800277e:	d129      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3344      	adds	r3, #68	; 0x44
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	799b      	ldrb	r3, [r3, #6]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HCD_HC_IN_IRQHandler+0xc2a>
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	331b      	adds	r3, #27
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d110      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	334d      	adds	r3, #77	; 0x4d
 80027c2:	2204      	movs	r2, #4
 80027c4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 f83e 	bl	8005850 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	331b      	adds	r3, #27
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d129      	bne.n	800283e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	331b      	adds	r3, #27
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	0151      	lsls	r1, r2, #5
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	440a      	add	r2, r1
 8002814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	0151      	lsls	r1, r2, #5
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	440a      	add	r2, r1
 8002834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002838:	f043 0320 	orr.w	r3, r3, #32
 800283c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2310      	movs	r3, #16
 800284e:	6093      	str	r3, [r2, #8]
 8002850:	e000      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002852:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fe77 	bl	800556c <USB_ReadChInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11b      	bne.n	80028c0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	2304      	movs	r3, #4
 8002898:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	334d      	adds	r3, #77	; 0x4d
 80028aa:	2207      	movs	r2, #7
 80028ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 ffca 	bl	8005850 <USB_HC_Halt>
 80028bc:	f000 bc6f 	b.w	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 fe4f 	bl	800556c <USB_ReadChInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	f040 8082 	bne.w	80029de <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	2320      	movs	r3, #32
 80028ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3319      	adds	r3, #25
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d124      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3319      	adds	r3, #25
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	334c      	adds	r3, #76	; 0x4c
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	334d      	adds	r3, #77	; 0x4d
 800293a:	2203      	movs	r2, #3
 800293c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f002 ff82 	bl	8005850 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	331a      	adds	r3, #26
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	f040 841d 	bne.w	800319e <HCD_HC_OUT_IRQHandler+0x944>
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	331b      	adds	r3, #27
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 8411 	bne.w	800319e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3326      	adds	r3, #38	; 0x26
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d009      	beq.n	80029a6 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	331b      	adds	r3, #27
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	334d      	adds	r3, #77	; 0x4d
 80029b6:	2203      	movs	r2, #3
 80029b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 ff44 	bl	8005850 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3344      	adds	r3, #68	; 0x44
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e3df      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fdc0 	bl	800556c <USB_ReadChInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f6:	d111      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	461a      	mov	r2, r3
 8002a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 ff1b 	bl	8005850 <USB_HC_Halt>
 8002a1a:	e3c0      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fda1 	bl	800556c <USB_ReadChInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d168      	bne.n	8002b06 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3344      	adds	r3, #68	; 0x44
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fd8b 	bl	800556c <USB_ReadChInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d112      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3319      	adds	r3, #25
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	2340      	movs	r3, #64	; 0x40
 8002a84:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	331b      	adds	r3, #27
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d019      	beq.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	331b      	adds	r3, #27
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	0151      	lsls	r1, r2, #5
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2301      	movs	r3, #1
 8002ae0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	334d      	adds	r3, #77	; 0x4d
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fea6 	bl	8005850 <USB_HC_Halt>
 8002b04:	e34b      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fd2c 	bl	800556c <USB_ReadChInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d139      	bne.n	8002b92 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	334d      	adds	r3, #77	; 0x4d
 8002b2e:	2205      	movs	r2, #5
 8002b30:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	331a      	adds	r3, #26
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3319      	adds	r3, #25
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3344      	adds	r3, #68	; 0x44
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fe69 	bl	8005850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2340      	movs	r3, #64	; 0x40
 8002b8e:	6093      	str	r3, [r2, #8]
 8002b90:	e305      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fce6 	bl	800556c <USB_ReadChInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11a      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2308      	movs	r3, #8
 8002bba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	334d      	adds	r3, #77	; 0x4d
 8002bcc:	2206      	movs	r2, #6
 8002bce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 fe39 	bl	8005850 <USB_HC_Halt>
 8002bde:	e2de      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 fcbf 	bl	800556c <USB_ReadChInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d144      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3344      	adds	r3, #68	; 0x44
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334d      	adds	r3, #77	; 0x4d
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3319      	adds	r3, #25
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d114      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3318      	adds	r3, #24
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3319      	adds	r3, #25
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fdf1 	bl	8005850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	6093      	str	r3, [r2, #8]
 8002c80:	e28d      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fc6e 	bl	800556c <USB_ReadChInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b80      	cmp	r3, #128	; 0x80
 8002c98:	d169      	bne.n	8002d6e <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	799b      	ldrb	r3, [r3, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d111      	bne.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	334d      	adds	r3, #77	; 0x4d
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fdc6 	bl	8005850 <USB_HC_Halt>
 8002cc4:	e049      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3344      	adds	r3, #68	; 0x44
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1c59      	adds	r1, r3, #1
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4403      	add	r3, r0
 8002ce6:	3344      	adds	r3, #68	; 0x44
 8002ce8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3344      	adds	r3, #68	; 0x44
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d922      	bls.n	8002d46 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3344      	adds	r3, #68	; 0x44
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	334c      	adds	r3, #76	; 0x4c
 8002d24:	2204      	movs	r2, #4
 8002d26:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	334c      	adds	r3, #76	; 0x4c
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe ff14 	bl	8001b6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d44:	e009      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	334c      	adds	r3, #76	; 0x4c
 8002d56:	2202      	movs	r2, #2
 8002d58:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	461a      	mov	r2, r3
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	6093      	str	r3, [r2, #8]
 8002d6c:	e217      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 fbf8 	bl	800556c <USB_ReadChInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d11b      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	; 0x4d
 8002d98:	2209      	movs	r2, #9
 8002d9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 fd53 	bl	8005850 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dbc:	6093      	str	r3, [r2, #8]
 8002dbe:	e1ee      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 fbcf 	bl	800556c <USB_ReadChInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	f040 81df 	bne.w	8003198 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	2302      	movs	r3, #2
 8002dea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	; 0x4d
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f040 8093 	bne.w	8002f2a <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334d      	adds	r3, #77	; 0x4d
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334c      	adds	r3, #76	; 0x4c
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3326      	adds	r3, #38	; 0x26
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d00b      	beq.n	8002e5a <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3326      	adds	r3, #38	; 0x26
 8002e52:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	f040 8190 	bne.w	800317a <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	799b      	ldrb	r3, [r3, #6]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d115      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	333d      	adds	r3, #61	; 0x3d
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2d8      	uxtb	r0, r3
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	333d      	adds	r3, #61	; 0x3d
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	799b      	ldrb	r3, [r3, #6]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	f040 8171 	bne.w	800317a <HCD_HC_OUT_IRQHandler+0x920>
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3334      	adds	r3, #52	; 0x34
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8165 	beq.w	800317a <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3334      	adds	r3, #52	; 0x34
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4403      	add	r3, r0
 8002ed0:	3328      	adds	r3, #40	; 0x28
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	440b      	add	r3, r1
 8002ed6:	1e59      	subs	r1, r3, #1
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4403      	add	r3, r0
 8002ee6:	3328      	adds	r3, #40	; 0x28
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eee:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 813f 	beq.w	800317a <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	333d      	adds	r3, #61	; 0x3d
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b2d8      	uxtb	r0, r3
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	333d      	adds	r3, #61	; 0x3d
 8002f24:	4602      	mov	r2, r0
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e127      	b.n	800317a <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	334d      	adds	r3, #77	; 0x4d
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d120      	bne.n	8002f82 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	334d      	adds	r3, #77	; 0x4d
 8002f50:	2202      	movs	r2, #2
 8002f52:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	331b      	adds	r3, #27
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f040 8107 	bne.w	800317a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334c      	adds	r3, #76	; 0x4c
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e0fb      	b.n	800317a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334d      	adds	r3, #77	; 0x4d
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d13a      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334d      	adds	r3, #77	; 0x4d
 8002fa8:	2202      	movs	r2, #2
 8002faa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	334c      	adds	r3, #76	; 0x4c
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	331b      	adds	r3, #27
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 80d1 	bne.w	800317a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	331b      	adds	r3, #27
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	0151      	lsls	r1, r2, #5
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	440a      	add	r2, r1
 8003002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	6053      	str	r3, [r2, #4]
 800300c:	e0b5      	b.n	800317a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	334d      	adds	r3, #77	; 0x4d
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d114      	bne.n	800304e <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	334d      	adds	r3, #77	; 0x4d
 8003034:	2202      	movs	r2, #2
 8003036:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	334c      	adds	r3, #76	; 0x4c
 8003048:	2202      	movs	r2, #2
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e095      	b.n	800317a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	334d      	adds	r3, #77	; 0x4d
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b06      	cmp	r3, #6
 8003062:	d114      	bne.n	800308e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	334d      	adds	r3, #77	; 0x4d
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	334c      	adds	r3, #76	; 0x4c
 8003088:	2205      	movs	r2, #5
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e075      	b.n	800317a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	334d      	adds	r3, #77	; 0x4d
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b07      	cmp	r3, #7
 80030a2:	d00a      	beq.n	80030ba <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	334d      	adds	r3, #77	; 0x4d
 80030b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80030b6:	2b09      	cmp	r3, #9
 80030b8:	d170      	bne.n	800319c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	334d      	adds	r3, #77	; 0x4d
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3344      	adds	r3, #68	; 0x44
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4403      	add	r3, r0
 80030ee:	3344      	adds	r3, #68	; 0x44
 80030f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3344      	adds	r3, #68	; 0x44
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d914      	bls.n	8003132 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	3344      	adds	r3, #68	; 0x44
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	334c      	adds	r3, #76	; 0x4c
 800312c:	2204      	movs	r2, #4
 800312e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003130:	e022      	b.n	8003178 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	334c      	adds	r3, #76	; 0x4c
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800315c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003164:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003178:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	334c      	adds	r3, #76	; 0x4c
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fe fceb 	bl	8001b6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003196:	e002      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003198:	bf00      	nop
 800319a:	e000      	b.n	800319e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800319c:	bf00      	nop
  }
}
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	0c5b      	lsrs	r3, r3, #17
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d004      	beq.n	80031ea <HCD_RXQLVL_IRQHandler+0x46>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	f000 80b6 	beq.w	8003354 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031e8:	e0b7      	b.n	800335a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80b3 	beq.w	8003358 <HCD_RXQLVL_IRQHandler+0x1b4>
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	332c      	adds	r3, #44	; 0x2c
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a7 	beq.w	8003358 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3338      	adds	r3, #56	; 0x38
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	18d1      	adds	r1, r2, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4403      	add	r3, r0
 800322e:	3334      	adds	r3, #52	; 0x34
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4299      	cmp	r1, r3
 8003234:	f200 8083 	bhi.w	800333e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	332c      	adds	r3, #44	; 0x2c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	b292      	uxth	r2, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f002 f91f 	bl	8005496 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	332c      	adds	r3, #44	; 0x2c
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	18d1      	adds	r1, r2, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4403      	add	r3, r0
 800327c:	332c      	adds	r3, #44	; 0x2c
 800327e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3338      	adds	r3, #56	; 0x38
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4403      	add	r3, r0
 80032a4:	3338      	adds	r3, #56	; 0x38
 80032a6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	0cdb      	lsrs	r3, r3, #19
 80032b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3328      	adds	r3, #40	; 0x28
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d13f      	bne.n	8003358 <HCD_RXQLVL_IRQHandler+0x1b4>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03c      	beq.n	8003358 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	333c      	adds	r3, #60	; 0x3c
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	f083 0301 	eor.w	r3, r3, #1
 8003326:	b2d8      	uxtb	r0, r3
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	333c      	adds	r3, #60	; 0x3c
 8003338:	4602      	mov	r2, r0
 800333a:	701a      	strb	r2, [r3, #0]
      break;
 800333c:	e00c      	b.n	8003358 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334c      	adds	r3, #76	; 0x4c
 800334e:	2204      	movs	r2, #4
 8003350:	701a      	strb	r2, [r3, #0]
      break;
 8003352:	e001      	b.n	8003358 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003358:	bf00      	nop
  }
}
 800335a:	bf00      	nop
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800338e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d10b      	bne.n	80033b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d102      	bne.n	80033aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fe fbb9 	bl	8001b1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d132      	bne.n	8003422 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f043 0308 	orr.w	r3, r3, #8
 80033c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d126      	bne.n	800341c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	7a5b      	ldrb	r3, [r3, #9]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d113      	bne.n	80033fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033e0:	d106      	bne.n	80033f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f002 f9e3 	bl	80057b4 <USB_InitFSLSPClkSel>
 80033ee:	e011      	b.n	8003414 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	4618      	mov	r0, r3
 80033f8:	f002 f9dc 	bl	80057b4 <USB_InitFSLSPClkSel>
 80033fc:	e00a      	b.n	8003414 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	79db      	ldrb	r3, [r3, #7]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d106      	bne.n	8003414 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800340c:	461a      	mov	r2, r3
 800340e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003412:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fe fb95 	bl	8001b44 <HAL_HCD_PortEnabled_Callback>
 800341a:	e002      	b.n	8003422 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fe fb9b 	bl	8001b58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b20      	cmp	r3, #32
 800342a:	d103      	bne.n	8003434 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f043 0320 	orr.w	r3, r3, #32
 8003432:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6013      	str	r3, [r2, #0]
}
 8003440:	bf00      	nop
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e12b      	b.n	80036b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fc82 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	; 0x24
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800349a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034ac:	f001 fa20 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 80034b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a81      	ldr	r2, [pc, #516]	; (80036bc <HAL_I2C_Init+0x274>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d807      	bhi.n	80034cc <HAL_I2C_Init+0x84>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a80      	ldr	r2, [pc, #512]	; (80036c0 <HAL_I2C_Init+0x278>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e006      	b.n	80034da <HAL_I2C_Init+0x92>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a7d      	ldr	r2, [pc, #500]	; (80036c4 <HAL_I2C_Init+0x27c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bf94      	ite	ls
 80034d4:	2301      	movls	r3, #1
 80034d6:	2300      	movhi	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0e7      	b.n	80036b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a78      	ldr	r2, [pc, #480]	; (80036c8 <HAL_I2C_Init+0x280>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0c9b      	lsrs	r3, r3, #18
 80034ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a6a      	ldr	r2, [pc, #424]	; (80036bc <HAL_I2C_Init+0x274>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <HAL_I2C_Init+0xd4>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	e009      	b.n	8003530 <HAL_I2C_Init+0xe8>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	4a69      	ldr	r2, [pc, #420]	; (80036cc <HAL_I2C_Init+0x284>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	3301      	adds	r3, #1
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	495c      	ldr	r1, [pc, #368]	; (80036bc <HAL_I2C_Init+0x274>)
 800354c:	428b      	cmp	r3, r1
 800354e:	d819      	bhi.n	8003584 <HAL_I2C_Init+0x13c>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e59      	subs	r1, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fbb1 f3f3 	udiv	r3, r1, r3
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003564:	400b      	ands	r3, r1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_I2C_Init+0x138>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1e59      	subs	r1, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fbb1 f3f3 	udiv	r3, r1, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357e:	e051      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003580:	2304      	movs	r3, #4
 8003582:	e04f      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <HAL_I2C_Init+0x168>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e58      	subs	r0, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	440b      	add	r3, r1
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e012      	b.n	80035d6 <HAL_I2C_Init+0x18e>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	0099      	lsls	r1, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Init+0x196>
 80035da:	2301      	movs	r3, #1
 80035dc:	e022      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10e      	bne.n	8003604 <HAL_I2C_Init+0x1bc>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1e58      	subs	r0, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	440b      	add	r3, r1
 80035f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003602:	e00f      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1e58      	subs	r0, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	0099      	lsls	r1, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	fbb0 f3f3 	udiv	r3, r0, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	6809      	ldr	r1, [r1, #0]
 8003628:	4313      	orrs	r3, r2
 800362a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6911      	ldr	r1, [r2, #16]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	430b      	orrs	r3, r1
 8003666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	000186a0 	.word	0x000186a0
 80036c0:	001e847f 	.word	0x001e847f
 80036c4:	003d08ff 	.word	0x003d08ff
 80036c8:	431bde83 	.word	0x431bde83
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e128      	b.n	8003934 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a90      	ldr	r2, [pc, #576]	; (800393c <HAL_I2S_Init+0x26c>)
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fd fb83 	bl	8000e08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003718:	f023 030f 	bic.w	r3, r3, #15
 800371c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2202      	movs	r2, #2
 8003724:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d060      	beq.n	80037f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003736:	2310      	movs	r3, #16
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e001      	b.n	8003740 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800373c:	2320      	movs	r3, #32
 800373e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b20      	cmp	r3, #32
 8003746:	d802      	bhi.n	800374e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800374e:	2001      	movs	r0, #1
 8003750:	f001 f9f6 	bl	8004b40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003754:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375e:	d125      	bne.n	80037ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d010      	beq.n	800378a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	3305      	adds	r3, #5
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	e01f      	b.n	80037ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	fbb2 f2f3 	udiv	r2, r2, r3
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	3305      	adds	r3, #5
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	e00e      	b.n	80037ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	3305      	adds	r3, #5
 80037c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4a5c      	ldr	r2, [pc, #368]	; (8003940 <HAL_I2S_Init+0x270>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e003      	b.n	80037f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037f0:	2302      	movs	r3, #2
 80037f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d902      	bls.n	8003804 <HAL_I2S_Init+0x134>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	2bff      	cmp	r3, #255	; 0xff
 8003802:	d907      	bls.n	8003814 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f043 0210 	orr.w	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e08f      	b.n	8003934 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	ea42 0103 	orr.w	r1, r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	430a      	orrs	r2, r1
 8003826:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003832:	f023 030f 	bic.w	r3, r3, #15
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6851      	ldr	r1, [r2, #4]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6892      	ldr	r2, [r2, #8]
 800383e:	4311      	orrs	r1, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68d2      	ldr	r2, [r2, #12]
 8003844:	4311      	orrs	r1, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6992      	ldr	r2, [r2, #24]
 800384a:	430a      	orrs	r2, r1
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003856:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d161      	bne.n	8003924 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a38      	ldr	r2, [pc, #224]	; (8003944 <HAL_I2S_Init+0x274>)
 8003864:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a37      	ldr	r2, [pc, #220]	; (8003948 <HAL_I2S_Init+0x278>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_I2S_Init+0x1a4>
 8003870:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_I2S_Init+0x27c>)
 8003872:	e001      	b.n	8003878 <HAL_I2S_Init+0x1a8>
 8003874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	4932      	ldr	r1, [pc, #200]	; (8003948 <HAL_I2S_Init+0x278>)
 8003880:	428a      	cmp	r2, r1
 8003882:	d101      	bne.n	8003888 <HAL_I2S_Init+0x1b8>
 8003884:	4a31      	ldr	r2, [pc, #196]	; (800394c <HAL_I2S_Init+0x27c>)
 8003886:	e001      	b.n	800388c <HAL_I2S_Init+0x1bc>
 8003888:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800388c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003890:	f023 030f 	bic.w	r3, r3, #15
 8003894:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <HAL_I2S_Init+0x278>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_I2S_Init+0x1d4>
 80038a0:	4b2a      	ldr	r3, [pc, #168]	; (800394c <HAL_I2S_Init+0x27c>)
 80038a2:	e001      	b.n	80038a8 <HAL_I2S_Init+0x1d8>
 80038a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a8:	2202      	movs	r2, #2
 80038aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a25      	ldr	r2, [pc, #148]	; (8003948 <HAL_I2S_Init+0x278>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_I2S_Init+0x1ea>
 80038b6:	4b25      	ldr	r3, [pc, #148]	; (800394c <HAL_I2S_Init+0x27c>)
 80038b8:	e001      	b.n	80038be <HAL_I2S_Init+0x1ee>
 80038ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ca:	d003      	beq.n	80038d4 <HAL_I2S_Init+0x204>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	e001      	b.n	80038e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038fe:	4313      	orrs	r3, r2
 8003900:	b29a      	uxth	r2, r3
 8003902:	897b      	ldrh	r3, [r7, #10]
 8003904:	4313      	orrs	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800390c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <HAL_I2S_Init+0x278>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_I2S_Init+0x24c>
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <HAL_I2S_Init+0x27c>)
 800391a:	e001      	b.n	8003920 <HAL_I2S_Init+0x250>
 800391c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003920:	897a      	ldrh	r2, [r7, #10]
 8003922:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08003a47 	.word	0x08003a47
 8003940:	cccccccd 	.word	0xcccccccd
 8003944:	08003b5d 	.word	0x08003b5d
 8003948:	40003800 	.word	0x40003800
 800394c:	40003400 	.word	0x40003400

08003950 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10e      	bne.n	80039e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ffb8 	bl	8003950 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	b292      	uxth	r2, r2
 80039fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	1c9a      	adds	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10e      	bne.n	8003a3e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff93 	bl	8003964 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d13a      	bne.n	8003ad8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d109      	bne.n	8003a80 <I2S_IRQHandler+0x3a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d102      	bne.n	8003a80 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffb4 	bl	80039e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d126      	bne.n	8003ad8 <I2S_IRQHandler+0x92>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d11f      	bne.n	8003ad8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aa6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f043 0202 	orr.w	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ff50 	bl	8003978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d136      	bne.n	8003b52 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d109      	bne.n	8003b02 <I2S_IRQHandler+0xbc>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d102      	bne.n	8003b02 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff45 	bl	800398c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d122      	bne.n	8003b52 <I2S_IRQHandler+0x10c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d11b      	bne.n	8003b52 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b28:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	f043 0204 	orr.w	r2, r3, #4
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ff13 	bl	8003978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b52:	bf00      	nop
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a92      	ldr	r2, [pc, #584]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b76:	4b92      	ldr	r3, [pc, #584]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b78:	e001      	b.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a8b      	ldr	r2, [pc, #556]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b94:	4b8a      	ldr	r3, [pc, #552]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b96:	e001      	b.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba8:	d004      	beq.n	8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 8099 	bne.w	8003ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d107      	bne.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f925 	bl	8003e18 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9c8 	bl	8003f78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d13a      	bne.n	8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d035      	beq.n	8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6e      	ldr	r2, [pc, #440]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c06:	4b6e      	ldr	r3, [pc, #440]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c08:	e001      	b.n	8003c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4969      	ldr	r1, [pc, #420]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c16:	428b      	cmp	r3, r1
 8003c18:	d101      	bne.n	8003c1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c1a:	4b69      	ldr	r3, [pc, #420]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c1c:	e001      	b.n	8003c22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c26:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fe88 	bl	8003978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	f040 80c3 	bne.w	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80bd 	beq.w	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a49      	ldr	r2, [pc, #292]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c9a:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c9c:	e001      	b.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4944      	ldr	r1, [pc, #272]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003caa:	428b      	cmp	r3, r1
 8003cac:	d101      	bne.n	8003cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cae:	4b44      	ldr	r3, [pc, #272]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cb0:	e001      	b.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f043 0204 	orr.w	r2, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fe4a 	bl	8003978 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ce4:	e089      	b.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d107      	bne.n	8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8be 	bl	8003e7c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d107      	bne.n	8003d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8fd 	bl	8003f14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d12f      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d02a      	beq.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d4a:	e001      	b.n	8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4919      	ldr	r1, [pc, #100]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d58:	428b      	cmp	r3, r1
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d5e:	e001      	b.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fdfa 	bl	8003978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d136      	bne.n	8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d031      	beq.n	8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003da4:	e001      	b.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4902      	ldr	r1, [pc, #8]	; (8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db2:	428b      	cmp	r3, r1
 8003db4:	d106      	bne.n	8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003db6:	4b02      	ldr	r3, [pc, #8]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db8:	e006      	b.n	8003dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003dba:	bf00      	nop
 8003dbc:	40003800 	.word	0x40003800
 8003dc0:	40003400 	.word	0x40003400
 8003dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dcc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f043 0204 	orr.w	r2, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fdc0 	bl	8003978 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003df8:	e000      	b.n	8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dfa:	bf00      	nop
}
 8003dfc:	bf00      	nop
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c99      	adds	r1, r3, #2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6251      	str	r1, [r2, #36]	; 0x24
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d113      	bne.n	8003e72 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ffc9 	bl	8003e04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	1c99      	adds	r1, r3, #2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e8e:	8819      	ldrh	r1, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <I2SEx_TxISR_I2SExt+0x90>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <I2SEx_TxISR_I2SExt+0x22>
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <I2SEx_TxISR_I2SExt+0x94>)
 8003e9c:	e001      	b.n	8003ea2 <I2SEx_TxISR_I2SExt+0x26>
 8003e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d121      	bne.n	8003f02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <I2SEx_TxISR_I2SExt+0x90>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <I2SEx_TxISR_I2SExt+0x50>
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <I2SEx_TxISR_I2SExt+0x94>)
 8003eca:	e001      	b.n	8003ed0 <I2SEx_TxISR_I2SExt+0x54>
 8003ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	490d      	ldr	r1, [pc, #52]	; (8003f0c <I2SEx_TxISR_I2SExt+0x90>)
 8003ed8:	428b      	cmp	r3, r1
 8003eda:	d101      	bne.n	8003ee0 <I2SEx_TxISR_I2SExt+0x64>
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <I2SEx_TxISR_I2SExt+0x94>)
 8003ede:	e001      	b.n	8003ee4 <I2SEx_TxISR_I2SExt+0x68>
 8003ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ff81 	bl	8003e04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40003800 	.word	0x40003800
 8003f10:	40003400 	.word	0x40003400

08003f14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68d8      	ldr	r0, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	1c99      	adds	r1, r3, #2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f2c:	b282      	uxth	r2, r0
 8003f2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ff4a 	bl	8003e04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a20      	ldr	r2, [pc, #128]	; (8004008 <I2SEx_RxISR_I2SExt+0x90>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <I2SEx_RxISR_I2SExt+0x16>
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <I2SEx_RxISR_I2SExt+0x94>)
 8003f8c:	e001      	b.n	8003f92 <I2SEx_RxISR_I2SExt+0x1a>
 8003f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f92:	68d8      	ldr	r0, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	1c99      	adds	r1, r3, #2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f9e:	b282      	uxth	r2, r0
 8003fa0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d121      	bne.n	8003ffe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a12      	ldr	r2, [pc, #72]	; (8004008 <I2SEx_RxISR_I2SExt+0x90>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <I2SEx_RxISR_I2SExt+0x50>
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <I2SEx_RxISR_I2SExt+0x94>)
 8003fc6:	e001      	b.n	8003fcc <I2SEx_RxISR_I2SExt+0x54>
 8003fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	490d      	ldr	r1, [pc, #52]	; (8004008 <I2SEx_RxISR_I2SExt+0x90>)
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	d101      	bne.n	8003fdc <I2SEx_RxISR_I2SExt+0x64>
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <I2SEx_RxISR_I2SExt+0x94>)
 8003fda:	e001      	b.n	8003fe0 <I2SEx_RxISR_I2SExt+0x68>
 8003fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fe4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff03 	bl	8003e04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40003800 	.word	0x40003800
 800400c:	40003400 	.word	0x40003400

08004010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e267      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d075      	beq.n	800411a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402e:	4b88      	ldr	r3, [pc, #544]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d00c      	beq.n	8004054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403a:	4b85      	ldr	r3, [pc, #532]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004042:	2b08      	cmp	r3, #8
 8004044:	d112      	bne.n	800406c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004046:	4b82      	ldr	r3, [pc, #520]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004052:	d10b      	bne.n	800406c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	4b7e      	ldr	r3, [pc, #504]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05b      	beq.n	8004118 <HAL_RCC_OscConfig+0x108>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d157      	bne.n	8004118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e242      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d106      	bne.n	8004084 <HAL_RCC_OscConfig+0x74>
 8004076:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a75      	ldr	r2, [pc, #468]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e01d      	b.n	80040c0 <HAL_RCC_OscConfig+0xb0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x98>
 800408e:	4b70      	ldr	r3, [pc, #448]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a6f      	ldr	r2, [pc, #444]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6c      	ldr	r2, [pc, #432]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0xb0>
 80040a8:	4b69      	ldr	r3, [pc, #420]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a68      	ldr	r2, [pc, #416]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	4b66      	ldr	r3, [pc, #408]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a65      	ldr	r2, [pc, #404]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80040ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fd f8e0 	bl	800128c <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fd f8dc 	bl	800128c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e207      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b5b      	ldr	r3, [pc, #364]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0xc0>
 80040ee:	e014      	b.n	800411a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fd f8cc 	bl	800128c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fd f8c8 	bl	800128c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e1f3      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410a:	4b51      	ldr	r3, [pc, #324]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0xe8>
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d063      	beq.n	80041ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004126:	4b4a      	ldr	r3, [pc, #296]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413a:	2b08      	cmp	r3, #8
 800413c:	d11c      	bne.n	8004178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413e:	4b44      	ldr	r3, [pc, #272]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_RCC_OscConfig+0x152>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e1c7      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004162:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4937      	ldr	r1, [pc, #220]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004176:	e03a      	b.n	80041ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004180:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCC_OscConfig+0x244>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd f881 	bl	800128c <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418e:	f7fd f87d 	bl	800128c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e1a8      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a0:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4925      	ldr	r1, [pc, #148]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]
 80041c0:	e015      	b.n	80041ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCC_OscConfig+0x244>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fd f860 	bl	800128c <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fd f85c 	bl	800128c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e187      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d036      	beq.n	8004268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d016      	beq.n	8004230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <HAL_RCC_OscConfig+0x248>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd f840 	bl	800128c <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004210:	f7fd f83c 	bl	800128c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e167      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCC_OscConfig+0x240>)
 8004224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x200>
 800422e:	e01b      	b.n	8004268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RCC_OscConfig+0x248>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004236:	f7fd f829 	bl	800128c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	e00e      	b.n	800425c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423e:	f7fd f825 	bl	800128c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d907      	bls.n	800425c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e150      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
 8004250:	40023800 	.word	0x40023800
 8004254:	42470000 	.word	0x42470000
 8004258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800425c:	4b88      	ldr	r3, [pc, #544]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1ea      	bne.n	800423e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8097 	beq.w	80043a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427a:	4b81      	ldr	r3, [pc, #516]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	4b7d      	ldr	r3, [pc, #500]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a7c      	ldr	r2, [pc, #496]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
 8004296:	4b7a      	ldr	r3, [pc, #488]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a6:	4b77      	ldr	r3, [pc, #476]	; (8004484 <HAL_RCC_OscConfig+0x474>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d118      	bne.n	80042e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b2:	4b74      	ldr	r3, [pc, #464]	; (8004484 <HAL_RCC_OscConfig+0x474>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a73      	ldr	r2, [pc, #460]	; (8004484 <HAL_RCC_OscConfig+0x474>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042be:	f7fc ffe5 	bl	800128c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c6:	f7fc ffe1 	bl	800128c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e10c      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCC_OscConfig+0x474>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x2ea>
 80042ec:	4b64      	ldr	r3, [pc, #400]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a63      	ldr	r2, [pc, #396]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
 80042f8:	e01c      	b.n	8004334 <HAL_RCC_OscConfig+0x324>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b05      	cmp	r3, #5
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x30c>
 8004302:	4b5f      	ldr	r3, [pc, #380]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a5e      	ldr	r2, [pc, #376]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004308:	f043 0304 	orr.w	r3, r3, #4
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	4b5c      	ldr	r3, [pc, #368]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a5b      	ldr	r2, [pc, #364]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0x324>
 800431c:	4b58      	ldr	r3, [pc, #352]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	4a57      	ldr	r2, [pc, #348]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
 8004328:	4b55      	ldr	r3, [pc, #340]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	4a54      	ldr	r2, [pc, #336]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800432e:	f023 0304 	bic.w	r3, r3, #4
 8004332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d015      	beq.n	8004368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fc ffa6 	bl	800128c <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	e00a      	b.n	800435a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004344:	f7fc ffa2 	bl	800128c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0cb      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435a:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ee      	beq.n	8004344 <HAL_RCC_OscConfig+0x334>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004368:	f7fc ff90 	bl	800128c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fc ff8c 	bl	800128c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0b5      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004386:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1ee      	bne.n	8004370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004398:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	4a38      	ldr	r2, [pc, #224]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80a1 	beq.w	80044f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ae:	4b34      	ldr	r3, [pc, #208]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d05c      	beq.n	8004474 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d141      	bne.n	8004446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCC_OscConfig+0x478>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fc ff60 	bl	800128c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fc ff5c 	bl	800128c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e087      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	085b      	lsrs	r3, r3, #1
 8004406:	3b01      	subs	r3, #1
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	061b      	lsls	r3, r3, #24
 8004412:	491b      	ldr	r1, [pc, #108]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_RCC_OscConfig+0x478>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fc ff35 	bl	800128c <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004426:	f7fc ff31 	bl	800128c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e05c      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x416>
 8004444:	e054      	b.n	80044f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <HAL_RCC_OscConfig+0x478>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fc ff1e 	bl	800128c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004454:	f7fc ff1a 	bl	800128c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e045      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_OscConfig+0x470>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x444>
 8004472:	e03d      	b.n	80044f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d107      	bne.n	800448c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e038      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
 8004480:	40023800 	.word	0x40023800
 8004484:	40007000 	.word	0x40007000
 8004488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x4ec>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d028      	beq.n	80044ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d121      	bne.n	80044ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d11a      	bne.n	80044ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d111      	bne.n	80044ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800

08004500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0cc      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004514:	4b68      	ldr	r3, [pc, #416]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d90c      	bls.n	800453c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b65      	ldr	r3, [pc, #404]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0b8      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d020      	beq.n	800458a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004554:	4b59      	ldr	r3, [pc, #356]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a58      	ldr	r2, [pc, #352]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800455e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800456c:	4b53      	ldr	r3, [pc, #332]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4a52      	ldr	r2, [pc, #328]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	494d      	ldr	r1, [pc, #308]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d044      	beq.n	8004620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d119      	bne.n	80045de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e07f      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d003      	beq.n	80045be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e06f      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ce:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e067      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f023 0203 	bic.w	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4934      	ldr	r1, [pc, #208]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f0:	f7fc fe4c 	bl	800128c <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	e00a      	b.n	800460e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fc fe48 	bl	800128c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e04f      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460e:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 020c 	and.w	r2, r3, #12
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	429a      	cmp	r2, r3
 800461e:	d1eb      	bne.n	80045f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004620:	4b25      	ldr	r3, [pc, #148]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d20c      	bcs.n	8004648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e032      	b.n	80046ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4916      	ldr	r1, [pc, #88]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	490e      	ldr	r1, [pc, #56]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004686:	f000 f821 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 800468a:	4602      	mov	r2, r0
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	490a      	ldr	r1, [pc, #40]	; (80046c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	5ccb      	ldrb	r3, [r1, r3]
 800469a:	fa22 f303 	lsr.w	r3, r2, r3
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc fcd8 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023c00 	.word	0x40023c00
 80046bc:	40023800 	.word	0x40023800
 80046c0:	080088e0 	.word	0x080088e0
 80046c4:	20000000 	.word	0x20000000
 80046c8:	20000004 	.word	0x20000004

080046cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b094      	sub	sp, #80	; 0x50
 80046d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	647b      	str	r3, [r7, #68]	; 0x44
 80046d8:	2300      	movs	r3, #0
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046dc:	2300      	movs	r3, #0
 80046de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e4:	4b79      	ldr	r3, [pc, #484]	; (80048cc <HAL_RCC_GetSysClockFreq+0x200>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d00d      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0x40>
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	f200 80e1 	bhi.w	80048b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x34>
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x3a>
 80046fe:	e0db      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004700:	4b73      	ldr	r3, [pc, #460]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004702:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004704:	e0db      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004706:	4b73      	ldr	r3, [pc, #460]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800470a:	e0d8      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800470c:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_GetSysClockFreq+0x200>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004716:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d063      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004722:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	2200      	movs	r2, #0
 800472a:	63bb      	str	r3, [r7, #56]	; 0x38
 800472c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
 8004736:	2300      	movs	r3, #0
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
 800473a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800473e:	4622      	mov	r2, r4
 8004740:	462b      	mov	r3, r5
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	0159      	lsls	r1, r3, #5
 800474c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004750:	0150      	lsls	r0, r2, #5
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4621      	mov	r1, r4
 8004758:	1a51      	subs	r1, r2, r1
 800475a:	6139      	str	r1, [r7, #16]
 800475c:	4629      	mov	r1, r5
 800475e:	eb63 0301 	sbc.w	r3, r3, r1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004770:	4659      	mov	r1, fp
 8004772:	018b      	lsls	r3, r1, #6
 8004774:	4651      	mov	r1, sl
 8004776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800477a:	4651      	mov	r1, sl
 800477c:	018a      	lsls	r2, r1, #6
 800477e:	4651      	mov	r1, sl
 8004780:	ebb2 0801 	subs.w	r8, r2, r1
 8004784:	4659      	mov	r1, fp
 8004786:	eb63 0901 	sbc.w	r9, r3, r1
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479e:	4690      	mov	r8, r2
 80047a0:	4699      	mov	r9, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	eb18 0303 	adds.w	r3, r8, r3
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	462b      	mov	r3, r5
 80047ac:	eb49 0303 	adc.w	r3, r9, r3
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047be:	4629      	mov	r1, r5
 80047c0:	024b      	lsls	r3, r1, #9
 80047c2:	4621      	mov	r1, r4
 80047c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047c8:	4621      	mov	r1, r4
 80047ca:	024a      	lsls	r2, r1, #9
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	2200      	movs	r2, #0
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047dc:	f7fb fcf8 	bl	80001d0 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4613      	mov	r3, r2
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e8:	e058      	b.n	800489c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ea:	4b38      	ldr	r3, [pc, #224]	; (80048cc <HAL_RCC_GetSysClockFreq+0x200>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	2200      	movs	r2, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	4611      	mov	r1, r2
 80047f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047fa:	623b      	str	r3, [r7, #32]
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004800:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	f04f 0000 	mov.w	r0, #0
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	0159      	lsls	r1, r3, #5
 8004812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004816:	0150      	lsls	r0, r2, #5
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4641      	mov	r1, r8
 800481e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004822:	4649      	mov	r1, r9
 8004824:	eb63 0b01 	sbc.w	fp, r3, r1
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004834:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004838:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800483c:	ebb2 040a 	subs.w	r4, r2, sl
 8004840:	eb63 050b 	sbc.w	r5, r3, fp
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	00eb      	lsls	r3, r5, #3
 800484e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004852:	00e2      	lsls	r2, r4, #3
 8004854:	4614      	mov	r4, r2
 8004856:	461d      	mov	r5, r3
 8004858:	4643      	mov	r3, r8
 800485a:	18e3      	adds	r3, r4, r3
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	464b      	mov	r3, r9
 8004860:	eb45 0303 	adc.w	r3, r5, r3
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004872:	4629      	mov	r1, r5
 8004874:	028b      	lsls	r3, r1, #10
 8004876:	4621      	mov	r1, r4
 8004878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800487c:	4621      	mov	r1, r4
 800487e:	028a      	lsls	r2, r1, #10
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004886:	2200      	movs	r2, #0
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	61fa      	str	r2, [r7, #28]
 800488c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004890:	f7fb fc9e 	bl	80001d0 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4613      	mov	r3, r2
 800489a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_GetSysClockFreq+0x200>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	3301      	adds	r3, #1
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b6:	e002      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3750      	adds	r7, #80	; 0x50
 80048c4:	46bd      	mov	sp, r7
 80048c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	007a1200 	.word	0x007a1200

080048d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_RCC_GetHCLKFreq+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000000 	.word	0x20000000

080048f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048f4:	f7ff fff0 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	0a9b      	lsrs	r3, r3, #10
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4903      	ldr	r1, [pc, #12]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40023800 	.word	0x40023800
 8004914:	080088f0 	.word	0x080088f0

08004918 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	220f      	movs	r2, #15
 8004926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0203 	and.w	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800494c:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	08db      	lsrs	r3, r3, #3
 8004952:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <HAL_RCC_GetClockConfig+0x60>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0207 	and.w	r2, r3, #7
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	40023c00 	.word	0x40023c00

0800497c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d035      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049a4:	4b62      	ldr	r3, [pc, #392]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049aa:	f7fc fc6f 	bl	800128c <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b0:	e008      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049b2:	f7fc fc6b 	bl	800128c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0b0      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049c4:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	019a      	lsls	r2, r3, #6
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	071b      	lsls	r3, r3, #28
 80049dc:	4955      	ldr	r1, [pc, #340]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049e4:	4b52      	ldr	r3, [pc, #328]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ea:	f7fc fc4f 	bl	800128c <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049f2:	f7fc fc4b 	bl	800128c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e090      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a04:	4b4b      	ldr	r3, [pc, #300]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8083 	beq.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b44      	ldr	r3, [pc, #272]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	4a43      	ldr	r2, [pc, #268]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3e      	ldr	r2, [pc, #248]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a46:	f7fc fc21 	bl	800128c <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a4e:	f7fc fc1d 	bl	800128c <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e062      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a6c:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02f      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d028      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a94:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004aa0:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d114      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fc fbeb 	bl	800128c <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fc fbe7 	bl	800128c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e02a      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ee      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae8:	d10d      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	490d      	ldr	r1, [pc, #52]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]
 8004b04:	e005      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b10:	6093      	str	r3, [r2, #8]
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1e:	4905      	ldr	r1, [pc, #20]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	42470068 	.word	0x42470068
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	42470e40 	.word	0x42470e40

08004b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d13f      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b74:	d12f      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b76:	4b1f      	ldr	r3, [pc, #124]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b78:	617b      	str	r3, [r7, #20]
          break;
 8004b7a:	e02f      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b7c:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b88:	d108      	bne.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e007      	b.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba4:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bac:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	0f1b      	lsrs	r3, r3, #28
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	617b      	str	r3, [r7, #20]
          break;
 8004bd4:	e002      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
          break;
 8004bda:	bf00      	nop
        }
      }
      break;
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004bde:	bf00      	nop
    }
  }
  return frequency;
 8004be0:	697b      	ldr	r3, [r7, #20]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	00bb8000 	.word	0x00bb8000
 8004bf8:	007a1200 	.word	0x007a1200
 8004bfc:	00f42400 	.word	0x00f42400

08004c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e07b      	b.n	8004d0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d108      	bne.n	8004c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c22:	d009      	beq.n	8004c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	61da      	str	r2, [r3, #28]
 8004c2a:	e005      	b.n	8004c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc f958 	bl	8000f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	ea42 0103 	orr.w	r1, r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0104 	and.w	r1, r3, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0210 	and.w	r2, r3, #16
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e041      	b.n	8004da8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f839 	bl	8004db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f000 f9bf 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d001      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e04e      	b.n	8004e7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d022      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d01d      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x80>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_TIM_Base_Start_IT+0xc8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d018      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x80>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x80>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00e      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d009      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x80>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a19      	ldr	r2, [pc, #100]	; (8004e9c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x80>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d111      	bne.n	8004e68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d010      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e66:	e007      	b.n	8004e78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40010400 	.word	0x40010400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40001800 	.word	0x40001800

08004ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d020      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01b      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0202 	mvn.w	r2, #2
 8004ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f8d2 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8c4 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f8d5 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d020      	beq.n	8004f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0204 	mvn.w	r2, #4
 8004f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8ac 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004f40:	e005      	b.n	8004f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f89e 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8af 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d020      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01b      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0208 	mvn.w	r2, #8
 8004f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2204      	movs	r2, #4
 8004f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f886 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f878 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f889 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d020      	beq.n	8004fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01b      	beq.n	8004fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0210 	mvn.w	r2, #16
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f860 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f852 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f863 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0201 	mvn.w	r2, #1
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fb fe70 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800502c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f906 	bl	8005240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f834 	bl	80050c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00c      	beq.n	800507c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0220 	mvn.w	r2, #32
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8d8 	bl	800522c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a46      	ldr	r2, [pc, #280]	; (8005200 <TIM_Base_SetConfig+0x12c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f2:	d00f      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a43      	ldr	r2, [pc, #268]	; (8005204 <TIM_Base_SetConfig+0x130>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a42      	ldr	r2, [pc, #264]	; (8005208 <TIM_Base_SetConfig+0x134>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a41      	ldr	r2, [pc, #260]	; (800520c <TIM_Base_SetConfig+0x138>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a40      	ldr	r2, [pc, #256]	; (8005210 <TIM_Base_SetConfig+0x13c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a35      	ldr	r2, [pc, #212]	; (8005200 <TIM_Base_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d027      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a32      	ldr	r2, [pc, #200]	; (8005204 <TIM_Base_SetConfig+0x130>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d023      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a31      	ldr	r2, [pc, #196]	; (8005208 <TIM_Base_SetConfig+0x134>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a30      	ldr	r2, [pc, #192]	; (800520c <TIM_Base_SetConfig+0x138>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <TIM_Base_SetConfig+0x13c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d017      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <TIM_Base_SetConfig+0x140>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <TIM_Base_SetConfig+0x144>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2c      	ldr	r2, [pc, #176]	; (800521c <TIM_Base_SetConfig+0x148>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <TIM_Base_SetConfig+0x14c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <TIM_Base_SetConfig+0x150>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a29      	ldr	r2, [pc, #164]	; (8005228 <TIM_Base_SetConfig+0x154>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d108      	bne.n	8005198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a10      	ldr	r2, [pc, #64]	; (8005200 <TIM_Base_SetConfig+0x12c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0xf8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a12      	ldr	r2, [pc, #72]	; (8005210 <TIM_Base_SetConfig+0x13c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d103      	bne.n	80051d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d105      	bne.n	80051f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f023 0201 	bic.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]
  }
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40010400 	.word	0x40010400
 8005214:	40014000 	.word	0x40014000
 8005218:	40014400 	.word	0x40014400
 800521c:	40014800 	.word	0x40014800
 8005220:	40001800 	.word	0x40001800
 8005224:	40001c00 	.word	0x40001c00
 8005228:	40002000 	.word	0x40002000

0800522c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005254:	b084      	sub	sp, #16
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	f107 001c 	add.w	r0, r7, #28
 8005262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005266:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800526a:	2b01      	cmp	r3, #1
 800526c:	d123      	bne.n	80052b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005296:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800529a:	2b01      	cmp	r3, #1
 800529c:	d105      	bne.n	80052aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f98d 	bl	80055ca <USB_CoreReset>
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	e01b      	b.n	80052ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f981 	bl	80055ca <USB_CoreReset>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
 80052e0:	e005      	b.n	80052ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052ee:	7fbb      	ldrb	r3, [r7, #30]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d10b      	bne.n	800530c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f043 0206 	orr.w	r2, r3, #6
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005318:	b004      	add	sp, #16
 800531a:	4770      	bx	lr

0800531c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 0201 	bic.w	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d115      	bne.n	800538c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800536c:	200a      	movs	r0, #10
 800536e:	f7fb ff99 	bl	80012a4 <HAL_Delay>
      ms += 10U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	330a      	adds	r3, #10
 8005376:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f918 	bl	80055ae <USB_GetMode>
 800537e:	4603      	mov	r3, r0
 8005380:	2b01      	cmp	r3, #1
 8005382:	d01e      	beq.n	80053c2 <USB_SetCurrentMode+0x84>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2bc7      	cmp	r3, #199	; 0xc7
 8005388:	d9f0      	bls.n	800536c <USB_SetCurrentMode+0x2e>
 800538a:	e01a      	b.n	80053c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d115      	bne.n	80053be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800539e:	200a      	movs	r0, #10
 80053a0:	f7fb ff80 	bl	80012a4 <HAL_Delay>
      ms += 10U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	330a      	adds	r3, #10
 80053a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8ff 	bl	80055ae <USB_GetMode>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <USB_SetCurrentMode+0x84>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2bc7      	cmp	r3, #199	; 0xc7
 80053ba:	d9f0      	bls.n	800539e <USB_SetCurrentMode+0x60>
 80053bc:	e001      	b.n	80053c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e005      	b.n	80053ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2bc8      	cmp	r3, #200	; 0xc8
 80053c6:	d101      	bne.n	80053cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053f0:	d901      	bls.n	80053f6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e01b      	b.n	800542e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	daf2      	bge.n	80053e4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800541a:	d901      	bls.n	8005420 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e006      	b.n	800542e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b20      	cmp	r3, #32
 800542a:	d0f0      	beq.n	800540e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3301      	adds	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005452:	d901      	bls.n	8005458 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e018      	b.n	800548a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	daf2      	bge.n	8005446 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2210      	movs	r2, #16
 8005468:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005476:	d901      	bls.n	800547c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e006      	b.n	800548a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d0f0      	beq.n	800546a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005496:	b480      	push	{r7}
 8005498:	b08b      	sub	sp, #44	; 0x2c
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	4613      	mov	r3, r2
 80054a2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	089b      	lsrs	r3, r3, #2
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054bc:	2300      	movs	r3, #0
 80054be:	623b      	str	r3, [r7, #32]
 80054c0:	e014      	b.n	80054ec <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	3301      	adds	r3, #1
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	3301      	adds	r3, #1
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	3301      	adds	r3, #1
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	3301      	adds	r3, #1
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	3301      	adds	r3, #1
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3e6      	bcc.n	80054c2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054f4:	8bfb      	ldrh	r3, [r7, #30]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01e      	beq.n	8005538 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005504:	461a      	mov	r2, r3
 8005506:	f107 0310 	add.w	r3, r7, #16
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	fa22 f303 	lsr.w	r3, r2, r3
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	701a      	strb	r2, [r3, #0]
      i++;
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	3301      	adds	r3, #1
 8005524:	623b      	str	r3, [r7, #32]
      pDest++;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	3301      	adds	r3, #1
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800552c:	8bfb      	ldrh	r3, [r7, #30]
 800552e:	3b01      	subs	r3, #1
 8005530:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005532:	8bfb      	ldrh	r3, [r7, #30]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ea      	bne.n	800550e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800553a:	4618      	mov	r0, r3
 800553c:	372c      	adds	r7, #44	; 0x2c
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800555e:	68fb      	ldr	r3, [r7, #12]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4013      	ands	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055a0:	68bb      	ldr	r3, [r7, #8]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0301 	and.w	r3, r3, #1
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055e2:	d901      	bls.n	80055e8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e01b      	b.n	8005620 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	daf2      	bge.n	80055d6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800560c:	d901      	bls.n	8005612 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e006      	b.n	8005620 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d0f0      	beq.n	8005600 <USB_CoreReset+0x36>

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800562c:	b084      	sub	sp, #16
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800563a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800564c:	461a      	mov	r2, r3
 800564e:	2300      	movs	r3, #0
 8005650:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d119      	bne.n	80056b6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10a      	bne.n	80056a0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005698:	f043 0304 	orr.w	r3, r3, #4
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e014      	b.n	80056ca <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056ae:	f023 0304 	bic.w	r3, r3, #4
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	e009      	b.n	80056ca <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056ca:	2110      	movs	r1, #16
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff fe82 	bl	80053d6 <USB_FlushTxFifo>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff feac 	bl	800543a <USB_FlushRxFifo>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e015      	b.n	800571e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
 8005704:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	3301      	adds	r3, #1
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005722:	461a      	mov	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4293      	cmp	r3, r2
 8005728:	d3e3      	bcc.n	80056f2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f04f 32ff 	mov.w	r2, #4294967295
 8005736:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a18      	ldr	r2, [pc, #96]	; (800579c <USB_HostInit+0x170>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10b      	bne.n	8005758 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005746:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <USB_HostInit+0x174>)
 800574c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <USB_HostInit+0x178>)
 8005752:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005756:	e009      	b.n	800576c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <USB_HostInit+0x17c>)
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a11      	ldr	r2, [pc, #68]	; (80057ac <USB_HostInit+0x180>)
 8005768:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800576c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f043 0210 	orr.w	r2, r3, #16
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <USB_HostInit+0x184>)
 8005786:	4313      	orrs	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005798:	b004      	add	sp, #16
 800579a:	4770      	bx	lr
 800579c:	40040000 	.word	0x40040000
 80057a0:	01000200 	.word	0x01000200
 80057a4:	00e00300 	.word	0x00e00300
 80057a8:	00600080 	.word	0x00600080
 80057ac:	004000e0 	.word	0x004000e0
 80057b0:	a3200008 	.word	0xa3200008

080057b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057fc:	461a      	mov	r2, r3
 80057fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005802:	6053      	str	r3, [r2, #4]
 8005804:	e00c      	b.n	8005820 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d107      	bne.n	800581c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005812:	461a      	mov	r2, r3
 8005814:	f241 7370 	movw	r3, #6000	; 0x1770
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	e001      	b.n	8005820 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	b29b      	uxth	r3, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	0c9b      	lsrs	r3, r3, #18
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0fdb      	lsrs	r3, r3, #31
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	0fdb      	lsrs	r3, r3, #31
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d10d      	bne.n	80058d2 <USB_HC_Halt+0x82>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <USB_HC_Halt+0x82>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d002      	beq.n	80058ce <USB_HC_Halt+0x7e>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d101      	bne.n	80058d2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e0d8      	b.n	8005a84 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <USB_HC_Halt+0x8e>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d173      	bne.n	80059c6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d14a      	bne.n	80059a0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d133      	bne.n	800597e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005934:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005954:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	3301      	adds	r3, #1
 800595a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005962:	d82e      	bhi.n	80059c2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800597a:	d0ec      	beq.n	8005956 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800597c:	e081      	b.n	8005a82 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800599c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800599e:	e070      	b.n	8005a82 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059be:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059c0:	e05f      	b.n	8005a82 <USB_HC_Halt+0x232>
            break;
 80059c2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059c4:	e05d      	b.n	8005a82 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d133      	bne.n	8005a5e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a14:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a34:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a42:	d81d      	bhi.n	8005a80 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5a:	d0ec      	beq.n	8005a36 <USB_HC_Halt+0x1e6>
 8005a5c:	e011      	b.n	8005a82 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e000      	b.n	8005a82 <USB_HC_Halt+0x232>
          break;
 8005a80:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3724      	adds	r7, #36	; 0x24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa2:	2b84      	cmp	r3, #132	; 0x84
 8005aa4:	d005      	beq.n	8005ab2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005aa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	3303      	adds	r3, #3
 8005ab0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ac4:	f001 fcfe 	bl	80074c4 <vTaskStartScheduler>
  
  return osOK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	bd80      	pop	{r7, pc}

08005ace <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad0:	b089      	sub	sp, #36	; 0x24
 8005ad2:	af04      	add	r7, sp, #16
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d020      	beq.n	8005b22 <osThreadCreate+0x54>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01c      	beq.n	8005b22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685c      	ldr	r4, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691e      	ldr	r6, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff ffc8 	bl	8005a90 <makeFreeRtosPriority>
 8005b00:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b0a:	9202      	str	r2, [sp, #8]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	9100      	str	r1, [sp, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	4632      	mov	r2, r6
 8005b14:	4629      	mov	r1, r5
 8005b16:	4620      	mov	r0, r4
 8005b18:	f001 fb0c 	bl	8007134 <xTaskCreateStatic>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e01c      	b.n	8005b5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685c      	ldr	r4, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b2e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff ffaa 	bl	8005a90 <makeFreeRtosPriority>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	9200      	str	r2, [sp, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f001 fb4e 	bl	80071ee <xTaskCreate>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d001      	beq.n	8005b5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <osDelay+0x16>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e000      	b.n	8005b7e <osDelay+0x18>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 fc6c 	bl	800745c <vTaskDelay>
  
  return osOK;
 8005b84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d013      	beq.n	8005bce <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <osTimerCreate+0x20>
 8005bac:	2101      	movs	r1, #1
 8005bae:	e000      	b.n	8005bb2 <osTimerCreate+0x22>
 8005bb0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8005bba:	9201      	str	r2, [sp, #4]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	480b      	ldr	r0, [pc, #44]	; (8005bf4 <osTimerCreate+0x64>)
 8005bc6:	f002 fa30 	bl	800802a <xTimerCreateStatic>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	e00e      	b.n	8005bec <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005bce:	7afb      	ldrb	r3, [r7, #11]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <osTimerCreate+0x48>
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	e000      	b.n	8005bda <osTimerCreate+0x4a>
 8005bd8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2101      	movs	r1, #1
 8005be4:	4803      	ldr	r0, [pc, #12]	; (8005bf4 <osTimerCreate+0x64>)
 8005be6:	f002 f9ff 	bl	8007fe8 <xTimerCreate>
 8005bea:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	080088c4 	.word	0x080088c4

08005bf8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	2001      	movs	r0, #1
 8005c10:	f000 fe8d 	bl	800692e <xQueueCreateMutexStatic>
 8005c14:	4603      	mov	r3, r0
 8005c16:	e003      	b.n	8005c20 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005c18:	2001      	movs	r0, #1
 8005c1a:	f000 fe70 	bl	80068fe <xQueueCreateMutex>
 8005c1e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d011      	beq.n	8005c5e <osMessageCreate+0x36>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2400      	movs	r4, #0
 8005c54:	9400      	str	r4, [sp, #0]
 8005c56:	f000 fd67 	bl	8006728 <xQueueGenericCreateStatic>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	e008      	b.n	8005c70 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f000 fdd5 	bl	8006818 <xQueueGenericCreate>
 8005c6e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd90      	pop	{r4, r7, pc}

08005c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c84:	f001 fc84 	bl	8007590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c88:	4b5b      	ldr	r3, [pc, #364]	; (8005df8 <pvPortMalloc+0x180>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c90:	f000 f920 	bl	8005ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c94:	4b59      	ldr	r3, [pc, #356]	; (8005dfc <pvPortMalloc+0x184>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 8093 	bne.w	8005dc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01d      	beq.n	8005ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ca8:	2208      	movs	r2, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d014      	beq.n	8005ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d06e      	beq.n	8005dc8 <pvPortMalloc+0x150>
 8005cea:	4b45      	ldr	r3, [pc, #276]	; (8005e00 <pvPortMalloc+0x188>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d869      	bhi.n	8005dc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cf4:	4b43      	ldr	r3, [pc, #268]	; (8005e04 <pvPortMalloc+0x18c>)
 8005cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cf8:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <pvPortMalloc+0x18c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfe:	e004      	b.n	8005d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <pvPortMalloc+0xa4>
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f1      	bne.n	8005d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <pvPortMalloc+0x180>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d050      	beq.n	8005dc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	4413      	add	r3, r2
 8005d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	1ad2      	subs	r2, r2, r3
 8005d40:	2308      	movs	r3, #8
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d91f      	bls.n	8005d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <pvPortMalloc+0xf8>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	613b      	str	r3, [r7, #16]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	1ad2      	subs	r2, r2, r3
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d82:	69b8      	ldr	r0, [r7, #24]
 8005d84:	f000 f908 	bl	8005f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d88:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <pvPortMalloc+0x188>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <pvPortMalloc+0x188>)
 8005d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <pvPortMalloc+0x188>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <pvPortMalloc+0x190>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d203      	bcs.n	8005daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005da2:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <pvPortMalloc+0x188>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <pvPortMalloc+0x190>)
 8005da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x184>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <pvPortMalloc+0x194>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a11      	ldr	r2, [pc, #68]	; (8005e0c <pvPortMalloc+0x194>)
 8005dc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dc8:	f001 fbf0 	bl	80075ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <pvPortMalloc+0x174>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	60fb      	str	r3, [r7, #12]
}
 8005de8:	bf00      	nop
 8005dea:	e7fe      	b.n	8005dea <pvPortMalloc+0x172>
	return pvReturn;
 8005dec:	69fb      	ldr	r3, [r7, #28]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3728      	adds	r7, #40	; 0x28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	2000483c 	.word	0x2000483c
 8005dfc:	20004850 	.word	0x20004850
 8005e00:	20004840 	.word	0x20004840
 8005e04:	20004834 	.word	0x20004834
 8005e08:	20004844 	.word	0x20004844
 8005e0c:	20004848 	.word	0x20004848

08005e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d04d      	beq.n	8005ebe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e22:	2308      	movs	r3, #8
 8005e24:	425b      	negs	r3, r3
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <vPortFree+0xb8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <vPortFree+0x44>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60fb      	str	r3, [r7, #12]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <vPortFree+0x62>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60bb      	str	r3, [r7, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <vPortFree+0xb8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01e      	beq.n	8005ebe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11a      	bne.n	8005ebe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <vPortFree+0xb8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	43db      	mvns	r3, r3
 8005e92:	401a      	ands	r2, r3
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e98:	f001 fb7a 	bl	8007590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <vPortFree+0xbc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <vPortFree+0xbc>)
 8005ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f000 f874 	bl	8005f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <vPortFree+0xc0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	4a06      	ldr	r2, [pc, #24]	; (8005ed0 <vPortFree+0xc0>)
 8005eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eba:	f001 fb77 	bl	80075ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ebe:	bf00      	nop
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20004850 	.word	0x20004850
 8005ecc:	20004840 	.word	0x20004840
 8005ed0:	2000484c 	.word	0x2000484c

08005ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ee0:	4b27      	ldr	r3, [pc, #156]	; (8005f80 <prvHeapInit+0xac>)
 8005ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00c      	beq.n	8005f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3307      	adds	r3, #7
 8005ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0307 	bic.w	r3, r3, #7
 8005efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <prvHeapInit+0xac>)
 8005f04:	4413      	add	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <prvHeapInit+0xb0>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f12:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <prvHeapInit+0xb0>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f20:	2208      	movs	r2, #8
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0307 	bic.w	r3, r3, #7
 8005f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <prvHeapInit+0xb4>)
 8005f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <prvHeapInit+0xb4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <prvHeapInit+0xb4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <prvHeapInit+0xb4>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <prvHeapInit+0xb8>)
 8005f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4a09      	ldr	r2, [pc, #36]	; (8005f90 <prvHeapInit+0xbc>)
 8005f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <prvHeapInit+0xc0>)
 8005f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20000c34 	.word	0x20000c34
 8005f84:	20004834 	.word	0x20004834
 8005f88:	2000483c 	.word	0x2000483c
 8005f8c:	20004844 	.word	0x20004844
 8005f90:	20004840 	.word	0x20004840
 8005f94:	20004850 	.word	0x20004850

08005f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fa0:	4b28      	ldr	r3, [pc, #160]	; (8006044 <prvInsertBlockIntoFreeList+0xac>)
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e002      	b.n	8005fac <prvInsertBlockIntoFreeList+0x14>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d8f7      	bhi.n	8005fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d108      	bne.n	8005fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	441a      	add	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d118      	bne.n	8006020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d00d      	beq.n	8006016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	441a      	add	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e008      	b.n	8006028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <prvInsertBlockIntoFreeList+0xb0>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e003      	b.n	8006028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	429a      	cmp	r2, r3
 800602e:	d002      	beq.n	8006036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20004834 	.word	0x20004834
 8006048:	2000483c 	.word	0x2000483c

0800604c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f103 0208 	add.w	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f04f 32ff 	mov.w	r2, #4294967295
 8006064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f103 0208 	add.w	r2, r3, #8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f103 0208 	add.w	r2, r3, #8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d103      	bne.n	800610e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	e00c      	b.n	8006128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3308      	adds	r3, #8
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e002      	b.n	800611c <vListInsert+0x2e>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d2f6      	bcs.n	8006116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6892      	ldr	r2, [r2, #8]
 8006176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6852      	ldr	r2, [r2, #4]
 8006180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	429a      	cmp	r2, r3
 800618a:	d103      	bne.n	8006194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	1e5a      	subs	r2, r3, #1
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3b04      	subs	r3, #4
 80061c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061e4:	4a0c      	ldr	r2, [pc, #48]	; (8006218 <pxPortInitialiseStack+0x64>)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3b14      	subs	r3, #20
 80061ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3b04      	subs	r3, #4
 80061fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f06f 0202 	mvn.w	r2, #2
 8006202:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3b20      	subs	r3, #32
 8006208:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800620a:	68fb      	ldr	r3, [r7, #12]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	0800621d 	.word	0x0800621d

0800621c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006226:	4b12      	ldr	r3, [pc, #72]	; (8006270 <prvTaskExitError+0x54>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d00a      	beq.n	8006246 <prvTaskExitError+0x2a>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <prvTaskExitError+0x28>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60bb      	str	r3, [r7, #8]
}
 8006258:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800625a:	bf00      	nop
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0fc      	beq.n	800625c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	2000000c 	.word	0x2000000c
	...

08006280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <pxCurrentTCBConst2>)
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	6808      	ldr	r0, [r1, #0]
 8006286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	f380 8809 	msr	PSP, r0
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f380 8811 	msr	BASEPRI, r0
 800629a:	4770      	bx	lr
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst2>:
 80062a0:	2000489c 	.word	0x2000489c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop

080062a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062a8:	4808      	ldr	r0, [pc, #32]	; (80062cc <prvPortStartFirstTask+0x24>)
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	6800      	ldr	r0, [r0, #0]
 80062ae:	f380 8808 	msr	MSP, r0
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8814 	msr	CONTROL, r0
 80062ba:	b662      	cpsie	i
 80062bc:	b661      	cpsie	f
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	df00      	svc	0
 80062c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ca:	bf00      	nop
 80062cc:	e000ed08 	.word	0xe000ed08

080062d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062d6:	4b46      	ldr	r3, [pc, #280]	; (80063f0 <xPortStartScheduler+0x120>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a46      	ldr	r2, [pc, #280]	; (80063f4 <xPortStartScheduler+0x124>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10a      	bne.n	80062f6 <xPortStartScheduler+0x26>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062f6:	4b3e      	ldr	r3, [pc, #248]	; (80063f0 <xPortStartScheduler+0x120>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a3f      	ldr	r2, [pc, #252]	; (80063f8 <xPortStartScheduler+0x128>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10a      	bne.n	8006316 <xPortStartScheduler+0x46>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006316:	4b39      	ldr	r3, [pc, #228]	; (80063fc <xPortStartScheduler+0x12c>)
 8006318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006338:	b2da      	uxtb	r2, r3
 800633a:	4b31      	ldr	r3, [pc, #196]	; (8006400 <xPortStartScheduler+0x130>)
 800633c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800633e:	4b31      	ldr	r3, [pc, #196]	; (8006404 <xPortStartScheduler+0x134>)
 8006340:	2207      	movs	r2, #7
 8006342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006344:	e009      	b.n	800635a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006346:	4b2f      	ldr	r3, [pc, #188]	; (8006404 <xPortStartScheduler+0x134>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3b01      	subs	r3, #1
 800634c:	4a2d      	ldr	r2, [pc, #180]	; (8006404 <xPortStartScheduler+0x134>)
 800634e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	b2db      	uxtb	r3, r3
 8006358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d0ef      	beq.n	8006346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006366:	4b27      	ldr	r3, [pc, #156]	; (8006404 <xPortStartScheduler+0x134>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1c3 0307 	rsb	r3, r3, #7
 800636e:	2b04      	cmp	r3, #4
 8006370:	d00a      	beq.n	8006388 <xPortStartScheduler+0xb8>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60bb      	str	r3, [r7, #8]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006388:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <xPortStartScheduler+0x134>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <xPortStartScheduler+0x134>)
 8006390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xPortStartScheduler+0x134>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800639a:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <xPortStartScheduler+0x134>)
 800639c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063a6:	4b18      	ldr	r3, [pc, #96]	; (8006408 <xPortStartScheduler+0x138>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a17      	ldr	r2, [pc, #92]	; (8006408 <xPortStartScheduler+0x138>)
 80063ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063b2:	4b15      	ldr	r3, [pc, #84]	; (8006408 <xPortStartScheduler+0x138>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a14      	ldr	r2, [pc, #80]	; (8006408 <xPortStartScheduler+0x138>)
 80063b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063be:	f000 f8dd 	bl	800657c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063c2:	4b12      	ldr	r3, [pc, #72]	; (800640c <xPortStartScheduler+0x13c>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063c8:	f000 f8fc 	bl	80065c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <xPortStartScheduler+0x140>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <xPortStartScheduler+0x140>)
 80063d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063d8:	f7ff ff66 	bl	80062a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063dc:	f001 fa4a 	bl	8007874 <vTaskSwitchContext>
	prvTaskExitError();
 80063e0:	f7ff ff1c 	bl	800621c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	e000ed00 	.word	0xe000ed00
 80063f4:	410fc271 	.word	0x410fc271
 80063f8:	410fc270 	.word	0x410fc270
 80063fc:	e000e400 	.word	0xe000e400
 8006400:	20004854 	.word	0x20004854
 8006404:	20004858 	.word	0x20004858
 8006408:	e000ed20 	.word	0xe000ed20
 800640c:	2000000c 	.word	0x2000000c
 8006410:	e000ef34 	.word	0xe000ef34

08006414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	607b      	str	r3, [r7, #4]
}
 800642c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800642e:	4b0f      	ldr	r3, [pc, #60]	; (800646c <vPortEnterCritical+0x58>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <vPortEnterCritical+0x58>)
 8006436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <vPortEnterCritical+0x58>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10f      	bne.n	8006460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <vPortEnterCritical+0x5c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <vPortEnterCritical+0x4c>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	603b      	str	r3, [r7, #0]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vPortEnterCritical+0x4a>
	}
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	2000000c 	.word	0x2000000c
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <vPortExitCritical+0x50>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <vPortExitCritical+0x24>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	607b      	str	r3, [r7, #4]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <vPortExitCritical+0x50>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3b01      	subs	r3, #1
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <vPortExitCritical+0x50>)
 80064a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <vPortExitCritical+0x50>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d105      	bne.n	80064b6 <vPortExitCritical+0x42>
 80064aa:	2300      	movs	r3, #0
 80064ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	2000000c 	.word	0x2000000c
	...

080064d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064d0:	f3ef 8009 	mrs	r0, PSP
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4b15      	ldr	r3, [pc, #84]	; (8006530 <pxCurrentTCBConst>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f01e 0f10 	tst.w	lr, #16
 80064e0:	bf08      	it	eq
 80064e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064f4:	f380 8811 	msr	BASEPRI, r0
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f001 f9b8 	bl	8007874 <vTaskSwitchContext>
 8006504:	f04f 0000 	mov.w	r0, #0
 8006508:	f380 8811 	msr	BASEPRI, r0
 800650c:	bc09      	pop	{r0, r3}
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	6808      	ldr	r0, [r1, #0]
 8006512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006516:	f01e 0f10 	tst.w	lr, #16
 800651a:	bf08      	it	eq
 800651c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006520:	f380 8809 	msr	PSP, r0
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst>:
 8006530:	2000489c 	.word	0x2000489c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006552:	f001 f8d7 	bl	8007704 <xTaskIncrementTick>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <SysTick_Handler+0x40>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f383 8811 	msr	BASEPRI, r3
}
 800656e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <vPortSetupTimerInterrupt+0x34>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <vPortSetupTimerInterrupt+0x38>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <vPortSetupTimerInterrupt+0x3c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <vPortSetupTimerInterrupt+0x40>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <vPortSetupTimerInterrupt+0x44>)
 800659a:	3b01      	subs	r3, #1
 800659c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800659e:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <vPortSetupTimerInterrupt+0x34>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	e000e010 	.word	0xe000e010
 80065b4:	e000e018 	.word	0xe000e018
 80065b8:	20000000 	.word	0x20000000
 80065bc:	10624dd3 	.word	0x10624dd3
 80065c0:	e000e014 	.word	0xe000e014

080065c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065d4 <vPortEnableVFP+0x10>
 80065c8:	6801      	ldr	r1, [r0, #0]
 80065ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065ce:	6001      	str	r1, [r0, #0]
 80065d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065d2:	bf00      	nop
 80065d4:	e000ed88 	.word	0xe000ed88

080065d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065de:	f3ef 8305 	mrs	r3, IPSR
 80065e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d914      	bls.n	8006614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <vPortValidateInterruptPriority+0x70>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065f4:	4b15      	ldr	r3, [pc, #84]	; (800664c <vPortValidateInterruptPriority+0x74>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	7afa      	ldrb	r2, [r7, #11]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d20a      	bcs.n	8006614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006614:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <vPortValidateInterruptPriority+0x78>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800661c:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <vPortValidateInterruptPriority+0x7c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d90a      	bls.n	800663a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	603b      	str	r3, [r7, #0]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <vPortValidateInterruptPriority+0x60>
	}
 800663a:	bf00      	nop
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	e000e3f0 	.word	0xe000e3f0
 800664c:	20004854 	.word	0x20004854
 8006650:	e000ed0c 	.word	0xe000ed0c
 8006654:	20004858 	.word	0x20004858

08006658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <xQueueGenericReset+0x2a>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60bb      	str	r3, [r7, #8]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006682:	f7ff fec7 	bl	8006414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	441a      	add	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	3b01      	subs	r3, #1
 80066b4:	68f9      	ldr	r1, [r7, #12]
 80066b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	22ff      	movs	r2, #255	; 0xff
 80066c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d114      	bne.n	8006702 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01a      	beq.n	8006716 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3310      	adds	r3, #16
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 f971 	bl	80079cc <xTaskRemoveFromEventList>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <xQueueGenericReset+0xcc>)
 80066f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	e009      	b.n	8006716 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3310      	adds	r3, #16
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fca0 	bl	800604c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3324      	adds	r3, #36	; 0x24
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fc9b 	bl	800604c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006716:	f7ff fead 	bl	8006474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800671a:	2301      	movs	r3, #1
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08e      	sub	sp, #56	; 0x38
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <xQueueGenericCreateStatic+0x52>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <xQueueGenericCreateStatic+0x56>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <xQueueGenericCreateStatic+0x58>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	623b      	str	r3, [r7, #32]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <xQueueGenericCreateStatic+0x7e>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <xQueueGenericCreateStatic+0x82>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <xQueueGenericCreateStatic+0x84>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	61fb      	str	r3, [r7, #28]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067c6:	2348      	movs	r3, #72	; 0x48
 80067c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b48      	cmp	r3, #72	; 0x48
 80067ce:	d00a      	beq.n	80067e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	61bb      	str	r3, [r7, #24]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	4613      	mov	r3, r2
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f83f 	bl	800688c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006810:	4618      	mov	r0, r3
 8006812:	3730      	adds	r7, #48	; 0x30
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xQueueGenericCreate+0x2a>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	613b      	str	r3, [r7, #16]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	3348      	adds	r3, #72	; 0x48
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff fa11 	bl	8005c78 <pvPortMalloc>
 8006856:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	3348      	adds	r3, #72	; 0x48
 8006866:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006870:	79fa      	ldrb	r2, [r7, #7]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f805 	bl	800688c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006882:	69bb      	ldr	r3, [r7, #24]
	}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e002      	b.n	80068ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068ba:	2101      	movs	r1, #1
 80068bc:	69b8      	ldr	r0, [r7, #24]
 80068be:	f7ff fecb 	bl	8006658 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00e      	beq.n	80068f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80068ea:	2300      	movs	r3, #0
 80068ec:	2200      	movs	r2, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f837 	bl	8006964 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80068f6:	bf00      	nop
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b086      	sub	sp, #24
 8006902:	af00      	add	r7, sp, #0
 8006904:	4603      	mov	r3, r0
 8006906:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006908:	2301      	movs	r3, #1
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	461a      	mov	r2, r3
 8006914:	6939      	ldr	r1, [r7, #16]
 8006916:	6978      	ldr	r0, [r7, #20]
 8006918:	f7ff ff7e 	bl	8006818 <xQueueGenericCreate>
 800691c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff ffd3 	bl	80068ca <prvInitialiseMutex>

		return xNewQueue;
 8006924:	68fb      	ldr	r3, [r7, #12]
	}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800692e:	b580      	push	{r7, lr}
 8006930:	b088      	sub	sp, #32
 8006932:	af02      	add	r7, sp, #8
 8006934:	4603      	mov	r3, r0
 8006936:	6039      	str	r1, [r7, #0]
 8006938:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800693a:	2301      	movs	r3, #1
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	6939      	ldr	r1, [r7, #16]
 800694c:	6978      	ldr	r0, [r7, #20]
 800694e:	f7ff feeb 	bl	8006728 <xQueueGenericCreateStatic>
 8006952:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff ffb8 	bl	80068ca <prvInitialiseMutex>

		return xNewQueue;
 800695a:	68fb      	ldr	r3, [r7, #12]
	}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueGenericSend+0x32>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <xQueueGenericSend+0x40>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <xQueueGenericSend+0x44>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <xQueueGenericSend+0x46>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <xQueueGenericSend+0x60>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d103      	bne.n	80069d2 <xQueueGenericSend+0x6e>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <xQueueGenericSend+0x72>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <xQueueGenericSend+0x74>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	623b      	str	r3, [r7, #32]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f2:	f001 f9a7 	bl	8007d44 <xTaskGetSchedulerState>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <xQueueGenericSend+0x9e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <xQueueGenericSend+0xa2>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <xQueueGenericSend+0xa4>
 8006a06:	2300      	movs	r3, #0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	61fb      	str	r3, [r7, #28]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a22:	f7ff fcf7 	bl	8006414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d302      	bcc.n	8006a38 <xQueueGenericSend+0xd4>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d129      	bne.n	8006a8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3e:	f000 fa0b 	bl	8006e58 <prvCopyDataToQueue>
 8006a42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d010      	beq.n	8006a6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	3324      	adds	r3, #36	; 0x24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 ffbb 	bl	80079cc <xTaskRemoveFromEventList>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d013      	beq.n	8006a84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a5c:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <xQueueGenericSend+0x1f8>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	e00a      	b.n	8006a84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a74:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <xQueueGenericSend+0x1f8>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a84:	f7ff fcf6 	bl	8006474 <vPortExitCritical>
				return pdPASS;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e063      	b.n	8006b54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a92:	f7ff fcef 	bl	8006474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e05c      	b.n	8006b54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa0:	f107 0314 	add.w	r3, r7, #20
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fff3 	bl	8007a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aae:	f7ff fce1 	bl	8006474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ab2:	f000 fd6d 	bl	8007590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab6:	f7ff fcad 	bl	8006414 <vPortEnterCritical>
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d103      	bne.n	8006ad0 <xQueueGenericSend+0x16c>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad6:	b25b      	sxtb	r3, r3
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d103      	bne.n	8006ae6 <xQueueGenericSend+0x182>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae6:	f7ff fcc5 	bl	8006474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aea:	1d3a      	adds	r2, r7, #4
 8006aec:	f107 0314 	add.w	r3, r7, #20
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 ffe2 	bl	8007abc <xTaskCheckForTimeOut>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d124      	bne.n	8006b48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b00:	f000 faa2 	bl	8007048 <prvIsQueueFull>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d018      	beq.n	8006b3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	3310      	adds	r3, #16
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 ff0a 	bl	800792c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b1a:	f000 fa2d 	bl	8006f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b1e:	f000 fd45 	bl	80075ac <xTaskResumeAll>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f47f af7c 	bne.w	8006a22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <xQueueGenericSend+0x1f8>)
 8006b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	e772      	b.n	8006a22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b3e:	f000 fa1b 	bl	8006f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b42:	f000 fd33 	bl	80075ac <xTaskResumeAll>
 8006b46:	e76c      	b.n	8006a22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4a:	f000 fa15 	bl	8006f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b4e:	f000 fd2d 	bl	80075ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3738      	adds	r7, #56	; 0x38
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b090      	sub	sp, #64	; 0x40
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <xQueueGenericSendFromISR+0x3c>
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <xQueueGenericSendFromISR+0x40>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <xQueueGenericSendFromISR+0x42>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d103      	bne.n	8006bca <xQueueGenericSendFromISR+0x6a>
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <xQueueGenericSendFromISR+0x6e>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericSendFromISR+0x70>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	623b      	str	r3, [r7, #32]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bea:	f7ff fcf5 	bl	80065d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006bee:	f3ef 8211 	mrs	r2, BASEPRI
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	61fa      	str	r2, [r7, #28]
 8006c04:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006c06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <xQueueGenericSendFromISR+0xbc>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d12f      	bne.n	8006c7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c32:	f000 f911 	bl	8006e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d112      	bne.n	8006c66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d016      	beq.n	8006c76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	3324      	adds	r3, #36	; 0x24
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 febd 	bl	80079cc <xTaskRemoveFromEventList>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00e      	beq.n	8006c76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	e007      	b.n	8006c76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	b25a      	sxtb	r2, r3
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c76:	2301      	movs	r3, #1
 8006c78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c7a:	e001      	b.n	8006c80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f383 8811 	msr	BASEPRI, r3
}
 8006c8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3740      	adds	r7, #64	; 0x40
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08c      	sub	sp, #48	; 0x30
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <xQueueReceive+0x30>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	623b      	str	r3, [r7, #32]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <xQueueReceive+0x3e>
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <xQueueReceive+0x42>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <xQueueReceive+0x44>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <xQueueReceive+0x5e>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	61fb      	str	r3, [r7, #28]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf6:	f001 f825 	bl	8007d44 <xTaskGetSchedulerState>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <xQueueReceive+0x6e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <xQueueReceive+0x72>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueReceive+0x74>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueReceive+0x8e>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	61bb      	str	r3, [r7, #24]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d26:	f7ff fb75 	bl	8006414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01f      	beq.n	8006d76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d3a:	f000 f8f7 	bl	8006f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	1e5a      	subs	r2, r3, #1
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00f      	beq.n	8006d6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	3310      	adds	r3, #16
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fe3a 	bl	80079cc <xTaskRemoveFromEventList>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d5e:	4b3d      	ldr	r3, [pc, #244]	; (8006e54 <xQueueReceive+0x1bc>)
 8006d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d6e:	f7ff fb81 	bl	8006474 <vPortExitCritical>
				return pdPASS;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e069      	b.n	8006e4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7c:	f7ff fb7a 	bl	8006474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e062      	b.n	8006e4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d8a:	f107 0310 	add.w	r3, r7, #16
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fe7e 	bl	8007a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d98:	f7ff fb6c 	bl	8006474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9c:	f000 fbf8 	bl	8007590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006da0:	f7ff fb38 	bl	8006414 <vPortEnterCritical>
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006daa:	b25b      	sxtb	r3, r3
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d103      	bne.n	8006dba <xQueueReceive+0x122>
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	d103      	bne.n	8006dd0 <xQueueReceive+0x138>
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd0:	f7ff fb50 	bl	8006474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd4:	1d3a      	adds	r2, r7, #4
 8006dd6:	f107 0310 	add.w	r3, r7, #16
 8006dda:	4611      	mov	r1, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fe6d 	bl	8007abc <xTaskCheckForTimeOut>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d123      	bne.n	8006e30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dea:	f000 f917 	bl	800701c <prvIsQueueEmpty>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d017      	beq.n	8006e24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	3324      	adds	r3, #36	; 0x24
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fd95 	bl	800792c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e04:	f000 f8b8 	bl	8006f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e08:	f000 fbd0 	bl	80075ac <xTaskResumeAll>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d189      	bne.n	8006d26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e12:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <xQueueReceive+0x1bc>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	e780      	b.n	8006d26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e26:	f000 f8a7 	bl	8006f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2a:	f000 fbbf 	bl	80075ac <xTaskResumeAll>
 8006e2e:	e77a      	b.n	8006d26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e32:	f000 f8a1 	bl	8006f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e36:	f000 fbb9 	bl	80075ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e3c:	f000 f8ee 	bl	800701c <prvIsQueueEmpty>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f43f af6f 	beq.w	8006d26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3730      	adds	r7, #48	; 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d14d      	bne.n	8006f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 ff7c 	bl	8007d80 <xTaskPriorityDisinherit>
 8006e88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	609a      	str	r2, [r3, #8]
 8006e90:	e043      	b.n	8006f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d119      	bne.n	8006ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6858      	ldr	r0, [r3, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	f001 fc50 	bl	8008748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	441a      	add	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d32b      	bcc.n	8006f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	e026      	b.n	8006f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	68d8      	ldr	r0, [r3, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	f001 fc36 	bl	8008748 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	425b      	negs	r3, r3
 8006ee6:	441a      	add	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d207      	bcs.n	8006f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	425b      	negs	r3, r3
 8006f02:	441a      	add	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d105      	bne.n	8006f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f22:	697b      	ldr	r3, [r7, #20]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d018      	beq.n	8006f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	441a      	add	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d303      	bcc.n	8006f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68d9      	ldr	r1, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6838      	ldr	r0, [r7, #0]
 8006f6c:	f001 fbec 	bl	8008748 <memcpy>
	}
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f80:	f7ff fa48 	bl	8006414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f8c:	e011      	b.n	8006fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d012      	beq.n	8006fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3324      	adds	r3, #36	; 0x24
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fd16 	bl	80079cc <xTaskRemoveFromEventList>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fa6:	f000 fdeb 	bl	8007b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dce9      	bgt.n	8006f8e <prvUnlockQueue+0x16>
 8006fba:	e000      	b.n	8006fbe <prvUnlockQueue+0x46>
					break;
 8006fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	22ff      	movs	r2, #255	; 0xff
 8006fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006fc6:	f7ff fa55 	bl	8006474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fca:	f7ff fa23 	bl	8006414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fd6:	e011      	b.n	8006ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d012      	beq.n	8007006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3310      	adds	r3, #16
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fcf1 	bl	80079cc <xTaskRemoveFromEventList>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ff0:	f000 fdc6 	bl	8007b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	dce9      	bgt.n	8006fd8 <prvUnlockQueue+0x60>
 8007004:	e000      	b.n	8007008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	22ff      	movs	r2, #255	; 0xff
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007010:	f7ff fa30 	bl	8006474 <vPortExitCritical>
}
 8007014:	bf00      	nop
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007024:	f7ff f9f6 	bl	8006414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007030:	2301      	movs	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e001      	b.n	800703a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800703a:	f7ff fa1b 	bl	8006474 <vPortExitCritical>

	return xReturn;
 800703e:	68fb      	ldr	r3, [r7, #12]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007050:	f7ff f9e0 	bl	8006414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705c:	429a      	cmp	r2, r3
 800705e:	d102      	bne.n	8007066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	e001      	b.n	800706a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800706a:	f7ff fa03 	bl	8006474 <vPortExitCritical>

	return xReturn;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	e014      	b.n	80070b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007088:	4a0f      	ldr	r2, [pc, #60]	; (80070c8 <vQueueAddToRegistry+0x50>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007094:	490c      	ldr	r1, [pc, #48]	; (80070c8 <vQueueAddToRegistry+0x50>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800709e:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <vQueueAddToRegistry+0x50>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4413      	add	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070aa:	e006      	b.n	80070ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b07      	cmp	r3, #7
 80070b6:	d9e7      	bls.n	8007088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	2000485c 	.word	0x2000485c

080070cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070dc:	f7ff f99a 	bl	8006414 <vPortEnterCritical>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e6:	b25b      	sxtb	r3, r3
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d103      	bne.n	80070f6 <vQueueWaitForMessageRestricted+0x2a>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070fc:	b25b      	sxtb	r3, r3
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d103      	bne.n	800710c <vQueueWaitForMessageRestricted+0x40>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800710c:	f7ff f9b2 	bl	8006474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fc27 	bl	8007974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007126:	6978      	ldr	r0, [r7, #20]
 8007128:	f7ff ff26 	bl	8006f78 <prvUnlockQueue>
	}
 800712c:	bf00      	nop
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08e      	sub	sp, #56	; 0x38
 8007138:	af04      	add	r7, sp, #16
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	623b      	str	r3, [r7, #32]
}
 800715a:	bf00      	nop
 800715c:	e7fe      	b.n	800715c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xTaskCreateStatic+0x46>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	61fb      	str	r3, [r7, #28]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800717a:	2354      	movs	r3, #84	; 0x54
 800717c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b54      	cmp	r3, #84	; 0x54
 8007182:	d00a      	beq.n	800719a <xTaskCreateStatic+0x66>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	61bb      	str	r3, [r7, #24]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800719a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01e      	beq.n	80071e0 <xTaskCreateStatic+0xac>
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01b      	beq.n	80071e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071ba:	2300      	movs	r3, #0
 80071bc:	9303      	str	r3, [sp, #12]
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	f107 0314 	add.w	r3, r7, #20
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 f850 	bl	8007278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071da:	f000 f8d5 	bl	8007388 <prvAddNewTaskToReadyList>
 80071de:	e001      	b.n	80071e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071e4:	697b      	ldr	r3, [r7, #20]
	}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3728      	adds	r7, #40	; 0x28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b08c      	sub	sp, #48	; 0x30
 80071f2:	af04      	add	r7, sp, #16
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fd38 	bl	8005c78 <pvPortMalloc>
 8007208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00e      	beq.n	800722e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007210:	2054      	movs	r0, #84	; 0x54
 8007212:	f7fe fd31 	bl	8005c78 <pvPortMalloc>
 8007216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
 8007224:	e005      	b.n	8007232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007226:	6978      	ldr	r0, [r7, #20]
 8007228:	f7fe fdf2 	bl	8005e10 <vPortFree>
 800722c:	e001      	b.n	8007232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007240:	88fa      	ldrh	r2, [r7, #6]
 8007242:	2300      	movs	r3, #0
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	9302      	str	r3, [sp, #8]
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f80e 	bl	8007278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800725c:	69f8      	ldr	r0, [r7, #28]
 800725e:	f000 f893 	bl	8007388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007262:	2301      	movs	r3, #1
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	e002      	b.n	800726e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007268:	f04f 33ff 	mov.w	r3, #4294967295
 800726c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800726e:	69bb      	ldr	r3, [r7, #24]
	}
 8007270:	4618      	mov	r0, r3
 8007272:	3720      	adds	r7, #32
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007290:	3b01      	subs	r3, #1
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	617b      	str	r3, [r7, #20]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01f      	beq.n	8007306 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	e012      	b.n	80072f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	7819      	ldrb	r1, [r3, #0]
 80072d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	3334      	adds	r3, #52	; 0x34
 80072dc:	460a      	mov	r2, r1
 80072de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b0f      	cmp	r3, #15
 80072f6:	d9e9      	bls.n	80072cc <prvInitialiseNewTask+0x54>
 80072f8:	e000      	b.n	80072fc <prvInitialiseNewTask+0x84>
			{
				break;
 80072fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007304:	e003      	b.n	800730e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	2b06      	cmp	r3, #6
 8007312:	d901      	bls.n	8007318 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007314:	2306      	movs	r3, #6
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800731c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007322:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	2200      	movs	r2, #0
 8007328:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe feac 	bl	800608c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	3318      	adds	r3, #24
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fea7 	bl	800608c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	f1c3 0207 	rsb	r2, r3, #7
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2200      	movs	r2, #0
 8007358:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	68f9      	ldr	r1, [r7, #12]
 8007366:	69b8      	ldr	r0, [r7, #24]
 8007368:	f7fe ff24 	bl	80061b4 <pxPortInitialiseStack>
 800736c:	4602      	mov	r2, r0
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800737e:	bf00      	nop
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007390:	f7ff f840 	bl	8006414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007394:	4b2a      	ldr	r3, [pc, #168]	; (8007440 <prvAddNewTaskToReadyList+0xb8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	4a29      	ldr	r2, [pc, #164]	; (8007440 <prvAddNewTaskToReadyList+0xb8>)
 800739c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800739e:	4b29      	ldr	r3, [pc, #164]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073a6:	4a27      	ldr	r2, [pc, #156]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073ac:	4b24      	ldr	r3, [pc, #144]	; (8007440 <prvAddNewTaskToReadyList+0xb8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d110      	bne.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073b4:	f000 fc08 	bl	8007bc8 <prvInitialiseTaskLists>
 80073b8:	e00d      	b.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <prvAddNewTaskToReadyList+0xc0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073c2:	4b20      	ldr	r3, [pc, #128]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d802      	bhi.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073d0:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <prvAddNewTaskToReadyList+0xc4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3301      	adds	r3, #1
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <prvAddNewTaskToReadyList+0xc4>)
 80073de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	2201      	movs	r2, #1
 80073e6:	409a      	lsls	r2, r3
 80073e8:	4b19      	ldr	r3, [pc, #100]	; (8007450 <prvAddNewTaskToReadyList+0xc8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	4a18      	ldr	r2, [pc, #96]	; (8007450 <prvAddNewTaskToReadyList+0xc8>)
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4a15      	ldr	r2, [pc, #84]	; (8007454 <prvAddNewTaskToReadyList+0xcc>)
 8007400:	441a      	add	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f7fe fe4c 	bl	80060a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800740e:	f7ff f831 	bl	8006474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007412:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <prvAddNewTaskToReadyList+0xc0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800741a:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	429a      	cmp	r2, r3
 8007426:	d207      	bcs.n	8007438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <prvAddNewTaskToReadyList+0xd0>)
 800742a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	2000499c 	.word	0x2000499c
 8007444:	2000489c 	.word	0x2000489c
 8007448:	200049a8 	.word	0x200049a8
 800744c:	200049b8 	.word	0x200049b8
 8007450:	200049a4 	.word	0x200049a4
 8007454:	200048a0 	.word	0x200048a0
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d017      	beq.n	800749e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800746e:	4b13      	ldr	r3, [pc, #76]	; (80074bc <vTaskDelay+0x60>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <vTaskDelay+0x30>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60bb      	str	r3, [r7, #8]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800748c:	f000 f880 	bl	8007590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007490:	2100      	movs	r1, #0
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fcfa 	bl	8007e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007498:	f000 f888 	bl	80075ac <xTaskResumeAll>
 800749c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d107      	bne.n	80074b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <vTaskDelay+0x64>)
 80074a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200049c4 	.word	0x200049c4
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074d2:	463a      	mov	r2, r7
 80074d4:	1d39      	adds	r1, r7, #4
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	4618      	mov	r0, r3
 80074dc:	f7f8 fff6 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	9202      	str	r2, [sp, #8]
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	2300      	movs	r3, #0
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	2300      	movs	r3, #0
 80074f0:	460a      	mov	r2, r1
 80074f2:	4921      	ldr	r1, [pc, #132]	; (8007578 <vTaskStartScheduler+0xb4>)
 80074f4:	4821      	ldr	r0, [pc, #132]	; (800757c <vTaskStartScheduler+0xb8>)
 80074f6:	f7ff fe1d 	bl	8007134 <xTaskCreateStatic>
 80074fa:	4603      	mov	r3, r0
 80074fc:	4a20      	ldr	r2, [pc, #128]	; (8007580 <vTaskStartScheduler+0xbc>)
 80074fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007500:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <vTaskStartScheduler+0xbc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007508:	2301      	movs	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	e001      	b.n	8007512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d102      	bne.n	800751e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007518:	f000 fd1e 	bl	8007f58 <xTimerCreateTimerTask>
 800751c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d116      	bne.n	8007552 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	613b      	str	r3, [r7, #16]
}
 8007536:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007538:	4b12      	ldr	r3, [pc, #72]	; (8007584 <vTaskStartScheduler+0xc0>)
 800753a:	f04f 32ff 	mov.w	r2, #4294967295
 800753e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007540:	4b11      	ldr	r3, [pc, #68]	; (8007588 <vTaskStartScheduler+0xc4>)
 8007542:	2201      	movs	r2, #1
 8007544:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <vTaskStartScheduler+0xc8>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800754c:	f7fe fec0 	bl	80062d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007550:	e00e      	b.n	8007570 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d10a      	bne.n	8007570 <vTaskStartScheduler+0xac>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	60fb      	str	r3, [r7, #12]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <vTaskStartScheduler+0xaa>
}
 8007570:	bf00      	nop
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	080088c8 	.word	0x080088c8
 800757c:	08007b99 	.word	0x08007b99
 8007580:	200049c0 	.word	0x200049c0
 8007584:	200049bc 	.word	0x200049bc
 8007588:	200049a8 	.word	0x200049a8
 800758c:	200049a0 	.word	0x200049a0

08007590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007594:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <vTaskSuspendAll+0x18>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3301      	adds	r3, #1
 800759a:	4a03      	ldr	r2, [pc, #12]	; (80075a8 <vTaskSuspendAll+0x18>)
 800759c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800759e:	bf00      	nop
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	200049c4 	.word	0x200049c4

080075ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075ba:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <xTaskResumeAll+0x114>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	603b      	str	r3, [r7, #0]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075d8:	f7fe ff1c 	bl	8006414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075dc:	4b38      	ldr	r3, [pc, #224]	; (80076c0 <xTaskResumeAll+0x114>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	4a37      	ldr	r2, [pc, #220]	; (80076c0 <xTaskResumeAll+0x114>)
 80075e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e6:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <xTaskResumeAll+0x114>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d161      	bne.n	80076b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075ee:	4b35      	ldr	r3, [pc, #212]	; (80076c4 <xTaskResumeAll+0x118>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d05d      	beq.n	80076b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075f6:	e02e      	b.n	8007656 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f8:	4b33      	ldr	r3, [pc, #204]	; (80076c8 <xTaskResumeAll+0x11c>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3318      	adds	r3, #24
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fdab 	bl	8006160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fda6 	bl	8006160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	2201      	movs	r2, #1
 800761a:	409a      	lsls	r2, r3
 800761c:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <xTaskResumeAll+0x120>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4313      	orrs	r3, r2
 8007622:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <xTaskResumeAll+0x120>)
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4a27      	ldr	r2, [pc, #156]	; (80076d0 <xTaskResumeAll+0x124>)
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3304      	adds	r3, #4
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f7fe fd32 	bl	80060a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	4b23      	ldr	r3, [pc, #140]	; (80076d4 <xTaskResumeAll+0x128>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	429a      	cmp	r2, r3
 800764e:	d302      	bcc.n	8007656 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007650:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <xTaskResumeAll+0x12c>)
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007656:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <xTaskResumeAll+0x11c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1cc      	bne.n	80075f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007664:	f000 fb4e 	bl	8007d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007668:	4b1c      	ldr	r3, [pc, #112]	; (80076dc <xTaskResumeAll+0x130>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007674:	f000 f846 	bl	8007704 <xTaskIncrementTick>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800767e:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <xTaskResumeAll+0x12c>)
 8007680:	2201      	movs	r2, #1
 8007682:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3b01      	subs	r3, #1
 8007688:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f1      	bne.n	8007674 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <xTaskResumeAll+0x130>)
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <xTaskResumeAll+0x12c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800769e:	2301      	movs	r3, #1
 80076a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <xTaskResumeAll+0x134>)
 80076a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b2:	f7fe fedf 	bl	8006474 <vPortExitCritical>

	return xAlreadyYielded;
 80076b6:	68bb      	ldr	r3, [r7, #8]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	200049c4 	.word	0x200049c4
 80076c4:	2000499c 	.word	0x2000499c
 80076c8:	2000495c 	.word	0x2000495c
 80076cc:	200049a4 	.word	0x200049a4
 80076d0:	200048a0 	.word	0x200048a0
 80076d4:	2000489c 	.word	0x2000489c
 80076d8:	200049b0 	.word	0x200049b0
 80076dc:	200049ac 	.word	0x200049ac
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <xTaskGetTickCount+0x1c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076f0:	687b      	ldr	r3, [r7, #4]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	200049a0 	.word	0x200049a0

08007704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800770e:	4b4e      	ldr	r3, [pc, #312]	; (8007848 <xTaskIncrementTick+0x144>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f040 808e 	bne.w	8007834 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007718:	4b4c      	ldr	r3, [pc, #304]	; (800784c <xTaskIncrementTick+0x148>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007720:	4a4a      	ldr	r2, [pc, #296]	; (800784c <xTaskIncrementTick+0x148>)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d120      	bne.n	800776e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800772c:	4b48      	ldr	r3, [pc, #288]	; (8007850 <xTaskIncrementTick+0x14c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <xTaskIncrementTick+0x48>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	603b      	str	r3, [r7, #0]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <xTaskIncrementTick+0x46>
 800774c:	4b40      	ldr	r3, [pc, #256]	; (8007850 <xTaskIncrementTick+0x14c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	4b40      	ldr	r3, [pc, #256]	; (8007854 <xTaskIncrementTick+0x150>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a3e      	ldr	r2, [pc, #248]	; (8007850 <xTaskIncrementTick+0x14c>)
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	4a3e      	ldr	r2, [pc, #248]	; (8007854 <xTaskIncrementTick+0x150>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	4b3d      	ldr	r3, [pc, #244]	; (8007858 <xTaskIncrementTick+0x154>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	4a3c      	ldr	r2, [pc, #240]	; (8007858 <xTaskIncrementTick+0x154>)
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	f000 facb 	bl	8007d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800776e:	4b3b      	ldr	r3, [pc, #236]	; (800785c <xTaskIncrementTick+0x158>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	429a      	cmp	r2, r3
 8007776:	d348      	bcc.n	800780a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007778:	4b35      	ldr	r3, [pc, #212]	; (8007850 <xTaskIncrementTick+0x14c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007782:	4b36      	ldr	r3, [pc, #216]	; (800785c <xTaskIncrementTick+0x158>)
 8007784:	f04f 32ff 	mov.w	r2, #4294967295
 8007788:	601a      	str	r2, [r3, #0]
					break;
 800778a:	e03e      	b.n	800780a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778c:	4b30      	ldr	r3, [pc, #192]	; (8007850 <xTaskIncrementTick+0x14c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d203      	bcs.n	80077ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077a4:	4a2d      	ldr	r2, [pc, #180]	; (800785c <xTaskIncrementTick+0x158>)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077aa:	e02e      	b.n	800780a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3304      	adds	r3, #4
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fcd5 	bl	8006160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d004      	beq.n	80077c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	3318      	adds	r3, #24
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fccc 	bl	8006160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	2201      	movs	r2, #1
 80077ce:	409a      	lsls	r2, r3
 80077d0:	4b23      	ldr	r3, [pc, #140]	; (8007860 <xTaskIncrementTick+0x15c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	4a22      	ldr	r2, [pc, #136]	; (8007860 <xTaskIncrementTick+0x15c>)
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <xTaskIncrementTick+0x160>)
 80077e8:	441a      	add	r2, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3304      	adds	r3, #4
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f7fe fc58 	bl	80060a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <xTaskIncrementTick+0x164>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	429a      	cmp	r2, r3
 8007802:	d3b9      	bcc.n	8007778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007804:	2301      	movs	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007808:	e7b6      	b.n	8007778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800780a:	4b17      	ldr	r3, [pc, #92]	; (8007868 <xTaskIncrementTick+0x164>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	4914      	ldr	r1, [pc, #80]	; (8007864 <xTaskIncrementTick+0x160>)
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d901      	bls.n	8007826 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007822:	2301      	movs	r3, #1
 8007824:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007826:	4b11      	ldr	r3, [pc, #68]	; (800786c <xTaskIncrementTick+0x168>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d007      	beq.n	800783e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e004      	b.n	800783e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <xTaskIncrementTick+0x16c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3301      	adds	r3, #1
 800783a:	4a0d      	ldr	r2, [pc, #52]	; (8007870 <xTaskIncrementTick+0x16c>)
 800783c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800783e:	697b      	ldr	r3, [r7, #20]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	200049c4 	.word	0x200049c4
 800784c:	200049a0 	.word	0x200049a0
 8007850:	20004954 	.word	0x20004954
 8007854:	20004958 	.word	0x20004958
 8007858:	200049b4 	.word	0x200049b4
 800785c:	200049bc 	.word	0x200049bc
 8007860:	200049a4 	.word	0x200049a4
 8007864:	200048a0 	.word	0x200048a0
 8007868:	2000489c 	.word	0x2000489c
 800786c:	200049b0 	.word	0x200049b0
 8007870:	200049ac 	.word	0x200049ac

08007874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800787a:	4b27      	ldr	r3, [pc, #156]	; (8007918 <vTaskSwitchContext+0xa4>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007882:	4b26      	ldr	r3, [pc, #152]	; (800791c <vTaskSwitchContext+0xa8>)
 8007884:	2201      	movs	r2, #1
 8007886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007888:	e03f      	b.n	800790a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <vTaskSwitchContext+0xa8>)
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007890:	4b23      	ldr	r3, [pc, #140]	; (8007920 <vTaskSwitchContext+0xac>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	fab3 f383 	clz	r3, r3
 800789c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800789e:	7afb      	ldrb	r3, [r7, #11]
 80078a0:	f1c3 031f 	rsb	r3, r3, #31
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	491f      	ldr	r1, [pc, #124]	; (8007924 <vTaskSwitchContext+0xb0>)
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	607b      	str	r3, [r7, #4]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <vTaskSwitchContext+0x5a>
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4a12      	ldr	r2, [pc, #72]	; (8007924 <vTaskSwitchContext+0xb0>)
 80078dc:	4413      	add	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3308      	adds	r3, #8
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d104      	bne.n	8007900 <vTaskSwitchContext+0x8c>
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	605a      	str	r2, [r3, #4]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	4a08      	ldr	r2, [pc, #32]	; (8007928 <vTaskSwitchContext+0xb4>)
 8007908:	6013      	str	r3, [r2, #0]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	200049c4 	.word	0x200049c4
 800791c:	200049b0 	.word	0x200049b0
 8007920:	200049a4 	.word	0x200049a4
 8007924:	200048a0 	.word	0x200048a0
 8007928:	2000489c 	.word	0x2000489c

0800792c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10a      	bne.n	8007952 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	60fb      	str	r3, [r7, #12]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <vTaskPlaceOnEventList+0x44>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3318      	adds	r3, #24
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fe fbc7 	bl	80060ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007960:	2101      	movs	r1, #1
 8007962:	6838      	ldr	r0, [r7, #0]
 8007964:	f000 fa92 	bl	8007e8c <prvAddCurrentTaskToDelayedList>
}
 8007968:	bf00      	nop
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	2000489c 	.word	0x2000489c

08007974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	617b      	str	r3, [r7, #20]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800799c:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3318      	adds	r3, #24
 80079a2:	4619      	mov	r1, r3
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7fe fb7e 	bl	80060a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80079b0:	f04f 33ff 	mov.w	r3, #4294967295
 80079b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f000 fa67 	bl	8007e8c <prvAddCurrentTaskToDelayedList>
	}
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	2000489c 	.word	0x2000489c

080079cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	60fb      	str	r3, [r7, #12]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	3318      	adds	r3, #24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe fbaf 	bl	8006160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a02:	4b1d      	ldr	r3, [pc, #116]	; (8007a78 <xTaskRemoveFromEventList+0xac>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d11c      	bne.n	8007a44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fba6 	bl	8006160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	2201      	movs	r2, #1
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <xTaskRemoveFromEventList+0xb0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	4a16      	ldr	r2, [pc, #88]	; (8007a7c <xTaskRemoveFromEventList+0xb0>)
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <xTaskRemoveFromEventList+0xb4>)
 8007a34:	441a      	add	r2, r3
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fe fb32 	bl	80060a6 <vListInsertEnd>
 8007a42:	e005      	b.n	8007a50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3318      	adds	r3, #24
 8007a48:	4619      	mov	r1, r3
 8007a4a:	480e      	ldr	r0, [pc, #56]	; (8007a84 <xTaskRemoveFromEventList+0xb8>)
 8007a4c:	f7fe fb2b 	bl	80060a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <xTaskRemoveFromEventList+0xbc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d905      	bls.n	8007a6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a62:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <xTaskRemoveFromEventList+0xc0>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	e001      	b.n	8007a6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a6e:	697b      	ldr	r3, [r7, #20]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	200049c4 	.word	0x200049c4
 8007a7c:	200049a4 	.word	0x200049a4
 8007a80:	200048a0 	.word	0x200048a0
 8007a84:	2000495c 	.word	0x2000495c
 8007a88:	2000489c 	.word	0x2000489c
 8007a8c:	200049b0 	.word	0x200049b0

08007a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a98:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <vTaskInternalSetTimeOutState+0x24>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <vTaskInternalSetTimeOutState+0x28>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	605a      	str	r2, [r3, #4]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	200049b4 	.word	0x200049b4
 8007ab8:	200049a0 	.word	0x200049a0

08007abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	613b      	str	r3, [r7, #16]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	60fb      	str	r3, [r7, #12]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007afe:	f7fe fc89 	bl	8006414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b02:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <xTaskCheckForTimeOut+0xbc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	d102      	bne.n	8007b22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	e023      	b.n	8007b6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <xTaskCheckForTimeOut+0xc0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d007      	beq.n	8007b3e <xTaskCheckForTimeOut+0x82>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d302      	bcc.n	8007b3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	e015      	b.n	8007b6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d20b      	bcs.n	8007b60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff9b 	bl	8007a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e004      	b.n	8007b6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b66:	2301      	movs	r3, #1
 8007b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b6a:	f7fe fc83 	bl	8006474 <vPortExitCritical>

	return xReturn;
 8007b6e:	69fb      	ldr	r3, [r7, #28]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	200049a0 	.word	0x200049a0
 8007b7c:	200049b4 	.word	0x200049b4

08007b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b84:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <vTaskMissedYield+0x14>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	200049b0 	.word	0x200049b0

08007b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ba0:	f000 f852 	bl	8007c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <prvIdleTask+0x28>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d9f9      	bls.n	8007ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <prvIdleTask+0x2c>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bbc:	e7f0      	b.n	8007ba0 <prvIdleTask+0x8>
 8007bbe:	bf00      	nop
 8007bc0:	200048a0 	.word	0x200048a0
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bce:	2300      	movs	r3, #0
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	e00c      	b.n	8007bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a12      	ldr	r2, [pc, #72]	; (8007c28 <prvInitialiseTaskLists+0x60>)
 8007be0:	4413      	add	r3, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fa32 	bl	800604c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3301      	adds	r3, #1
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b06      	cmp	r3, #6
 8007bf2:	d9ef      	bls.n	8007bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bf4:	480d      	ldr	r0, [pc, #52]	; (8007c2c <prvInitialiseTaskLists+0x64>)
 8007bf6:	f7fe fa29 	bl	800604c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bfa:	480d      	ldr	r0, [pc, #52]	; (8007c30 <prvInitialiseTaskLists+0x68>)
 8007bfc:	f7fe fa26 	bl	800604c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c00:	480c      	ldr	r0, [pc, #48]	; (8007c34 <prvInitialiseTaskLists+0x6c>)
 8007c02:	f7fe fa23 	bl	800604c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c06:	480c      	ldr	r0, [pc, #48]	; (8007c38 <prvInitialiseTaskLists+0x70>)
 8007c08:	f7fe fa20 	bl	800604c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c0c:	480b      	ldr	r0, [pc, #44]	; (8007c3c <prvInitialiseTaskLists+0x74>)
 8007c0e:	f7fe fa1d 	bl	800604c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c12:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <prvInitialiseTaskLists+0x78>)
 8007c14:	4a05      	ldr	r2, [pc, #20]	; (8007c2c <prvInitialiseTaskLists+0x64>)
 8007c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c18:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <prvInitialiseTaskLists+0x7c>)
 8007c1a:	4a05      	ldr	r2, [pc, #20]	; (8007c30 <prvInitialiseTaskLists+0x68>)
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	200048a0 	.word	0x200048a0
 8007c2c:	2000492c 	.word	0x2000492c
 8007c30:	20004940 	.word	0x20004940
 8007c34:	2000495c 	.word	0x2000495c
 8007c38:	20004970 	.word	0x20004970
 8007c3c:	20004988 	.word	0x20004988
 8007c40:	20004954 	.word	0x20004954
 8007c44:	20004958 	.word	0x20004958

08007c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c4e:	e019      	b.n	8007c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c50:	f7fe fbe0 	bl	8006414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c54:	4b10      	ldr	r3, [pc, #64]	; (8007c98 <prvCheckTasksWaitingTermination+0x50>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fa7d 	bl	8006160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <prvCheckTasksWaitingTermination+0x54>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a0b      	ldr	r2, [pc, #44]	; (8007c9c <prvCheckTasksWaitingTermination+0x54>)
 8007c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c7a:	f7fe fbfb 	bl	8006474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f810 	bl	8007ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e1      	bne.n	8007c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20004970 	.word	0x20004970
 8007c9c:	2000499c 	.word	0x2000499c
 8007ca0:	20004984 	.word	0x20004984

08007ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d108      	bne.n	8007cc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe f8a8 	bl	8005e10 <vPortFree>
				vPortFree( pxTCB );
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7fe f8a5 	bl	8005e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cc6:	e018      	b.n	8007cfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d103      	bne.n	8007cda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fe f89c 	bl	8005e10 <vPortFree>
	}
 8007cd8:	e00f      	b.n	8007cfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d00a      	beq.n	8007cfa <prvDeleteTCB+0x56>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60fb      	str	r3, [r7, #12]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <prvDeleteTCB+0x54>
	}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <prvResetNextTaskUnblockTime+0x38>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <prvResetNextTaskUnblockTime+0x3c>)
 8007d16:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d1c:	e008      	b.n	8007d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <prvResetNextTaskUnblockTime+0x38>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4a04      	ldr	r2, [pc, #16]	; (8007d40 <prvResetNextTaskUnblockTime+0x3c>)
 8007d2e:	6013      	str	r3, [r2, #0]
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20004954 	.word	0x20004954
 8007d40:	200049bc 	.word	0x200049bc

08007d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d4a:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <xTaskGetSchedulerState+0x34>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d52:	2301      	movs	r3, #1
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	e008      	b.n	8007d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d58:	4b08      	ldr	r3, [pc, #32]	; (8007d7c <xTaskGetSchedulerState+0x38>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d60:	2302      	movs	r3, #2
 8007d62:	607b      	str	r3, [r7, #4]
 8007d64:	e001      	b.n	8007d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d66:	2300      	movs	r3, #0
 8007d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d6a:	687b      	ldr	r3, [r7, #4]
	}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	200049a8 	.word	0x200049a8
 8007d7c:	200049c4 	.word	0x200049c4

08007d80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d06e      	beq.n	8007e74 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d96:	4b3a      	ldr	r3, [pc, #232]	; (8007e80 <xTaskPriorityDisinherit+0x100>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d00a      	beq.n	8007db6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	60bb      	str	r3, [r7, #8]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd8:	1e5a      	subs	r2, r3, #1
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d044      	beq.n	8007e74 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d140      	bne.n	8007e74 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe f9b2 	bl	8006160 <uxListRemove>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d115      	bne.n	8007e2e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e06:	491f      	ldr	r1, [pc, #124]	; (8007e84 <xTaskPriorityDisinherit+0x104>)
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	440b      	add	r3, r1
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <xTaskPriorityDisinherit+0xae>
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	43da      	mvns	r2, r3
 8007e24:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <xTaskPriorityDisinherit+0x108>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	4a17      	ldr	r2, [pc, #92]	; (8007e88 <xTaskPriorityDisinherit+0x108>)
 8007e2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3a:	f1c3 0207 	rsb	r2, r3, #7
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	2201      	movs	r2, #1
 8007e48:	409a      	lsls	r2, r3
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <xTaskPriorityDisinherit+0x108>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	4a0d      	ldr	r2, [pc, #52]	; (8007e88 <xTaskPriorityDisinherit+0x108>)
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e58:	4613      	mov	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4a08      	ldr	r2, [pc, #32]	; (8007e84 <xTaskPriorityDisinherit+0x104>)
 8007e62:	441a      	add	r2, r3
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7fe f91b 	bl	80060a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e74:	697b      	ldr	r3, [r7, #20]
	}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	2000489c 	.word	0x2000489c
 8007e84:	200048a0 	.word	0x200048a0
 8007e88:	200049a4 	.word	0x200049a4

08007e8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e96:	4b29      	ldr	r3, [pc, #164]	; (8007f3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e9c:	4b28      	ldr	r3, [pc, #160]	; (8007f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe f95c 	bl	8006160 <uxListRemove>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007eae:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	43da      	mvns	r2, r3
 8007ebc:	4b21      	ldr	r3, [pc, #132]	; (8007f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	4a20      	ldr	r2, [pc, #128]	; (8007f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ec4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d10a      	bne.n	8007ee4 <prvAddCurrentTaskToDelayedList+0x58>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed4:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4619      	mov	r1, r3
 8007edc:	481a      	ldr	r0, [pc, #104]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ede:	f7fe f8e2 	bl	80060a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ee2:	e026      	b.n	8007f32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4413      	add	r3, r2
 8007eea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007eec:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d209      	bcs.n	8007f10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007efc:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3304      	adds	r3, #4
 8007f06:	4619      	mov	r1, r3
 8007f08:	4610      	mov	r0, r2
 8007f0a:	f7fe f8f0 	bl	80060ee <vListInsert>
}
 8007f0e:	e010      	b.n	8007f32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	f7fe f8e6 	bl	80060ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d202      	bcs.n	8007f32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f2c:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6013      	str	r3, [r2, #0]
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200049a0 	.word	0x200049a0
 8007f40:	2000489c 	.word	0x2000489c
 8007f44:	200049a4 	.word	0x200049a4
 8007f48:	20004988 	.word	0x20004988
 8007f4c:	20004958 	.word	0x20004958
 8007f50:	20004954 	.word	0x20004954
 8007f54:	200049bc 	.word	0x200049bc

08007f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f62:	f000 fb85 	bl	8008670 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f66:	4b1c      	ldr	r3, [pc, #112]	; (8007fd8 <xTimerCreateTimerTask+0x80>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d021      	beq.n	8007fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f76:	1d3a      	adds	r2, r7, #4
 8007f78:	f107 0108 	add.w	r1, r7, #8
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7f8 fabd 	bl	8000500 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	9202      	str	r2, [sp, #8]
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	2302      	movs	r3, #2
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	460a      	mov	r2, r1
 8007f98:	4910      	ldr	r1, [pc, #64]	; (8007fdc <xTimerCreateTimerTask+0x84>)
 8007f9a:	4811      	ldr	r0, [pc, #68]	; (8007fe0 <xTimerCreateTimerTask+0x88>)
 8007f9c:	f7ff f8ca 	bl	8007134 <xTaskCreateStatic>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4a10      	ldr	r2, [pc, #64]	; (8007fe4 <xTimerCreateTimerTask+0x8c>)
 8007fa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <xTimerCreateTimerTask+0x8c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	613b      	str	r3, [r7, #16]
}
 8007fca:	bf00      	nop
 8007fcc:	e7fe      	b.n	8007fcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007fce:	697b      	ldr	r3, [r7, #20]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200049f8 	.word	0x200049f8
 8007fdc:	080088d0 	.word	0x080088d0
 8007fe0:	08008251 	.word	0x08008251
 8007fe4:	200049fc 	.word	0x200049fc

08007fe8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007ff6:	2028      	movs	r0, #40	; 0x28
 8007ff8:	f7fd fe3e 	bl	8005c78 <pvPortMalloc>
 8007ffc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00d      	beq.n	8008020 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f843 	bl	80080a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008020:	697b      	ldr	r3, [r7, #20]
	}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800802a:	b580      	push	{r7, lr}
 800802c:	b08a      	sub	sp, #40	; 0x28
 800802e:	af02      	add	r7, sp, #8
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
 8008036:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008038:	2328      	movs	r3, #40	; 0x28
 800803a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2b28      	cmp	r3, #40	; 0x28
 8008040:	d00a      	beq.n	8008058 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	61bb      	str	r3, [r7, #24]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008058:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10a      	bne.n	8008076 <xTimerCreateStatic+0x4c>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	617b      	str	r3, [r7, #20]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f805 	bl	80080a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800809c:	69fb      	ldr	r3, [r7, #28]
	}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
 80080b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	617b      	str	r3, [r7, #20]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01e      	beq.n	8008114 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80080d6:	f000 facb 	bl	8008670 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	6a3a      	ldr	r2, [r7, #32]
 80080f0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	3304      	adds	r3, #4
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fd ffc8 	bl	800608c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d008      	beq.n	8008114 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008108:	f043 0304 	orr.w	r3, r3, #4
 800810c:	b2da      	uxtb	r2, r3
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008114:	bf00      	nop
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08a      	sub	sp, #40	; 0x28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800812a:	2300      	movs	r3, #0
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	623b      	str	r3, [r7, #32]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800814a:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <xTimerGenericCommand+0x98>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d02a      	beq.n	80081a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b05      	cmp	r3, #5
 8008162:	dc18      	bgt.n	8008196 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008164:	f7ff fdee 	bl	8007d44 <xTaskGetSchedulerState>
 8008168:	4603      	mov	r3, r0
 800816a:	2b02      	cmp	r3, #2
 800816c:	d109      	bne.n	8008182 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800816e:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <xTimerGenericCommand+0x98>)
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f107 0114 	add.w	r1, r7, #20
 8008176:	2300      	movs	r3, #0
 8008178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817a:	f7fe fbf3 	bl	8006964 <xQueueGenericSend>
 800817e:	6278      	str	r0, [r7, #36]	; 0x24
 8008180:	e012      	b.n	80081a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <xTimerGenericCommand+0x98>)
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f107 0114 	add.w	r1, r7, #20
 800818a:	2300      	movs	r3, #0
 800818c:	2200      	movs	r2, #0
 800818e:	f7fe fbe9 	bl	8006964 <xQueueGenericSend>
 8008192:	6278      	str	r0, [r7, #36]	; 0x24
 8008194:	e008      	b.n	80081a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008196:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <xTimerGenericCommand+0x98>)
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	f107 0114 	add.w	r1, r7, #20
 800819e:	2300      	movs	r3, #0
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	f7fe fcdd 	bl	8006b60 <xQueueGenericSendFromISR>
 80081a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3728      	adds	r7, #40	; 0x28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200049f8 	.word	0x200049f8

080081b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af02      	add	r7, sp, #8
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c2:	4b22      	ldr	r3, [pc, #136]	; (800824c <prvProcessExpiredTimer+0x94>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fd ffc5 	bl	8006160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d022      	beq.n	800822a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	699a      	ldr	r2, [r3, #24]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	18d1      	adds	r1, r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	6978      	ldr	r0, [r7, #20]
 80081f2:	f000 f8d1 	bl	8008398 <prvInsertTimerInActiveList>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01f      	beq.n	800823c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081fc:	2300      	movs	r3, #0
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2300      	movs	r3, #0
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	2100      	movs	r1, #0
 8008206:	6978      	ldr	r0, [r7, #20]
 8008208:	f7ff ff88 	bl	800811c <xTimerGenericCommand>
 800820c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d113      	bne.n	800823c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	60fb      	str	r3, [r7, #12]
}
 8008226:	bf00      	nop
 8008228:	e7fe      	b.n	8008228 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008230:	f023 0301 	bic.w	r3, r3, #1
 8008234:	b2da      	uxtb	r2, r3
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	6978      	ldr	r0, [r7, #20]
 8008242:	4798      	blx	r3
}
 8008244:	bf00      	nop
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	200049f0 	.word	0x200049f0

08008250 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008258:	f107 0308 	add.w	r3, r7, #8
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f857 	bl	8008310 <prvGetNextExpireTime>
 8008262:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f803 	bl	8008274 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800826e:	f000 f8d5 	bl	800841c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008272:	e7f1      	b.n	8008258 <prvTimerTask+0x8>

08008274 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800827e:	f7ff f987 	bl	8007590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008282:	f107 0308 	add.w	r3, r7, #8
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f866 	bl	8008358 <prvSampleTimeNow>
 800828c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d130      	bne.n	80082f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10a      	bne.n	80082b0 <prvProcessTimerOrBlockTask+0x3c>
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d806      	bhi.n	80082b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082a2:	f7ff f983 	bl	80075ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff ff85 	bl	80081b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082ae:	e024      	b.n	80082fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d008      	beq.n	80082c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082b6:	4b13      	ldr	r3, [pc, #76]	; (8008304 <prvProcessTimerOrBlockTask+0x90>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <prvProcessTimerOrBlockTask+0x50>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <prvProcessTimerOrBlockTask+0x52>
 80082c4:	2300      	movs	r3, #0
 80082c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082c8:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <prvProcessTimerOrBlockTask+0x94>)
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4619      	mov	r1, r3
 80082d6:	f7fe fef9 	bl	80070cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082da:	f7ff f967 	bl	80075ac <xTaskResumeAll>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082e4:	4b09      	ldr	r3, [pc, #36]	; (800830c <prvProcessTimerOrBlockTask+0x98>)
 80082e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	f3bf 8f6f 	isb	sy
}
 80082f4:	e001      	b.n	80082fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082f6:	f7ff f959 	bl	80075ac <xTaskResumeAll>
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	200049f4 	.word	0x200049f4
 8008308:	200049f8 	.word	0x200049f8
 800830c:	e000ed04 	.word	0xe000ed04

08008310 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008318:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <prvGetNextExpireTime+0x44>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <prvGetNextExpireTime+0x16>
 8008322:	2201      	movs	r2, #1
 8008324:	e000      	b.n	8008328 <prvGetNextExpireTime+0x18>
 8008326:	2200      	movs	r2, #0
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <prvGetNextExpireTime+0x44>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e001      	b.n	8008344 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008344:	68fb      	ldr	r3, [r7, #12]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	200049f0 	.word	0x200049f0

08008358 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008360:	f7ff f9c0 	bl	80076e4 <xTaskGetTickCount>
 8008364:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008366:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <prvSampleTimeNow+0x3c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	429a      	cmp	r2, r3
 800836e:	d205      	bcs.n	800837c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008370:	f000 f91a 	bl	80085a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	e002      	b.n	8008382 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008382:	4a04      	ldr	r2, [pc, #16]	; (8008394 <prvSampleTimeNow+0x3c>)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008388:	68fb      	ldr	r3, [r7, #12]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20004a00 	.word	0x20004a00

08008398 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d812      	bhi.n	80083e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	1ad2      	subs	r2, r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d302      	bcc.n	80083d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083cc:	2301      	movs	r3, #1
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	e01b      	b.n	800840a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083d2:	4b10      	ldr	r3, [pc, #64]	; (8008414 <prvInsertTimerInActiveList+0x7c>)
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3304      	adds	r3, #4
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f7fd fe86 	bl	80060ee <vListInsert>
 80083e2:	e012      	b.n	800840a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d206      	bcs.n	80083fa <prvInsertTimerInActiveList+0x62>
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d302      	bcc.n	80083fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	e007      	b.n	800840a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <prvInsertTimerInActiveList+0x80>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3304      	adds	r3, #4
 8008402:	4619      	mov	r1, r3
 8008404:	4610      	mov	r0, r2
 8008406:	f7fd fe72 	bl	80060ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800840a:	697b      	ldr	r3, [r7, #20]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	200049f4 	.word	0x200049f4
 8008418:	200049f0 	.word	0x200049f0

0800841c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008422:	e0ae      	b.n	8008582 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f2c0 80ab 	blt.w	8008582 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d004      	beq.n	8008442 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	3304      	adds	r3, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd fe8f 	bl	8006160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008442:	1d3b      	adds	r3, r7, #4
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ff87 	bl	8008358 <prvSampleTimeNow>
 800844a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b09      	cmp	r3, #9
 8008450:	f200 8096 	bhi.w	8008580 <prvProcessReceivedCommands+0x164>
 8008454:	a201      	add	r2, pc, #4	; (adr r2, 800845c <prvProcessReceivedCommands+0x40>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	08008485 	.word	0x08008485
 8008460:	08008485 	.word	0x08008485
 8008464:	08008485 	.word	0x08008485
 8008468:	080084f9 	.word	0x080084f9
 800846c:	0800850d 	.word	0x0800850d
 8008470:	08008557 	.word	0x08008557
 8008474:	08008485 	.word	0x08008485
 8008478:	08008485 	.word	0x08008485
 800847c:	080084f9 	.word	0x080084f9
 8008480:	0800850d 	.word	0x0800850d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800848a:	f043 0301 	orr.w	r3, r3, #1
 800848e:	b2da      	uxtb	r2, r3
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	18d1      	adds	r1, r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a3a      	ldr	r2, [r7, #32]
 80084a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084a4:	f7ff ff78 	bl	8008398 <prvInsertTimerInActiveList>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d069      	beq.n	8008582 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05e      	beq.n	8008582 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	441a      	add	r2, r3
 80084cc:	2300      	movs	r3, #0
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084d6:	f7ff fe21 	bl	800811c <xTimerGenericCommand>
 80084da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d14f      	bne.n	8008582 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61bb      	str	r3, [r7, #24]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800850a:	e03a      	b.n	8008582 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	617b      	str	r3, [r7, #20]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	18d1      	adds	r1, r2, r3
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	6a3a      	ldr	r2, [r7, #32]
 800854e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008550:	f7ff ff22 	bl	8008398 <prvInsertTimerInActiveList>
					break;
 8008554:	e015      	b.n	8008582 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b00      	cmp	r3, #0
 8008562:	d103      	bne.n	800856c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008566:	f7fd fc53 	bl	8005e10 <vPortFree>
 800856a:	e00a      	b.n	8008582 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008572:	f023 0301 	bic.w	r3, r3, #1
 8008576:	b2da      	uxtb	r2, r3
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800857e:	e000      	b.n	8008582 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8008580:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008582:	4b08      	ldr	r3, [pc, #32]	; (80085a4 <prvProcessReceivedCommands+0x188>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f107 0108 	add.w	r1, r7, #8
 800858a:	2200      	movs	r2, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fb83 	bl	8006c98 <xQueueReceive>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	f47f af45 	bne.w	8008424 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	3728      	adds	r7, #40	; 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	200049f8 	.word	0x200049f8

080085a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085ae:	e048      	b.n	8008642 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085b0:	4b2d      	ldr	r3, [pc, #180]	; (8008668 <prvSwitchTimerLists+0xc0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ba:	4b2b      	ldr	r3, [pc, #172]	; (8008668 <prvSwitchTimerLists+0xc0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fd fdc9 	bl	8006160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d02e      	beq.n	8008642 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4413      	add	r3, r2
 80085ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d90e      	bls.n	8008614 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008602:	4b19      	ldr	r3, [pc, #100]	; (8008668 <prvSwitchTimerLists+0xc0>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	4610      	mov	r0, r2
 800860e:	f7fd fd6e 	bl	80060ee <vListInsert>
 8008612:	e016      	b.n	8008642 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008614:	2300      	movs	r3, #0
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	2300      	movs	r3, #0
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	2100      	movs	r1, #0
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fd7c 	bl	800811c <xTimerGenericCommand>
 8008624:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	603b      	str	r3, [r7, #0]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <prvSwitchTimerLists+0xc0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1b1      	bne.n	80085b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800864c:	4b06      	ldr	r3, [pc, #24]	; (8008668 <prvSwitchTimerLists+0xc0>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008652:	4b06      	ldr	r3, [pc, #24]	; (800866c <prvSwitchTimerLists+0xc4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a04      	ldr	r2, [pc, #16]	; (8008668 <prvSwitchTimerLists+0xc0>)
 8008658:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800865a:	4a04      	ldr	r2, [pc, #16]	; (800866c <prvSwitchTimerLists+0xc4>)
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	6013      	str	r3, [r2, #0]
}
 8008660:	bf00      	nop
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	200049f0 	.word	0x200049f0
 800866c:	200049f4 	.word	0x200049f4

08008670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008676:	f7fd fecd 	bl	8006414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800867a:	4b15      	ldr	r3, [pc, #84]	; (80086d0 <prvCheckForValidListAndQueue+0x60>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d120      	bne.n	80086c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008682:	4814      	ldr	r0, [pc, #80]	; (80086d4 <prvCheckForValidListAndQueue+0x64>)
 8008684:	f7fd fce2 	bl	800604c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008688:	4813      	ldr	r0, [pc, #76]	; (80086d8 <prvCheckForValidListAndQueue+0x68>)
 800868a:	f7fd fcdf 	bl	800604c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <prvCheckForValidListAndQueue+0x6c>)
 8008690:	4a10      	ldr	r2, [pc, #64]	; (80086d4 <prvCheckForValidListAndQueue+0x64>)
 8008692:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008694:	4b12      	ldr	r3, [pc, #72]	; (80086e0 <prvCheckForValidListAndQueue+0x70>)
 8008696:	4a10      	ldr	r2, [pc, #64]	; (80086d8 <prvCheckForValidListAndQueue+0x68>)
 8008698:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800869a:	2300      	movs	r3, #0
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <prvCheckForValidListAndQueue+0x74>)
 80086a0:	4a11      	ldr	r2, [pc, #68]	; (80086e8 <prvCheckForValidListAndQueue+0x78>)
 80086a2:	210c      	movs	r1, #12
 80086a4:	200a      	movs	r0, #10
 80086a6:	f7fe f83f 	bl	8006728 <xQueueGenericCreateStatic>
 80086aa:	4603      	mov	r3, r0
 80086ac:	4a08      	ldr	r2, [pc, #32]	; (80086d0 <prvCheckForValidListAndQueue+0x60>)
 80086ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <prvCheckForValidListAndQueue+0x60>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086b8:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <prvCheckForValidListAndQueue+0x60>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	490b      	ldr	r1, [pc, #44]	; (80086ec <prvCheckForValidListAndQueue+0x7c>)
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fcda 	bl	8007078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086c4:	f7fd fed6 	bl	8006474 <vPortExitCritical>
}
 80086c8:	bf00      	nop
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200049f8 	.word	0x200049f8
 80086d4:	200049c8 	.word	0x200049c8
 80086d8:	200049dc 	.word	0x200049dc
 80086dc:	200049f0 	.word	0x200049f0
 80086e0:	200049f4 	.word	0x200049f4
 80086e4:	20004a7c 	.word	0x20004a7c
 80086e8:	20004a04 	.word	0x20004a04
 80086ec:	080088d8 	.word	0x080088d8

080086f0 <memset>:
 80086f0:	4402      	add	r2, r0
 80086f2:	4603      	mov	r3, r0
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d100      	bne.n	80086fa <memset+0xa>
 80086f8:	4770      	bx	lr
 80086fa:	f803 1b01 	strb.w	r1, [r3], #1
 80086fe:	e7f9      	b.n	80086f4 <memset+0x4>

08008700 <__libc_init_array>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	4d0d      	ldr	r5, [pc, #52]	; (8008738 <__libc_init_array+0x38>)
 8008704:	4c0d      	ldr	r4, [pc, #52]	; (800873c <__libc_init_array+0x3c>)
 8008706:	1b64      	subs	r4, r4, r5
 8008708:	10a4      	asrs	r4, r4, #2
 800870a:	2600      	movs	r6, #0
 800870c:	42a6      	cmp	r6, r4
 800870e:	d109      	bne.n	8008724 <__libc_init_array+0x24>
 8008710:	4d0b      	ldr	r5, [pc, #44]	; (8008740 <__libc_init_array+0x40>)
 8008712:	4c0c      	ldr	r4, [pc, #48]	; (8008744 <__libc_init_array+0x44>)
 8008714:	f000 f826 	bl	8008764 <_init>
 8008718:	1b64      	subs	r4, r4, r5
 800871a:	10a4      	asrs	r4, r4, #2
 800871c:	2600      	movs	r6, #0
 800871e:	42a6      	cmp	r6, r4
 8008720:	d105      	bne.n	800872e <__libc_init_array+0x2e>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	f855 3b04 	ldr.w	r3, [r5], #4
 8008728:	4798      	blx	r3
 800872a:	3601      	adds	r6, #1
 800872c:	e7ee      	b.n	800870c <__libc_init_array+0xc>
 800872e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008732:	4798      	blx	r3
 8008734:	3601      	adds	r6, #1
 8008736:	e7f2      	b.n	800871e <__libc_init_array+0x1e>
 8008738:	08008900 	.word	0x08008900
 800873c:	08008900 	.word	0x08008900
 8008740:	08008900 	.word	0x08008900
 8008744:	08008904 	.word	0x08008904

08008748 <memcpy>:
 8008748:	440a      	add	r2, r1
 800874a:	4291      	cmp	r1, r2
 800874c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008750:	d100      	bne.n	8008754 <memcpy+0xc>
 8008752:	4770      	bx	lr
 8008754:	b510      	push	{r4, lr}
 8008756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800875a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800875e:	4291      	cmp	r1, r2
 8008760:	d1f9      	bne.n	8008756 <memcpy+0xe>
 8008762:	bd10      	pop	{r4, pc}

08008764 <_init>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr

08008770 <_fini>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	bf00      	nop
 8008774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008776:	bc08      	pop	{r3}
 8008778:	469e      	mov	lr, r3
 800877a:	4770      	bx	lr
