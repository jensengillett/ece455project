
ECE 455 Project 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000851c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080086ac  080086ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008818  08008818  00018818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004aac  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004abc  20004abc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b375  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f00  00000000  00000000  0003b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b0  00000000  00000000  0003f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001400  00000000  00000000  00040ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023bb1  00000000  00000000  000420a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000200d2  00000000  00000000  00065c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da40d  00000000  00000000  00085d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006da0  00000000  00000000  00160138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00166ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008694 	.word	0x08008694

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008694 	.word	0x08008694

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	20000080 	.word	0x20000080

08000500 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <vApplicationGetTimerTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <vApplicationGetTimerTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20000280 	.word	0x20000280
 8000530:	200002d4 	.word	0x200002d4

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b0c6      	sub	sp, #280	; 0x118
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fe0f 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f929 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 fa47 	bl	80009d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000546:	f000 f98f 	bl	8000868 <MX_I2C1_Init>
  MX_I2S3_Init();
 800054a:	f000 f9bb 	bl	80008c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800054e:	f000 f9e9 	bl	8000924 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000552:	f000 fa1d 	bl	8000990 <MX_USB_OTG_FS_HCD_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of active_queue_mutex */
  osMutexDef(active_queue_mutex);
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  active_queue_mutexHandle = osMutexCreate(osMutex(active_queue_mutex));
 8000562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fae4 	bl	8005b34 <osMutexCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a72      	ldr	r2, [pc, #456]	; (8000738 <main+0x204>)
 8000570:	6013      	str	r3, [r2, #0]

  /* definition and creation of completed_queue_mutex */
  osMutexDef(completed_queue_mutex);
 8000572:	2300      	movs	r3, #0
 8000574:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000578:	2300      	movs	r3, #0
 800057a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  completed_queue_mutexHandle = osMutexCreate(osMutex(completed_queue_mutex));
 800057e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fad6 	bl	8005b34 <osMutexCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a6c      	ldr	r2, [pc, #432]	; (800073c <main+0x208>)
 800058c:	6013      	str	r3, [r2, #0]

  /* definition and creation of overdue_queue_mutex */
  osMutexDef(overdue_queue_mutex);
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000594:	2300      	movs	r3, #0
 8000596:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  overdue_queue_mutexHandle = osMutexCreate(osMutex(overdue_queue_mutex));
 800059a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fac8 	bl	8005b34 <osMutexCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a66      	ldr	r2, [pc, #408]	; (8000740 <main+0x20c>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of dds_control_timer */
  osTimerDef(dds_control_timer, dds_control_callback);
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <main+0x210>)
 80005ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  dds_control_timerHandle = osTimerCreate(osTimer(dds_control_timer), osTimerPeriodic, NULL);
 80005b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fa84 	bl	8005acc <osTimerCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a60      	ldr	r2, [pc, #384]	; (8000748 <main+0x214>)
 80005c8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of active_queue */
  osMessageQDef(active_queue, 16, uint16_t);
 80005ca:	4b60      	ldr	r3, [pc, #384]	; (800074c <main+0x218>)
 80005cc:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 80005d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  active_queueHandle = osMessageCreate(osMessageQ(active_queue), NULL);
 80005d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f005 fac1 	bl	8005b64 <osMessageCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a5a      	ldr	r2, [pc, #360]	; (8000750 <main+0x21c>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of completed_queue */
  osMessageQDef(completed_queue, 16, uint16_t);
 80005e8:	4b58      	ldr	r3, [pc, #352]	; (800074c <main+0x218>)
 80005ea:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80005ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  completed_queueHandle = osMessageCreate(osMessageQ(completed_queue), NULL);
 80005f4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fab2 	bl	8005b64 <osMessageCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a54      	ldr	r2, [pc, #336]	; (8000754 <main+0x220>)
 8000604:	6013      	str	r3, [r2, #0]

  /* definition and creation of overdue_queue */
  osMessageQDef(overdue_queue, 16, uint16_t);
 8000606:	4b51      	ldr	r3, [pc, #324]	; (800074c <main+0x218>)
 8000608:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800060c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  overdue_queueHandle = osMessageCreate(osMessageQ(overdue_queue), NULL);
 8000612:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 faa3 	bl	8005b64 <osMessageCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a4d      	ldr	r2, [pc, #308]	; (8000758 <main+0x224>)
 8000622:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000624:	4b4d      	ldr	r3, [pc, #308]	; (800075c <main+0x228>)
 8000626:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000638:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 f9e3 	bl	8005a0a <osThreadCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a46      	ldr	r2, [pc, #280]	; (8000760 <main+0x22c>)
 8000648:	6013      	str	r3, [r2, #0]

  /* definition and creation of deadline_driven */
  osThreadDef(deadline_driven, DeadlineDrivenScheduler, osPriorityHigh, 0, 128);
 800064a:	4b46      	ldr	r3, [pc, #280]	; (8000764 <main+0x230>)
 800064c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  deadline_drivenHandle = osThreadCreate(osThread(deadline_driven), NULL);
 800065e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f005 f9d0 	bl	8005a0a <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a3e      	ldr	r2, [pc, #248]	; (8000768 <main+0x234>)
 800066e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_generator */
  osThreadDef(task_generator, TaskGenerator, osPriorityIdle, 0, 128);
 8000670:	4b3e      	ldr	r3, [pc, #248]	; (800076c <main+0x238>)
 8000672:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_generatorHandle = osThreadCreate(osThread(task_generator), NULL);
 8000684:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 f9bd 	bl	8005a0a <osThreadCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a37      	ldr	r2, [pc, #220]	; (8000770 <main+0x23c>)
 8000694:	6013      	str	r3, [r2, #0]

  /* definition and creation of monitor */
  osThreadDef(monitor, Monitor, osPriorityIdle, 0, 128);
 8000696:	4b37      	ldr	r3, [pc, #220]	; (8000774 <main+0x240>)
 8000698:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  monitorHandle = osThreadCreate(osThread(monitor), NULL);
 80006aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 f9aa 	bl	8005a0a <osThreadCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a2f      	ldr	r2, [pc, #188]	; (8000778 <main+0x244>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of red_light_task */
  osThreadDef(red_light_task, RedLightTask, osPriorityIdle, 0, 128);
 80006bc:	4b2f      	ldr	r3, [pc, #188]	; (800077c <main+0x248>)
 80006be:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  red_light_taskHandle = osThreadCreate(osThread(red_light_task), NULL);
 80006d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f997 	bl	8005a0a <osThreadCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a28      	ldr	r2, [pc, #160]	; (8000780 <main+0x24c>)
 80006e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of amber_light_tas */
  osThreadDef(amber_light_tas, AmberLightTask, osPriorityIdle, 0, 128);
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <main+0x250>)
 80006e4:	f107 0420 	add.w	r4, r7, #32
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  amber_light_tasHandle = osThreadCreate(osThread(amber_light_tas), NULL);
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 f984 	bl	8005a0a <osThreadCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <main+0x254>)
 8000706:	6013      	str	r3, [r2, #0]

  /* definition and creation of green_light_tas */
  osThreadDef(green_light_tas, GreenLightTask, osPriorityIdle, 0, 128);
 8000708:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800070c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000710:	4a1e      	ldr	r2, [pc, #120]	; (800078c <main+0x258>)
 8000712:	461c      	mov	r4, r3
 8000714:	4615      	mov	r5, r2
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  green_light_tasHandle = osThreadCreate(osThread(green_light_tas), NULL);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f96f 	bl	8005a0a <osThreadCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <main+0x25c>)
 8000730:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000732:	f005 f963 	bl	80059fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x202>
 8000738:	20000bd4 	.word	0x20000bd4
 800073c:	20000bd8 	.word	0x20000bd8
 8000740:	20000bdc 	.word	0x20000bdc
 8000744:	08000c19 	.word	0x08000c19
 8000748:	20000bd0 	.word	0x20000bd0
 800074c:	080086ac 	.word	0x080086ac
 8000750:	20000bc4 	.word	0x20000bc4
 8000754:	20000bc8 	.word	0x20000bc8
 8000758:	20000bcc 	.word	0x20000bcc
 800075c:	080086c8 	.word	0x080086c8
 8000760:	20000ba8 	.word	0x20000ba8
 8000764:	080086f4 	.word	0x080086f4
 8000768:	20000bac 	.word	0x20000bac
 800076c:	08008720 	.word	0x08008720
 8000770:	20000bb0 	.word	0x20000bb0
 8000774:	08008744 	.word	0x08008744
 8000778:	20000bb4 	.word	0x20000bb4
 800077c:	08008770 	.word	0x08008770
 8000780:	20000bb8 	.word	0x20000bb8
 8000784:	0800879c 	.word	0x0800879c
 8000788:	20000bbc 	.word	0x20000bbc
 800078c:	080087c8 	.word	0x080087c8
 8000790:	20000bc0 	.word	0x20000bc0

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 ff3c 	bl	8008620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <SystemClock_Config+0xcc>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xd0>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xd0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000808:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000812:	2307      	movs	r3, #7
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fb96 	bl	8003f4c <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000826:	f000 fa13 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2105      	movs	r1, #5
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fdf7 	bl	800443c <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000854:	f000 f9fc 	bl	8000c50 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	; 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x50>)
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <MX_I2C1_Init+0x54>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x58>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800088a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_I2C1_Init+0x50>)
 80008a6:	f002 fd6d 	bl	8003384 <HAL_I2C_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b0:	f000 f9ce 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200006d4 	.word	0x200006d4
 80008bc:	40005400 	.word	0x40005400
 80008c0:	000186a0 	.word	0x000186a0

080008c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_I2S3_Init+0x54>)
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <MX_I2S3_Init+0x58>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_I2S3_Init+0x54>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_I2S3_Init+0x54>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_I2S3_Init+0x54>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_I2S3_Init+0x54>)
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_I2S3_Init+0x54>)
 80008ec:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <MX_I2S3_Init+0x5c>)
 80008ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_I2S3_Init+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_I2S3_Init+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_I2S3_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_I2S3_Init+0x54>)
 8000904:	f002 fe82 	bl	800360c <HAL_I2S_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800090e:	f000 f99f 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000728 	.word	0x20000728
 800091c:	40003c00 	.word	0x40003c00
 8000920:	00017700 	.word	0x00017700

08000924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_SPI1_Init+0x64>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <MX_SPI1_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_SPI1_Init+0x64>)
 8000930:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_SPI1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_SPI1_Init+0x64>)
 8000970:	220a      	movs	r2, #10
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_SPI1_Init+0x64>)
 8000976:	f004 f8e1 	bl	8004b3c <HAL_SPI_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000980:	f000 f966 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000770 	.word	0x20000770
 800098c:	40013000 	.word	0x40013000

08000990 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800099e:	2208      	movs	r2, #8
 80009a0:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009bc:	f000 fecb 	bl	8001756 <HAL_HCD_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 80009c6:	f000 f943 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200007c8 	.word	0x200007c8

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	4b68      	ldr	r3, [pc, #416]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a67      	ldr	r2, [pc, #412]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b65      	ldr	r3, [pc, #404]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	4b61      	ldr	r3, [pc, #388]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a60      	ldr	r2, [pc, #384]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b5e      	ldr	r3, [pc, #376]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b5a      	ldr	r3, [pc, #360]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a59      	ldr	r2, [pc, #356]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b57      	ldr	r3, [pc, #348]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a52      	ldr	r2, [pc, #328]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b49      	ldr	r3, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2101      	movs	r1, #1
 8000a96:	483f      	ldr	r0, [pc, #252]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a98:	f000 fe44 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aa2:	483d      	ldr	r0, [pc, #244]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000aa4:	f000 fe3e 	bl	8001724 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4835      	ldr	r0, [pc, #212]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000ac0:	f000 fc94 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	482d      	ldr	r0, [pc, #180]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000ae0:	f000 fc84 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4828      	ldr	r0, [pc, #160]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000afa:	f000 fc77 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000afe:	2304      	movs	r3, #4
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4823      	ldr	r0, [pc, #140]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000b12:	f000 fc6b 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b28:	2305      	movs	r3, #5
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000b34:	f000 fc5a 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b38:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b3c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000b52:	f000 fc4b 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b56:	2320      	movs	r3, #32
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000b6a:	f000 fc3f 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000b84:	f000 fc32 	bl	80013ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	; 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f004 ff76 	bl	8005aa2 <osDelay>
 8000bb6:	e7fb      	b.n	8000bb0 <StartDefaultTask+0x8>

08000bb8 <DeadlineDrivenScheduler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DeadlineDrivenScheduler */
void DeadlineDrivenScheduler(void const * argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DeadlineDrivenScheduler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f004 ff6e 	bl	8005aa2 <osDelay>
 8000bc6:	e7fb      	b.n	8000bc0 <DeadlineDrivenScheduler+0x8>

08000bc8 <TaskGenerator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskGenerator */
void TaskGenerator(void const * argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskGenerator */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f004 ff66 	bl	8005aa2 <osDelay>
 8000bd6:	e7fb      	b.n	8000bd0 <TaskGenerator+0x8>

08000bd8 <Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Monitor */
void Monitor(void const * argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Monitor */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f004 ff5e 	bl	8005aa2 <osDelay>
 8000be6:	e7fb      	b.n	8000be0 <Monitor+0x8>

08000be8 <RedLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLightTask */
void RedLightTask(void const * argument)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f004 ff56 	bl	8005aa2 <osDelay>
 8000bf6:	e7fb      	b.n	8000bf0 <RedLightTask+0x8>

08000bf8 <AmberLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AmberLightTask */
void AmberLightTask(void const * argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AmberLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f004 ff4e 	bl	8005aa2 <osDelay>
 8000c06:	e7fb      	b.n	8000c00 <AmberLightTask+0x8>

08000c08 <GreenLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLightTask */
void GreenLightTask(void const * argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f004 ff46 	bl	8005aa2 <osDelay>
 8000c16:	e7fb      	b.n	8000c10 <GreenLightTask+0x8>

08000c18 <dds_control_callback>:
  /* USER CODE END GreenLightTask */
}

/* dds_control_callback function */
void dds_control_callback(void const * argument)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dds_control_callback */

  /* USER CODE END dds_control_callback */
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3e:	f000 faaf 	bl	80011a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40000800 	.word	0x40000800

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	f06f 0001 	mvn.w	r0, #1
 8000ca2:	f000 fb79 	bl	8001398 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12c      	bne.n	8000d30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cf2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d04:	2304      	movs	r3, #4
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_I2C_MspInit+0x8c>)
 8000d10:	f000 fb6c 	bl	80013ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020400 	.word	0x40020400

08000d44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <HAL_I2S_MspInit+0xf0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d15a      	bne.n	8000e2a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d78:	23c0      	movs	r3, #192	; 0xc0
 8000d7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fd97 	bl	80048b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d90:	f7ff ff5e 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_I2S_MspInit+0xf4>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000de8:	2310      	movs	r3, #16
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <HAL_I2S_MspInit+0xf8>)
 8000e04:	f000 faf2 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e08:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <HAL_I2S_MspInit+0xfc>)
 8000e26:	f000 fae1 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	; 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020800 	.word	0x40020800

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_SPI_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_SPI_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e9e:	23e0      	movs	r3, #224	; 0xe0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_SPI_MspInit+0x8c>)
 8000eba:	f000 fa97 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef4:	d147      	bne.n	8000f86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	481b      	ldr	r0, [pc, #108]	; (8000f94 <HAL_HCD_MspInit+0xc0>)
 8000f28:	f000 fa60 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000f2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f3e:	230a      	movs	r3, #10
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4812      	ldr	r0, [pc, #72]	; (8000f94 <HAL_HCD_MspInit+0xc0>)
 8000f4a:	f000 fa4f 	bl	80013ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6353      	str	r3, [r2, #52]	; 0x34
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_HCD_MspInit+0xbc>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2043      	movs	r0, #67	; 0x43
 8000f7c:	f000 fa0c 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000f80:	2043      	movs	r0, #67	; 0x43
 8000f82:	f000 fa25 	bl	80013d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_InitTick+0xe4>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_InitTick+0xe4>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_InitTick+0xe4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc4:	f107 0210 	add.w	r2, r7, #16
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fc40 	bl	8004854 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fde:	f003 fc25 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8000fe2:	6378      	str	r0, [r7, #52]	; 0x34
 8000fe4:	e004      	b.n	8000ff0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fe6:	f003 fc21 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8000fea:	4603      	mov	r3, r0
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	4a23      	ldr	r2, [pc, #140]	; (8001080 <HAL_InitTick+0xe8>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	0c9b      	lsrs	r3, r3, #18
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_InitTick+0xec>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <HAL_InitTick+0xf0>)
 8001002:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_InitTick+0xec>)
 8001006:	f240 32e7 	movw	r2, #999	; 0x3e7
 800100a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_InitTick+0xec>)
 800100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001010:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_InitTick+0xec>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_InitTick+0xec>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_InitTick+0xec>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <HAL_InitTick+0xec>)
 8001026:	f003 fe12 	bl	8004c4e <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001030:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001034:	2b00      	cmp	r3, #0
 8001036:	d11b      	bne.n	8001070 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <HAL_InitTick+0xec>)
 800103a:	f003 fe61 	bl	8004d00 <HAL_TIM_Base_Start_IT>
 800103e:	4603      	mov	r3, r0
 8001040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001044:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001048:	2b00      	cmp	r3, #0
 800104a:	d111      	bne.n	8001070 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800104c:	201e      	movs	r0, #30
 800104e:	f000 f9bf 	bl	80013d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d808      	bhi.n	800106a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	201e      	movs	r0, #30
 800105e:	f000 f99b 	bl	8001398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_InitTick+0xf4>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e002      	b.n	8001070 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001070:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001074:	4618      	mov	r0, r3
 8001076:	3738      	adds	r7, #56	; 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	431bde83 	.word	0x431bde83
 8001084:	20000be0 	.word	0x20000be0
 8001088:	40000800 	.word	0x40000800
 800108c:	20000004 	.word	0x20000004

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM4_IRQHandler+0x10>)
 80010c2:	f003 fe8d 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000be0 	.word	0x20000be0

080010d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <OTG_FS_IRQHandler+0x10>)
 80010d6:	f000 fba5 	bl	8001824 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200007c8 	.word	0x200007c8

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800110c:	f7ff ffea 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f007 fa7b 	bl	8008630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff f9fb 	bl	8000534 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800114c:	08008828 	.word	0x08008828
  ldr r2, =_sbss
 8001150:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001154:	20004abc 	.word	0x20004abc

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f8fc 	bl	8001382 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	200f      	movs	r0, #15
 800118c:	f7ff ff04 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fd64 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000c28 	.word	0x20000c28

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000c28 	.word	0x20000c28

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff4c 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013aa:	f7ff ff61 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	68b9      	ldr	r1, [r7, #8]
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f7ff ffb1 	bl	800131c <NVIC_EncodePriority>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff80 	bl	80012c8 <__NVIC_SetPriority>
}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff54 	bl	800128c <__NVIC_EnableIRQ>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	e16b      	b.n	80016e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 815a 	bne.w	80016da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d005      	beq.n	800143e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143a:	2b02      	cmp	r3, #2
 800143c:	d130      	bne.n	80014a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 0201 	and.w	r2, r3, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d017      	beq.n	80014dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80b4 	beq.w	80016da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <HAL_GPIO_Init+0x30c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a5f      	ldr	r2, [pc, #380]	; (80016f8 <HAL_GPIO_Init+0x30c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <HAL_GPIO_Init+0x30c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158e:	4a5b      	ldr	r2, [pc, #364]	; (80016fc <HAL_GPIO_Init+0x310>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <HAL_GPIO_Init+0x314>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d02b      	beq.n	8001612 <HAL_GPIO_Init+0x226>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a51      	ldr	r2, [pc, #324]	; (8001704 <HAL_GPIO_Init+0x318>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d025      	beq.n	800160e <HAL_GPIO_Init+0x222>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a50      	ldr	r2, [pc, #320]	; (8001708 <HAL_GPIO_Init+0x31c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d01f      	beq.n	800160a <HAL_GPIO_Init+0x21e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_GPIO_Init+0x320>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d019      	beq.n	8001606 <HAL_GPIO_Init+0x21a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_GPIO_Init+0x324>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0x216>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_GPIO_Init+0x328>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00d      	beq.n	80015fe <HAL_GPIO_Init+0x212>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_GPIO_Init+0x32c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x20e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <HAL_GPIO_Init+0x330>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_GPIO_Init+0x20a>
 80015f2:	2307      	movs	r3, #7
 80015f4:	e00e      	b.n	8001614 <HAL_GPIO_Init+0x228>
 80015f6:	2308      	movs	r3, #8
 80015f8:	e00c      	b.n	8001614 <HAL_GPIO_Init+0x228>
 80015fa:	2306      	movs	r3, #6
 80015fc:	e00a      	b.n	8001614 <HAL_GPIO_Init+0x228>
 80015fe:	2305      	movs	r3, #5
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x228>
 8001602:	2304      	movs	r3, #4
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x228>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x228>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x228>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x228>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	4935      	ldr	r1, [pc, #212]	; (80016fc <HAL_GPIO_Init+0x310>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <HAL_GPIO_Init+0x334>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a32      	ldr	r2, [pc, #200]	; (8001720 <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_GPIO_Init+0x334>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a27      	ldr	r2, [pc, #156]	; (8001720 <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_GPIO_Init+0x334>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016aa:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_GPIO_Init+0x334>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_GPIO_Init+0x334>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <HAL_GPIO_Init+0x334>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f ae90 	bls.w	8001408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40013800 	.word	0x40013800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40021400 	.word	0x40021400
 8001718:	40021800 	.word	0x40021800
 800171c:	40021c00 	.word	0x40021c00
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af02      	add	r7, sp, #8
 800175c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e059      	b.n	800181c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d106      	bne.n	8001788 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fba6 	bl	8000ed4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2203      	movs	r2, #3
 800178c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001796:	d102      	bne.n	800179e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fd58 	bl	8005258 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7c1a      	ldrb	r2, [r3, #16]
 80017b0:	f88d 2000 	strb.w	r2, [sp]
 80017b4:	3304      	adds	r3, #4
 80017b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b8:	f003 fcea 	bl	8005190 <USB_CoreInit>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e026      	b.n	800181c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2101      	movs	r1, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fd50 	bl	800527a <USB_SetCurrentMode>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e017      	b.n	800181c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7c1a      	ldrb	r2, [r3, #16]
 80017f4:	f88d 2000 	strb.w	r2, [sp]
 80017f8:	3304      	adds	r3, #4
 80017fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fc:	f003 feb4 	bl	8005568 <USB_HostInit>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e004      	b.n	800181c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fe55 	bl	80054ea <USB_GetMode>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	f040 80fb 	bne.w	8001a3e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fe18 	bl	8005482 <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80f1 	beq.w	8001a3c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fe0f 	bl	8005482 <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800186e:	d104      	bne.n	800187a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001878:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fdff 	bl	8005482 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800188e:	d104      	bne.n	800189a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fdef 	bl	8005482 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018ae:	d104      	bne.n	80018ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fddf 	bl	8005482 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d103      	bne.n	80018d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2202      	movs	r2, #2
 80018d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fdd1 	bl	8005482 <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018ea:	d120      	bne.n	800192e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d113      	bne.n	800192e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001906:	2110      	movs	r1, #16
 8001908:	6938      	ldr	r0, [r7, #16]
 800190a:	f003 fd02 	bl	8005312 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800190e:	6938      	ldr	r0, [r7, #16]
 8001910:	f003 fd31 	bl	8005376 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7a5b      	ldrb	r3, [r3, #9]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d105      	bne.n	8001928 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fee4 	bl	80056f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f89f 	bl	8001a6c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fda5 	bl	8005482 <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800193e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001942:	d102      	bne.n	800194a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f001 fcaa 	bl	800329e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fd97 	bl	8005482 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b08      	cmp	r3, #8
 800195c:	d106      	bne.n	800196c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f870 	bl	8001a44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2208      	movs	r2, #8
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fd86 	bl	8005482 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001980:	d139      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 feef 	bl	800576a <USB_HC_ReadInterrupt>
 800198c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e025      	b.n	80019e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d018      	beq.n	80019da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019be:	d106      	bne.n	80019ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f87c 	bl	8001ac4 <HCD_HC_IN_IRQHandler>
 80019cc:	e005      	b.n	80019da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fede 	bl	8002796 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	795b      	ldrb	r3, [r3, #5]
 80019e4:	461a      	mov	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d3d3      	bcc.n	8001994 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fd41 	bl	8005482 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d101      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x1ea>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_HCD_IRQHandler+0x1ec>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d014      	beq.n	8001a3e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0210 	bic.w	r2, r2, #16
 8001a22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f001 fb5b 	bl	80030e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0210 	orr.w	r2, r2, #16
 8001a38:	619a      	str	r2, [r3, #24]
 8001a3a:	e000      	b.n	8001a3e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001a3c:	bf00      	nop
    }
  }
}
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fce0 	bl	80054a8 <USB_ReadChInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d11a      	bne.n	8001b28 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	461a      	mov	r2, r3
 8001b00:	2304      	movs	r3, #4
 8001b02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	334d      	adds	r3, #77	; 0x4d
 8001b14:	2207      	movs	r2, #7
 8001b16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fe33 	bl	800578c <USB_HC_Halt>
 8001b26:	e09e      	b.n	8001c66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fcb9 	bl	80054a8 <USB_ReadChInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d11b      	bne.n	8001b7a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	334d      	adds	r3, #77	; 0x4d
 8001b66:	2208      	movs	r2, #8
 8001b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fe0a 	bl	800578c <USB_HC_Halt>
 8001b78:	e075      	b.n	8001c66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fc90 	bl	80054a8 <USB_ReadChInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d11a      	bne.n	8001bc8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	334d      	adds	r3, #77	; 0x4d
 8001bb4:	2206      	movs	r2, #6
 8001bb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fde3 	bl	800578c <USB_HC_Halt>
 8001bc6:	e04e      	b.n	8001c66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fc69 	bl	80054a8 <USB_ReadChInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be0:	d11b      	bne.n	8001c1a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	334d      	adds	r3, #77	; 0x4d
 8001c06:	2209      	movs	r2, #9
 8001c08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fdba 	bl	800578c <USB_HC_Halt>
 8001c18:	e025      	b.n	8001c66 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fc40 	bl	80054a8 <USB_ReadChInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	2b80      	cmp	r3, #128	; 0x80
 8001c30:	d119      	bne.n	8001c66 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	334d      	adds	r3, #77	; 0x4d
 8001c54:	2207      	movs	r2, #7
 8001c56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fd93 	bl	800578c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fc1a 	bl	80054a8 <USB_ReadChInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7e:	d112      	bne.n	8001ca6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fd7f 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca0:	6093      	str	r3, [r2, #8]
 8001ca2:	f000 bd75 	b.w	8002790 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fbfa 	bl	80054a8 <USB_ReadChInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f040 8128 	bne.w	8001f10 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2320      	movs	r3, #32
 8001cd0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	331b      	adds	r3, #27
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d119      	bne.n	8001d1c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	331b      	adds	r3, #27
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	0151      	lsls	r1, r2, #5
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	440a      	add	r2, r1
 8001d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	799b      	ldrb	r3, [r3, #6]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	3330      	adds	r3, #48	; 0x30
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	1ac9      	subs	r1, r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4403      	add	r3, r0
 8001d58:	3338      	adds	r3, #56	; 0x38
 8001d5a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	334d      	adds	r3, #77	; 0x4d
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3344      	adds	r3, #68	; 0x44
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	461a      	mov	r2, r3
 8001d92:	2301      	movs	r3, #1
 8001d94:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3326      	adds	r3, #38	; 0x26
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	3326      	adds	r3, #38	; 0x26
 8001dbc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d110      	bne.n	8001de4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fcde 	bl	800578c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2310      	movs	r3, #16
 8001de0:	6093      	str	r3, [r2, #8]
 8001de2:	e03d      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3326      	adds	r3, #38	; 0x26
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d00a      	beq.n	8001e10 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3326      	adds	r3, #38	; 0x26
 8001e0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d127      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	0151      	lsls	r1, r2, #5
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	440a      	add	r2, r1
 8001e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	334c      	adds	r3, #76	; 0x4c
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	334c      	adds	r3, #76	; 0x4c
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fe24 	bl	8001aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	799b      	ldrb	r3, [r3, #6]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d13b      	bne.n	8001ee0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3338      	adds	r3, #56	; 0x38
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4403      	add	r3, r0
 8001e88:	3328      	adds	r3, #40	; 0x28
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	440b      	add	r3, r1
 8001e8e:	1e59      	subs	r1, r3, #1
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4403      	add	r3, r0
 8001e9e:	3328      	adds	r3, #40	; 0x28
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8470 	beq.w	8002790 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	333c      	adds	r3, #60	; 0x3c
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2d8      	uxtb	r0, r3
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	333c      	adds	r3, #60	; 0x3c
 8001ed8:	4602      	mov	r2, r0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	f000 bc58 	b.w	8002790 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	333c      	adds	r3, #60	; 0x3c
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2d8      	uxtb	r0, r3
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	333c      	adds	r3, #60	; 0x3c
 8001f08:	4602      	mov	r2, r0
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	f000 bc40 	b.w	8002790 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fac5 	bl	80054a8 <USB_ReadChInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d131      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	2320      	movs	r3, #32
 8001f38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	331a      	adds	r3, #26
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f040 841f 	bne.w	8002790 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	331b      	adds	r3, #27
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	334d      	adds	r3, #77	; 0x4d
 8001f76:	2203      	movs	r2, #3
 8001f78:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fc02 	bl	800578c <USB_HC_Halt>
 8001f88:	f000 bc02 	b.w	8002790 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fa87 	bl	80054a8 <USB_ReadChInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f040 8305 	bne.w	80025b0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	334d      	adds	r3, #77	; 0x4d
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d114      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	334d      	adds	r3, #77	; 0x4d
 8001fde:	2202      	movs	r2, #2
 8001fe0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	334c      	adds	r3, #76	; 0x4c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e2cc      	b.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	334d      	adds	r3, #77	; 0x4d
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d114      	bne.n	8002038 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	334d      	adds	r3, #77	; 0x4d
 800201e:	2202      	movs	r2, #2
 8002020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	334c      	adds	r3, #76	; 0x4c
 8002032:	2205      	movs	r2, #5
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e2ac      	b.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	334d      	adds	r3, #77	; 0x4d
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b07      	cmp	r3, #7
 800204c:	d00b      	beq.n	8002066 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	334d      	adds	r3, #77	; 0x4d
 800205e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002060:	2b09      	cmp	r3, #9
 8002062:	f040 80a6 	bne.w	80021b2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	334d      	adds	r3, #77	; 0x4d
 8002076:	2202      	movs	r2, #2
 8002078:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	3344      	adds	r3, #68	; 0x44
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	1c59      	adds	r1, r3, #1
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4403      	add	r3, r0
 800209a:	3344      	adds	r3, #68	; 0x44
 800209c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3344      	adds	r3, #68	; 0x44
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d943      	bls.n	800213c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	3344      	adds	r3, #68	; 0x44
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	331a      	adds	r3, #26
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d123      	bne.n	8002126 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	331b      	adds	r3, #27
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	331c      	adds	r3, #28
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	0151      	lsls	r1, r2, #5
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	440a      	add	r2, r1
 800211c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	334c      	adds	r3, #76	; 0x4c
 8002136:	2204      	movs	r2, #4
 8002138:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800213a:	e229      	b.n	8002590 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	334c      	adds	r3, #76	; 0x4c
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3326      	adds	r3, #38	; 0x26
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3326      	adds	r3, #38	; 0x26
 8002176:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002178:	2b02      	cmp	r3, #2
 800217a:	f040 8209 	bne.w	8002590 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002194:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800219c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021b0:	e1ee      	b.n	8002590 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	334d      	adds	r3, #77	; 0x4d
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	f040 80c8 	bne.w	800235a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	334d      	adds	r3, #77	; 0x4d
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	331b      	adds	r3, #27
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 81ce 	bne.w	8002592 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3326      	adds	r3, #38	; 0x26
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d16b      	bne.n	80022e4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3348      	adds	r3, #72	; 0x48
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1c59      	adds	r1, r3, #1
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4403      	add	r3, r0
 800222c:	3348      	adds	r3, #72	; 0x48
 800222e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3348      	adds	r3, #72	; 0x48
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d943      	bls.n	80022ce <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3348      	adds	r3, #72	; 0x48
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	331b      	adds	r3, #27
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3344      	adds	r3, #68	; 0x44
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d809      	bhi.n	8002298 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	331c      	adds	r3, #28
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	0151      	lsls	r1, r2, #5
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	440a      	add	r2, r1
 80022ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	334c      	adds	r3, #76	; 0x4c
 80022c8:	2204      	movs	r2, #4
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e014      	b.n	80022f8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	334c      	adds	r3, #76	; 0x4c
 80022de:	2202      	movs	r2, #2
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e009      	b.n	80022f8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334c      	adds	r3, #76	; 0x4c
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3326      	adds	r3, #38	; 0x26
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3326      	adds	r3, #38	; 0x26
 800231e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002320:	2b02      	cmp	r3, #2
 8002322:	f040 8136 	bne.w	8002592 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800233c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002344:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e11b      	b.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	334d      	adds	r3, #77	; 0x4d
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b03      	cmp	r3, #3
 800236e:	f040 8081 	bne.w	8002474 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	334d      	adds	r3, #77	; 0x4d
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	331b      	adds	r3, #27
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 80fa 	bne.w	8002592 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	334c      	adds	r3, #76	; 0x4c
 80023ae:	2202      	movs	r2, #2
 80023b0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	0151      	lsls	r1, r2, #5
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	440a      	add	r2, r1
 80023c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	0151      	lsls	r1, r2, #5
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	440a      	add	r2, r1
 80023e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	0151      	lsls	r1, r2, #5
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	440a      	add	r2, r1
 8002408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800240c:	f023 0320 	bic.w	r3, r3, #32
 8002410:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	3326      	adds	r3, #38	; 0x26
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3326      	adds	r3, #38	; 0x26
 8002438:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800243a:	2b02      	cmp	r3, #2
 800243c:	f040 80a9 	bne.w	8002592 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002456:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800245e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e08e      	b.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334d      	adds	r3, #77	; 0x4d
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b04      	cmp	r3, #4
 8002488:	d143      	bne.n	8002512 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	334d      	adds	r3, #77	; 0x4d
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	334c      	adds	r3, #76	; 0x4c
 80024ae:	2202      	movs	r2, #2
 80024b0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3326      	adds	r3, #38	; 0x26
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3326      	adds	r3, #38	; 0x26
 80024d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d159      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024f4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024fc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e03f      	b.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	334d      	adds	r3, #77	; 0x4d
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d126      	bne.n	8002576 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334d      	adds	r3, #77	; 0x4d
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3344      	adds	r3, #68	; 0x44
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	1c59      	adds	r1, r3, #1
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4403      	add	r3, r0
 800255c:	3344      	adds	r3, #68	; 0x44
 800255e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	334c      	adds	r3, #76	; 0x4c
 8002570:	2204      	movs	r2, #4
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e00d      	b.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	334d      	adds	r3, #77	; 0x4d
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b02      	cmp	r3, #2
 800258a:	f000 8100 	beq.w	800278e <HCD_HC_IN_IRQHandler+0xcca>
 800258e:	e000      	b.n	8002592 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002590:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	334c      	adds	r3, #76	; 0x4c
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fa7d 	bl	8001aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025ae:	e0ef      	b.n	8002790 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 ff75 	bl	80054a8 <USB_ReadChInterrupts>
 80025be:	4603      	mov	r3, r0
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d12f      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2340      	movs	r3, #64	; 0x40
 80025d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	334d      	adds	r3, #77	; 0x4d
 80025ea:	2205      	movs	r2, #5
 80025ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	331a      	adds	r3, #26
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3344      	adds	r3, #68	; 0x44
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f003 f8b3 	bl	800578c <USB_HC_Halt>
 8002626:	e0b3      	b.n	8002790 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f002 ff39 	bl	80054a8 <USB_ReadChInterrupts>
 8002636:	4603      	mov	r3, r0
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b10      	cmp	r3, #16
 800263e:	f040 80a7 	bne.w	8002790 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3326      	adds	r3, #38	; 0x26
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d11b      	bne.n	8002690 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3344      	adds	r3, #68	; 0x44
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	334d      	adds	r3, #77	; 0x4d
 800267c:	2204      	movs	r2, #4
 800267e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f003 f87f 	bl	800578c <USB_HC_Halt>
 800268e:	e03f      	b.n	8002710 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3326      	adds	r3, #38	; 0x26
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3326      	adds	r3, #38	; 0x26
 80026b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d129      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3344      	adds	r3, #68	; 0x44
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	799b      	ldrb	r3, [r3, #6]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HCD_HC_IN_IRQHandler+0xc2a>
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	331b      	adds	r3, #27
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d110      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	334d      	adds	r3, #77	; 0x4d
 80026fe:	2204      	movs	r2, #4
 8002700:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f003 f83e 	bl	800578c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	331b      	adds	r3, #27
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d129      	bne.n	800277a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	331b      	adds	r3, #27
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	0151      	lsls	r1, r2, #5
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	440a      	add	r2, r1
 8002750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	0151      	lsls	r1, r2, #5
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	440a      	add	r2, r1
 8002770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002774:	f043 0320 	orr.w	r3, r3, #32
 8002778:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	461a      	mov	r2, r3
 8002788:	2310      	movs	r3, #16
 800278a:	6093      	str	r3, [r2, #8]
 800278c:	e000      	b.n	8002790 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800278e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fe77 	bl	80054a8 <USB_ReadChInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d11b      	bne.n	80027fc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	461a      	mov	r2, r3
 80027d2:	2304      	movs	r3, #4
 80027d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	334d      	adds	r3, #77	; 0x4d
 80027e6:	2207      	movs	r2, #7
 80027e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 ffca 	bl	800578c <USB_HC_Halt>
 80027f8:	f000 bc6f 	b.w	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fe4f 	bl	80054a8 <USB_ReadChInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 8082 	bne.w	800291a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	461a      	mov	r2, r3
 8002824:	2320      	movs	r3, #32
 8002826:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3319      	adds	r3, #25
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d124      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3319      	adds	r3, #25
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	334c      	adds	r3, #76	; 0x4c
 8002862:	2202      	movs	r2, #2
 8002864:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	334d      	adds	r3, #77	; 0x4d
 8002876:	2203      	movs	r2, #3
 8002878:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f002 ff82 	bl	800578c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	331a      	adds	r3, #26
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 841d 	bne.w	80030da <HCD_HC_OUT_IRQHandler+0x944>
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	331b      	adds	r3, #27
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 8411 	bne.w	80030da <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3326      	adds	r3, #38	; 0x26
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d009      	beq.n	80028e2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	331b      	adds	r3, #27
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	; 0x4d
 80028f2:	2203      	movs	r2, #3
 80028f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 ff44 	bl	800578c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3344      	adds	r3, #68	; 0x44
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e3df      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fdc0 	bl	80054a8 <USB_ReadChInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002932:	d111      	bne.n	8002958 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002946:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f002 ff1b 	bl	800578c <USB_HC_Halt>
 8002956:	e3c0      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fda1 	bl	80054a8 <USB_ReadChInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d168      	bne.n	8002a42 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3344      	adds	r3, #68	; 0x44
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fd8b 	bl	80054a8 <USB_ReadChInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d112      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3319      	adds	r3, #25
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	2340      	movs	r3, #64	; 0x40
 80029c0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	331b      	adds	r3, #27
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d019      	beq.n	8002a0c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	331b      	adds	r3, #27
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	0151      	lsls	r1, r2, #5
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	440a      	add	r2, r1
 8002a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	334d      	adds	r3, #77	; 0x4d
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fea6 	bl	800578c <USB_HC_Halt>
 8002a40:	e34b      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fd2c 	bl	80054a8 <USB_ReadChInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d139      	bne.n	8002ace <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	334d      	adds	r3, #77	; 0x4d
 8002a6a:	2205      	movs	r2, #5
 8002a6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	331a      	adds	r3, #26
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3319      	adds	r3, #25
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3344      	adds	r3, #68	; 0x44
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 fe69 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2340      	movs	r3, #64	; 0x40
 8002aca:	6093      	str	r3, [r2, #8]
 8002acc:	e305      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fce6 	bl	80054a8 <USB_ReadChInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11a      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	461a      	mov	r2, r3
 8002af4:	2308      	movs	r3, #8
 8002af6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334d      	adds	r3, #77	; 0x4d
 8002b08:	2206      	movs	r2, #6
 8002b0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 fe39 	bl	800578c <USB_HC_Halt>
 8002b1a:	e2de      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fcbf 	bl	80054a8 <USB_ReadChInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d144      	bne.n	8002bbe <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3344      	adds	r3, #68	; 0x44
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334d      	adds	r3, #77	; 0x4d
 8002b58:	2204      	movs	r2, #4
 8002b5a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3319      	adds	r3, #25
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d114      	bne.n	8002b9c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3318      	adds	r3, #24
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3319      	adds	r3, #25
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f002 fdf1 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2310      	movs	r3, #16
 8002bba:	6093      	str	r3, [r2, #8]
 8002bbc:	e28d      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fc6e 	bl	80054a8 <USB_ReadChInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d169      	bne.n	8002caa <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	799b      	ldrb	r3, [r3, #6]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	334d      	adds	r3, #77	; 0x4d
 8002bee:	2207      	movs	r2, #7
 8002bf0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fdc6 	bl	800578c <USB_HC_Halt>
 8002c00:	e049      	b.n	8002c96 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3344      	adds	r3, #68	; 0x44
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c59      	adds	r1, r3, #1
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4403      	add	r3, r0
 8002c22:	3344      	adds	r3, #68	; 0x44
 8002c24:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3344      	adds	r3, #68	; 0x44
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d922      	bls.n	8002c82 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3344      	adds	r3, #68	; 0x44
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334c      	adds	r3, #76	; 0x4c
 8002c60:	2204      	movs	r2, #4
 8002c62:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	334c      	adds	r3, #76	; 0x4c
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe ff14 	bl	8001aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c80:	e009      	b.n	8002c96 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	334c      	adds	r3, #76	; 0x4c
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	e217      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fbf8 	bl	80054a8 <USB_ReadChInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc2:	d11b      	bne.n	8002cfc <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334d      	adds	r3, #77	; 0x4d
 8002cd4:	2209      	movs	r2, #9
 8002cd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fd53 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf8:	6093      	str	r3, [r2, #8]
 8002cfa:	e1ee      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fbcf 	bl	80054a8 <USB_ReadChInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	f040 81df 	bne.w	80030d4 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	2302      	movs	r3, #2
 8002d26:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	334d      	adds	r3, #77	; 0x4d
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	f040 8093 	bne.w	8002e66 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	334d      	adds	r3, #77	; 0x4d
 8002d50:	2202      	movs	r2, #2
 8002d52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334c      	adds	r3, #76	; 0x4c
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3326      	adds	r3, #38	; 0x26
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d00b      	beq.n	8002d96 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3326      	adds	r3, #38	; 0x26
 8002d8e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	f040 8190 	bne.w	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	799b      	ldrb	r3, [r3, #6]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d115      	bne.n	8002dca <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	333d      	adds	r3, #61	; 0x3d
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	f083 0301 	eor.w	r3, r3, #1
 8002db6:	b2d8      	uxtb	r0, r3
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	333d      	adds	r3, #61	; 0x3d
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	799b      	ldrb	r3, [r3, #6]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	f040 8171 	bne.w	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3334      	adds	r3, #52	; 0x34
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8165 	beq.w	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3334      	adds	r3, #52	; 0x34
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4403      	add	r3, r0
 8002e0c:	3328      	adds	r3, #40	; 0x28
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	440b      	add	r3, r1
 8002e12:	1e59      	subs	r1, r3, #1
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4403      	add	r3, r0
 8002e22:	3328      	adds	r3, #40	; 0x28
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e2a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 813f 	beq.w	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	333d      	adds	r3, #61	; 0x3d
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2d8      	uxtb	r0, r3
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	333d      	adds	r3, #61	; 0x3d
 8002e60:	4602      	mov	r2, r0
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e127      	b.n	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334d      	adds	r3, #77	; 0x4d
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d120      	bne.n	8002ebe <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	; 0x4d
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	331b      	adds	r3, #27
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	f040 8107 	bne.w	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334c      	adds	r3, #76	; 0x4c
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e0fb      	b.n	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334d      	adds	r3, #77	; 0x4d
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d13a      	bne.n	8002f4a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334d      	adds	r3, #77	; 0x4d
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334c      	adds	r3, #76	; 0x4c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	331b      	adds	r3, #27
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 80d1 	bne.w	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	331b      	adds	r3, #27
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	0151      	lsls	r1, r2, #5
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f46:	6053      	str	r3, [r2, #4]
 8002f48:	e0b5      	b.n	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	334d      	adds	r3, #77	; 0x4d
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d114      	bne.n	8002f8a <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334d      	adds	r3, #77	; 0x4d
 8002f70:	2202      	movs	r2, #2
 8002f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	334c      	adds	r3, #76	; 0x4c
 8002f84:	2202      	movs	r2, #2
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e095      	b.n	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334d      	adds	r3, #77	; 0x4d
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d114      	bne.n	8002fca <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	; 0x4d
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334c      	adds	r3, #76	; 0x4c
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e075      	b.n	80030b6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	; 0x4d
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d00a      	beq.n	8002ff6 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	; 0x4d
 8002ff0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ff2:	2b09      	cmp	r3, #9
 8002ff4:	d170      	bne.n	80030d8 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	334d      	adds	r3, #77	; 0x4d
 8003006:	2202      	movs	r2, #2
 8003008:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3344      	adds	r3, #68	; 0x44
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1c59      	adds	r1, r3, #1
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	3344      	adds	r3, #68	; 0x44
 800302c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3344      	adds	r3, #68	; 0x44
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d914      	bls.n	800306e <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3344      	adds	r3, #68	; 0x44
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	334c      	adds	r3, #76	; 0x4c
 8003068:	2204      	movs	r2, #4
 800306a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800306c:	e022      	b.n	80030b4 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	334c      	adds	r3, #76	; 0x4c
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003098:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030a0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030b4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	334c      	adds	r3, #76	; 0x4c
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7fe fceb 	bl	8001aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030d2:	e002      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80030d4:	bf00      	nop
 80030d6:	e000      	b.n	80030da <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80030d8:	bf00      	nop
  }
}
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	0c5b      	lsrs	r3, r3, #17
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003114:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d004      	beq.n	8003126 <HCD_RXQLVL_IRQHandler+0x46>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b05      	cmp	r3, #5
 8003120:	f000 80b6 	beq.w	8003290 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003124:	e0b7      	b.n	8003296 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80b3 	beq.w	8003294 <HCD_RXQLVL_IRQHandler+0x1b4>
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	332c      	adds	r3, #44	; 0x2c
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a7 	beq.w	8003294 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3338      	adds	r3, #56	; 0x38
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	18d1      	adds	r1, r2, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4403      	add	r3, r0
 800316a:	3334      	adds	r3, #52	; 0x34
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4299      	cmp	r1, r3
 8003170:	f200 8083 	bhi.w	800327a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	332c      	adds	r3, #44	; 0x2c
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	b292      	uxth	r2, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f002 f91f 	bl	80053d2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	332c      	adds	r3, #44	; 0x2c
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	18d1      	adds	r1, r2, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4403      	add	r3, r0
 80031b8:	332c      	adds	r3, #44	; 0x2c
 80031ba:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3338      	adds	r3, #56	; 0x38
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	18d1      	adds	r1, r2, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4403      	add	r3, r0
 80031e0:	3338      	adds	r3, #56	; 0x38
 80031e2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	0cdb      	lsrs	r3, r3, #19
 80031f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3328      	adds	r3, #40	; 0x28
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4293      	cmp	r3, r2
 8003212:	d13f      	bne.n	8003294 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03c      	beq.n	8003294 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003230:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003238:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	333c      	adds	r3, #60	; 0x3c
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	f083 0301 	eor.w	r3, r3, #1
 8003262:	b2d8      	uxtb	r0, r3
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	333c      	adds	r3, #60	; 0x3c
 8003274:	4602      	mov	r2, r0
 8003276:	701a      	strb	r2, [r3, #0]
      break;
 8003278:	e00c      	b.n	8003294 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334c      	adds	r3, #76	; 0x4c
 800328a:	2204      	movs	r2, #4
 800328c:	701a      	strb	r2, [r3, #0]
      break;
 800328e:	e001      	b.n	8003294 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003290:	bf00      	nop
 8003292:	e000      	b.n	8003296 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003294:	bf00      	nop
  }
}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032ca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d10b      	bne.n	80032ee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fe fbb9 	bl	8001a58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d132      	bne.n	800335e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f043 0308 	orr.w	r3, r3, #8
 80032fe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d126      	bne.n	8003358 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7a5b      	ldrb	r3, [r3, #9]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d113      	bne.n	800333a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800331c:	d106      	bne.n	800332c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f002 f9e3 	bl	80056f0 <USB_InitFSLSPClkSel>
 800332a:	e011      	b.n	8003350 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f002 f9dc 	bl	80056f0 <USB_InitFSLSPClkSel>
 8003338:	e00a      	b.n	8003350 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	79db      	ldrb	r3, [r3, #7]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d106      	bne.n	8003350 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003348:	461a      	mov	r2, r3
 800334a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800334e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7fe fb95 	bl	8001a80 <HAL_HCD_PortEnabled_Callback>
 8003356:	e002      	b.n	800335e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fe fb9b 	bl	8001a94 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d103      	bne.n	8003370 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f043 0320 	orr.w	r3, r3, #32
 800336e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6013      	str	r3, [r2, #0]
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e12b      	b.n	80035ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fc82 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2224      	movs	r2, #36	; 0x24
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033e8:	f001 fa20 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 80033ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4a81      	ldr	r2, [pc, #516]	; (80035f8 <HAL_I2C_Init+0x274>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d807      	bhi.n	8003408 <HAL_I2C_Init+0x84>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a80      	ldr	r2, [pc, #512]	; (80035fc <HAL_I2C_Init+0x278>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e006      	b.n	8003416 <HAL_I2C_Init+0x92>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a7d      	ldr	r2, [pc, #500]	; (8003600 <HAL_I2C_Init+0x27c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e0e7      	b.n	80035ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a78      	ldr	r2, [pc, #480]	; (8003604 <HAL_I2C_Init+0x280>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0c9b      	lsrs	r3, r3, #18
 8003428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a6a      	ldr	r2, [pc, #424]	; (80035f8 <HAL_I2C_Init+0x274>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d802      	bhi.n	8003458 <HAL_I2C_Init+0xd4>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3301      	adds	r3, #1
 8003456:	e009      	b.n	800346c <HAL_I2C_Init+0xe8>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	4a69      	ldr	r2, [pc, #420]	; (8003608 <HAL_I2C_Init+0x284>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	3301      	adds	r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	430b      	orrs	r3, r1
 8003472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800347e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	495c      	ldr	r1, [pc, #368]	; (80035f8 <HAL_I2C_Init+0x274>)
 8003488:	428b      	cmp	r3, r1
 800348a:	d819      	bhi.n	80034c0 <HAL_I2C_Init+0x13c>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e59      	subs	r1, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fbb1 f3f3 	udiv	r3, r1, r3
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034a0:	400b      	ands	r3, r1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_I2C_Init+0x138>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e59      	subs	r1, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ba:	e051      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 80034bc:	2304      	movs	r3, #4
 80034be:	e04f      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d111      	bne.n	80034ec <HAL_I2C_Init+0x168>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e58      	subs	r0, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e012      	b.n	8003512 <HAL_I2C_Init+0x18e>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e58      	subs	r0, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	0099      	lsls	r1, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Init+0x196>
 8003516:	2301      	movs	r3, #1
 8003518:	e022      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10e      	bne.n	8003540 <HAL_I2C_Init+0x1bc>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1e58      	subs	r0, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	440b      	add	r3, r1
 8003530:	fbb0 f3f3 	udiv	r3, r0, r3
 8003534:	3301      	adds	r3, #1
 8003536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	e00f      	b.n	8003560 <HAL_I2C_Init+0x1dc>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	0099      	lsls	r1, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	fbb0 f3f3 	udiv	r3, r0, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	6809      	ldr	r1, [r1, #0]
 8003564:	4313      	orrs	r3, r2
 8003566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800358e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6911      	ldr	r1, [r2, #16]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68d2      	ldr	r2, [r2, #12]
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	000186a0 	.word	0x000186a0
 80035fc:	001e847f 	.word	0x001e847f
 8003600:	003d08ff 	.word	0x003d08ff
 8003604:	431bde83 	.word	0x431bde83
 8003608:	10624dd3 	.word	0x10624dd3

0800360c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e128      	b.n	8003870 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a90      	ldr	r2, [pc, #576]	; (8003878 <HAL_I2S_Init+0x26c>)
 8003636:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fd fb83 	bl	8000d44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003654:	f023 030f 	bic.w	r3, r3, #15
 8003658:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2202      	movs	r2, #2
 8003660:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d060      	beq.n	800372c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003672:	2310      	movs	r3, #16
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e001      	b.n	800367c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003678:	2320      	movs	r3, #32
 800367a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b20      	cmp	r3, #32
 8003682:	d802      	bhi.n	800368a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800368a:	2001      	movs	r0, #1
 800368c:	f001 f9f6 	bl	8004a7c <HAL_RCCEx_GetPeriphCLKFreq>
 8003690:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369a:	d125      	bne.n	80036e8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	3305      	adds	r3, #5
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	e01f      	b.n	8003706 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	461a      	mov	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	3305      	adds	r3, #5
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	e00e      	b.n	8003706 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	3305      	adds	r3, #5
 8003704:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4a5c      	ldr	r2, [pc, #368]	; (800387c <HAL_I2S_Init+0x270>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e003      	b.n	8003734 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800372c:	2302      	movs	r3, #2
 800372e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d902      	bls.n	8003740 <HAL_I2S_Init+0x134>
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2bff      	cmp	r3, #255	; 0xff
 800373e:	d907      	bls.n	8003750 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e08f      	b.n	8003870 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	ea42 0103 	orr.w	r1, r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	430a      	orrs	r2, r1
 8003762:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800376e:	f023 030f 	bic.w	r3, r3, #15
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6851      	ldr	r1, [r2, #4]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68d2      	ldr	r2, [r2, #12]
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6992      	ldr	r2, [r2, #24]
 8003786:	430a      	orrs	r2, r1
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d161      	bne.n	8003860 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a38      	ldr	r2, [pc, #224]	; (8003880 <HAL_I2S_Init+0x274>)
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a37      	ldr	r2, [pc, #220]	; (8003884 <HAL_I2S_Init+0x278>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_I2S_Init+0x1a4>
 80037ac:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_I2S_Init+0x27c>)
 80037ae:	e001      	b.n	80037b4 <HAL_I2S_Init+0x1a8>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	4932      	ldr	r1, [pc, #200]	; (8003884 <HAL_I2S_Init+0x278>)
 80037bc:	428a      	cmp	r2, r1
 80037be:	d101      	bne.n	80037c4 <HAL_I2S_Init+0x1b8>
 80037c0:	4a31      	ldr	r2, [pc, #196]	; (8003888 <HAL_I2S_Init+0x27c>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2S_Init+0x1bc>
 80037c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037cc:	f023 030f 	bic.w	r3, r3, #15
 80037d0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <HAL_I2S_Init+0x278>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <HAL_I2S_Init+0x1d4>
 80037dc:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <HAL_I2S_Init+0x27c>)
 80037de:	e001      	b.n	80037e4 <HAL_I2S_Init+0x1d8>
 80037e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e4:	2202      	movs	r2, #2
 80037e6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a25      	ldr	r2, [pc, #148]	; (8003884 <HAL_I2S_Init+0x278>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_I2S_Init+0x1ea>
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_I2S_Init+0x27c>)
 80037f4:	e001      	b.n	80037fa <HAL_I2S_Init+0x1ee>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003806:	d003      	beq.n	8003810 <HAL_I2S_Init+0x204>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e001      	b.n	800381c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003826:	4313      	orrs	r3, r2
 8003828:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003830:	4313      	orrs	r3, r2
 8003832:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800383a:	4313      	orrs	r3, r2
 800383c:	b29a      	uxth	r2, r3
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	4313      	orrs	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003848:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <HAL_I2S_Init+0x278>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_I2S_Init+0x24c>
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_I2S_Init+0x27c>)
 8003856:	e001      	b.n	800385c <HAL_I2S_Init+0x250>
 8003858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385c:	897a      	ldrh	r2, [r7, #10]
 800385e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	08003983 	.word	0x08003983
 800387c:	cccccccd 	.word	0xcccccccd
 8003880:	08003a99 	.word	0x08003a99
 8003884:	40003800 	.word	0x40003800
 8003888:	40003400 	.word	0x40003400

0800388c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	881a      	ldrh	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10e      	bne.n	800391c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ffb8 	bl	800388c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	b292      	uxth	r2, r2
 8003938:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	1c9a      	adds	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10e      	bne.n	800397a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff93 	bl	80038a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b04      	cmp	r3, #4
 800399c:	d13a      	bne.n	8003a14 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d109      	bne.n	80039bc <I2S_IRQHandler+0x3a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d102      	bne.n	80039bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffb4 	bl	8003924 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d126      	bne.n	8003a14 <I2S_IRQHandler+0x92>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d11f      	bne.n	8003a14 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff ff50 	bl	80038b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d136      	bne.n	8003a8e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d109      	bne.n	8003a3e <I2S_IRQHandler+0xbc>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d102      	bne.n	8003a3e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff45 	bl	80038c8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d122      	bne.n	8003a8e <I2S_IRQHandler+0x10c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d11b      	bne.n	8003a8e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a64:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff13 	bl	80038b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a92      	ldr	r2, [pc, #584]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ab2:	4b92      	ldr	r3, [pc, #584]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab4:	e001      	b.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a8b      	ldr	r2, [pc, #556]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ad0:	4b8a      	ldr	r3, [pc, #552]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad2:	e001      	b.n	8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae4:	d004      	beq.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 8099 	bne.w	8003c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d107      	bne.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f925 	bl	8003d54 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d107      	bne.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9c8 	bl	8003eb4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d13a      	bne.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d035      	beq.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b42:	4b6e      	ldr	r3, [pc, #440]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b44:	e001      	b.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4969      	ldr	r1, [pc, #420]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b52:	428b      	cmp	r3, r1
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b56:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f043 0202 	orr.w	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fe88 	bl	80038b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	f040 80c3 	bne.w	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80bd 	beq.w	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bd6:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd8:	e001      	b.n	8003bde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4944      	ldr	r1, [pc, #272]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003be6:	428b      	cmp	r3, r1
 8003be8:	d101      	bne.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bec:	e001      	b.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bf6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fe4a 	bl	80038b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c20:	e089      	b.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d107      	bne.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8be 	bl	8003db8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f8fd 	bl	8003e50 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d12f      	bne.n	8003cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02a      	beq.n	8003cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c86:	e001      	b.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4919      	ldr	r1, [pc, #100]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d101      	bne.n	8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c9a:	e001      	b.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ca4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fdfa 	bl	80038b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d136      	bne.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d031      	beq.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003cde:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ce0:	e001      	b.n	8003ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4902      	ldr	r1, [pc, #8]	; (8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cee:	428b      	cmp	r3, r1
 8003cf0:	d106      	bne.n	8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003cf2:	4b02      	ldr	r3, [pc, #8]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cf4:	e006      	b.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003cf6:	bf00      	nop
 8003cf8:	40003800 	.word	0x40003800
 8003cfc:	40003400 	.word	0x40003400
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d08:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f043 0204 	orr.w	r2, r3, #4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fdc0 	bl	80038b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d34:	e000      	b.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d36:	bf00      	nop
}
 8003d38:	bf00      	nop
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	1c99      	adds	r1, r3, #2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6251      	str	r1, [r2, #36]	; 0x24
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d113      	bne.n	8003dae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ffc9 	bl	8003d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c99      	adds	r1, r3, #2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6251      	str	r1, [r2, #36]	; 0x24
 8003dca:	8819      	ldrh	r1, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <I2SEx_TxISR_I2SExt+0x90>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <I2SEx_TxISR_I2SExt+0x22>
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <I2SEx_TxISR_I2SExt+0x94>)
 8003dd8:	e001      	b.n	8003dde <I2SEx_TxISR_I2SExt+0x26>
 8003dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dde:	460a      	mov	r2, r1
 8003de0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d121      	bne.n	8003e3e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <I2SEx_TxISR_I2SExt+0x90>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <I2SEx_TxISR_I2SExt+0x50>
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <I2SEx_TxISR_I2SExt+0x94>)
 8003e06:	e001      	b.n	8003e0c <I2SEx_TxISR_I2SExt+0x54>
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	490d      	ldr	r1, [pc, #52]	; (8003e48 <I2SEx_TxISR_I2SExt+0x90>)
 8003e14:	428b      	cmp	r3, r1
 8003e16:	d101      	bne.n	8003e1c <I2SEx_TxISR_I2SExt+0x64>
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <I2SEx_TxISR_I2SExt+0x94>)
 8003e1a:	e001      	b.n	8003e20 <I2SEx_TxISR_I2SExt+0x68>
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff81 	bl	8003d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40003800 	.word	0x40003800
 8003e4c:	40003400 	.word	0x40003400

08003e50 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68d8      	ldr	r0, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	1c99      	adds	r1, r3, #2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e68:	b282      	uxth	r2, r0
 8003e6a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d113      	bne.n	8003eac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e92:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ff4a 	bl	8003d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a20      	ldr	r2, [pc, #128]	; (8003f44 <I2SEx_RxISR_I2SExt+0x90>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <I2SEx_RxISR_I2SExt+0x16>
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <I2SEx_RxISR_I2SExt+0x94>)
 8003ec8:	e001      	b.n	8003ece <I2SEx_RxISR_I2SExt+0x1a>
 8003eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ece:	68d8      	ldr	r0, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	1c99      	adds	r1, r3, #2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003eda:	b282      	uxth	r2, r0
 8003edc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d121      	bne.n	8003f3a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <I2SEx_RxISR_I2SExt+0x90>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <I2SEx_RxISR_I2SExt+0x50>
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <I2SEx_RxISR_I2SExt+0x94>)
 8003f02:	e001      	b.n	8003f08 <I2SEx_RxISR_I2SExt+0x54>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	490d      	ldr	r1, [pc, #52]	; (8003f44 <I2SEx_RxISR_I2SExt+0x90>)
 8003f10:	428b      	cmp	r3, r1
 8003f12:	d101      	bne.n	8003f18 <I2SEx_RxISR_I2SExt+0x64>
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <I2SEx_RxISR_I2SExt+0x94>)
 8003f16:	e001      	b.n	8003f1c <I2SEx_RxISR_I2SExt+0x68>
 8003f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f20:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff03 	bl	8003d40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40003800 	.word	0x40003800
 8003f48:	40003400 	.word	0x40003400

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e267      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d075      	beq.n	8004056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d00c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d112      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	4b7e      	ldr	r3, [pc, #504]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d05b      	beq.n	8004054 <HAL_RCC_OscConfig+0x108>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d157      	bne.n	8004054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e242      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x74>
 8003fb2:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a75      	ldr	r2, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x98>
 8003fca:	4b70      	ldr	r3, [pc, #448]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6f      	ldr	r2, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6c      	ldr	r2, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fe4:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a68      	ldr	r2, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fd f8e0 	bl	80011c8 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fd f8dc 	bl	80011c8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e207      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xc0>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fd f8cc 	bl	80011c8 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004034:	f7fd f8c8 	bl	80011c8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1f3      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0xe8>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d063      	beq.n	800412a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004062:	4b4a      	ldr	r3, [pc, #296]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b44      	ldr	r3, [pc, #272]	; (800418c <HAL_RCC_OscConfig+0x240>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1c7      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4937      	ldr	r1, [pc, #220]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b34      	ldr	r3, [pc, #208]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd f881 	bl	80011c8 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fd f87d 	bl	80011c8 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1a8      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4925      	ldr	r1, [pc, #148]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd f860 	bl	80011c8 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410c:	f7fd f85c 	bl	80011c8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e187      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d036      	beq.n	80041a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd f840 	bl	80011c8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414c:	f7fd f83c 	bl	80011c8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e167      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x200>
 800416a:	e01b      	b.n	80041a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004172:	f7fd f829 	bl	80011c8 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	e00e      	b.n	8004198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fd f825 	bl	80011c8 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d907      	bls.n	8004198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e150      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b88      	ldr	r3, [pc, #544]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ea      	bne.n	800417a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8097 	beq.w	80042e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b81      	ldr	r3, [pc, #516]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b7d      	ldr	r3, [pc, #500]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a7c      	ldr	r2, [pc, #496]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b77      	ldr	r3, [pc, #476]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b74      	ldr	r3, [pc, #464]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a73      	ldr	r2, [pc, #460]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fc ffe5 	bl	80011c8 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fc ffe1 	bl	80011c8 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e10c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x2ea>
 8004228:	4b64      	ldr	r3, [pc, #400]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a63      	ldr	r2, [pc, #396]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
 8004234:	e01c      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x30c>
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a5e      	ldr	r2, [pc, #376]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004258:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a57      	ldr	r2, [pc, #348]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	4b55      	ldr	r3, [pc, #340]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a54      	ldr	r2, [pc, #336]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc ffa6 	bl	80011c8 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fc ffa2 	bl	80011c8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0cb      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ee      	beq.n	8004280 <HAL_RCC_OscConfig+0x334>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a4:	f7fc ff90 	bl	80011c8 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fc ff8c 	bl	80011c8 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0b5      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ee      	bne.n	80042ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a38      	ldr	r2, [pc, #224]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a1 	beq.w	800442c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ea:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d05c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d141      	bne.n	8004382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fc ff60 	bl	80011c8 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430c:	f7fc ff5c 	bl	80011c8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e087      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b27      	ldr	r3, [pc, #156]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	491b      	ldr	r1, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7fc ff35 	bl	80011c8 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004362:	f7fc ff31 	bl	80011c8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e05c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x416>
 8004380:	e054      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fc ff1e 	bl	80011c8 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004390:	f7fc ff1a 	bl	80011c8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e045      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x444>
 80043ae:	e03d      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e038      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_OscConfig+0x4ec>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d028      	beq.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d121      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	4293      	cmp	r3, r2
 8004402:	d111      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	3b01      	subs	r3, #1
 8004412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0cc      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004450:	4b68      	ldr	r3, [pc, #416]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d90c      	bls.n	8004478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0b8      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a58      	ldr	r2, [pc, #352]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a8:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b4:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	494d      	ldr	r1, [pc, #308]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d044      	beq.n	800455c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d119      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fa:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e067      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4934      	ldr	r1, [pc, #208]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800452c:	f7fc fe4c 	bl	80011c8 <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fc fe48 	bl	80011c8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e04f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d20c      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e032      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	490e      	ldr	r1, [pc, #56]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c2:	f000 f821 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	5ccb      	ldrb	r3, [r1, r3]
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fcd8 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023c00 	.word	0x40023c00
 80045f8:	40023800 	.word	0x40023800
 80045fc:	08008800 	.word	0x08008800
 8004600:	20000000 	.word	0x20000000
 8004604:	20000004 	.word	0x20000004

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b094      	sub	sp, #80	; 0x50
 800460e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
 8004614:	2300      	movs	r3, #0
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004618:	2300      	movs	r3, #0
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004620:	4b79      	ldr	r3, [pc, #484]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b08      	cmp	r3, #8
 800462a:	d00d      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x40>
 800462c:	2b08      	cmp	r3, #8
 800462e:	f200 80e1 	bhi.w	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x3a>
 800463a:	e0db      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b73      	ldr	r3, [pc, #460]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004640:	e0db      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004642:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_GetSysClockFreq+0x208>)
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004646:	e0d8      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004648:	4b6f      	ldr	r3, [pc, #444]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004652:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	2200      	movs	r2, #0
 8004666:	63bb      	str	r3, [r7, #56]	; 0x38
 8004668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
 8004672:	2300      	movs	r3, #0
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
 8004676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	f04f 0000 	mov.w	r0, #0
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	0159      	lsls	r1, r3, #5
 8004688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800468c:	0150      	lsls	r0, r2, #5
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4621      	mov	r1, r4
 8004694:	1a51      	subs	r1, r2, r1
 8004696:	6139      	str	r1, [r7, #16]
 8004698:	4629      	mov	r1, r5
 800469a:	eb63 0301 	sbc.w	r3, r3, r1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ac:	4659      	mov	r1, fp
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b6:	4651      	mov	r1, sl
 80046b8:	018a      	lsls	r2, r1, #6
 80046ba:	4651      	mov	r1, sl
 80046bc:	ebb2 0801 	subs.w	r8, r2, r1
 80046c0:	4659      	mov	r1, fp
 80046c2:	eb63 0901 	sbc.w	r9, r3, r1
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046da:	4690      	mov	r8, r2
 80046dc:	4699      	mov	r9, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	eb18 0303 	adds.w	r3, r8, r3
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	462b      	mov	r3, r5
 80046e8:	eb49 0303 	adc.w	r3, r9, r3
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046fa:	4629      	mov	r1, r5
 80046fc:	024b      	lsls	r3, r1, #9
 80046fe:	4621      	mov	r1, r4
 8004700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004704:	4621      	mov	r1, r4
 8004706:	024a      	lsls	r2, r1, #9
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	2200      	movs	r2, #0
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004718:	f7fb fd5a 	bl	80001d0 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4613      	mov	r3, r2
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	e058      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	4618      	mov	r0, r3
 8004730:	4611      	mov	r1, r2
 8004732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	2300      	movs	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	0159      	lsls	r1, r3, #5
 800474e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004752:	0150      	lsls	r0, r2, #5
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4641      	mov	r1, r8
 800475a:	ebb2 0a01 	subs.w	sl, r2, r1
 800475e:	4649      	mov	r1, r9
 8004760:	eb63 0b01 	sbc.w	fp, r3, r1
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004778:	ebb2 040a 	subs.w	r4, r2, sl
 800477c:	eb63 050b 	sbc.w	r5, r3, fp
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	00eb      	lsls	r3, r5, #3
 800478a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800478e:	00e2      	lsls	r2, r4, #3
 8004790:	4614      	mov	r4, r2
 8004792:	461d      	mov	r5, r3
 8004794:	4643      	mov	r3, r8
 8004796:	18e3      	adds	r3, r4, r3
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	464b      	mov	r3, r9
 800479c:	eb45 0303 	adc.w	r3, r5, r3
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ae:	4629      	mov	r1, r5
 80047b0:	028b      	lsls	r3, r1, #10
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b8:	4621      	mov	r1, r4
 80047ba:	028a      	lsls	r2, r1, #10
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	2200      	movs	r2, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	61fa      	str	r2, [r7, #28]
 80047c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047cc:	f7fb fd00 	bl	80001d0 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3750      	adds	r7, #80	; 0x50
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	00f42400 	.word	0x00f42400
 8004810:	007a1200 	.word	0x007a1200

08004814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000000 	.word	0x20000000

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	08008810 	.word	0x08008810

08004854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	220f      	movs	r2, #15
 8004862:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0203 	and.w	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <HAL_RCC_GetClockConfig+0x5c>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <HAL_RCC_GetClockConfig+0x5c>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <HAL_RCC_GetClockConfig+0x60>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0207 	and.w	r2, r3, #7
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40023c00 	.word	0x40023c00

080048b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d035      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048e0:	4b62      	ldr	r3, [pc, #392]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048e6:	f7fc fc6f 	bl	80011c8 <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ee:	f7fc fc6b 	bl	80011c8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0b0      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004900:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	019a      	lsls	r2, r3, #6
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	071b      	lsls	r3, r3, #28
 8004918:	4955      	ldr	r1, [pc, #340]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004920:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004926:	f7fc fc4f 	bl	80011c8 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800492e:	f7fc fc4b 	bl	80011c8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e090      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004940:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8083 	beq.w	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	4b44      	ldr	r3, [pc, #272]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a43      	ldr	r2, [pc, #268]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b41      	ldr	r3, [pc, #260]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004976:	4b3f      	ldr	r3, [pc, #252]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3e      	ldr	r2, [pc, #248]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004980:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004982:	f7fc fc21 	bl	80011c8 <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800498a:	f7fc fc1d 	bl	80011c8 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e062      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800499c:	4b35      	ldr	r3, [pc, #212]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d028      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c6:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049d0:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d6:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049dc:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d114      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fc fbeb 	bl	80011c8 <HAL_GetTick>
 80049f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f4:	e00a      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fc fbe7 	bl	80011c8 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e02a      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ee      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a24:	d10d      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	490d      	ldr	r1, [pc, #52]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]
 8004a40:	e005      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a4c:	6093      	str	r3, [r2, #8]
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5a:	4905      	ldr	r1, [pc, #20]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	42470068 	.word	0x42470068
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40007000 	.word	0x40007000
 8004a78:	42470e40 	.word	0x42470e40

08004a7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d13f      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ab0:	d12f      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ab4:	617b      	str	r3, [r7, #20]
          break;
 8004ab6:	e02f      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac4:	d108      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ace:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e007      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ad8:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b02:	0f1b      	lsrs	r3, r3, #28
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	617b      	str	r3, [r7, #20]
          break;
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
          break;
 8004b16:	bf00      	nop
        }
      }
      break;
 8004b18:	e000      	b.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004b1a:	bf00      	nop
    }
  }
  return frequency;
 8004b1c:	697b      	ldr	r3, [r7, #20]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	00bb8000 	.word	0x00bb8000
 8004b34:	007a1200 	.word	0x007a1200
 8004b38:	00f42400 	.word	0x00f42400

08004b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07b      	b.n	8004c46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d108      	bne.n	8004b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5e:	d009      	beq.n	8004b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	61da      	str	r2, [r3, #28]
 8004b66:	e005      	b.n	8004b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc f958 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf8:	ea42 0103 	orr.w	r1, r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0104 	and.w	r1, r3, #4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f003 0210 	and.w	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e041      	b.n	8004ce4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f839 	bl	8004cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f000 f9bf 	bl	8005010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e04e      	b.n	8004db6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x80>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d01d      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x80>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x80>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x80>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x80>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x80>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a18      	ldr	r2, [pc, #96]	; (8004ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d111      	bne.n	8004da4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d010      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	e007      	b.n	8004db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40010400 	.word	0x40010400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40001800 	.word	0x40001800

08004de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d020      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01b      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0202 	mvn.w	r2, #2
 8004e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f8d2 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8c4 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f8d5 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d020      	beq.n	8004e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01b      	beq.n	8004e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0204 	mvn.w	r2, #4
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8ac 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f89e 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8af 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d020      	beq.n	8004edc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01b      	beq.n	8004edc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0208 	mvn.w	r2, #8
 8004eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f886 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f878 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f889 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d020      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0210 	mvn.w	r2, #16
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2208      	movs	r2, #8
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f860 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f852 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f863 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0201 	mvn.w	r2, #1
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fb fe70 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f906 	bl	800517c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f834 	bl	8004ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0220 	mvn.w	r2, #32
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8d8 	bl	8005168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a46      	ldr	r2, [pc, #280]	; (800513c <TIM_Base_SetConfig+0x12c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502e:	d00f      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a43      	ldr	r2, [pc, #268]	; (8005140 <TIM_Base_SetConfig+0x130>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00b      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a42      	ldr	r2, [pc, #264]	; (8005144 <TIM_Base_SetConfig+0x134>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a41      	ldr	r2, [pc, #260]	; (8005148 <TIM_Base_SetConfig+0x138>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a40      	ldr	r2, [pc, #256]	; (800514c <TIM_Base_SetConfig+0x13c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a35      	ldr	r2, [pc, #212]	; (800513c <TIM_Base_SetConfig+0x12c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d027      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a32      	ldr	r2, [pc, #200]	; (8005140 <TIM_Base_SetConfig+0x130>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d023      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a31      	ldr	r2, [pc, #196]	; (8005144 <TIM_Base_SetConfig+0x134>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a30      	ldr	r2, [pc, #192]	; (8005148 <TIM_Base_SetConfig+0x138>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2f      	ldr	r2, [pc, #188]	; (800514c <TIM_Base_SetConfig+0x13c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d017      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2e      	ldr	r2, [pc, #184]	; (8005150 <TIM_Base_SetConfig+0x140>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2d      	ldr	r2, [pc, #180]	; (8005154 <TIM_Base_SetConfig+0x144>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <TIM_Base_SetConfig+0x148>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2b      	ldr	r2, [pc, #172]	; (800515c <TIM_Base_SetConfig+0x14c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <TIM_Base_SetConfig+0x150>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <TIM_Base_SetConfig+0x154>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a10      	ldr	r2, [pc, #64]	; (800513c <TIM_Base_SetConfig+0x12c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0xf8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <TIM_Base_SetConfig+0x13c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d103      	bne.n	8005110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	611a      	str	r2, [r3, #16]
  }
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40010400 	.word	0x40010400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800
 800515c:	40001800 	.word	0x40001800
 8005160:	40001c00 	.word	0x40001c00
 8005164:	40002000 	.word	0x40002000

08005168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	f107 001c 	add.w	r0, r7, #28
 800519e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d123      	bne.n	80051f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d105      	bne.n	80051e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f98d 	bl	8005506 <USB_CoreReset>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e01b      	b.n	800522a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f981 	bl	8005506 <USB_CoreReset>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005208:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
 800521c:	e005      	b.n	800522a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800522a:	7fbb      	ldrb	r3, [r7, #30]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d10b      	bne.n	8005248 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f043 0206 	orr.w	r2, r3, #6
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005254:	b004      	add	sp, #16
 8005256:	4770      	bx	lr

08005258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f023 0201 	bic.w	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d115      	bne.n	80052c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052a8:	200a      	movs	r0, #10
 80052aa:	f7fb ff99 	bl	80011e0 <HAL_Delay>
      ms += 10U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	330a      	adds	r3, #10
 80052b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f918 	bl	80054ea <USB_GetMode>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d01e      	beq.n	80052fe <USB_SetCurrentMode+0x84>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2bc7      	cmp	r3, #199	; 0xc7
 80052c4:	d9f0      	bls.n	80052a8 <USB_SetCurrentMode+0x2e>
 80052c6:	e01a      	b.n	80052fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d115      	bne.n	80052fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052da:	200a      	movs	r0, #10
 80052dc:	f7fb ff80 	bl	80011e0 <HAL_Delay>
      ms += 10U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	330a      	adds	r3, #10
 80052e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8ff 	bl	80054ea <USB_GetMode>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <USB_SetCurrentMode+0x84>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2bc7      	cmp	r3, #199	; 0xc7
 80052f6:	d9f0      	bls.n	80052da <USB_SetCurrentMode+0x60>
 80052f8:	e001      	b.n	80052fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e005      	b.n	800530a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2bc8      	cmp	r3, #200	; 0xc8
 8005302:	d101      	bne.n	8005308 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800532c:	d901      	bls.n	8005332 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e01b      	b.n	800536a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	daf2      	bge.n	8005320 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005356:	d901      	bls.n	800535c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b20      	cmp	r3, #32
 8005366:	d0f0      	beq.n	800534a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800538e:	d901      	bls.n	8005394 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e018      	b.n	80053c6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	daf2      	bge.n	8005382 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2210      	movs	r2, #16
 80053a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053b2:	d901      	bls.n	80053b8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e006      	b.n	80053c6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d0f0      	beq.n	80053a6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b08b      	sub	sp, #44	; 0x2c
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	e014      	b.n	8005428 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	601a      	str	r2, [r3, #0]
    pDest++;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	3301      	adds	r3, #1
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	3301      	adds	r3, #1
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	3301      	adds	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	3301      	adds	r3, #1
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	3301      	adds	r3, #1
 8005426:	623b      	str	r3, [r7, #32]
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	429a      	cmp	r2, r3
 800542e:	d3e6      	bcc.n	80053fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005430:	8bfb      	ldrh	r3, [r7, #30]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01e      	beq.n	8005474 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005440:	461a      	mov	r2, r3
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	701a      	strb	r2, [r3, #0]
      i++;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	3301      	adds	r3, #1
 8005460:	623b      	str	r3, [r7, #32]
      pDest++;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	3301      	adds	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005468:	8bfb      	ldrh	r3, [r7, #30]
 800546a:	3b01      	subs	r3, #1
 800546c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800546e:	8bfb      	ldrh	r3, [r7, #30]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1ea      	bne.n	800544a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005476:	4618      	mov	r0, r3
 8005478:	372c      	adds	r7, #44	; 0x2c
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4013      	ands	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054dc:	68bb      	ldr	r3, [r7, #8]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0301 	and.w	r3, r3, #1
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800551e:	d901      	bls.n	8005524 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e01b      	b.n	800555c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	daf2      	bge.n	8005512 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f043 0201 	orr.w	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005548:	d901      	bls.n	800554e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e006      	b.n	800555c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d0f0      	beq.n	800553c <USB_CoreReset+0x36>

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005568:	b084      	sub	sp, #16
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005588:	461a      	mov	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d119      	bne.n	80055f2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80055be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d10a      	bne.n	80055dc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e014      	b.n	8005606 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ea:	f023 0304 	bic.w	r3, r3, #4
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e009      	b.n	8005606 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005600:	f023 0304 	bic.w	r3, r3, #4
 8005604:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005606:	2110      	movs	r1, #16
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fe82 	bl	8005312 <USB_FlushTxFifo>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff feac 	bl	8005376 <USB_FlushRxFifo>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e015      	b.n	800565a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 33ff 	mov.w	r3, #4294967295
 8005640:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3301      	adds	r3, #1
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800565e:	461a      	mov	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4293      	cmp	r3, r2
 8005664:	d3e3      	bcc.n	800562e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f04f 32ff 	mov.w	r2, #4294967295
 8005672:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <USB_HostInit+0x170>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d10b      	bne.n	8005694 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005682:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a15      	ldr	r2, [pc, #84]	; (80056dc <USB_HostInit+0x174>)
 8005688:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a14      	ldr	r2, [pc, #80]	; (80056e0 <USB_HostInit+0x178>)
 800568e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005692:	e009      	b.n	80056a8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <USB_HostInit+0x17c>)
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <USB_HostInit+0x180>)
 80056a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f043 0210 	orr.w	r2, r3, #16
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <USB_HostInit+0x184>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d4:	b004      	add	sp, #16
 80056d6:	4770      	bx	lr
 80056d8:	40040000 	.word	0x40040000
 80056dc:	01000200 	.word	0x01000200
 80056e0:	00e00300 	.word	0x00e00300
 80056e4:	00600080 	.word	0x00600080
 80056e8:	004000e0 	.word	0x004000e0
 80056ec:	a3200008 	.word	0xa3200008

080056f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005728:	4313      	orrs	r3, r2
 800572a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005738:	461a      	mov	r2, r3
 800573a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800573e:	6053      	str	r3, [r2, #4]
 8005740:	e00c      	b.n	800575c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d107      	bne.n	8005758 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574e:	461a      	mov	r2, r3
 8005750:	f241 7370 	movw	r3, #6000	; 0x1770
 8005754:	6053      	str	r3, [r2, #4]
 8005756:	e001      	b.n	800575c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	b29b      	uxth	r3, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	; 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	0c9b      	lsrs	r3, r3, #18
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	0fdb      	lsrs	r3, r3, #31
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0fdb      	lsrs	r3, r3, #31
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d10d      	bne.n	800580e <USB_HC_Halt+0x82>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <USB_HC_Halt+0x82>
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d002      	beq.n	800580a <USB_HC_Halt+0x7e>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d101      	bne.n	800580e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e0d8      	b.n	80059c0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <USB_HC_Halt+0x8e>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d173      	bne.n	8005902 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005838:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d14a      	bne.n	80058dc <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d133      	bne.n	80058ba <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800586c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005870:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005890:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	3301      	adds	r3, #1
 8005896:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589e:	d82e      	bhi.n	80058fe <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b6:	d0ec      	beq.n	8005892 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058b8:	e081      	b.n	80059be <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058da:	e070      	b.n	80059be <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058fc:	e05f      	b.n	80059be <USB_HC_Halt+0x232>
            break;
 80058fe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005900:	e05d      	b.n	80059be <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	440a      	add	r2, r1
 8005918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800591c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005920:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d133      	bne.n	800599a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005950:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	440a      	add	r2, r1
 8005968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005970:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3301      	adds	r3, #1
 8005976:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800597e:	d81d      	bhi.n	80059bc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005996:	d0ec      	beq.n	8005972 <USB_HC_Halt+0x1e6>
 8005998:	e011      	b.n	80059be <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e000      	b.n	80059be <USB_HC_Halt+0x232>
          break;
 80059bc:	bf00      	nop
    }
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3724      	adds	r7, #36	; 0x24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059de:	2b84      	cmp	r3, #132	; 0x84
 80059e0:	d005      	beq.n	80059ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	3303      	adds	r3, #3
 80059ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a00:	f001 fcf8 	bl	80073f4 <vTaskStartScheduler>
  
  return osOK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0c:	b089      	sub	sp, #36	; 0x24
 8005a0e:	af04      	add	r7, sp, #16
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d020      	beq.n	8005a5e <osThreadCreate+0x54>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01c      	beq.n	8005a5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685c      	ldr	r4, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691e      	ldr	r6, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff ffc8 	bl	80059cc <makeFreeRtosPriority>
 8005a3c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a46:	9202      	str	r2, [sp, #8]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	9100      	str	r1, [sp, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	4632      	mov	r2, r6
 8005a50:	4629      	mov	r1, r5
 8005a52:	4620      	mov	r0, r4
 8005a54:	f001 fb06 	bl	8007064 <xTaskCreateStatic>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e01c      	b.n	8005a98 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685c      	ldr	r4, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff ffaa 	bl	80059cc <makeFreeRtosPriority>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	f107 030c 	add.w	r3, r7, #12
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	9200      	str	r2, [sp, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	4632      	mov	r2, r6
 8005a86:	4629      	mov	r1, r5
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f001 fb48 	bl	800711e <xTaskCreate>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d001      	beq.n	8005a98 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e000      	b.n	8005a9a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a98:	68fb      	ldr	r3, [r7, #12]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aa2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <osDelay+0x16>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	e000      	b.n	8005aba <osDelay+0x18>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 fc66 	bl	800738c <vTaskDelay>
  
  return osOK;
 8005ac0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d013      	beq.n	8005b0a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <osTimerCreate+0x20>
 8005ae8:	2101      	movs	r1, #1
 8005aea:	e000      	b.n	8005aee <osTimerCreate+0x22>
 8005aec:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8005af6:	9201      	str	r2, [sp, #4]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	460a      	mov	r2, r1
 8005afe:	2101      	movs	r1, #1
 8005b00:	480b      	ldr	r0, [pc, #44]	; (8005b30 <osTimerCreate+0x64>)
 8005b02:	f002 fa2a 	bl	8007f5a <xTimerCreateStatic>
 8005b06:	4603      	mov	r3, r0
 8005b08:	e00e      	b.n	8005b28 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005b0a:	7afb      	ldrb	r3, [r7, #11]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <osTimerCreate+0x48>
 8005b10:	2201      	movs	r2, #1
 8005b12:	e000      	b.n	8005b16 <osTimerCreate+0x4a>
 8005b14:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4803      	ldr	r0, [pc, #12]	; (8005b30 <osTimerCreate+0x64>)
 8005b22:	f002 f9f9 	bl	8007f18 <xTimerCreate>
 8005b26:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	080087e4 	.word	0x080087e4

08005b34 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	f000 fe87 	bl	800685e <xQueueCreateMutexStatic>
 8005b50:	4603      	mov	r3, r0
 8005b52:	e003      	b.n	8005b5c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005b54:	2001      	movs	r0, #1
 8005b56:	f000 fe6a 	bl	800682e <xQueueCreateMutex>
 8005b5a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d011      	beq.n	8005b9a <osMessageCreate+0x36>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00d      	beq.n	8005b9a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2400      	movs	r4, #0
 8005b90:	9400      	str	r4, [sp, #0]
 8005b92:	f000 fd61 	bl	8006658 <xQueueGenericCreateStatic>
 8005b96:	4603      	mov	r3, r0
 8005b98:	e008      	b.n	8005bac <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f000 fdcf 	bl	8006748 <xQueueGenericCreate>
 8005baa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd90      	pop	{r4, r7, pc}

08005bb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bc0:	f001 fc7e 	bl	80074c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bc4:	4b5b      	ldr	r3, [pc, #364]	; (8005d34 <pvPortMalloc+0x180>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bcc:	f000 f920 	bl	8005e10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bd0:	4b59      	ldr	r3, [pc, #356]	; (8005d38 <pvPortMalloc+0x184>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f040 8093 	bne.w	8005d04 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01d      	beq.n	8005c20 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005be4:	2208      	movs	r2, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4413      	add	r3, r2
 8005bea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d014      	beq.n	8005c20 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f023 0307 	bic.w	r3, r3, #7
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d06e      	beq.n	8005d04 <pvPortMalloc+0x150>
 8005c26:	4b45      	ldr	r3, [pc, #276]	; (8005d3c <pvPortMalloc+0x188>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d869      	bhi.n	8005d04 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c30:	4b43      	ldr	r3, [pc, #268]	; (8005d40 <pvPortMalloc+0x18c>)
 8005c32:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c34:	4b42      	ldr	r3, [pc, #264]	; (8005d40 <pvPortMalloc+0x18c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c3a:	e004      	b.n	8005c46 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d903      	bls.n	8005c58 <pvPortMalloc+0xa4>
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f1      	bne.n	8005c3c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c58:	4b36      	ldr	r3, [pc, #216]	; (8005d34 <pvPortMalloc+0x180>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d050      	beq.n	8005d04 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2208      	movs	r2, #8
 8005c68:	4413      	add	r3, r2
 8005c6a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	1ad2      	subs	r2, r2, r3
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d91f      	bls.n	8005cc4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <pvPortMalloc+0xf8>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	613b      	str	r3, [r7, #16]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cbe:	69b8      	ldr	r0, [r7, #24]
 8005cc0:	f000 f908 	bl	8005ed4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <pvPortMalloc+0x188>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <pvPortMalloc+0x188>)
 8005cd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cd2:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <pvPortMalloc+0x188>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b1b      	ldr	r3, [pc, #108]	; (8005d44 <pvPortMalloc+0x190>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d203      	bcs.n	8005ce6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cde:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <pvPortMalloc+0x188>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <pvPortMalloc+0x190>)
 8005ce4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <pvPortMalloc+0x184>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <pvPortMalloc+0x194>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <pvPortMalloc+0x194>)
 8005d02:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d04:	f001 fbea 	bl	80074dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <pvPortMalloc+0x174>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	60fb      	str	r3, [r7, #12]
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <pvPortMalloc+0x172>
	return pvReturn;
 8005d28:	69fb      	ldr	r3, [r7, #28]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3728      	adds	r7, #40	; 0x28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20004834 	.word	0x20004834
 8005d38:	20004848 	.word	0x20004848
 8005d3c:	20004838 	.word	0x20004838
 8005d40:	2000482c 	.word	0x2000482c
 8005d44:	2000483c 	.word	0x2000483c
 8005d48:	20004840 	.word	0x20004840

08005d4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04d      	beq.n	8005dfa <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d5e:	2308      	movs	r3, #8
 8005d60:	425b      	negs	r3, r3
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4413      	add	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <vPortFree+0xb8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <vPortFree+0x44>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	60fb      	str	r3, [r7, #12]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <vPortFree+0x62>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60bb      	str	r3, [r7, #8]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <vPortFree+0xb8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01e      	beq.n	8005dfa <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d11a      	bne.n	8005dfa <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <vPortFree+0xb8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	401a      	ands	r2, r3
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dd4:	f001 fb74 	bl	80074c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vPortFree+0xbc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4413      	add	r3, r2
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <vPortFree+0xbc>)
 8005de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005de6:	6938      	ldr	r0, [r7, #16]
 8005de8:	f000 f874 	bl	8005ed4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dec:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <vPortFree+0xc0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a06      	ldr	r2, [pc, #24]	; (8005e0c <vPortFree+0xc0>)
 8005df4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005df6:	f001 fb71 	bl	80074dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20004848 	.word	0x20004848
 8005e08:	20004838 	.word	0x20004838
 8005e0c:	20004844 	.word	0x20004844

08005e10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e16:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e1c:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <prvHeapInit+0xac>)
 8005e1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00c      	beq.n	8005e44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3307      	adds	r3, #7
 8005e2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0307 	bic.w	r3, r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <prvHeapInit+0xac>)
 8005e40:	4413      	add	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e48:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <prvHeapInit+0xb0>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ec0 <prvHeapInit+0xb0>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	4413      	add	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0307 	bic.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <prvHeapInit+0xb4>)
 8005e70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <prvHeapInit+0xb4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2200      	movs	r2, #0
 8005e78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <prvHeapInit+0xb4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e90:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <prvHeapInit+0xb4>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <prvHeapInit+0xb8>)
 8005e9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <prvHeapInit+0xbc>)
 8005ea6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <prvHeapInit+0xc0>)
 8005eaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eae:	601a      	str	r2, [r3, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	20000c2c 	.word	0x20000c2c
 8005ec0:	2000482c 	.word	0x2000482c
 8005ec4:	20004834 	.word	0x20004834
 8005ec8:	2000483c 	.word	0x2000483c
 8005ecc:	20004838 	.word	0x20004838
 8005ed0:	20004848 	.word	0x20004848

08005ed4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005edc:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <prvInsertBlockIntoFreeList+0xac>)
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e002      	b.n	8005ee8 <prvInsertBlockIntoFreeList+0x14>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d8f7      	bhi.n	8005ee2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4413      	add	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d108      	bne.n	8005f16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	441a      	add	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d118      	bne.n	8005f5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b15      	ldr	r3, [pc, #84]	; (8005f84 <prvInsertBlockIntoFreeList+0xb0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d00d      	beq.n	8005f52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	441a      	add	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e008      	b.n	8005f64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f52:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <prvInsertBlockIntoFreeList+0xb0>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e003      	b.n	8005f64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d002      	beq.n	8005f72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	2000482c 	.word	0x2000482c
 8005f84:	20004834 	.word	0x20004834

08005f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f103 0208 	add.w	r2, r3, #8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f103 0208 	add.w	r2, r3, #8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f103 0208 	add.w	r2, r3, #8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d103      	bne.n	800604a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e00c      	b.n	8006064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3308      	adds	r3, #8
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e002      	b.n	8006058 <vListInsert+0x2e>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	429a      	cmp	r2, r3
 8006062:	d2f6      	bcs.n	8006052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	601a      	str	r2, [r3, #0]
}
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6892      	ldr	r2, [r2, #8]
 80060b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6852      	ldr	r2, [r2, #4]
 80060bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d103      	bne.n	80060d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	1e5a      	subs	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3b04      	subs	r3, #4
 8006100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3b04      	subs	r3, #4
 800610e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3b04      	subs	r3, #4
 800611e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006120:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <pxPortInitialiseStack+0x64>)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b14      	subs	r3, #20
 800612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3b04      	subs	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f06f 0202 	mvn.w	r2, #2
 800613e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3b20      	subs	r3, #32
 8006144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	08006159 	.word	0x08006159

08006158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006162:	4b12      	ldr	r3, [pc, #72]	; (80061ac <prvTaskExitError+0x54>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d00a      	beq.n	8006182 <prvTaskExitError+0x2a>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60fb      	str	r3, [r7, #12]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <prvTaskExitError+0x28>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60bb      	str	r3, [r7, #8]
}
 8006194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006196:	bf00      	nop
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0fc      	beq.n	8006198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800619e:	bf00      	nop
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	2000000c 	.word	0x2000000c

080061b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <pxCurrentTCBConst2>)
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	6808      	ldr	r0, [r1, #0]
 80061b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ba:	f380 8809 	msr	PSP, r0
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f380 8811 	msr	BASEPRI, r0
 80061ca:	4770      	bx	lr
 80061cc:	f3af 8000 	nop.w

080061d0 <pxCurrentTCBConst2>:
 80061d0:	20004894 	.word	0x20004894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061d8:	4808      	ldr	r0, [pc, #32]	; (80061fc <prvPortStartFirstTask+0x24>)
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	f380 8808 	msr	MSP, r0
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8814 	msr	CONTROL, r0
 80061ea:	b662      	cpsie	i
 80061ec:	b661      	cpsie	f
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	df00      	svc	0
 80061f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061fa:	bf00      	nop
 80061fc:	e000ed08 	.word	0xe000ed08

08006200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006206:	4b46      	ldr	r3, [pc, #280]	; (8006320 <xPortStartScheduler+0x120>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a46      	ldr	r2, [pc, #280]	; (8006324 <xPortStartScheduler+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10a      	bne.n	8006226 <xPortStartScheduler+0x26>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	613b      	str	r3, [r7, #16]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006226:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <xPortStartScheduler+0x120>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3f      	ldr	r2, [pc, #252]	; (8006328 <xPortStartScheduler+0x128>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10a      	bne.n	8006246 <xPortStartScheduler+0x46>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006246:	4b39      	ldr	r3, [pc, #228]	; (800632c <xPortStartScheduler+0x12c>)
 8006248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	22ff      	movs	r2, #255	; 0xff
 8006256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006268:	b2da      	uxtb	r2, r3
 800626a:	4b31      	ldr	r3, [pc, #196]	; (8006330 <xPortStartScheduler+0x130>)
 800626c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800626e:	4b31      	ldr	r3, [pc, #196]	; (8006334 <xPortStartScheduler+0x134>)
 8006270:	2207      	movs	r2, #7
 8006272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006274:	e009      	b.n	800628a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006276:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <xPortStartScheduler+0x134>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3b01      	subs	r3, #1
 800627c:	4a2d      	ldr	r2, [pc, #180]	; (8006334 <xPortStartScheduler+0x134>)
 800627e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d0ef      	beq.n	8006276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006296:	4b27      	ldr	r3, [pc, #156]	; (8006334 <xPortStartScheduler+0x134>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1c3 0307 	rsb	r3, r3, #7
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d00a      	beq.n	80062b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60bb      	str	r3, [r7, #8]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062b8:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <xPortStartScheduler+0x134>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	4a1d      	ldr	r2, [pc, #116]	; (8006334 <xPortStartScheduler+0x134>)
 80062c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062c2:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <xPortStartScheduler+0x134>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ca:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <xPortStartScheduler+0x134>)
 80062cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <xPortStartScheduler+0x138>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a17      	ldr	r2, [pc, #92]	; (8006338 <xPortStartScheduler+0x138>)
 80062dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <xPortStartScheduler+0x138>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a14      	ldr	r2, [pc, #80]	; (8006338 <xPortStartScheduler+0x138>)
 80062e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062ee:	f000 f8dd 	bl	80064ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <xPortStartScheduler+0x13c>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062f8:	f000 f8fc 	bl	80064f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062fc:	4b10      	ldr	r3, [pc, #64]	; (8006340 <xPortStartScheduler+0x140>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0f      	ldr	r2, [pc, #60]	; (8006340 <xPortStartScheduler+0x140>)
 8006302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006308:	f7ff ff66 	bl	80061d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800630c:	f001 fa4a 	bl	80077a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006310:	f7ff ff22 	bl	8006158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	e000ed00 	.word	0xe000ed00
 8006324:	410fc271 	.word	0x410fc271
 8006328:	410fc270 	.word	0x410fc270
 800632c:	e000e400 	.word	0xe000e400
 8006330:	2000484c 	.word	0x2000484c
 8006334:	20004850 	.word	0x20004850
 8006338:	e000ed20 	.word	0xe000ed20
 800633c:	2000000c 	.word	0x2000000c
 8006340:	e000ef34 	.word	0xe000ef34

08006344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	607b      	str	r3, [r7, #4]
}
 800635c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800635e:	4b0f      	ldr	r3, [pc, #60]	; (800639c <vPortEnterCritical+0x58>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3301      	adds	r3, #1
 8006364:	4a0d      	ldr	r2, [pc, #52]	; (800639c <vPortEnterCritical+0x58>)
 8006366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <vPortEnterCritical+0x58>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d10f      	bne.n	8006390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <vPortEnterCritical+0x5c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <vPortEnterCritical+0x4c>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	603b      	str	r3, [r7, #0]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <vPortEnterCritical+0x4a>
	}
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	2000000c 	.word	0x2000000c
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063aa:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <vPortExitCritical+0x50>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <vPortExitCritical+0x24>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	607b      	str	r3, [r7, #4]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <vPortExitCritical+0x50>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <vPortExitCritical+0x50>)
 80063d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <vPortExitCritical+0x50>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d105      	bne.n	80063e6 <vPortExitCritical+0x42>
 80063da:	2300      	movs	r3, #0
 80063dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	2000000c 	.word	0x2000000c
	...

08006400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006400:	f3ef 8009 	mrs	r0, PSP
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <pxCurrentTCBConst>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f01e 0f10 	tst.w	lr, #16
 8006410:	bf08      	it	eq
 8006412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	6010      	str	r0, [r2, #0]
 800641c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006424:	f380 8811 	msr	BASEPRI, r0
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f001 f9b8 	bl	80077a4 <vTaskSwitchContext>
 8006434:	f04f 0000 	mov.w	r0, #0
 8006438:	f380 8811 	msr	BASEPRI, r0
 800643c:	bc09      	pop	{r0, r3}
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	6808      	ldr	r0, [r1, #0]
 8006442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006446:	f01e 0f10 	tst.w	lr, #16
 800644a:	bf08      	it	eq
 800644c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006450:	f380 8809 	msr	PSP, r0
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	f3af 8000 	nop.w

08006460 <pxCurrentTCBConst>:
 8006460:	20004894 	.word	0x20004894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop

08006468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
}
 8006480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006482:	f001 f8d7 	bl	8007634 <xTaskIncrementTick>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <SysTick_Handler+0x40>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f383 8811 	msr	BASEPRI, r3
}
 800649e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <vPortSetupTimerInterrupt+0x34>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <vPortSetupTimerInterrupt+0x38>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <vPortSetupTimerInterrupt+0x3c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <vPortSetupTimerInterrupt+0x40>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	099b      	lsrs	r3, r3, #6
 80064c8:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <vPortSetupTimerInterrupt+0x44>)
 80064ca:	3b01      	subs	r3, #1
 80064cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ce:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <vPortSetupTimerInterrupt+0x34>)
 80064d0:	2207      	movs	r2, #7
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	e000e010 	.word	0xe000e010
 80064e4:	e000e018 	.word	0xe000e018
 80064e8:	20000000 	.word	0x20000000
 80064ec:	10624dd3 	.word	0x10624dd3
 80064f0:	e000e014 	.word	0xe000e014

080064f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006504 <vPortEnableVFP+0x10>
 80064f8:	6801      	ldr	r1, [r0, #0]
 80064fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064fe:	6001      	str	r1, [r0, #0]
 8006500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006502:	bf00      	nop
 8006504:	e000ed88 	.word	0xe000ed88

08006508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800650e:	f3ef 8305 	mrs	r3, IPSR
 8006512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	d914      	bls.n	8006544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800651a:	4a17      	ldr	r2, [pc, #92]	; (8006578 <vPortValidateInterruptPriority+0x70>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006524:	4b15      	ldr	r3, [pc, #84]	; (800657c <vPortValidateInterruptPriority+0x74>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	7afa      	ldrb	r2, [r7, #11]
 800652a:	429a      	cmp	r2, r3
 800652c:	d20a      	bcs.n	8006544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <vPortValidateInterruptPriority+0x78>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800654c:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <vPortValidateInterruptPriority+0x7c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d90a      	bls.n	800656a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	603b      	str	r3, [r7, #0]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <vPortValidateInterruptPriority+0x60>
	}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	e000e3f0 	.word	0xe000e3f0
 800657c:	2000484c 	.word	0x2000484c
 8006580:	e000ed0c 	.word	0xe000ed0c
 8006584:	20004850 	.word	0x20004850

08006588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60bb      	str	r3, [r7, #8]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065b2:	f7ff fec7 	bl	8006344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	441a      	add	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	3b01      	subs	r3, #1
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	441a      	add	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	22ff      	movs	r2, #255	; 0xff
 80065f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	22ff      	movs	r2, #255	; 0xff
 80065fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d114      	bne.n	8006632 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01a      	beq.n	8006646 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3310      	adds	r3, #16
 8006614:	4618      	mov	r0, r3
 8006616:	f001 f971 	bl	80078fc <xTaskRemoveFromEventList>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d012      	beq.n	8006646 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <xQueueGenericReset+0xcc>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	e009      	b.n	8006646 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3310      	adds	r3, #16
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fca6 	bl	8005f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3324      	adds	r3, #36	; 0x24
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fca1 	bl	8005f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006646:	f7ff fead 	bl	80063a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800664a:	2301      	movs	r3, #1
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	; 0x38
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <xQueueGenericCreateStatic+0x52>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <xQueueGenericCreateStatic+0x56>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <xQueueGenericCreateStatic+0x58>
 80066ae:	2300      	movs	r3, #0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	623b      	str	r3, [r7, #32]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <xQueueGenericCreateStatic+0x7e>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <xQueueGenericCreateStatic+0x82>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueGenericCreateStatic+0x84>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	61fb      	str	r3, [r7, #28]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066f6:	2348      	movs	r3, #72	; 0x48
 80066f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b48      	cmp	r3, #72	; 0x48
 80066fe:	d00a      	beq.n	8006716 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	61bb      	str	r3, [r7, #24]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006716:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00d      	beq.n	800673e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800672a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	4613      	mov	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f83f 	bl	80067bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006740:	4618      	mov	r0, r3
 8006742:	3730      	adds	r7, #48	; 0x30
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xQueueGenericCreate+0x2a>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	613b      	str	r3, [r7, #16]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	fb02 f303 	mul.w	r3, r2, r3
 800677a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3348      	adds	r3, #72	; 0x48
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fa17 	bl	8005bb4 <pvPortMalloc>
 8006786:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d011      	beq.n	80067b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	3348      	adds	r3, #72	; 0x48
 8006796:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067a0:	79fa      	ldrb	r2, [r7, #7]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4613      	mov	r3, r2
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f805 	bl	80067bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067b2:	69bb      	ldr	r3, [r7, #24]
	}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3720      	adds	r7, #32
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	e002      	b.n	80067de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067ea:	2101      	movs	r1, #1
 80067ec:	69b8      	ldr	r0, [r7, #24]
 80067ee:	f7ff fecb 	bl	8006588 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00e      	beq.n	8006826 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800681a:	2300      	movs	r3, #0
 800681c:	2200      	movs	r2, #0
 800681e:	2100      	movs	r1, #0
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f837 	bl	8006894 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	4603      	mov	r3, r0
 8006836:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006838:	2301      	movs	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	2300      	movs	r3, #0
 800683e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	461a      	mov	r2, r3
 8006844:	6939      	ldr	r1, [r7, #16]
 8006846:	6978      	ldr	r0, [r7, #20]
 8006848:	f7ff ff7e 	bl	8006748 <xQueueGenericCreate>
 800684c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7ff ffd3 	bl	80067fa <prvInitialiseMutex>

		return xNewQueue;
 8006854:	68fb      	ldr	r3, [r7, #12]
	}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800685e:	b580      	push	{r7, lr}
 8006860:	b088      	sub	sp, #32
 8006862:	af02      	add	r7, sp, #8
 8006864:	4603      	mov	r3, r0
 8006866:	6039      	str	r1, [r7, #0]
 8006868:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800686a:	2301      	movs	r3, #1
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2200      	movs	r2, #0
 800687a:	6939      	ldr	r1, [r7, #16]
 800687c:	6978      	ldr	r0, [r7, #20]
 800687e:	f7ff feeb 	bl	8006658 <xQueueGenericCreateStatic>
 8006882:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff ffb8 	bl	80067fa <prvInitialiseMutex>

		return xNewQueue;
 800688a:	68fb      	ldr	r3, [r7, #12]
	}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068a2:	2300      	movs	r3, #0
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xQueueGenericSend+0x32>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <xQueueGenericSend+0x40>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <xQueueGenericSend+0x44>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <xQueueGenericSend+0x46>
 80068d8:	2300      	movs	r3, #0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <xQueueGenericSend+0x60>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d103      	bne.n	8006902 <xQueueGenericSend+0x6e>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <xQueueGenericSend+0x72>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <xQueueGenericSend+0x74>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <xQueueGenericSend+0x8e>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	623b      	str	r3, [r7, #32]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006922:	f001 f9a7 	bl	8007c74 <xTaskGetSchedulerState>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <xQueueGenericSend+0x9e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <xQueueGenericSend+0xa2>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueGenericSend+0xa4>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xQueueGenericSend+0xbe>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	61fb      	str	r3, [r7, #28]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006952:	f7ff fcf7 	bl	8006344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	429a      	cmp	r2, r3
 8006960:	d302      	bcc.n	8006968 <xQueueGenericSend+0xd4>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d129      	bne.n	80069bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800696e:	f000 fa0b 	bl	8006d88 <prvCopyDataToQueue>
 8006972:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	3324      	adds	r3, #36	; 0x24
 8006980:	4618      	mov	r0, r3
 8006982:	f000 ffbb 	bl	80078fc <xTaskRemoveFromEventList>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d013      	beq.n	80069b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800698c:	4b3f      	ldr	r3, [pc, #252]	; (8006a8c <xQueueGenericSend+0x1f8>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	e00a      	b.n	80069b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d007      	beq.n	80069b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069a4:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <xQueueGenericSend+0x1f8>)
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069b4:	f7ff fcf6 	bl	80063a4 <vPortExitCritical>
				return pdPASS;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e063      	b.n	8006a84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d103      	bne.n	80069ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069c2:	f7ff fcef 	bl	80063a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e05c      	b.n	8006a84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d106      	bne.n	80069de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069d0:	f107 0314 	add.w	r3, r7, #20
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fff3 	bl	80079c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069da:	2301      	movs	r3, #1
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069de:	f7ff fce1 	bl	80063a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069e2:	f000 fd6d 	bl	80074c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069e6:	f7ff fcad 	bl	8006344 <vPortEnterCritical>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d103      	bne.n	8006a00 <xQueueGenericSend+0x16c>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a06:	b25b      	sxtb	r3, r3
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d103      	bne.n	8006a16 <xQueueGenericSend+0x182>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a16:	f7ff fcc5 	bl	80063a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1a:	1d3a      	adds	r2, r7, #4
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 ffe2 	bl	80079ec <xTaskCheckForTimeOut>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d124      	bne.n	8006a78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a30:	f000 faa2 	bl	8006f78 <prvIsQueueFull>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d018      	beq.n	8006a6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	3310      	adds	r3, #16
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4611      	mov	r1, r2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 ff0a 	bl	800785c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a4a:	f000 fa2d 	bl	8006ea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a4e:	f000 fd45 	bl	80074dc <xTaskResumeAll>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f47f af7c 	bne.w	8006952 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <xQueueGenericSend+0x1f8>)
 8006a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	e772      	b.n	8006952 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a6e:	f000 fa1b 	bl	8006ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a72:	f000 fd33 	bl	80074dc <xTaskResumeAll>
 8006a76:	e76c      	b.n	8006952 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7a:	f000 fa15 	bl	8006ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a7e:	f000 fd2d 	bl	80074dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3738      	adds	r7, #56	; 0x38
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b090      	sub	sp, #64	; 0x40
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <xQueueGenericSendFromISR+0x3c>
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <xQueueGenericSendFromISR+0x40>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <xQueueGenericSendFromISR+0x42>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d103      	bne.n	8006afa <xQueueGenericSendFromISR+0x6a>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <xQueueGenericSendFromISR+0x6e>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <xQueueGenericSendFromISR+0x70>
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	623b      	str	r3, [r7, #32]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b1a:	f7ff fcf5 	bl	8006508 <vPortValidateInterruptPriority>
	__asm volatile
 8006b1e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	61fa      	str	r2, [r7, #28]
 8006b34:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006b36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d302      	bcc.n	8006b4c <xQueueGenericSendFromISR+0xbc>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d12f      	bne.n	8006bac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b62:	f000 f911 	bl	8006d88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d112      	bne.n	8006b96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d016      	beq.n	8006ba6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	3324      	adds	r3, #36	; 0x24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 febd 	bl	80078fc <xTaskRemoveFromEventList>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00e      	beq.n	8006ba6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e007      	b.n	8006ba6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	b25a      	sxtb	r2, r3
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006baa:	e001      	b.n	8006bb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f383 8811 	msr	BASEPRI, r3
}
 8006bba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3740      	adds	r7, #64	; 0x40
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	; 0x30
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <xQueueReceive+0x30>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	623b      	str	r3, [r7, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <xQueueReceive+0x3e>
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <xQueueReceive+0x42>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <xQueueReceive+0x44>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xQueueReceive+0x5e>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	61fb      	str	r3, [r7, #28]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c26:	f001 f825 	bl	8007c74 <xTaskGetSchedulerState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <xQueueReceive+0x6e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <xQueueReceive+0x72>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueReceive+0x74>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <xQueueReceive+0x8e>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	61bb      	str	r3, [r7, #24]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c56:	f7ff fb75 	bl	8006344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01f      	beq.n	8006ca6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6a:	f000 f8f7 	bl	8006e5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	1e5a      	subs	r2, r3, #1
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00f      	beq.n	8006c9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	3310      	adds	r3, #16
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fe3a 	bl	80078fc <xTaskRemoveFromEventList>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c8e:	4b3d      	ldr	r3, [pc, #244]	; (8006d84 <xQueueReceive+0x1bc>)
 8006c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c9e:	f7ff fb81 	bl	80063a4 <vPortExitCritical>
				return pdPASS;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e069      	b.n	8006d7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d103      	bne.n	8006cb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cac:	f7ff fb7a 	bl	80063a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e062      	b.n	8006d7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cba:	f107 0310 	add.w	r3, r7, #16
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fe7e 	bl	80079c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cc8:	f7ff fb6c 	bl	80063a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ccc:	f000 fbf8 	bl	80074c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd0:	f7ff fb38 	bl	8006344 <vPortEnterCritical>
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cda:	b25b      	sxtb	r3, r3
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d103      	bne.n	8006cea <xQueueReceive+0x122>
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cf0:	b25b      	sxtb	r3, r3
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	d103      	bne.n	8006d00 <xQueueReceive+0x138>
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d00:	f7ff fb50 	bl	80063a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d04:	1d3a      	adds	r2, r7, #4
 8006d06:	f107 0310 	add.w	r3, r7, #16
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fe6d 	bl	80079ec <xTaskCheckForTimeOut>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d123      	bne.n	8006d60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1a:	f000 f917 	bl	8006f4c <prvIsQueueEmpty>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d017      	beq.n	8006d54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	3324      	adds	r3, #36	; 0x24
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fd95 	bl	800785c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d34:	f000 f8b8 	bl	8006ea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d38:	f000 fbd0 	bl	80074dc <xTaskResumeAll>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d189      	bne.n	8006c56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d42:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <xQueueReceive+0x1bc>)
 8006d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	e780      	b.n	8006c56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d56:	f000 f8a7 	bl	8006ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d5a:	f000 fbbf 	bl	80074dc <xTaskResumeAll>
 8006d5e:	e77a      	b.n	8006c56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d62:	f000 f8a1 	bl	8006ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d66:	f000 fbb9 	bl	80074dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6c:	f000 f8ee 	bl	8006f4c <prvIsQueueEmpty>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f43f af6f 	beq.w	8006c56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3730      	adds	r7, #48	; 0x30
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10d      	bne.n	8006dc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d14d      	bne.n	8006e4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 ff7c 	bl	8007cb0 <xTaskPriorityDisinherit>
 8006db8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	e043      	b.n	8006e4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d119      	bne.n	8006dfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6858      	ldr	r0, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	f001 fc50 	bl	8008678 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	441a      	add	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d32b      	bcc.n	8006e4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	605a      	str	r2, [r3, #4]
 8006dfa:	e026      	b.n	8006e4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68d8      	ldr	r0, [r3, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	461a      	mov	r2, r3
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	f001 fc36 	bl	8008678 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	425b      	negs	r3, r3
 8006e16:	441a      	add	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d207      	bcs.n	8006e38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	425b      	negs	r3, r3
 8006e32:	441a      	add	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d105      	bne.n	8006e4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e52:	697b      	ldr	r3, [r7, #20]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d018      	beq.n	8006ea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	441a      	add	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d303      	bcc.n	8006e90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68d9      	ldr	r1, [r3, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6838      	ldr	r0, [r7, #0]
 8006e9c:	f001 fbec 	bl	8008678 <memcpy>
	}
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006eb0:	f7ff fa48 	bl	8006344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ebc:	e011      	b.n	8006ee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d012      	beq.n	8006eec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3324      	adds	r3, #36	; 0x24
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fd16 	bl	80078fc <xTaskRemoveFromEventList>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ed6:	f000 fdeb 	bl	8007ab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dce9      	bgt.n	8006ebe <prvUnlockQueue+0x16>
 8006eea:	e000      	b.n	8006eee <prvUnlockQueue+0x46>
					break;
 8006eec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	22ff      	movs	r2, #255	; 0xff
 8006ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ef6:	f7ff fa55 	bl	80063a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006efa:	f7ff fa23 	bl	8006344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f06:	e011      	b.n	8006f2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d012      	beq.n	8006f36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3310      	adds	r3, #16
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fcf1 	bl	80078fc <xTaskRemoveFromEventList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f20:	f000 fdc6 	bl	8007ab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dce9      	bgt.n	8006f08 <prvUnlockQueue+0x60>
 8006f34:	e000      	b.n	8006f38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	22ff      	movs	r2, #255	; 0xff
 8006f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f40:	f7ff fa30 	bl	80063a4 <vPortExitCritical>
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f54:	f7ff f9f6 	bl	8006344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e001      	b.n	8006f6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f6a:	f7ff fa1b 	bl	80063a4 <vPortExitCritical>

	return xReturn;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f80:	f7ff f9e0 	bl	8006344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d102      	bne.n	8006f96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e001      	b.n	8006f9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f9a:	f7ff fa03 	bl	80063a4 <vPortExitCritical>

	return xReturn;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e014      	b.n	8006fe2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fb8:	4a0f      	ldr	r2, [pc, #60]	; (8006ff8 <vQueueAddToRegistry+0x50>)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10b      	bne.n	8006fdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fc4:	490c      	ldr	r1, [pc, #48]	; (8006ff8 <vQueueAddToRegistry+0x50>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fce:	4a0a      	ldr	r2, [pc, #40]	; (8006ff8 <vQueueAddToRegistry+0x50>)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fda:	e006      	b.n	8006fea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b07      	cmp	r3, #7
 8006fe6:	d9e7      	bls.n	8006fb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20004854 	.word	0x20004854

08006ffc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800700c:	f7ff f99a 	bl	8006344 <vPortEnterCritical>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007016:	b25b      	sxtb	r3, r3
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d103      	bne.n	8007026 <vQueueWaitForMessageRestricted+0x2a>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800702c:	b25b      	sxtb	r3, r3
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d103      	bne.n	800703c <vQueueWaitForMessageRestricted+0x40>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800703c:	f7ff f9b2 	bl	80063a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	3324      	adds	r3, #36	; 0x24
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fc27 	bl	80078a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007056:	6978      	ldr	r0, [r7, #20]
 8007058:	f7ff ff26 	bl	8006ea8 <prvUnlockQueue>
	}
 800705c:	bf00      	nop
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08e      	sub	sp, #56	; 0x38
 8007068:	af04      	add	r7, sp, #16
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	623b      	str	r3, [r7, #32]
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <xTaskCreateStatic+0x46>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	61fb      	str	r3, [r7, #28]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070aa:	2354      	movs	r3, #84	; 0x54
 80070ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b54      	cmp	r3, #84	; 0x54
 80070b2:	d00a      	beq.n	80070ca <xTaskCreateStatic+0x66>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	61bb      	str	r3, [r7, #24]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01e      	beq.n	8007110 <xTaskCreateStatic+0xac>
 80070d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01b      	beq.n	8007110 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	2202      	movs	r2, #2
 80070e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070ea:	2300      	movs	r3, #0
 80070ec:	9303      	str	r3, [sp, #12]
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	9302      	str	r3, [sp, #8]
 80070f2:	f107 0314 	add.w	r3, r7, #20
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f850 	bl	80071a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800710a:	f000 f8d5 	bl	80072b8 <prvAddNewTaskToReadyList>
 800710e:	e001      	b.n	8007114 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007114:	697b      	ldr	r3, [r7, #20]
	}
 8007116:	4618      	mov	r0, r3
 8007118:	3728      	adds	r7, #40	; 0x28
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800711e:	b580      	push	{r7, lr}
 8007120:	b08c      	sub	sp, #48	; 0x30
 8007122:	af04      	add	r7, sp, #16
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	603b      	str	r3, [r7, #0]
 800712a:	4613      	mov	r3, r2
 800712c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fd3e 	bl	8005bb4 <pvPortMalloc>
 8007138:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007140:	2054      	movs	r0, #84	; 0x54
 8007142:	f7fe fd37 	bl	8005bb4 <pvPortMalloc>
 8007146:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
 8007154:	e005      	b.n	8007162 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007156:	6978      	ldr	r0, [r7, #20]
 8007158:	f7fe fdf8 	bl	8005d4c <vPortFree>
 800715c:	e001      	b.n	8007162 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d017      	beq.n	8007198 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007170:	88fa      	ldrh	r2, [r7, #6]
 8007172:	2300      	movs	r3, #0
 8007174:	9303      	str	r3, [sp, #12]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	9302      	str	r3, [sp, #8]
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f80e 	bl	80071a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800718c:	69f8      	ldr	r0, [r7, #28]
 800718e:	f000 f893 	bl	80072b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007192:	2301      	movs	r3, #1
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	e002      	b.n	800719e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007198:	f04f 33ff 	mov.w	r3, #4294967295
 800719c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800719e:	69bb      	ldr	r3, [r7, #24]
	}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071c0:	3b01      	subs	r3, #1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	617b      	str	r3, [r7, #20]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d01f      	beq.n	8007236 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	e012      	b.n	8007222 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	7819      	ldrb	r1, [r3, #0]
 8007204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	3334      	adds	r3, #52	; 0x34
 800720c:	460a      	mov	r2, r1
 800720e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	2b0f      	cmp	r3, #15
 8007226:	d9e9      	bls.n	80071fc <prvInitialiseNewTask+0x54>
 8007228:	e000      	b.n	800722c <prvInitialiseNewTask+0x84>
			{
				break;
 800722a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007234:	e003      	b.n	800723e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b06      	cmp	r3, #6
 8007242:	d901      	bls.n	8007248 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007244:	2306      	movs	r3, #6
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800724c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007252:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	2200      	movs	r2, #0
 8007258:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	3304      	adds	r3, #4
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe feb2 	bl	8005fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	3318      	adds	r3, #24
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fead 	bl	8005fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007272:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	f1c3 0207 	rsb	r2, r3, #7
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	2200      	movs	r2, #0
 8007288:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	69b8      	ldr	r0, [r7, #24]
 8007298:	f7fe ff2a 	bl	80060f0 <pxPortInitialiseStack>
 800729c:	4602      	mov	r2, r0
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ae:	bf00      	nop
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072c0:	f7ff f840 	bl	8006344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072c4:	4b2a      	ldr	r3, [pc, #168]	; (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	4a29      	ldr	r2, [pc, #164]	; (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072ce:	4b29      	ldr	r3, [pc, #164]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072d6:	4a27      	ldr	r2, [pc, #156]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072dc:	4b24      	ldr	r3, [pc, #144]	; (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d110      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072e4:	f000 fc08 	bl	8007af8 <prvInitialiseTaskLists>
 80072e8:	e00d      	b.n	8007306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072ea:	4b23      	ldr	r3, [pc, #140]	; (8007378 <prvAddNewTaskToReadyList+0xc0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072f2:	4b20      	ldr	r3, [pc, #128]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d802      	bhi.n	8007306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007306:	4b1d      	ldr	r3, [pc, #116]	; (800737c <prvAddNewTaskToReadyList+0xc4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	4a1b      	ldr	r2, [pc, #108]	; (800737c <prvAddNewTaskToReadyList+0xc4>)
 800730e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	2201      	movs	r2, #1
 8007316:	409a      	lsls	r2, r3
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <prvAddNewTaskToReadyList+0xc8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	4a18      	ldr	r2, [pc, #96]	; (8007380 <prvAddNewTaskToReadyList+0xc8>)
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a15      	ldr	r2, [pc, #84]	; (8007384 <prvAddNewTaskToReadyList+0xcc>)
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f7fe fe52 	bl	8005fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800733e:	f7ff f831 	bl	80063a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007342:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <prvAddNewTaskToReadyList+0xc0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800734a:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d207      	bcs.n	8007368 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <prvAddNewTaskToReadyList+0xd0>)
 800735a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20004994 	.word	0x20004994
 8007374:	20004894 	.word	0x20004894
 8007378:	200049a0 	.word	0x200049a0
 800737c:	200049b0 	.word	0x200049b0
 8007380:	2000499c 	.word	0x2000499c
 8007384:	20004898 	.word	0x20004898
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d017      	beq.n	80073ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <vTaskDelay+0x60>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <vTaskDelay+0x30>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60bb      	str	r3, [r7, #8]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073bc:	f000 f880 	bl	80074c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcfa 	bl	8007dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073c8:	f000 f888 	bl	80074dc <xTaskResumeAll>
 80073cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <vTaskDelay+0x64>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	200049bc 	.word	0x200049bc
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007402:	463a      	mov	r2, r7
 8007404:	1d39      	adds	r1, r7, #4
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 f85e 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	9202      	str	r2, [sp, #8]
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	2300      	movs	r3, #0
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2300      	movs	r3, #0
 8007420:	460a      	mov	r2, r1
 8007422:	4921      	ldr	r1, [pc, #132]	; (80074a8 <vTaskStartScheduler+0xb4>)
 8007424:	4821      	ldr	r0, [pc, #132]	; (80074ac <vTaskStartScheduler+0xb8>)
 8007426:	f7ff fe1d 	bl	8007064 <xTaskCreateStatic>
 800742a:	4603      	mov	r3, r0
 800742c:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <vTaskStartScheduler+0xbc>)
 800742e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007430:	4b1f      	ldr	r3, [pc, #124]	; (80074b0 <vTaskStartScheduler+0xbc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e001      	b.n	8007442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d102      	bne.n	800744e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007448:	f000 fd1e 	bl	8007e88 <xTimerCreateTimerTask>
 800744c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d116      	bne.n	8007482 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	613b      	str	r3, [r7, #16]
}
 8007466:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007468:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <vTaskStartScheduler+0xc0>)
 800746a:	f04f 32ff 	mov.w	r2, #4294967295
 800746e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007470:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <vTaskStartScheduler+0xc4>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <vTaskStartScheduler+0xc8>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800747c:	f7fe fec0 	bl	8006200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007480:	e00e      	b.n	80074a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d10a      	bne.n	80074a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60fb      	str	r3, [r7, #12]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <vTaskStartScheduler+0xaa>
}
 80074a0:	bf00      	nop
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	080087e8 	.word	0x080087e8
 80074ac:	08007ac9 	.word	0x08007ac9
 80074b0:	200049b8 	.word	0x200049b8
 80074b4:	200049b4 	.word	0x200049b4
 80074b8:	200049a0 	.word	0x200049a0
 80074bc:	20004998 	.word	0x20004998

080074c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <vTaskSuspendAll+0x18>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	4a03      	ldr	r2, [pc, #12]	; (80074d8 <vTaskSuspendAll+0x18>)
 80074cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	200049bc 	.word	0x200049bc

080074dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074ea:	4b41      	ldr	r3, [pc, #260]	; (80075f0 <xTaskResumeAll+0x114>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <xTaskResumeAll+0x2c>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	603b      	str	r3, [r7, #0]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007508:	f7fe ff1c 	bl	8006344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800750c:	4b38      	ldr	r3, [pc, #224]	; (80075f0 <xTaskResumeAll+0x114>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3b01      	subs	r3, #1
 8007512:	4a37      	ldr	r2, [pc, #220]	; (80075f0 <xTaskResumeAll+0x114>)
 8007514:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007516:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <xTaskResumeAll+0x114>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d161      	bne.n	80075e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800751e:	4b35      	ldr	r3, [pc, #212]	; (80075f4 <xTaskResumeAll+0x118>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d05d      	beq.n	80075e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007526:	e02e      	b.n	8007586 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007528:	4b33      	ldr	r3, [pc, #204]	; (80075f8 <xTaskResumeAll+0x11c>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3318      	adds	r3, #24
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe fdb1 	bl	800609c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fdac 	bl	800609c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	2201      	movs	r2, #1
 800754a:	409a      	lsls	r2, r3
 800754c:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <xTaskResumeAll+0x120>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4313      	orrs	r3, r2
 8007552:	4a2a      	ldr	r2, [pc, #168]	; (80075fc <xTaskResumeAll+0x120>)
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a27      	ldr	r2, [pc, #156]	; (8007600 <xTaskResumeAll+0x124>)
 8007564:	441a      	add	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f7fe fd38 	bl	8005fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007576:	4b23      	ldr	r3, [pc, #140]	; (8007604 <xTaskResumeAll+0x128>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	429a      	cmp	r2, r3
 800757e:	d302      	bcc.n	8007586 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <xTaskResumeAll+0x12c>)
 8007582:	2201      	movs	r2, #1
 8007584:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007586:	4b1c      	ldr	r3, [pc, #112]	; (80075f8 <xTaskResumeAll+0x11c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1cc      	bne.n	8007528 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007594:	f000 fb4e 	bl	8007c34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007598:	4b1c      	ldr	r3, [pc, #112]	; (800760c <xTaskResumeAll+0x130>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d010      	beq.n	80075c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075a4:	f000 f846 	bl	8007634 <xTaskIncrementTick>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80075ae:	4b16      	ldr	r3, [pc, #88]	; (8007608 <xTaskResumeAll+0x12c>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1f1      	bne.n	80075a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80075c0:	4b12      	ldr	r3, [pc, #72]	; (800760c <xTaskResumeAll+0x130>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075c6:	4b10      	ldr	r3, [pc, #64]	; (8007608 <xTaskResumeAll+0x12c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075ce:	2301      	movs	r3, #1
 80075d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075d2:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <xTaskResumeAll+0x134>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075e2:	f7fe fedf 	bl	80063a4 <vPortExitCritical>

	return xAlreadyYielded;
 80075e6:	68bb      	ldr	r3, [r7, #8]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	200049bc 	.word	0x200049bc
 80075f4:	20004994 	.word	0x20004994
 80075f8:	20004954 	.word	0x20004954
 80075fc:	2000499c 	.word	0x2000499c
 8007600:	20004898 	.word	0x20004898
 8007604:	20004894 	.word	0x20004894
 8007608:	200049a8 	.word	0x200049a8
 800760c:	200049a4 	.word	0x200049a4
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <xTaskGetTickCount+0x1c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007620:	687b      	ldr	r3, [r7, #4]
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20004998 	.word	0x20004998

08007634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800763e:	4b4e      	ldr	r3, [pc, #312]	; (8007778 <xTaskIncrementTick+0x144>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 808e 	bne.w	8007764 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007648:	4b4c      	ldr	r3, [pc, #304]	; (800777c <xTaskIncrementTick+0x148>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007650:	4a4a      	ldr	r2, [pc, #296]	; (800777c <xTaskIncrementTick+0x148>)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d120      	bne.n	800769e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800765c:	4b48      	ldr	r3, [pc, #288]	; (8007780 <xTaskIncrementTick+0x14c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <xTaskIncrementTick+0x48>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	603b      	str	r3, [r7, #0]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <xTaskIncrementTick+0x46>
 800767c:	4b40      	ldr	r3, [pc, #256]	; (8007780 <xTaskIncrementTick+0x14c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	4b40      	ldr	r3, [pc, #256]	; (8007784 <xTaskIncrementTick+0x150>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a3e      	ldr	r2, [pc, #248]	; (8007780 <xTaskIncrementTick+0x14c>)
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	4a3e      	ldr	r2, [pc, #248]	; (8007784 <xTaskIncrementTick+0x150>)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	4b3d      	ldr	r3, [pc, #244]	; (8007788 <xTaskIncrementTick+0x154>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	4a3c      	ldr	r2, [pc, #240]	; (8007788 <xTaskIncrementTick+0x154>)
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	f000 facb 	bl	8007c34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800769e:	4b3b      	ldr	r3, [pc, #236]	; (800778c <xTaskIncrementTick+0x158>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d348      	bcc.n	800773a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076a8:	4b35      	ldr	r3, [pc, #212]	; (8007780 <xTaskIncrementTick+0x14c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d104      	bne.n	80076bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <xTaskIncrementTick+0x158>)
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	601a      	str	r2, [r3, #0]
					break;
 80076ba:	e03e      	b.n	800773a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076bc:	4b30      	ldr	r3, [pc, #192]	; (8007780 <xTaskIncrementTick+0x14c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d203      	bcs.n	80076dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076d4:	4a2d      	ldr	r2, [pc, #180]	; (800778c <xTaskIncrementTick+0x158>)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076da:	e02e      	b.n	800773a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	3304      	adds	r3, #4
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe fcdb 	bl	800609c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	3318      	adds	r3, #24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fcd2 	bl	800609c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	2201      	movs	r2, #1
 80076fe:	409a      	lsls	r2, r3
 8007700:	4b23      	ldr	r3, [pc, #140]	; (8007790 <xTaskIncrementTick+0x15c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4313      	orrs	r3, r2
 8007706:	4a22      	ldr	r2, [pc, #136]	; (8007790 <xTaskIncrementTick+0x15c>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <xTaskIncrementTick+0x160>)
 8007718:	441a      	add	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fe fc5e 	bl	8005fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772a:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <xTaskIncrementTick+0x164>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	429a      	cmp	r2, r3
 8007732:	d3b9      	bcc.n	80076a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007738:	e7b6      	b.n	80076a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <xTaskIncrementTick+0x164>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4914      	ldr	r1, [pc, #80]	; (8007794 <xTaskIncrementTick+0x160>)
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d901      	bls.n	8007756 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007752:	2301      	movs	r3, #1
 8007754:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007756:	4b11      	ldr	r3, [pc, #68]	; (800779c <xTaskIncrementTick+0x168>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800775e:	2301      	movs	r3, #1
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e004      	b.n	800776e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <xTaskIncrementTick+0x16c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	4a0d      	ldr	r2, [pc, #52]	; (80077a0 <xTaskIncrementTick+0x16c>)
 800776c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800776e:	697b      	ldr	r3, [r7, #20]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200049bc 	.word	0x200049bc
 800777c:	20004998 	.word	0x20004998
 8007780:	2000494c 	.word	0x2000494c
 8007784:	20004950 	.word	0x20004950
 8007788:	200049ac 	.word	0x200049ac
 800778c:	200049b4 	.word	0x200049b4
 8007790:	2000499c 	.word	0x2000499c
 8007794:	20004898 	.word	0x20004898
 8007798:	20004894 	.word	0x20004894
 800779c:	200049a8 	.word	0x200049a8
 80077a0:	200049a4 	.word	0x200049a4

080077a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077aa:	4b27      	ldr	r3, [pc, #156]	; (8007848 <vTaskSwitchContext+0xa4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077b2:	4b26      	ldr	r3, [pc, #152]	; (800784c <vTaskSwitchContext+0xa8>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077b8:	e03f      	b.n	800783a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80077ba:	4b24      	ldr	r3, [pc, #144]	; (800784c <vTaskSwitchContext+0xa8>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c0:	4b23      	ldr	r3, [pc, #140]	; (8007850 <vTaskSwitchContext+0xac>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	fab3 f383 	clz	r3, r3
 80077cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	f1c3 031f 	rsb	r3, r3, #31
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	491f      	ldr	r1, [pc, #124]	; (8007854 <vTaskSwitchContext+0xb0>)
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <vTaskSwitchContext+0x5c>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	607b      	str	r3, [r7, #4]
}
 80077fc:	bf00      	nop
 80077fe:	e7fe      	b.n	80077fe <vTaskSwitchContext+0x5a>
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4a12      	ldr	r2, [pc, #72]	; (8007854 <vTaskSwitchContext+0xb0>)
 800780c:	4413      	add	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3308      	adds	r3, #8
 8007822:	429a      	cmp	r2, r3
 8007824:	d104      	bne.n	8007830 <vTaskSwitchContext+0x8c>
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	605a      	str	r2, [r3, #4]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <vTaskSwitchContext+0xb4>)
 8007838:	6013      	str	r3, [r2, #0]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	200049bc 	.word	0x200049bc
 800784c:	200049a8 	.word	0x200049a8
 8007850:	2000499c 	.word	0x2000499c
 8007854:	20004898 	.word	0x20004898
 8007858:	20004894 	.word	0x20004894

0800785c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60fb      	str	r3, [r7, #12]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <vTaskPlaceOnEventList+0x44>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3318      	adds	r3, #24
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fe fbcd 	bl	800602a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007890:	2101      	movs	r1, #1
 8007892:	6838      	ldr	r0, [r7, #0]
 8007894:	f000 fa92 	bl	8007dbc <prvAddCurrentTaskToDelayedList>
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20004894 	.word	0x20004894

080078a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	617b      	str	r3, [r7, #20]
}
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3318      	adds	r3, #24
 80078d2:	4619      	mov	r1, r3
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7fe fb84 	bl	8005fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80078e0:	f04f 33ff 	mov.w	r3, #4294967295
 80078e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f000 fa67 	bl	8007dbc <prvAddCurrentTaskToDelayedList>
	}
 80078ee:	bf00      	nop
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20004894 	.word	0x20004894

080078fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60fb      	str	r3, [r7, #12]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3318      	adds	r3, #24
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe fbb5 	bl	800609c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007932:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <xTaskRemoveFromEventList+0xac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11c      	bne.n	8007974 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fbac 	bl	800609c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	2201      	movs	r2, #1
 800794a:	409a      	lsls	r2, r3
 800794c:	4b17      	ldr	r3, [pc, #92]	; (80079ac <xTaskRemoveFromEventList+0xb0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4313      	orrs	r3, r2
 8007952:	4a16      	ldr	r2, [pc, #88]	; (80079ac <xTaskRemoveFromEventList+0xb0>)
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <xTaskRemoveFromEventList+0xb4>)
 8007964:	441a      	add	r2, r3
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	3304      	adds	r3, #4
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7fe fb38 	bl	8005fe2 <vListInsertEnd>
 8007972:	e005      	b.n	8007980 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	3318      	adds	r3, #24
 8007978:	4619      	mov	r1, r3
 800797a:	480e      	ldr	r0, [pc, #56]	; (80079b4 <xTaskRemoveFromEventList+0xb8>)
 800797c:	f7fe fb31 	bl	8005fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <xTaskRemoveFromEventList+0xbc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	429a      	cmp	r2, r3
 800798c:	d905      	bls.n	800799a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007992:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <xTaskRemoveFromEventList+0xc0>)
 8007994:	2201      	movs	r2, #1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e001      	b.n	800799e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800799e:	697b      	ldr	r3, [r7, #20]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200049bc 	.word	0x200049bc
 80079ac:	2000499c 	.word	0x2000499c
 80079b0:	20004898 	.word	0x20004898
 80079b4:	20004954 	.word	0x20004954
 80079b8:	20004894 	.word	0x20004894
 80079bc:	200049a8 	.word	0x200049a8

080079c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <vTaskInternalSetTimeOutState+0x24>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <vTaskInternalSetTimeOutState+0x28>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	605a      	str	r2, [r3, #4]
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	200049ac 	.word	0x200049ac
 80079e8:	20004998 	.word	0x20004998

080079ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	613b      	str	r3, [r7, #16]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60fb      	str	r3, [r7, #12]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a2e:	f7fe fc89 	bl	8006344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a32:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <xTaskCheckForTimeOut+0xbc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d102      	bne.n	8007a52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	e023      	b.n	8007a9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4b15      	ldr	r3, [pc, #84]	; (8007aac <xTaskCheckForTimeOut+0xc0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d007      	beq.n	8007a6e <xTaskCheckForTimeOut+0x82>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d302      	bcc.n	8007a6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e015      	b.n	8007a9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d20b      	bcs.n	8007a90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff ff9b 	bl	80079c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	e004      	b.n	8007a9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a96:	2301      	movs	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a9a:	f7fe fc83 	bl	80063a4 <vPortExitCritical>

	return xReturn;
 8007a9e:	69fb      	ldr	r3, [r7, #28]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20004998 	.word	0x20004998
 8007aac:	200049ac 	.word	0x200049ac

08007ab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ab4:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <vTaskMissedYield+0x14>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]
}
 8007aba:	bf00      	nop
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	200049a8 	.word	0x200049a8

08007ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ad0:	f000 f852 	bl	8007b78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <prvIdleTask+0x28>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d9f9      	bls.n	8007ad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007adc:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <prvIdleTask+0x2c>)
 8007ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007aec:	e7f0      	b.n	8007ad0 <prvIdleTask+0x8>
 8007aee:	bf00      	nop
 8007af0:	20004898 	.word	0x20004898
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afe:	2300      	movs	r3, #0
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	e00c      	b.n	8007b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4a12      	ldr	r2, [pc, #72]	; (8007b58 <prvInitialiseTaskLists+0x60>)
 8007b10:	4413      	add	r3, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fa38 	bl	8005f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b06      	cmp	r3, #6
 8007b22:	d9ef      	bls.n	8007b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b24:	480d      	ldr	r0, [pc, #52]	; (8007b5c <prvInitialiseTaskLists+0x64>)
 8007b26:	f7fe fa2f 	bl	8005f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b2a:	480d      	ldr	r0, [pc, #52]	; (8007b60 <prvInitialiseTaskLists+0x68>)
 8007b2c:	f7fe fa2c 	bl	8005f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b30:	480c      	ldr	r0, [pc, #48]	; (8007b64 <prvInitialiseTaskLists+0x6c>)
 8007b32:	f7fe fa29 	bl	8005f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b36:	480c      	ldr	r0, [pc, #48]	; (8007b68 <prvInitialiseTaskLists+0x70>)
 8007b38:	f7fe fa26 	bl	8005f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b3c:	480b      	ldr	r0, [pc, #44]	; (8007b6c <prvInitialiseTaskLists+0x74>)
 8007b3e:	f7fe fa23 	bl	8005f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <prvInitialiseTaskLists+0x78>)
 8007b44:	4a05      	ldr	r2, [pc, #20]	; (8007b5c <prvInitialiseTaskLists+0x64>)
 8007b46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <prvInitialiseTaskLists+0x7c>)
 8007b4a:	4a05      	ldr	r2, [pc, #20]	; (8007b60 <prvInitialiseTaskLists+0x68>)
 8007b4c:	601a      	str	r2, [r3, #0]
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20004898 	.word	0x20004898
 8007b5c:	20004924 	.word	0x20004924
 8007b60:	20004938 	.word	0x20004938
 8007b64:	20004954 	.word	0x20004954
 8007b68:	20004968 	.word	0x20004968
 8007b6c:	20004980 	.word	0x20004980
 8007b70:	2000494c 	.word	0x2000494c
 8007b74:	20004950 	.word	0x20004950

08007b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7e:	e019      	b.n	8007bb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b80:	f7fe fbe0 	bl	8006344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b84:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <prvCheckTasksWaitingTermination+0x50>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe fa83 	bl	800609c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <prvCheckTasksWaitingTermination+0x54>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4a0b      	ldr	r2, [pc, #44]	; (8007bcc <prvCheckTasksWaitingTermination+0x54>)
 8007b9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <prvCheckTasksWaitingTermination+0x58>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	4a0a      	ldr	r2, [pc, #40]	; (8007bd0 <prvCheckTasksWaitingTermination+0x58>)
 8007ba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007baa:	f7fe fbfb 	bl	80063a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f810 	bl	8007bd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb4:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <prvCheckTasksWaitingTermination+0x58>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e1      	bne.n	8007b80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20004968 	.word	0x20004968
 8007bcc:	20004994 	.word	0x20004994
 8007bd0:	2000497c 	.word	0x2000497c

08007bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d108      	bne.n	8007bf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe f8ae 	bl	8005d4c <vPortFree>
				vPortFree( pxTCB );
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7fe f8ab 	bl	8005d4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bf6:	e018      	b.n	8007c2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d103      	bne.n	8007c0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fe f8a2 	bl	8005d4c <vPortFree>
	}
 8007c08:	e00f      	b.n	8007c2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d00a      	beq.n	8007c2a <prvDeleteTCB+0x56>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	60fb      	str	r3, [r7, #12]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <prvDeleteTCB+0x54>
	}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <prvResetNextTaskUnblockTime+0x38>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c44:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <prvResetNextTaskUnblockTime+0x3c>)
 8007c46:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c4c:	e008      	b.n	8007c60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c4e:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <prvResetNextTaskUnblockTime+0x38>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4a04      	ldr	r2, [pc, #16]	; (8007c70 <prvResetNextTaskUnblockTime+0x3c>)
 8007c5e:	6013      	str	r3, [r2, #0]
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	2000494c 	.word	0x2000494c
 8007c70:	200049b4 	.word	0x200049b4

08007c74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <xTaskGetSchedulerState+0x34>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c82:	2301      	movs	r3, #1
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	e008      	b.n	8007c9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c88:	4b08      	ldr	r3, [pc, #32]	; (8007cac <xTaskGetSchedulerState+0x38>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d102      	bne.n	8007c96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c90:	2302      	movs	r3, #2
 8007c92:	607b      	str	r3, [r7, #4]
 8007c94:	e001      	b.n	8007c9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c96:	2300      	movs	r3, #0
 8007c98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c9a:	687b      	ldr	r3, [r7, #4]
	}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	200049a0 	.word	0x200049a0
 8007cac:	200049bc 	.word	0x200049bc

08007cb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d06e      	beq.n	8007da4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cc6:	4b3a      	ldr	r3, [pc, #232]	; (8007db0 <xTaskPriorityDisinherit+0x100>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d00a      	beq.n	8007ce6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	60fb      	str	r3, [r7, #12]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60bb      	str	r3, [r7, #8]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d08:	1e5a      	subs	r2, r3, #1
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d044      	beq.n	8007da4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d140      	bne.n	8007da4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe f9b8 	bl	800609c <uxListRemove>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d115      	bne.n	8007d5e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	491f      	ldr	r1, [pc, #124]	; (8007db4 <xTaskPriorityDisinherit+0x104>)
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <xTaskPriorityDisinherit+0xae>
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43da      	mvns	r2, r3
 8007d54:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <xTaskPriorityDisinherit+0x108>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <xTaskPriorityDisinherit+0x108>)
 8007d5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	f1c3 0207 	rsb	r2, r3, #7
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d76:	2201      	movs	r2, #1
 8007d78:	409a      	lsls	r2, r3
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <xTaskPriorityDisinherit+0x108>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	4a0d      	ldr	r2, [pc, #52]	; (8007db8 <xTaskPriorityDisinherit+0x108>)
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <xTaskPriorityDisinherit+0x104>)
 8007d92:	441a      	add	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	f7fe f921 	bl	8005fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007da4:	697b      	ldr	r3, [r7, #20]
	}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20004894 	.word	0x20004894
 8007db4:	20004898 	.word	0x20004898
 8007db8:	2000499c 	.word	0x2000499c

08007dbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dcc:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe f962 	bl	800609c <uxListRemove>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007dde:	4b24      	ldr	r3, [pc, #144]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	2201      	movs	r2, #1
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	43da      	mvns	r2, r3
 8007dec:	4b21      	ldr	r3, [pc, #132]	; (8007e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4013      	ands	r3, r2
 8007df2:	4a20      	ldr	r2, [pc, #128]	; (8007e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007df4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d10a      	bne.n	8007e14 <prvAddCurrentTaskToDelayedList+0x58>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e04:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	481a      	ldr	r0, [pc, #104]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e0e:	f7fe f8e8 	bl	8005fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e12:	e026      	b.n	8007e62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e1c:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d209      	bcs.n	8007e40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e2c:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fe f8f6 	bl	800602a <vListInsert>
}
 8007e3e:	e010      	b.n	8007e62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	f7fe f8ec 	bl	800602a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d202      	bcs.n	8007e62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e5c:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6013      	str	r3, [r2, #0]
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20004998 	.word	0x20004998
 8007e70:	20004894 	.word	0x20004894
 8007e74:	2000499c 	.word	0x2000499c
 8007e78:	20004980 	.word	0x20004980
 8007e7c:	20004950 	.word	0x20004950
 8007e80:	2000494c 	.word	0x2000494c
 8007e84:	200049b4 	.word	0x200049b4

08007e88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e92:	f000 fb85 	bl	80085a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e96:	4b1c      	ldr	r3, [pc, #112]	; (8007f08 <xTimerCreateTimerTask+0x80>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d021      	beq.n	8007ee2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ea6:	1d3a      	adds	r2, r7, #4
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	f107 030c 	add.w	r3, r7, #12
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7f8 fb25 	bl	8000500 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	9202      	str	r2, [sp, #8]
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	460a      	mov	r2, r1
 8007ec8:	4910      	ldr	r1, [pc, #64]	; (8007f0c <xTimerCreateTimerTask+0x84>)
 8007eca:	4811      	ldr	r0, [pc, #68]	; (8007f10 <xTimerCreateTimerTask+0x88>)
 8007ecc:	f7ff f8ca 	bl	8007064 <xTaskCreateStatic>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <xTimerCreateTimerTask+0x8c>)
 8007ed4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <xTimerCreateTimerTask+0x8c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	613b      	str	r3, [r7, #16]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007efe:	697b      	ldr	r3, [r7, #20]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	200049f0 	.word	0x200049f0
 8007f0c:	080087f0 	.word	0x080087f0
 8007f10:	08008181 	.word	0x08008181
 8007f14:	200049f4 	.word	0x200049f4

08007f18 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007f26:	2028      	movs	r0, #40	; 0x28
 8007f28:	f7fd fe44 	bl	8005bb4 <pvPortMalloc>
 8007f2c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00d      	beq.n	8007f50 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f843 	bl	8007fd6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007f50:	697b      	ldr	r3, [r7, #20]
	}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b08a      	sub	sp, #40	; 0x28
 8007f5e:	af02      	add	r7, sp, #8
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007f68:	2328      	movs	r3, #40	; 0x28
 8007f6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b28      	cmp	r3, #40	; 0x28
 8007f70:	d00a      	beq.n	8007f88 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	61bb      	str	r3, [r7, #24]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	617b      	str	r3, [r7, #20]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00d      	beq.n	8007fcc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 f805 	bl	8007fd6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
	}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3720      	adds	r7, #32
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
 8007fe2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	617b      	str	r3, [r7, #20]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01e      	beq.n	8008044 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008006:	f000 facb 	bl	80085a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	6a3a      	ldr	r2, [r7, #32]
 8008020:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	3304      	adds	r3, #4
 8008026:	4618      	mov	r0, r3
 8008028:	f7fd ffce 	bl	8005fc8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d008      	beq.n	8008044 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008038:	f043 0304 	orr.w	r3, r3, #4
 800803c:	b2da      	uxtb	r2, r3
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008044:	bf00      	nop
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08a      	sub	sp, #40	; 0x28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800805a:	2300      	movs	r3, #0
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	623b      	str	r3, [r7, #32]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800807a:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <xTimerGenericCommand+0x98>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d02a      	beq.n	80080d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b05      	cmp	r3, #5
 8008092:	dc18      	bgt.n	80080c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008094:	f7ff fdee 	bl	8007c74 <xTaskGetSchedulerState>
 8008098:	4603      	mov	r3, r0
 800809a:	2b02      	cmp	r3, #2
 800809c:	d109      	bne.n	80080b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800809e:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <xTimerGenericCommand+0x98>)
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	f107 0114 	add.w	r1, r7, #20
 80080a6:	2300      	movs	r3, #0
 80080a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080aa:	f7fe fbf3 	bl	8006894 <xQueueGenericSend>
 80080ae:	6278      	str	r0, [r7, #36]	; 0x24
 80080b0:	e012      	b.n	80080d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080b2:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <xTimerGenericCommand+0x98>)
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	f107 0114 	add.w	r1, r7, #20
 80080ba:	2300      	movs	r3, #0
 80080bc:	2200      	movs	r2, #0
 80080be:	f7fe fbe9 	bl	8006894 <xQueueGenericSend>
 80080c2:	6278      	str	r0, [r7, #36]	; 0x24
 80080c4:	e008      	b.n	80080d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <xTimerGenericCommand+0x98>)
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	f107 0114 	add.w	r1, r7, #20
 80080ce:	2300      	movs	r3, #0
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	f7fe fcdd 	bl	8006a90 <xQueueGenericSendFromISR>
 80080d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3728      	adds	r7, #40	; 0x28
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200049f0 	.word	0x200049f0

080080e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f2:	4b22      	ldr	r3, [pc, #136]	; (800817c <prvProcessExpiredTimer+0x94>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3304      	adds	r3, #4
 8008100:	4618      	mov	r0, r3
 8008102:	f7fd ffcb 	bl	800609c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d022      	beq.n	800815a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	699a      	ldr	r2, [r3, #24]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	18d1      	adds	r1, r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	6978      	ldr	r0, [r7, #20]
 8008122:	f000 f8d1 	bl	80082c8 <prvInsertTimerInActiveList>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01f      	beq.n	800816c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	2100      	movs	r1, #0
 8008136:	6978      	ldr	r0, [r7, #20]
 8008138:	f7ff ff88 	bl	800804c <xTimerGenericCommand>
 800813c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d113      	bne.n	800816c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	b2da      	uxtb	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	6978      	ldr	r0, [r7, #20]
 8008172:	4798      	blx	r3
}
 8008174:	bf00      	nop
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200049e8 	.word	0x200049e8

08008180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008188:	f107 0308 	add.w	r3, r7, #8
 800818c:	4618      	mov	r0, r3
 800818e:	f000 f857 	bl	8008240 <prvGetNextExpireTime>
 8008192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4619      	mov	r1, r3
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f803 	bl	80081a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800819e:	f000 f8d5 	bl	800834c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a2:	e7f1      	b.n	8008188 <prvTimerTask+0x8>

080081a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081ae:	f7ff f987 	bl	80074c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f866 	bl	8008288 <prvSampleTimeNow>
 80081bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d130      	bne.n	8008226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <prvProcessTimerOrBlockTask+0x3c>
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d806      	bhi.n	80081e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081d2:	f7ff f983 	bl	80074dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff ff85 	bl	80080e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081de:	e024      	b.n	800822a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <prvProcessTimerOrBlockTask+0x90>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <prvProcessTimerOrBlockTask+0x50>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <prvProcessTimerOrBlockTask+0x52>
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081f8:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <prvProcessTimerOrBlockTask+0x94>)
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	f7fe fef9 	bl	8006ffc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800820a:	f7ff f967 	bl	80074dc <xTaskResumeAll>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10a      	bne.n	800822a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008214:	4b09      	ldr	r3, [pc, #36]	; (800823c <prvProcessTimerOrBlockTask+0x98>)
 8008216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	f3bf 8f6f 	isb	sy
}
 8008224:	e001      	b.n	800822a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008226:	f7ff f959 	bl	80074dc <xTaskResumeAll>
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	200049ec 	.word	0x200049ec
 8008238:	200049f0 	.word	0x200049f0
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008248:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <prvGetNextExpireTime+0x44>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <prvGetNextExpireTime+0x16>
 8008252:	2201      	movs	r2, #1
 8008254:	e000      	b.n	8008258 <prvGetNextExpireTime+0x18>
 8008256:	2200      	movs	r2, #0
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008264:	4b07      	ldr	r3, [pc, #28]	; (8008284 <prvGetNextExpireTime+0x44>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	e001      	b.n	8008274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008274:	68fb      	ldr	r3, [r7, #12]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	200049e8 	.word	0x200049e8

08008288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008290:	f7ff f9c0 	bl	8007614 <xTaskGetTickCount>
 8008294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <prvSampleTimeNow+0x3c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	429a      	cmp	r2, r3
 800829e:	d205      	bcs.n	80082ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082a0:	f000 f91a 	bl	80084d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082b2:	4a04      	ldr	r2, [pc, #16]	; (80082c4 <prvSampleTimeNow+0x3c>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082b8:	68fb      	ldr	r3, [r7, #12]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200049f8 	.word	0x200049f8

080082c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d812      	bhi.n	8008314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d302      	bcc.n	8008302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082fc:	2301      	movs	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	e01b      	b.n	800833a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008302:	4b10      	ldr	r3, [pc, #64]	; (8008344 <prvInsertTimerInActiveList+0x7c>)
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f7fd fe8c 	bl	800602a <vListInsert>
 8008312:	e012      	b.n	800833a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d206      	bcs.n	800832a <prvInsertTimerInActiveList+0x62>
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d302      	bcc.n	800832a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e007      	b.n	800833a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800832a:	4b07      	ldr	r3, [pc, #28]	; (8008348 <prvInsertTimerInActiveList+0x80>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3304      	adds	r3, #4
 8008332:	4619      	mov	r1, r3
 8008334:	4610      	mov	r0, r2
 8008336:	f7fd fe78 	bl	800602a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800833a:	697b      	ldr	r3, [r7, #20]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	200049ec 	.word	0x200049ec
 8008348:	200049e8 	.word	0x200049e8

0800834c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08c      	sub	sp, #48	; 0x30
 8008350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008352:	e0ae      	b.n	80084b2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f2c0 80ab 	blt.w	80084b2 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	3304      	adds	r3, #4
 800836c:	4618      	mov	r0, r3
 800836e:	f7fd fe95 	bl	800609c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008372:	1d3b      	adds	r3, r7, #4
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff ff87 	bl	8008288 <prvSampleTimeNow>
 800837a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b09      	cmp	r3, #9
 8008380:	f200 8096 	bhi.w	80084b0 <prvProcessReceivedCommands+0x164>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <prvProcessReceivedCommands+0x40>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083b5 	.word	0x080083b5
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083b5 	.word	0x080083b5
 8008398:	08008429 	.word	0x08008429
 800839c:	0800843d 	.word	0x0800843d
 80083a0:	08008487 	.word	0x08008487
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083b5 	.word	0x080083b5
 80083ac:	08008429 	.word	0x08008429
 80083b0:	0800843d 	.word	0x0800843d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	18d1      	adds	r1, r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a3a      	ldr	r2, [r7, #32]
 80083d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083d4:	f7ff ff78 	bl	80082c8 <prvInsertTimerInActiveList>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d069      	beq.n	80084b2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d05e      	beq.n	80084b2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	441a      	add	r2, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	2100      	movs	r1, #0
 8008404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008406:	f7ff fe21 	bl	800804c <xTimerGenericCommand>
 800840a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d14f      	bne.n	80084b2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	61bb      	str	r3, [r7, #24]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800842e:	f023 0301 	bic.w	r3, r3, #1
 8008432:	b2da      	uxtb	r2, r3
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800843a:	e03a      	b.n	80084b2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008442:	f043 0301 	orr.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	617b      	str	r3, [r7, #20]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	18d1      	adds	r1, r2, r3
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	6a3a      	ldr	r2, [r7, #32]
 800847e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008480:	f7ff ff22 	bl	80082c8 <prvInsertTimerInActiveList>
					break;
 8008484:	e015      	b.n	80084b2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008496:	f7fd fc59 	bl	8005d4c <vPortFree>
 800849a:	e00a      	b.n	80084b2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084ae:	e000      	b.n	80084b2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80084b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <prvProcessReceivedCommands+0x188>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f107 0108 	add.w	r1, r7, #8
 80084ba:	2200      	movs	r2, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe fb83 	bl	8006bc8 <xQueueReceive>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f47f af45 	bne.w	8008354 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	3728      	adds	r7, #40	; 0x28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	200049f0 	.word	0x200049f0

080084d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084de:	e048      	b.n	8008572 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084e0:	4b2d      	ldr	r3, [pc, #180]	; (8008598 <prvSwitchTimerLists+0xc0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ea:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <prvSwitchTimerLists+0xc0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fd fdcf 	bl	800609c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d02e      	beq.n	8008572 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	429a      	cmp	r2, r3
 8008524:	d90e      	bls.n	8008544 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008532:	4b19      	ldr	r3, [pc, #100]	; (8008598 <prvSwitchTimerLists+0xc0>)
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7fd fd74 	bl	800602a <vListInsert>
 8008542:	e016      	b.n	8008572 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008544:	2300      	movs	r3, #0
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	2300      	movs	r3, #0
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	2100      	movs	r1, #0
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff fd7c 	bl	800804c <xTimerGenericCommand>
 8008554:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	603b      	str	r3, [r7, #0]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <prvSwitchTimerLists+0xc0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1b1      	bne.n	80084e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <prvSwitchTimerLists+0xc0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <prvSwitchTimerLists+0xc4>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a04      	ldr	r2, [pc, #16]	; (8008598 <prvSwitchTimerLists+0xc0>)
 8008588:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800858a:	4a04      	ldr	r2, [pc, #16]	; (800859c <prvSwitchTimerLists+0xc4>)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	6013      	str	r3, [r2, #0]
}
 8008590:	bf00      	nop
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	200049e8 	.word	0x200049e8
 800859c:	200049ec 	.word	0x200049ec

080085a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085a6:	f7fd fecd 	bl	8006344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085aa:	4b15      	ldr	r3, [pc, #84]	; (8008600 <prvCheckForValidListAndQueue+0x60>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d120      	bne.n	80085f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085b2:	4814      	ldr	r0, [pc, #80]	; (8008604 <prvCheckForValidListAndQueue+0x64>)
 80085b4:	f7fd fce8 	bl	8005f88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085b8:	4813      	ldr	r0, [pc, #76]	; (8008608 <prvCheckForValidListAndQueue+0x68>)
 80085ba:	f7fd fce5 	bl	8005f88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085be:	4b13      	ldr	r3, [pc, #76]	; (800860c <prvCheckForValidListAndQueue+0x6c>)
 80085c0:	4a10      	ldr	r2, [pc, #64]	; (8008604 <prvCheckForValidListAndQueue+0x64>)
 80085c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085c4:	4b12      	ldr	r3, [pc, #72]	; (8008610 <prvCheckForValidListAndQueue+0x70>)
 80085c6:	4a10      	ldr	r2, [pc, #64]	; (8008608 <prvCheckForValidListAndQueue+0x68>)
 80085c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085ca:	2300      	movs	r3, #0
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4b11      	ldr	r3, [pc, #68]	; (8008614 <prvCheckForValidListAndQueue+0x74>)
 80085d0:	4a11      	ldr	r2, [pc, #68]	; (8008618 <prvCheckForValidListAndQueue+0x78>)
 80085d2:	210c      	movs	r1, #12
 80085d4:	200a      	movs	r0, #10
 80085d6:	f7fe f83f 	bl	8006658 <xQueueGenericCreateStatic>
 80085da:	4603      	mov	r3, r0
 80085dc:	4a08      	ldr	r2, [pc, #32]	; (8008600 <prvCheckForValidListAndQueue+0x60>)
 80085de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <prvCheckForValidListAndQueue+0x60>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085e8:	4b05      	ldr	r3, [pc, #20]	; (8008600 <prvCheckForValidListAndQueue+0x60>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	490b      	ldr	r1, [pc, #44]	; (800861c <prvCheckForValidListAndQueue+0x7c>)
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fcda 	bl	8006fa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f4:	f7fd fed6 	bl	80063a4 <vPortExitCritical>
}
 80085f8:	bf00      	nop
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	200049f0 	.word	0x200049f0
 8008604:	200049c0 	.word	0x200049c0
 8008608:	200049d4 	.word	0x200049d4
 800860c:	200049e8 	.word	0x200049e8
 8008610:	200049ec 	.word	0x200049ec
 8008614:	20004a74 	.word	0x20004a74
 8008618:	200049fc 	.word	0x200049fc
 800861c:	080087f8 	.word	0x080087f8

08008620 <memset>:
 8008620:	4402      	add	r2, r0
 8008622:	4603      	mov	r3, r0
 8008624:	4293      	cmp	r3, r2
 8008626:	d100      	bne.n	800862a <memset+0xa>
 8008628:	4770      	bx	lr
 800862a:	f803 1b01 	strb.w	r1, [r3], #1
 800862e:	e7f9      	b.n	8008624 <memset+0x4>

08008630 <__libc_init_array>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	4d0d      	ldr	r5, [pc, #52]	; (8008668 <__libc_init_array+0x38>)
 8008634:	4c0d      	ldr	r4, [pc, #52]	; (800866c <__libc_init_array+0x3c>)
 8008636:	1b64      	subs	r4, r4, r5
 8008638:	10a4      	asrs	r4, r4, #2
 800863a:	2600      	movs	r6, #0
 800863c:	42a6      	cmp	r6, r4
 800863e:	d109      	bne.n	8008654 <__libc_init_array+0x24>
 8008640:	4d0b      	ldr	r5, [pc, #44]	; (8008670 <__libc_init_array+0x40>)
 8008642:	4c0c      	ldr	r4, [pc, #48]	; (8008674 <__libc_init_array+0x44>)
 8008644:	f000 f826 	bl	8008694 <_init>
 8008648:	1b64      	subs	r4, r4, r5
 800864a:	10a4      	asrs	r4, r4, #2
 800864c:	2600      	movs	r6, #0
 800864e:	42a6      	cmp	r6, r4
 8008650:	d105      	bne.n	800865e <__libc_init_array+0x2e>
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	f855 3b04 	ldr.w	r3, [r5], #4
 8008658:	4798      	blx	r3
 800865a:	3601      	adds	r6, #1
 800865c:	e7ee      	b.n	800863c <__libc_init_array+0xc>
 800865e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008662:	4798      	blx	r3
 8008664:	3601      	adds	r6, #1
 8008666:	e7f2      	b.n	800864e <__libc_init_array+0x1e>
 8008668:	08008820 	.word	0x08008820
 800866c:	08008820 	.word	0x08008820
 8008670:	08008820 	.word	0x08008820
 8008674:	08008824 	.word	0x08008824

08008678 <memcpy>:
 8008678:	440a      	add	r2, r1
 800867a:	4291      	cmp	r1, r2
 800867c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008680:	d100      	bne.n	8008684 <memcpy+0xc>
 8008682:	4770      	bx	lr
 8008684:	b510      	push	{r4, lr}
 8008686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800868a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800868e:	4291      	cmp	r1, r2
 8008690:	d1f9      	bne.n	8008686 <memcpy+0xe>
 8008692:	bd10      	pop	{r4, pc}

08008694 <_init>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr

080086a0 <_fini>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	bf00      	nop
 80086a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a6:	bc08      	pop	{r3}
 80086a8:	469e      	mov	lr, r3
 80086aa:	4770      	bx	lr
